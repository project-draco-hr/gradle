{
  final ModelType<T> type=ModelType.of(source);
  DefaultMethodModelRuleExtractionContext context=new DefaultMethodModelRuleExtractionContext(type,this);
  validateClass(source,context);
  Factory<T> factory=Modifier.isAbstract(source.getModifiers()) ? new AbstractRuleSourceFactory<T>(new RuleSourceSchema<T>(type,Collections.<ExtractedModelRule>emptyList(),null),proxyFactory) : new ConcreteRuleSourceFactory<T>(type);
  final Method[] methods=source.getDeclaredMethods();
  Arrays.sort(methods,Ordering.usingToString());
  ImmutableList.Builder<ExtractedModelRule> registrations=ImmutableList.builder();
  for (  Method method : methods) {
    MethodRuleDefinition<?,?> ruleDefinition=DefaultMethodRuleDefinition.create(source,method,factory);
    ExtractedModelRule registration=getMethodHandler(ruleDefinition,method,context);
    if (registration != null) {
      registrations.add(registration);
    }
  }
  if (context.hasProblems()) {
    throw new InvalidModelRuleDeclarationException(context.problems.format());
  }
  return new RuleSourceSchema<T>(type,registrations.build(),factory);
}
