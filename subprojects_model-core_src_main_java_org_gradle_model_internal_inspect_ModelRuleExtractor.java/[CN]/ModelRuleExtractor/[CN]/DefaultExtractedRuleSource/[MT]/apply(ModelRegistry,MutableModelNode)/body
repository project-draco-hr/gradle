{
  final ModelPath targetPath=calculateTarget(target);
  for (  final ExtractedRuleDetails details : rules) {
    details.rule.apply(new MethodModelRuleApplicationContext(){
      @Override public ModelRegistry getRegistry(){
        return modelRegistry;
      }
      @Override public ModelPath getScope(){
        return targetPath;
      }
      @Override public ModelAction contextualize(      final MethodRuleAction action){
        final List<ModelReference<?>> inputs=withImplicitInputs(action.getInputs());
        final ModelReference<?> mappedSubject=mapSubject(action.getSubject(),targetPath);
        mapInputs(inputs.subList(0,action.getInputs().size()),targetPath);
        final MethodRuleDefinition<?,?> methodRuleDefinition=details.method;
        final Factory<? extends T> factory=getFactory();
        return new ContextualizedModelAction<T>(methodRuleDefinition,mappedSubject,inputs,action,factory);
      }
    }
,target);
  }
}
