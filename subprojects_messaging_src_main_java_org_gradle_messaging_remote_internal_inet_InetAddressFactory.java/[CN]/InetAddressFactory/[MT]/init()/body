{
  if (localAddresses != null) {
    return;
  }
  Method loopbackMethod;
  try {
    loopbackMethod=NetworkInterface.class.getMethod("isLoopback");
  }
 catch (  NoSuchMethodException e) {
    loopbackMethod=null;
  }
  localAddresses=new ArrayList<InetAddress>();
  remoteAddresses=new ArrayList<InetAddress>();
  allAddresses=new HashSet<InetAddress>();
  Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
  while (interfaces.hasMoreElements()) {
    NetworkInterface networkInterface=interfaces.nextElement();
    LOGGER.debug("Adding IP addresses for network interface {}",networkInterface.getName());
    try {
      Boolean isLoopbackInterface=null;
      try {
        isLoopbackInterface=loopbackMethod == null ? null : (Boolean)loopbackMethod.invoke(networkInterface);
      }
 catch (      InvocationTargetException e) {
        if (!(e.getCause() instanceof SocketException)) {
          throw e.getCause();
        }
        isLoopbackInterface=null;
      }
      LOGGER.debug("Is this a loopback interface? {}",isLoopbackInterface);
      Enumeration<InetAddress> candidates=networkInterface.getInetAddresses();
      while (candidates.hasMoreElements()) {
        InetAddress candidate=candidates.nextElement();
        allAddresses.add(candidate);
        if (isLoopbackInterface == null) {
          if (candidate.isLoopbackAddress()) {
            LOGGER.debug("Adding loopback address {}",candidate);
            localAddresses.add(candidate);
          }
 else {
            LOGGER.debug("Adding non-loopback address {}",candidate);
            remoteAddresses.add(candidate);
          }
        }
 else         if (isLoopbackInterface) {
          if (candidate.isLoopbackAddress()) {
            LOGGER.debug("Adding loopback address {}",candidate);
            localAddresses.add(candidate);
          }
 else {
            LOGGER.debug("Ignoring non-loopback address on loopback interface {}",candidate);
          }
        }
 else {
          if (candidate.isLoopbackAddress()) {
            LOGGER.debug("Ignoring loopback address on non-loopback interface {}",candidate);
          }
 else {
            LOGGER.debug("Adding non-loopback address {}",candidate);
            remoteAddresses.add(candidate);
          }
        }
      }
    }
 catch (    Throwable e) {
      throw new RuntimeException(String.format("Could not determine the IP addresses for network interface %s",networkInterface.getName()),e);
    }
  }
}
