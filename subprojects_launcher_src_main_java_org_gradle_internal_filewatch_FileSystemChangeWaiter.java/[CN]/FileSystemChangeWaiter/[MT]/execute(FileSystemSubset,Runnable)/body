{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  FileWatcher watcher=fileWatcherFactory.watch(taskFileSystemInputs,new Action<Throwable>(){
    @Override public void execute(    Throwable throwable){
      error.set(throwable);
      latch.countDown();
    }
  }
,new FileWatcherListener(){
    @Override public void onChange(    FileWatcher watcher,    FileWatcherEvent event){
      watcher.stop();
      latch.countDown();
    }
  }
);
  try {
    notifier.run();
  }
 catch (  Exception e) {
    watcher.stop();
    throw UncheckedException.throwAsUncheckedException(e);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
  Throwable throwable=error.get();
  if (throwable != null) {
    throw UncheckedException.throwAsUncheckedException(throwable);
  }
  try {
    Thread.sleep(FIRING_DELAY_TIMEMILLIS);
  }
 catch (  InterruptedException e) {
  }
}
