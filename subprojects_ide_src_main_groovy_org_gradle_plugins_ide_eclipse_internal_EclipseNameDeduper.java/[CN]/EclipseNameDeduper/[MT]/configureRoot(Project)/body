{
  Set<Project> projects=Sets.filter(rootProject.getAllprojects(),new Predicate<Project>(){
    @Override public boolean apply(    Project project){
      return hasEclipsePlugin(project);
    }
  }
);
  ImmutableMap<EclipseProject,Project> eclipseProjects=Maps.uniqueIndex(projects,new Function<Project,EclipseProject>(){
    @Override public EclipseProject apply(    Project p){
      return getEclipseProject(p);
    }
  }
);
  HierarchicalElementDeduplicator<EclipseProject> deduplicator=new HierarchicalElementDeduplicator<EclipseProject>(new EclipseDeduplicationAdapter(eclipseProjects));
  Map<EclipseProject,String> deduplicated=deduplicator.deduplicate(eclipseProjects.keySet());
  for (  Map.Entry<EclipseProject,String> entry : deduplicated.entrySet()) {
    entry.getKey().setName(entry.getValue());
  }
}
