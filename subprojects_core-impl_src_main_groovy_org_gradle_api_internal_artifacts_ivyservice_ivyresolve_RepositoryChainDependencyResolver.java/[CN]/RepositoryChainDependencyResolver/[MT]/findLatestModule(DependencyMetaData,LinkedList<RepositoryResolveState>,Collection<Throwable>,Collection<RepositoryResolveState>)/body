{
  boolean isStaticVersion=!versionMatcher.isDynamic(dependency.getRequested().getVersion());
  RepositoryChainModuleResolution best=null;
  while (!queue.isEmpty()) {
    RepositoryResolveState request=queue.removeFirst();
    try {
      request.resolve(dependency);
    }
 catch (    Throwable t) {
      failures.add(t);
      continue;
    }
switch (request.resolveResult.getState()) {
case Missing:
      break;
case ProbablyMissing:
    if (request.canMakeFurtherAttempts()) {
      missing.add(request);
    }
  break;
case Unknown:
if (request.canMakeFurtherAttempts()) {
  queue.addFirst(request);
}
break;
case Resolved:
RepositoryChainModuleResolution moduleResolution=new RepositoryChainModuleResolution(request.repository,request.resolveResult.getMetaData(),request.resolveResult.getModuleSource());
if (isStaticVersion && !moduleResolution.isGeneratedModuleDescriptor()) {
return moduleResolution;
}
best=chooseBest(best,moduleResolution);
break;
default :
throw new IllegalStateException("Unexpected state for resolution: " + request.resolveResult.getState());
}
}
return best;
}
