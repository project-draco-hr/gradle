{
  assertEquals("4.4",new org.junit.runner.JUnitCore().getVersion());
  assertTrue(org.apache.tools.ant.Main.getAntVersion().contains("1.6.1"));
  assertEquals(System.getProperty("projectDir"),System.getProperty("user.dir"));
  assertSame(ClassLoader.getSystemClassLoader(),getClass().getClassLoader());
  assertSame(getClass().getClassLoader(),Thread.currentThread().getContextClassLoader());
  try {
    getClass().getClassLoader().loadClass("org.gradle.api.Project");
    fail();
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    getClass().getClassLoader().loadClass("org.slf4j.Logger");
    fail();
  }
 catch (  ClassNotFoundException e) {
  }
  assertEquals("value",System.getProperty("testSysProperty"));
  assertEquals("value",System.getenv("TEST_ENV_VAR"));
  System.out.println("This is test stdout");
  System.out.print("no EOL");
  System.out.println();
  System.err.println("This is test stderr");
  Logger.getLogger("test-logger").warning("this is a warning");
  final PrintStream out=System.out;
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      out.println("stdout from a shutdown hook.");
      Logger.getLogger("test-logger").info("info from a shutdown hook.");
    }
  }
);
  Thread thread=new Thread(){
    @Override public void run(){
      System.out.println("stdout from another thread");
      Logger.getLogger("test-logger").info("info from another thread.");
    }
  }
;
  thread.start();
  thread.join();
}
