{
  resolverContainerMock=context.mock(ResolverContainer.class);
  testIvyDescriptorResolver=new FileSystemResolver();
  testIvyDescriptorResolver.setName("ivy");
  testPomDescriptorResolver=new FileSystemResolver();
  testPomDescriptorResolver.setName("pom");
  final List<FileSystemResolver> expectedResolverList=WrapUtil.toList(testIvyDescriptorResolver,testPomDescriptorResolver);
  context.checking(new Expectations(){
{
      allowing(resolverContainerMock).getResolverList();
      will(returnValue(expectedResolverList));
      allowing(resolverContainerMock).isPomResolver(testIvyDescriptorResolver);
      will(returnValue(false));
      allowing(resolverContainerMock).isPomResolver(testPomDescriptorResolver);
      will(returnValue(true));
      allowing(resolverContainerMock).hasIvyResolvers();
      will(returnValue(true));
      allowing(resolverContainerMock).hasPomResolvers();
      will(returnValue(true));
    }
  }
);
}
