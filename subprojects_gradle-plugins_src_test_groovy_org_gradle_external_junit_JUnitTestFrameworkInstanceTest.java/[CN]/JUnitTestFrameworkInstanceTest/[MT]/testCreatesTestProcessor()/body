{
  setMocks();
  expectHandleEmptyIncludesExcludes();
  final Set<File> classpathSet=new TreeSet<File>();
  context.checking(new Expectations(){
{
      one(testMock).getClassPathRegistry();
      will(returnValue(context.mock(ClassPathRegistry.class)));
      one(testMock).getTestListenerBroadcaster();
      will(returnValue(listenerBroadcastMock));
      one(testMock).getTestClassesDir();
      will(returnValue(testClassesDir));
      one(testMock).getClasspath();
      will(returnValue(classpathMock));
      one(classpathMock).getFiles();
      will(returnValue(classpathSet));
      one(testMock).getTestResultsDir();
      will(returnValue(testResultsDir));
      one(testMock).getIncludes();
      will(returnValue(null));
      one(testMock).getExcludes();
      will(returnValue(null));
      one(projectMock).getAnt();
      will(returnValue(antBuilderMock));
    }
  }
);
  TestClassProcessor testClassProcessor=jUnitTestFrameworkInstance.getProcessorFactory().create();
  assertThat(testClassProcessor,instanceOf(AntJUnitExecute.class));
}
