{
  logger.debug("Executing Task: {}",path);
  if (!enabled) {
    logger.info("Skipping execution as task is disabled.");
    executed=true;
    return;
  }
  List trueSkips=new ArrayList();
  List<String> allSkipProperties=new ArrayList<String>(skipProperties);
  allSkipProperties.add(Task.AUTOSKIP_PROPERTY_PREFIX + name);
  for (  String skipProperty : allSkipProperties) {
    String propValue=System.getProperty(skipProperty);
    if (propValue != null && !(propValue.toUpperCase().equals("FALSE"))) {
      trueSkips.add(skipProperty);
    }
  }
  if (trueSkips.size() > 0) {
    logger.info("Skipping execution as following skip properties are true: " + trueSkips);
  }
 else {
    for (    TaskAction action : actions) {
      logger.debug("Executing Action:");
      try {
        doExecute(action);
      }
 catch (      StopExecutionException e) {
        logger.info("Execution stopped by some action with message: {}",e.getMessage());
        break;
      }
catch (      StopActionException e) {
        logger.debug("Action stopped by some action with message: {}",e.getMessage());
        continue;
      }
catch (      Throwable t) {
        throw new GradleScriptException(String.format("Execution failed for task %s.",getPath()),t,project.getBuildScriptSource());
      }
    }
  }
  executed=true;
}
