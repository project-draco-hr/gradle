{
  return new BiAction<MutableModelNode,BinarySpec>(){
    @Override public void execute(    MutableModelNode node,    BinarySpec spec){
      final ModelType<BinaryTasksCollection> itemType=ModelType.of(BinaryTasksCollection.class);
      ModelCreator itemCreator=ModelCreators.of(node.getPath().child("tasks"),new Action<MutableModelNode>(){
        @Override public void execute(        MutableModelNode modelNode){
          BinaryTasksCollection tasks=modelNode.getParent().getPrivateData(ModelType.of(BinarySpec.class)).getTasks();
          modelNode.setPrivateData(itemType,tasks);
        }
      }
).withProjection(new UnmanagedModelProjection<BinaryTasksCollection>(itemType)).descriptor(new StandardDescriptorFactory(node.getDescriptor()).transform("tasks")).build();
      node.addLink(itemCreator);
    }
  }
;
}
