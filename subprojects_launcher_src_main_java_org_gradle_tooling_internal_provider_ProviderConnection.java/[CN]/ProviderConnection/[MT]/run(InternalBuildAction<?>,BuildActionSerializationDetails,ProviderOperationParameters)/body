{
  final UUID classLoaderId=UUID.randomUUID();
  SerializedPayload serializedAction=payloadSerializer.serialize(clientAction,new SerializeMap(){
    Set<URL> classPath=new LinkedHashSet<URL>();
    public UUID visitClass(    Class<?> target){
      classpathInferer.getClassPathFor(target,classPath);
      return classLoaderId;
    }
    public Iterable<ClassLoaderDetails> getClassLoaders(){
      return Arrays.asList(new ClassLoaderDetails(classLoaderId,new MutableURLClassLoader.Spec(new ArrayList<URL>(classPath))));
    }
  }
);
  BuildAction<SerializedPayload> action=new ClientProvidedBuildAction(serializedAction);
  Parameters params=initParams(providerParameters);
  SerializedPayload result=run(action,providerParameters,params.properties);
  return payloadSerializer.deserialize(result,new DeserializeMap(){
    public ClassLoader getClassLoader(    ClassLoaderDetails classLoaderDetails){
      if (classLoaderDetails.uuid.equals(classLoaderId)) {
        return serializationDetails.getResultClassLoader();
      }
      return null;
    }
  }
);
}
