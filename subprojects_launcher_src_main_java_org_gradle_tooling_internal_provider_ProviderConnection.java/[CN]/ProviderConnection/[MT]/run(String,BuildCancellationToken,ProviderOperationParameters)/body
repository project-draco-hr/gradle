{
  List<String> tasks=providerParameters.getTasks();
  if (modelName.equals(ModelIdentifier.NULL_MODEL) && tasks == null) {
    throw new IllegalArgumentException("No model type or tasks specified.");
  }
  Parameters params=initParams(providerParameters);
  Class<?> type=new ModelMapping().getProtocolTypeFromModelName(modelName);
  if (type == InternalBuildEnvironment.class) {
    if (tasks != null) {
      throw new IllegalArgumentException("Cannot run tasks and fetch the build environment model.");
    }
    return new DefaultBuildEnvironment(params.gradleUserhome,GradleVersion.current().getVersion(),params.daemonParams.getEffectiveJavaHome(),params.daemonParams.getEffectiveJvmArgs(),params.daemonParams.getJvmArgs(),params.daemonParams.getAllJvmArgs(),params.daemonParams.getEffectiveSystemProperties(),params.daemonParams.getSystemProperties());
  }
  StartParameter startParameter=new ProviderStartParameterConverter().toStartParameter(providerParameters,params.properties);
  InternalBuildProgressListener buildProgressListener=providerParameters.getBuildProgressListener(null);
  boolean listenToTestProgress=buildProgressListener != null && buildProgressListener.getSubscribedOperations().contains(InternalBuildProgressListener.TEST_EXECUTION);
  boolean listenToTaskProgress=buildProgressListener != null && buildProgressListener.getSubscribedOperations().contains(InternalTaskProgressListener.TASK_EXECUTION);
  BuildEventConsumer buildEventConsumer=listenToTestProgress || listenToTaskProgress ? new BuildProgressListenerInvokingBuildEventConsumer(buildProgressListener) : new NoOpBuildEventConsumer();
  BuildAction action=new BuildModelAction(startParameter,modelName,tasks != null,listenToTestProgress,listenToTaskProgress);
  return run(action,cancellationToken,buildEventConsumer,providerParameters,params);
}
