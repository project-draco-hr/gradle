{
  if (event instanceof InternalTestProgressEvent) {
    final InternalTestProgressEvent testProgressEvent=(InternalTestProgressEvent)event;
    this.buildProgressListener.onEvent(new TestProgressEventVersion1(){
      @Override public String getTestStructure(){
        return testProgressEvent.getTestStructure();
      }
      @Override public String getTestOutcome(){
        return testProgressEvent.getTestOutcome();
      }
      @Override public long getEventTime(){
        return testProgressEvent.getEventTime();
      }
      @Override public TestDescriptorVersion1 getDescriptor(){
        return new TestDescriptorVersion1(){
          @Override public Object getId(){
            return testProgressEvent.getDescriptor().getId();
          }
          @Override public String getName(){
            return testProgressEvent.getDescriptor().getName();
          }
          @Override public String getClassName(){
            return testProgressEvent.getDescriptor().getClassName();
          }
          @Override public Object getParentId(){
            return testProgressEvent.getDescriptor().getParentId();
          }
        }
;
      }
      @Override public TestResultVersion1 getResult(){
        return new TestResultVersion1(){
          @Override public long getStartTime(){
            return testProgressEvent.getResult().getStartTime();
          }
          @Override public long getEndTime(){
            return testProgressEvent.getResult().getEndTime();
          }
          @Override public List<FailureVersion1> getFailures(){
            List<InternalFailure> resultFailures=testProgressEvent.getResult().getFailures();
            ArrayList<FailureVersion1> failures=new ArrayList<FailureVersion1>(resultFailures.size());
            for (            final InternalFailure resultFailure : resultFailures) {
              failures.add(toFailure(resultFailure));
            }
            return failures;
          }
        }
;
      }
    }
);
  }
}
