{
  ModelType<T> type=schema.getType();
  Class<? super T> rawClass=type.getRawClass();
  ModelType<? super T> rawCollectionType=ModelType.of(rawClass);
  if (TYPES.contains(rawCollectionType) && (schema.getElementTypeSchema() instanceof ScalarValueSchema)) {
    Optional<NodeInitializerContext.PropertyContext> propertyContext=context.getPropertyContextOptional();
    boolean writable=!propertyContext.isPresent() || propertyContext.get().isWritable();
    if (schema.getType().getRawClass() == List.class) {
      return new ProjectionOnlyNodeInitializer(ScalarCollectionModelProjection.forList(schema.getElementType(),!writable),new ModelElementProjection(schema.getType()));
    }
 else {
      return new ProjectionOnlyNodeInitializer(ScalarCollectionModelProjection.forSet(schema.getElementType(),!writable),new ModelElementProjection(schema.getType()));
    }
  }
  return null;
}
