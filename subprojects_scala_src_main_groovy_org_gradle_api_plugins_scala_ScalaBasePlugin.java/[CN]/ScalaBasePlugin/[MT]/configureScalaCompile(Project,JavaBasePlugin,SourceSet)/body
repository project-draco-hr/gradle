{
  String taskName=sourceSet.getCompileTaskName("scala");
  final ScalaCompile scalaCompile=project.getTasks().create(taskName,ScalaCompile.class);
  scalaCompile.dependsOn(sourceSet.getCompileJavaTaskName());
  javaPlugin.configureForSourceSet(sourceSet,scalaCompile);
  Convention scalaConvention=(Convention)InvokerHelper.getProperty(sourceSet,"convention");
  ScalaSourceSet scalaSourceSet=scalaConvention.findPlugin(ScalaSourceSet.class);
  scalaCompile.setDescription("Compiles the " + scalaSourceSet.getScala() + ".");
  scalaCompile.setSource(scalaSourceSet.getScala());
  project.getTasks().getByName(sourceSet.getClassesTaskName()).dependsOn(taskName);
  project.getGradle().projectsEvaluated(new Closure<Void>(project){
    @SuppressWarnings("unused") public void doCall(){
      IncrementalCompileOptions incrementalOptions=scalaCompile.getScalaCompileOptions().getIncrementalOptions();
      if (incrementalOptions.getAnalysisFile() == null) {
        String analysisFilePath=project.getBuildDir().getPath() + "/tmp/scala/compilerAnalysis/" + scalaCompile.getName()+ ".analysis";
        incrementalOptions.setAnalysisFile(new File(analysisFilePath));
      }
      if (incrementalOptions.getPublishedCode() == null) {
        Jar jarTask=(Jar)project.getTasks().findByName(sourceSet.getJarTaskName());
        incrementalOptions.setPublishedCode(jarTask == null ? null : jarTask.getArchivePath());
      }
    }
  }
);
}
