{
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put("source.filename",source.getFileName());
  properties.put("source.hash",HashUtil.createCompactMD5(source.getResource().getText()));
  String cacheName=String.format("scripts/%s/%s/%s",source.getClassName(),scriptBaseClass.getSimpleName(),transformer.getId());
  PersistentCache cache=cacheRepository.cache(cacheName).withProperties(properties).withValidator(validator).withDisplayName(String.format("%s class cache for %s",transformer.getId(),source.getDisplayName())).withInitializer(new ProgressReportingInitializer(progressLoggerFactory,new CacheInitializer(source,classLoader,transformer,verifier,scriptBaseClass))).open();
  caches.add(cache);
  final File classesDir=classesDir(cache);
  return new ClassCachingCompiledScript<T>(new CompiledScript<T>(){
    public Class<? extends T> loadClass(){
      return scriptCompilationHandler.loadFromDir(source,classLoader,classesDir,scriptBaseClass);
    }
  }
);
}
