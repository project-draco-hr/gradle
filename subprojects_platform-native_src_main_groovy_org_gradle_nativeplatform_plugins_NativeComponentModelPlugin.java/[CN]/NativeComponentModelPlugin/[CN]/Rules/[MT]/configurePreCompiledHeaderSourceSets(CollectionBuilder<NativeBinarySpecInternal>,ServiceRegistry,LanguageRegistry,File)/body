{
  binaries.all(new Action<NativeBinarySpecInternal>(){
    @Override public void execute(    final NativeBinarySpecInternal nativeBinarySpec){
      nativeBinarySpec.getSource().withType(DependentSourceSet.class,new Action<DependentSourceSet>(){
        @Override public void execute(        final DependentSourceSet dependentSourceSet){
          if (CollectionUtils.isNotEmpty(dependentSourceSet.getPreCompiledHeaders())) {
            final DependentSourceSet pchSourceSet=(DependentSourceSet)createPreCompiledHeaderSourceSet(dependentSourceSet,serviceRegistry,languageRegistry);
            String prefixHeaderDirName=String.format("tmp/%s/%s/prefixHeaders",nativeBinarySpec.getName(),dependentSourceSet.getName());
            File prefixHeaderDir=new File(buildDir,prefixHeaderDirName);
            final File prefixHeaderFile=new File(prefixHeaderDir,"prefix-headers.h");
            nativeBinarySpec.getTasks().create(String.format("generate%s%sPrefixHeaderFile",StringUtils.capitalize(nativeBinarySpec.getName()),StringUtils.capitalize(dependentSourceSet.getName())),PrefixHeaderFileGenerateTask.class,new Action<PrefixHeaderFileGenerateTask>(){
              @Override public void execute(              PrefixHeaderFileGenerateTask prefixHeaderFileGenerateTask){
                prefixHeaderFileGenerateTask.setHeaders(dependentSourceSet.getPreCompiledHeaders());
                prefixHeaderFileGenerateTask.setPrefixHeaderFile(prefixHeaderFile);
                pchSourceSet.builtBy(prefixHeaderFileGenerateTask);
              }
            }
);
            pchSourceSet.getSource().srcDir(prefixHeaderDir);
            ((PreCompiledHeaderExportingSourceSetInternal)pchSourceSet).setConsumingSourceSet(dependentSourceSet);
            nativeBinarySpec.getPrefixHeaderFileMappings().put(dependentSourceSet,prefixHeaderFile);
            nativeBinarySpec.source(pchSourceSet);
          }
        }
      }
);
    }
  }
);
}
