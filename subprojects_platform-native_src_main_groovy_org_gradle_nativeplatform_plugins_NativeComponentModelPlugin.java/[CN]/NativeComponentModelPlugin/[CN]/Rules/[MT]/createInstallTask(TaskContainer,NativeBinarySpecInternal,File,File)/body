{
  return tasks.create(binary.getNamingScheme().getTaskName("install"),InstallExecutable.class,new Action<InstallExecutable>(){
    @Override public void execute(    InstallExecutable installTask){
      installTask.setDescription("Installs a development image of $executable");
      installTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
      installTask.setToolChain(binary.getToolChain());
      File defaultDestination=new File(buildDirectory,"install/" + binary.getNamingScheme().getOutputDirectoryBase());
      installTask.setDestinationDir(defaultDestination);
      installTask.setExecutable(executableFile);
      installTask.lib(new Callable<List<FileCollection>>(){
        @Override public List<FileCollection> call() throws Exception {
          List<FileCollection> runtimeFiles=Lists.newArrayList();
          for (          NativeDependencySet nativeDependencySet : binary.getLibs()) {
            runtimeFiles.add(nativeDependencySet.getRuntimeFiles());
          }
          return runtimeFiles;
        }
      }
);
      installTask.dependsOn(binary);
    }
  }
);
}
