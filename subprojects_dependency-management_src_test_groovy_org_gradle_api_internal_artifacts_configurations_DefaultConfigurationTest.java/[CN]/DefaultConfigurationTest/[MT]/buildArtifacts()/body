{
  final Task otherConfTaskMock=context.mock(Task.class,"otherConfTask");
  final Task artifactTaskMock=context.mock(Task.class,"artifactTask");
  final ConfigurationInternal otherConfiguration=context.mock(ConfigurationInternal.class);
  final TaskDependency otherArtifactTaskDependencyMock=context.mock(TaskDependency.class,"otherConfTaskDep");
  final PublishArtifact otherArtifact=context.mock(PublishArtifact.class,"otherArtifact");
  final PublishArtifactSet inheritedArtifacts=new DefaultPublishArtifactSet("artifacts",toDomainObjectSet(PublishArtifact.class,otherArtifact));
  DefaultPublishArtifact artifact=createPublishArtifact("name1","ext1","type1","classifier1");
  artifact.builtBy(artifactTaskMock);
  configuration.getArtifacts().add(artifact);
  context.checking(new Expectations(){
{
      allowing(otherConfiguration).getHierarchy();
      will(returnValue(toSet()));
      allowing(otherConfiguration).getAllArtifacts();
      will(returnValue(inheritedArtifacts));
      allowing(otherConfiguration).getAllDependencies();
      allowing(otherConfiguration).addMutationValidator(with(any(MutationValidator.class)));
      allowing(otherArtifact).getBuildDependencies();
      will(returnValue(otherArtifactTaskDependencyMock));
      allowing(otherArtifactTaskDependencyMock).getDependencies(with(any(Task.class)));
      will(returnValue(toSet(otherConfTaskMock)));
    }
  }
);
  configuration.setExtendsFrom(toSet((Configuration)otherConfiguration));
  assertThat((Set<Task>)configuration.getAllArtifacts().getBuildDependencies().getDependencies(context.mock(Task.class,"caller")),equalTo(toSet(artifactTaskMock,otherConfTaskMock)));
}
