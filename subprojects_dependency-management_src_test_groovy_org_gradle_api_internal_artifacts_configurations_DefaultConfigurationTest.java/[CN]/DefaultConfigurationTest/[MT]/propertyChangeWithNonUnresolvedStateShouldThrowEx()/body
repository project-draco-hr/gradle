{
  makeResolveReturnFileSet(new HashSet<File>());
  configuration.resolve();
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.setTransitive(true);
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.setExcludeRules(new HashSet<ExcludeRule>());
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.setExtendsFrom(new HashSet<Configuration>());
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.setVisible(true);
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.getDependencies().add(context.mock(Dependency.class));
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.getDependencies().add(context.mock(Dependency.class));
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.exclude(new HashMap<String,String>());
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.extendsFrom(context.mock(Configuration.class));
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.getArtifacts().add(context.mock(PublishArtifact.class));
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.getArtifacts().remove(context.mock(PublishArtifact.class,"removeArtifact"));
    }
  }
);
  assertInvalidUserDataException(new Executer(){
    public void execute(){
      configuration.getArtifacts().add(context.mock(PublishArtifact.class,"removeArtifact"));
    }
  }
);
}
