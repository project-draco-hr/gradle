{
  final Task target=context.mock(Task.class,"target");
  final Task otherConfTaskMock=context.mock(Task.class,"otherConfTask");
  final TaskDependency dependencyTaskDependencyStub=context.mock(TaskDependency.class,"otherConfTaskDep");
  final ConfigurationInternal otherConfiguration=context.mock(ConfigurationInternal.class,"otherConf");
  final FileCollectionDependency fileCollectionDependencyStub=context.mock(FileCollectionDependency.class);
  final DependencySet inherited=new DefaultDependencySet("dependencies",toDomainObjectSet(Dependency.class,fileCollectionDependencyStub));
  context.checking(new Expectations(){
{
      allowing(otherConfiguration).getHierarchy();
      will(returnValue(toSet()));
      allowing(otherConfiguration).getAllArtifacts();
      allowing(otherConfiguration).getAllDependencies();
      will(returnValue(inherited));
      allowing(otherConfiguration).includedInResolveResult();
      allowing(fileCollectionDependencyStub).getBuildDependencies();
      will(returnValue(dependencyTaskDependencyStub));
      allowing(dependencyTaskDependencyStub).getDependencies(target);
      will(returnValue(toSet(otherConfTaskMock)));
    }
  }
);
  configuration.extendsFrom(otherConfiguration);
  resolveSuccessfullyAsResolvedConfiguration();
  assertThat(configuration.getBuildDependencies().getDependencies(target),equalTo((Set)toSet(otherConfTaskMock)));
}
