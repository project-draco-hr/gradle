{
  logger.info("Compiling {} using {}.",source.getDisplayName(),transformer != null ? transformer.getClass().getSimpleName() : "no transformer");
  GroovyClassLoader groovyClassLoader=new GroovyClassLoader(classLoader,configuration,false){
    @Override protected CompilationUnit createCompilationUnit(    CompilerConfiguration compilerConfiguration,    CodeSource codeSource){
      CompilationUnit compilationUnit=new CompilationUnit(compilerConfiguration,codeSource,this){
        @Override protected ClassVisitor createClassVisitor(){
          return new ClassWriter(true){
            @Override public void visitSource(            String sourcePath,            String debugInfo){
              super.visitSource(source.getFileName(),debugInfo);
            }
          }
;
        }
      }
;
      if (transformer != null) {
        transformer.register(compilationUnit);
      }
      return compilationUnit;
    }
  }
;
  String scriptText=source.getText();
  String scriptName=source.getClassName();
  Class scriptClass;
  try {
    scriptClass=groovyClassLoader.parseClass(scriptText == null ? "" : scriptText,scriptName);
  }
 catch (  MultipleCompilationErrorsException e) {
    SyntaxException syntaxError=e.getErrorCollector().getSyntaxError(0);
    Integer lineNumber=syntaxError == null ? null : syntaxError.getLine();
    throw new ScriptCompilationException(String.format("Could not compile %s.",source.getDisplayName()),e,source,lineNumber);
  }
catch (  CompilationFailedException e) {
    throw new GradleException(String.format("Could not compile %s.",source.getDisplayName()),e);
  }
  if (!hasScriptStatements(scriptName,scriptClass)) {
    String emptySource=String.format("class %s extends %s { public Object run() { return null } }",source.getClassName(),configuration.getScriptBaseClass().replaceAll("\\$","."));
    scriptClass=groovyClassLoader.parseClass(emptySource,scriptName);
  }
  return scriptClass;
}
