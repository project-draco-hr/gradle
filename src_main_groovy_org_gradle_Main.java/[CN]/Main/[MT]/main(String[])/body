{
  BuildResultLogger resultLogger=new BuildResultLogger(logger);
  String gradleHome=System.getProperty(GRADLE_HOME_PROPERTY_KEY);
  String embeddedBuildScript=null;
  StartParameter startParameter=new StartParameter();
  OptionParser parser=new OptionParser(){
{
      acceptsAll(WrapUtil.toList(NO_JVM_TERMINATION),"Don't trigger a System.exit(0) for normal termination. Used for Gradle's internal testing.");
      acceptsAll(WrapUtil.toList(NO_DEFAULT_IMPORTS,"no-imports"),"Disable usage of default imports for build script files.");
      acceptsAll(WrapUtil.toList(NO_SEARCH_UPWARDS,"no-search-upward"),"Don't search in parent folders for a settings.gradle file.");
      acceptsAll(WrapUtil.toList(CACHE_OFF,"cache-off"),"No caching of compiled build scripts.");
      acceptsAll(WrapUtil.toList(REBUILD_CACHE,"rebuild-cache"),"Rebuild the cache of compiled build scripts.");
      acceptsAll(WrapUtil.toList(VERSION,"version"),"Print version info.");
      acceptsAll(WrapUtil.toList(DEBUG,"debug"),"Log in debug mode (includes normal stacktrace).");
      acceptsAll(WrapUtil.toList(QUIET,"quiet"),"Log errors only.");
      acceptsAll(WrapUtil.toList(IVY_DEBUG,"ivy-debug"),"Set Ivy log level to debug (very verbose).");
      acceptsAll(WrapUtil.toList(IVY_QUIET,"ivy-quiet"),"Set Ivy log level to quiet.");
      acceptsAll(WrapUtil.toList(STACKTRACE,"stacktrace"),"Print out the stacktrace also for user exceptions (e.g. compile error).");
      acceptsAll(WrapUtil.toList(FULL_STACKTRACE,"full-stacktrace"),"Print out the full (very verbose) stacktrace for any exceptions.");
      acceptsAll(WrapUtil.toList(TASKS,"tasks"),"Show list of all available tasks and their dependencies.");
      acceptsAll(WrapUtil.toList(PROJECT_DIR,"project-dir"),"Specifies the start dir for Gradle. Defaults to current dir.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(GRADLE_USER_HOME,"gradle-user-home"),"Specifies the gradle user home dir.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(PLUGIN_PROPERTIES_FILE,"plugin-properties-file"),"Specifies the plugin.properties file.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(SETTINGS_FILE,"settingsfile"),"Specifies the settings file name. Defaults to settings.gradle.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(BUILD_FILE,"buildfile"),"Specifies the build file name (also for subprojects). Defaults to build.gradle.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(SYSTEM_PROP,"systemprop"),"Set system property of the JVM (e.g. -Dmyprop=myvalue).").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(PROJECT_PROP,"projectprop"),"Set project property for the build script (e.g. -Pmyprop=myvalue).").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(EMBEDDED_SCRIPT,"embedded"),"Specify an embedded build script.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(BOOTSTRAP_DEBUG_INFO,"bootstrap-debug"),"Specify a text to be logged at the beginning (e.g. used by Gradle's bootstrap class.").withRequiredArg().ofType(String.class);
      acceptsAll(WrapUtil.toList(HELP,"?"),"Shows this help message");
    }
  }
;
  OptionSet options;
  try {
    options=parser.parse(args);
  }
 catch (  OptionException e) {
    parser.printHelpOn(System.err);
    System.err.println("====");
    return;
  }
  if (options.has(HELP)) {
    parser.printHelpOn(System.out);
    exitWithSuccess(options);
    return;
  }
  configureLogger(options);
  if (options.hasArgument(BOOTSTRAP_DEBUG_INFO)) {
    logger.debug(options.argumentOf(BOOTSTRAP_DEBUG_INFO));
  }
  if (options.has(VERSION)) {
    System.out.println(new GradleVersion().prettyPrint());
    exitWithSuccess(options);
    return;
  }
  if (!GUtil.isTrue(gradleHome)) {
    logger.error("The gradle.home property is not set. Please set it and try again.");
    exitWithError(options,new InvalidUserDataException());
    return;
  }
  startParameter.setDefaultImportsFile(options.has(NO_DEFAULT_IMPORTS) ? null : new File(gradleHome + '/' + IMPORTS_FILE_NAME));
  if (options.has(SYSTEM_PROP)) {
    List<String> props=options.argumentsOf(SYSTEM_PROP);
    logger.info("Running with System props: " + props);
    for (    String keyValueExpression : props) {
      String[] elements=keyValueExpression.split("=");
      startParameter.getSystemPropertiesArgs().put(elements[0],elements.length == 1 ? "" : elements[1]);
    }
  }
  if (options.has(PROJECT_PROP)) {
    List<String> props=options.argumentsOf(PROJECT_PROP);
    logger.info("Running with Project props: " + props);
    for (    String keyValueExpression : props) {
      String[] elements=keyValueExpression.split("=");
      startParameter.getProjectProperties().put(elements[0],elements.length == 1 ? "" : elements[1]);
    }
  }
  startParameter.setSearchUpwards(!options.has(NO_SEARCH_UPWARDS));
  if (options.has(PROJECT_DIR)) {
    startParameter.setCurrentDir(new File(options.argumentOf(PROJECT_DIR)));
    if (!startParameter.getCurrentDir().isDirectory()) {
      logger.error("Error: Directory " + startParameter.getCurrentDir().getCanonicalFile() + " does not exist!");
      exitWithError(options,new InvalidUserDataException());
      return;
    }
  }
 else {
    startParameter.setCurrentDir(new File(System.getProperty("user.dir")));
  }
  startParameter.setGradleUserHomeDir(options.hasArgument(GRADLE_USER_HOME) ? new File(options.argumentOf(GRADLE_USER_HOME)) : new File(DEFAULT_GRADLE_USER_HOME));
  if (options.hasArgument(BUILD_FILE)) {
    startParameter.setBuildFileName(options.argumentOf(BUILD_FILE));
  }
 else   if (options.has(EMBEDDED_SCRIPT)) {
    startParameter.setBuildFileName(Project.EMBEDDED_SCRIPT_ID);
  }
  if (options.hasArgument(SETTINGS_FILE)) {
    startParameter.setSettingsFileName(options.argumentOf(SETTINGS_FILE));
  }
  startParameter.setPluginPropertiesFile(options.hasArgument(PLUGIN_PROPERTIES_FILE) ? new File(options.argumentOf(PLUGIN_PROPERTIES_FILE)) : new File(gradleHome + '/' + DEFAULT_PLUGIN_PROPERTIES));
  if (options.has(CACHE_OFF)) {
    if (options.has(REBUILD_CACHE)) {
      logger.error(String.format("Error: The %s option can't be used together with the %s option.",CACHE_OFF,REBUILD_CACHE));
      exitWithError(options,new InvalidUserDataException());
    }
    startParameter.setCacheUsage(CacheUsage.OFF);
  }
 else   if (options.has(REBUILD_CACHE)) {
    startParameter.setCacheUsage(CacheUsage.REBUILD);
  }
 else {
    startParameter.setCacheUsage(CacheUsage.ON);
  }
  if (options.has(EMBEDDED_SCRIPT)) {
    if (options.has(BUILD_FILE) || options.has(NO_SEARCH_UPWARDS)) {
      logger.error(String.format("Error: The %s option can't be used together with the %s or %s option.",EMBEDDED_SCRIPT,BUILD_FILE,NO_SEARCH_UPWARDS));
      exitWithError(options,new InvalidUserDataException());
      return;
    }
    embeddedBuildScript=options.argumentOf(EMBEDDED_SCRIPT);
  }
  logger.debug("gradle.home= " + gradleHome);
  logger.debug("Project dir: " + startParameter.getCurrentDir());
  logger.debug("Gradle user home: " + startParameter.getGradleUserHomeDir());
  logger.info("Buildfilename: " + startParameter.getBuildFileName());
  logger.debug("Plugin properties: " + startParameter.getPluginPropertiesFile());
  logger.debug("Default imports file: " + startParameter.getDefaultImportsFile());
  try {
    startParameter.setTaskNames(options.nonOptionArguments());
    Build.BuildFactory buildFactory=Build.newInstanceFactory(startParameter);
    Build build=buildFactory.newInstance(embeddedBuildScript,null);
    build.getSettingsProcessor().setBuildSourceBuilder(new BuildSourceBuilder(new EmbeddedBuildExecuter(buildFactory)));
    build.addBuildListener(new BuildExceptionReporter(logger,options));
    build.addBuildListener(resultLogger);
    if (options.has(TASKS)) {
      if (embeddedBuildScript != null) {
        System.out.print(build.taskListNonRecursivelyWithCurrentDirAsRoot(startParameter));
      }
 else {
        System.out.println(build.taskList(startParameter));
      }
      exitWithSuccess(options);
      return;
    }
    if (embeddedBuildScript != null) {
      build.runNonRecursivelyWithCurrentDirAsRoot(startParameter);
    }
 else {
      build.run(startParameter);
    }
  }
 catch (  Throwable e) {
    exitWithError(options,e);
  }
  exitWithSuccess(options);
}
