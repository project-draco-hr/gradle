{
  LOGGER.debug("Attempting to resolve component for {} using repositories {}",moduleComponentIdentifier,repositoryNames);
  List<Throwable> errors=new ArrayList<Throwable>();
  List<ComponentMetaDataResolveState> resolveStates=new ArrayList<ComponentMetaDataResolveState>();
  for (  ModuleComponentRepository repository : repositories) {
    resolveStates.add(new ComponentMetaDataResolveState(dependency,moduleComponentIdentifier,repository,versionedComponentChooser));
  }
  final RepositoryChainModuleResolution latestResolved=findBestMatch(resolveStates,errors);
  if (latestResolved != null) {
    LOGGER.debug("Using {} from {}",latestResolved.module.getId(),latestResolved.repository);
    for (    Throwable error : errors) {
      LOGGER.debug("Discarding resolve failure.",error);
    }
    result.resolved(metaDataFactory.transform(latestResolved));
    return;
  }
  if (!errors.isEmpty()) {
    result.failed(new ModuleVersionResolveException(moduleComponentIdentifier,errors));
  }
 else {
    for (    ComponentMetaDataResolveState resolveState : resolveStates) {
      resolveState.applyTo(result);
    }
    result.notFound(moduleComponentIdentifier);
  }
}
