{
  ModelSchema<T> modelSchema=getModelSchema(managedType,ruleDefinition);
  if (modelSchema.getKind().equals(ModelSchema.Kind.VALUE)) {
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),"a void returning model element creation rule cannot take a value type as the first parameter, which is the element being created. Return the value from the method.");
  }
  if (modelSchema.getKind() == ModelSchema.Kind.UNMANAGED) {
    String description=String.format("a void returning model element creation rule has to take an instance of a managed type as the first argument");
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),description);
  }
  List<ModelReference<?>> bindings=ruleDefinition.getReferences();
  List<ModelReference<?>> inputs=bindings.subList(1,bindings.size());
  ModelRuleDescriptor descriptor=ruleDefinition.getDescriptor();
  Transformer<Action<ModelNode>,Inputs> transformer;
  ModelProjection projection;
  if (managedType.getConcreteClass().equals(ManagedSet.class)) {
    transformer=new ManagedModelRuleInvokerInstanceBackedTransformer<T>(modelSchema,modelInstantiator,ruleDefinition.getRuleInvoker(),descriptor,inputs);
    projection=new UnmanagedModelProjection<T>(managedType,true,true);
  }
 else {
    transformer=new ManagedModelRuleInvokerGraphBackedTransformer<T>(modelSchema,schemaStore,modelInstantiator,descriptor,ruleDefinition.getRuleInvoker(),inputs);
    projection=new ManagedModelProjection<T>(managedType,schemaStore,proxyFactory);
  }
  return ModelCreators.of(ModelReference.of(modelPath,managedType),transformer).withProjection(projection).descriptor(descriptor).inputs(inputs).build();
}
