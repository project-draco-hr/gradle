{
  workQueue.dispatch(new Runnable(){
    public void run(){
      try {
        Message routingTarget=message;
        if (message instanceof ChannelMessage) {
          ChannelMessage channelMessage=(ChannelMessage)message;
          routingTarget=(Message)channelMessage.getPayload();
        }
        if (routingTarget instanceof RouteAvailableMessage) {
          RouteAvailableMessage routeAvailableMessage=(RouteAvailableMessage)routingTarget;
          LOGGER.debug("Received route available. Message: {}",routeAvailableMessage);
          Route route=new Route(routeAvailableMessage.getId(),Endpoint.this,message);
          routes.add(route);
          allRoutes.put(routeAvailableMessage.getId(),route);
        }
 else         if (routingTarget instanceof RouteUnavailableMessage) {
          RouteUnavailableMessage routeUnavailableMessage=(RouteUnavailableMessage)routingTarget;
          LOGGER.debug("Received route unavailable. Message: {}",routeUnavailableMessage);
          Route route=allRoutes.remove(routeUnavailableMessage.getId());
          routes.remove(route);
        }
        if (routingTarget instanceof RoutableMessage) {
          RoutableMessage routableMessage=(RoutableMessage)routingTarget;
          Object destination=routableMessage.getDestination();
          if (destination == null) {
            broadcast(message);
          }
 else {
            allRoutes.get(destination).destination.receive(message);
          }
        }
 else         if (routingTarget instanceof EndOfStreamEvent) {
          LOGGER.debug("Received end of stream");
          for (          Route route : routes) {
            LOGGER.debug("Removing route {}",route);
            Message unavailableMessage=route.getUnavailableMessage();
            broadcast(unavailableMessage);
            allRoutes.remove(route.id);
          }
          localConnections.remove(Endpoint.this);
          remoteConnections.remove(Endpoint.this);
          routes.clear();
        }
 else {
          throw new UnsupportedOperationException(String.format("Received message which cannot be routed: %s.",message));
        }
      }
 catch (      Throwable throwable) {
        failureHandler.dispatchFailed(message,throwable);
      }
    }
  }
);
}
