{
  OperatingSystem operatingSystem=get(OperatingSystem.class);
  if (USE_NATIVE_PLATFORM) {
    try {
      net.rubygrapefruit.platform.Process process=net.rubygrapefruit.platform.Native.get(Process.class);
      return new NativePlatformBackedProcessEnvironment(process);
    }
 catch (    NativeIntegrationUnavailableException ex) {
      if (operatingSystem.isWindows()) {
        LOGGER.warn("Native-platform process integration is not available. Continuing with fallback.");
      }
 else {
        LOGGER.debug("Native-platform process integration is not available. Continuing with fallback.");
      }
    }
catch (    NativeException ex) {
      if (operatingSystem.isWindows()) {
        LOGGER.warn("Unable to load from native-platform backed ProcessEnvironment. Continuing with fallback. Failure: {}",format(ex));
      }
 else {
        LOGGER.debug("Unable to load from native-platform backed ProcessEnvironment. Continuing with fallback. Failure: {}",format(ex));
      }
    }
  }
  try {
    if (operatingSystem.isUnix()) {
      return new LibCBackedProcessEnvironment(get(LibC.class));
    }
 else     if (operatingSystem.isWindows()) {
      return new WindowsProcessEnvironment();
    }
 else {
      return new UnsupportedEnvironment();
    }
  }
 catch (  LinkageError e) {
    LOGGER.debug("Unable to load native library. Continuing with fallback. Failure: {}",format(e));
    return new UnsupportedEnvironment();
  }
}
