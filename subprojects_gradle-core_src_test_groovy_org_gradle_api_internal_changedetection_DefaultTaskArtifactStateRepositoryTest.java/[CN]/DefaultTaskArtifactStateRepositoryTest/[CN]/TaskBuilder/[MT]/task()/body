{
  final TaskInternal task=context.mock(type,String.format("task%d",counter++));
  context.checking(new Expectations(){
{
      TaskInputs taskInputs=context.mock(TaskInputs.class,String.format("inputs%d",counter++));
      TaskOutputs taskOutputs=context.mock(TaskOutputs.class,String.format("outputs%d",counter++));
      FileCollection outputFileCollection=context.mock(FileCollection.class,String.format("taskOutputFiles%d",counter++));
      FileCollection inputFileCollection=context.mock(FileCollection.class,String.format("taskInputFiles%d",counter++));
      allowing(task).getProject();
      will(returnValue(project));
      allowing(task).getPath();
      will(returnValue(path));
      allowing(task).getInputs();
      will(returnValue(taskInputs));
      allowing(taskInputs).getInputFiles();
      will(returnValue(inputFileCollection));
      allowing(inputFileCollection).iterator();
      will(returnIterator(inputs));
      allowing(task).getOutputs();
      will(returnValue(taskOutputs));
      allowing(taskOutputs).getOutputFiles();
      will(returnValue(outputFileCollection));
      allowing(outputFileCollection).iterator();
      will(returnIterator(outputs));
    }
  }
);
  return task;
}
