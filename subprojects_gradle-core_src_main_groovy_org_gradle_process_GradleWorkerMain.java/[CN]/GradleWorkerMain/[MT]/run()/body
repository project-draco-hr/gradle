{
  LoggingConfigurer configurer=createLoggingConfigurer();
  configurer.configure(LogLevel.LIFECYCLE);
  FilteringClassLoader filteredSystem=new FilteringClassLoader(getClass().getClassLoader());
  filteredSystem.allowPackage("org.slf4j");
  ObservableUrlClassLoader sharedClassLoader=createSharedClassLoader();
  FilteringClassLoader filteredShared=new FilteringClassLoader(sharedClassLoader);
  ObservableUrlClassLoader implementationClassLoader=createImplementationClassLoader(filteredSystem,filteredShared);
  ObjectInputStream instr=new ClassLoaderObjectInputStream(System.in,implementationClassLoader);
  LogLevel logLevel=(LogLevel)instr.readObject();
  configurer.configure(logLevel);
  sharedClassLoader.addURLs((Collection<URL>)instr.readObject());
  Collection<String> sharedPackages=(Collection<String>)instr.readObject();
  for (  String sharedPackage : sharedPackages) {
    filteredShared.allowPackage(sharedPackage);
  }
  implementationClassLoader.addURLs((Iterable<URL>)instr.readObject());
  Object action=instr.readObject();
  URI serverAddress=(URI)instr.readObject();
  Class<? extends Runnable> workerClass=implementationClassLoader.loadClass(WorkerMain.class.getName()).asSubclass(Runnable.class);
  Constructor<? extends Runnable> constructor=workerClass.getConstructor(implementationClassLoader.loadClass(Action.class.getName()),URI.class);
  Runnable worker=constructor.newInstance(action,serverAddress);
  worker.run();
}
