{
  boolean templateCompiler=CollectionUtils.any(getCompilerClasspath(),new Spec<File>(){
    public boolean isSatisfiedBy(    File classpathFile){
      return classpathFile.getName().matches("templates-compiler_\\d\\.\\d+-(2\\.2\\.\\d).jar");
    }
  }
);
  String compilerClassName=templateCompiler ? "play.templates.ScalaTemplateCompiler" : "play.twirl.compiler.TwirlCompiler";
  if (!inputs.isIncremental()) {
    if (compiler == null) {
      compiler=new CleaningPlayToolCompiler<TwirlCompileSpec>(getCompiler(),getOutputs());
    }
    TwirlCompileSpec spec=generateSpec(getSource().getFiles(),compilerClassName);
    compiler.execute(spec);
  }
 else {
    final Set<File> sourcesToCompile=new HashSet<File>();
    inputs.outOfDate(new Action<InputFileDetails>(){
      public void execute(      InputFileDetails inputFileDetails){
        sourcesToCompile.add(inputFileDetails.getFile());
      }
    }
);
    final Set<File> staleOutputFiles=new HashSet<File>();
    inputs.removed(new Action<InputFileDetails>(){
      public void execute(      InputFileDetails inputFileDetails){
        staleOutputFiles.add(inputFileDetails.getFile());
      }
    }
);
    if (cleaner == null) {
      cleaner=new TwirlStaleOutputCleaner(getOutputDirectory());
    }
    cleaner.execute(staleOutputFiles);
    TwirlCompileSpec spec=generateSpec(sourcesToCompile,compilerClassName);
    getCompiler().execute(spec);
  }
}
