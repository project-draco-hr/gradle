{
  for (  Amount<Q> value : values) {
    if (value != null) {
      add(value);
    }
  }
  if (isEmpty()) {
    average=null;
    max=null;
    min=null;
    stddev=null;
    sdom=null;
    return;
  }
  Amount<Q> total=get(0);
  Amount<Q> min=get(0);
  Amount<Q> max=get(0);
  for (int i=1; i < size(); i++) {
    Amount<Q> amount=get(i);
    total=total.plus(amount);
    min=min.compareTo(amount) <= 0 ? min : amount;
    max=max.compareTo(amount) >= 0 ? max : amount;
  }
  average=total.div(size());
  this.min=min;
  this.max=max;
  BigDecimal sumSquares=BigDecimal.ZERO;
  Units<Q> baseUnits=average.getUnits().getBaseUnits();
  BigDecimal averageValue=average.toUnits(baseUnits).getValue();
  for (int i=0; i < size(); i++) {
    Amount<Q> amount=get(i);
    BigDecimal diff=amount.toUnits(baseUnits).getValue();
    diff=diff.subtract(averageValue);
    diff=diff.multiply(diff);
    sumSquares=sumSquares.add(diff);
  }
  BigDecimal result=BigDecimal.valueOf(Math.sqrt(sumSquares.divide(BigDecimal.valueOf(size()),BigDecimal.ROUND_HALF_UP).doubleValue())).setScale(2,BigDecimal.ROUND_HALF_UP);
  stddev=Amount.valueOf(result,baseUnits);
  sdom=stddev.div(BigDecimal.valueOf(Math.sqrt(size())));
}
