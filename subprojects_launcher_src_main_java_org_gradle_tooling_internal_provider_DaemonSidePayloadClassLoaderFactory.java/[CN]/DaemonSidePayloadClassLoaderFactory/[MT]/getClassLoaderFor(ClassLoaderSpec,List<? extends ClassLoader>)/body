{
  if (spec instanceof VisitableURLClassLoader.Spec) {
    VisitableURLClassLoader.Spec urlSpec=(VisitableURLClassLoader.Spec)spec;
    if (parents.size() != 1) {
      throw new IllegalStateException("Expected exactly one parent ClassLoader");
    }
    List<URL> cachedClassPath=new ArrayList<URL>(urlSpec.getClasspath().size());
    for (    URL url : urlSpec.getClasspath()) {
      if (url.getProtocol().equals("file")) {
        try {
          final File file=new File(url.toURI());
          if (file.isFile()) {
            File cached=cache.useCache("Locate Jar file",new Factory<File>(){
              public File create(){
                return jarCache.getCachedJar(file,Factories.constant(cache.getBaseDir()));
              }
            }
);
            cachedClassPath.add(cached.toURI().toURL());
            continue;
          }
        }
 catch (        MalformedURLException e) {
          throw UncheckedException.throwAsUncheckedException(e);
        }
catch (        URISyntaxException e) {
          throw UncheckedException.throwAsUncheckedException(e);
        }
      }
      cachedClassPath.add(url);
    }
    return new VisitableURLClassLoader(parents.get(0),cachedClassPath);
  }
  return delegate.getClassLoaderFor(spec,parents);
}
