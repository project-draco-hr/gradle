{
  ClassLoader cl=getClass().getClassLoader();
  try {
    Class<?> buildLinkClass=cl.loadClass("play.core.BuildLink");
    Class<?> buildDocHandlerClass=cl.loadClass("play.core.BuildDocHandler");
    ClassLoader docsClassLoader=cl;
    Class<?> docHandlerFactoryClass=docsClassLoader.loadClass("play.docs.BuildDocHandlerFactory");
    Method factoryMethod=docHandlerFactoryClass.getMethod("fromJar",JarFile.class,String.class);
    File docJarFile=null;
    for (    File file : spec.getClasspath()) {
      if (file.getName().startsWith("play-docs")) {
        docJarFile=file;
        break;
      }
    }
    JarFile docJar=new JarFile(docJarFile);
    Object buildDocHandler=factoryMethod.invoke(null,docJar,"play/docs/content");
    Function<Object[],Object> runMethod=ScalaUtil.scalaObjectFunction(cl,"play.core.server.NettyServer","mainDevHttpMode",new Class<?>[]{buildLinkClass,buildDocHandlerClass,int.class});
    Object buildLink=Proxy.newProxyInstance(cl,new java.lang.Class<?>[]{buildLinkClass},new InvocationHandler(){
      public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        if (method.getName().equals("projectPath")) {
          return spec.getProjectPath();
        }
 else         if (method.getName().equals("reload")) {
          DefaultClassPath projectClasspath=new DefaultClassPath(spec.getProjectClasspath());
          URLClassLoader classLoader=new URLClassLoader(projectClasspath.getAsURLs().toArray(new URL[]{}),Thread.currentThread().getContextClassLoader());
          return classLoader;
        }
 else         if (method.getName().equals("settings")) {
          return new HashMap<String,String>();
        }
        return null;
      }
    }
);
    Integer port=9000;
    Object server=runMethod.apply(new Object[]{buildLink,buildDocHandler,port});
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
