{
  LOGGER.debug("Using tooling provider from {}",distribution.getDisplayName());
  ClassLoader classLoader=createImplementationClassLoader(distribution,progressLoggerFactory);
  ServiceLocator serviceLocator=new ServiceLocator(classLoader);
  try {
    Factory<ConnectionVersion4> factory=serviceLocator.findFactory(ConnectionVersion4.class);
    if (factory == null) {
      return new NoToolingApiConnection(distribution);
    }
    ConnectionVersion4 connection=factory.create();
    ProtocolToModelAdapter adapter=new ProtocolToModelAdapter(new ConsumerTargetTypeProvider());
    ModelMapping modelMapping=new ModelMapping();
    AbstractConsumerConnection adaptedConnection;
    if (connection instanceof ModelBuilder && connection instanceof InternalBuildActionExecutor) {
      adaptedConnection=new ActionAwareConsumerConnection(connection,modelMapping,adapter);
    }
 else     if (connection instanceof ModelBuilder) {
      adaptedConnection=new ModelBuilderBackedConsumerConnection(connection,modelMapping,adapter);
    }
 else     if (connection instanceof BuildActionRunner) {
      adaptedConnection=new BuildActionRunnerBackedConsumerConnection(connection,modelMapping,adapter);
    }
 else     if (connection instanceof InternalConnection) {
      adaptedConnection=new InternalConnectionBackedConsumerConnection(connection,modelMapping,adapter);
    }
 else {
      adaptedConnection=new ConnectionVersion4BackedConsumerConnection(connection,modelMapping,adapter);
    }
    adaptedConnection.configure(connectionParameters);
    return adaptedConnection;
  }
 catch (  UnsupportedVersionException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new GradleConnectionException(String.format("Could not create an instance of Tooling API implementation using the specified %s.",distribution.getDisplayName()),t);
  }
}
