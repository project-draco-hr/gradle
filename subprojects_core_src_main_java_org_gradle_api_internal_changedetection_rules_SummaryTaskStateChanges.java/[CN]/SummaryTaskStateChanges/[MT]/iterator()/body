{
  return new AbstractIterator<TaskStateChange>(){
    Iterator<TaskStateChange> changes;
    int count;
    @Override protected TaskStateChange computeNext(){
      if (changes == null) {
        changes=firstDirtyIterator();
      }
      if (count < maxReportedChanges && changes != null && changes.hasNext()) {
        count++;
        return changes.next();
      }
      return endOfData();
    }
  }
;
}
