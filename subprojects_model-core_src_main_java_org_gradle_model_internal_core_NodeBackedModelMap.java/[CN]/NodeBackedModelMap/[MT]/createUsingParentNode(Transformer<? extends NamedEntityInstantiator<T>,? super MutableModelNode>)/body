{
  return new ChildNodeInitializerStrategy<T>(){
    @Override public <S extends T>NodeInitializer initializer(    final ModelType<S> type){
      return new NodeInitializer(){
        @Override public List<? extends ModelReference<?>> getInputs(){
          return Collections.emptyList();
        }
        @Override public void execute(        MutableModelNode modelNode,        List<ModelView<?>> inputs){
          NamedEntityInstantiator<T> instantiator=instantiatorTransform.transform(modelNode.getParent());
          S item=instantiator.create(modelNode.getPath().getName(),type.getConcreteClass());
          modelNode.setPrivateData(type,item);
        }
        @Override public List<? extends ModelProjection> getProjections(){
          return Collections.singletonList(UnmanagedModelProjection.of(type));
        }
      }
;
    }
  }
;
}
