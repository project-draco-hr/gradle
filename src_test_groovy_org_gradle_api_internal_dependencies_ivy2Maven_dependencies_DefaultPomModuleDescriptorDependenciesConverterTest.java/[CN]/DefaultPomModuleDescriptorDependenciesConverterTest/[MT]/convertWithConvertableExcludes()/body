{
  final DefaultExcludeRule testExcludeRule=HelperUtil.getTestExcludeRules();
  final DefaultMavenExclude mavenExclude=new DefaultMavenExclude("a","b");
  dependencyDescriptor1.addExcludeRule("compileConf",testExcludeRule);
  context.checking(new Expectations(){
{
      allowing(excludeRuleConverterMock).convert(testExcludeRule);
      will(returnValue(mavenExclude));
      allowing(moduleDescriptorMock).getDependencies();
      will(returnValue(WrapUtil.toArray(dependencyDescriptor1)));
    }
  }
);
  List<MavenDependency> actualMavenDependencies=dependenciesConverter.convert(moduleDescriptorMock,false,conf2ScopeMappingContainerMock);
  assertEquals(1,actualMavenDependencies.size());
  Assert.assertThat(actualMavenDependencies,Matchers.hasItem((MavenDependency)DefaultMavenDependency.newInstance("org1","name1","rev1",null,"compile")));
  assertEquals(actualMavenDependencies.get(0).getMavenExcludes(),WrapUtil.toList(mavenExclude));
  assertEquals(actualMavenDependencies.get(0).getScope(),"compile");
}
