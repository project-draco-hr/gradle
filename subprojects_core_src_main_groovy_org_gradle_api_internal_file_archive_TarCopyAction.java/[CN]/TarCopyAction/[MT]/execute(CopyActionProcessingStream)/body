{
  final TarOutputStream tarOutStr;
  try {
    OutputStream outStr=compressor.createArchiveOutputStream(tarFile);
    tarOutStr=new TarOutputStream(outStr);
    tarOutStr.setLongFileMode(TarOutputStream.LONGFILE_GNU);
  }
 catch (  Exception e) {
    throw new GradleException(String.format("Could not create TAR '%s'.",tarFile),e);
  }
  stream.process(new Action<FileCopyDetailsInternal>(){
    public void execute(    FileCopyDetailsInternal details){
      if (details.isDirectory()) {
        visitDir(details);
      }
 else {
        visitFile(details);
      }
    }
    private void visitFile(    FileCopyDetails fileDetails){
      try {
        TarEntry archiveEntry=new TarEntry(fileDetails.getRelativePath().getPathString());
        archiveEntry.setModTime(fileDetails.getLastModified());
        archiveEntry.setSize(fileDetails.getSize());
        archiveEntry.setMode(UnixStat.FILE_FLAG | fileDetails.getMode());
        tarOutStr.putNextEntry(archiveEntry);
        fileDetails.copyTo(tarOutStr);
        tarOutStr.closeEntry();
      }
 catch (      Exception e) {
        throw new GradleException(String.format("Could not add %s to TAR '%s'.",fileDetails,tarFile),e);
      }
    }
    private void visitDir(    FileCopyDetails dirDetails){
      try {
        TarEntry archiveEntry=new TarEntry(dirDetails.getRelativePath().getPathString() + '/');
        archiveEntry.setModTime(dirDetails.getLastModified());
        archiveEntry.setMode(UnixStat.DIR_FLAG | dirDetails.getMode());
        tarOutStr.putNextEntry(archiveEntry);
        tarOutStr.closeEntry();
      }
 catch (      Exception e) {
        throw new GradleException(String.format("Could not add %s to TAR '%s'.",dirDetails,tarFile),e);
      }
    }
  }
);
  try {
    tarOutStr.close();
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
  return new SimpleWorkResult(true);
}
