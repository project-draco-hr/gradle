{
  context.setImposteriser(ClassImposteriser.INSTANCE);
  HelperUtil.deleteTestDir();
  rootFinderMock=context.mock(RootFinder.class);
  settingsMock=context.mock(DefaultSettings.class);
  buildExecuterMock=context.mock(BuildExecuter.class);
  settingsProcessorMock=context.mock(SettingsProcessor.class);
  projectsLoaderMock=context.mock(ProjectsLoader.class);
  buildConfigurerMock=context.mock(BuildConfigurer.class);
  build=new Build(rootFinderMock,settingsProcessorMock,projectsLoaderMock,buildConfigurerMock,buildExecuterMock);
  testGradleProperties=WrapUtil.toMap(Project.SYSTEM_PROP_PREFIX + ".prop1","value1");
  testGradleProperties.put("prop2","value2");
  expectedTaskNames=WrapUtil.toList("a","b");
  expectedRecursive=false;
  expectedSearchUpwards=false;
  expectedClassLoader=new URLClassLoader(new URL[0]);
  expectedProjectProperties=WrapUtil.toMap("prop","value");
  expectedSystemPropertiesArgs=WrapUtil.toMap("systemProp","systemPropValue");
  expectedCurrentDir=new File("currentDir");
  expectedGradleUserHomeDir=new File(HelperUtil.TMP_DIR_FOR_TEST,"gradleUserHomeDir");
  expectedStartParams=new StartParameter();
  expectedStartParams.setTaskNames(expectedTaskNames);
  expectedStartParams.setCurrentDir(expectedCurrentDir);
  expectedStartParams.setRecursive(expectedRecursive);
  expectedStartParams.setSearchUpwards(expectedSearchUpwards);
  expectedStartParams.setGradleUserHomeDir(expectedGradleUserHomeDir);
  expectedStartParams.setSystemPropertiesArgs(expectedSystemPropertiesArgs);
  expectedStartParams.setProjectProperties(expectedProjectProperties);
  expectedRootProject=HelperUtil.createRootProject(new File("dir1"));
  expectedCurrentProject=HelperUtil.createRootProject(new File("dir2"));
  context.checking(new Expectations(){
{
      allowing(rootFinderMock).find(with(any(StartParameter.class)));
      allowing(rootFinderMock).getGradleProperties();
      will(returnValue(testGradleProperties));
      allowing(settingsMock).createClassLoader();
      will(returnValue(expectedClassLoader));
      allowing(projectsLoaderMock).getRootProject();
      will(returnValue(expectedRootProject));
      allowing(projectsLoaderMock).getCurrentProject();
      will(returnValue(expectedCurrentProject));
    }
  }
);
}
