{
  if (serializedException != null) {
    final ExceptionReplacingObjectInputStream ois=new ExceptionReplacingObjectInputStream(new ByteArrayInputStream(serializedException),classLoader){
      @Override protected Object resolveObject(      Object obj) throws IOException {
        if (obj instanceof CausePlaceholder) {
          return causeThrowable;
        }
        return super.resolveObject(obj);
      }
    }
;
    try {
      return (Throwable)ois.readObject();
    }
 catch (    Exception e) {
      LOGGER.info("Ignoring error de-serializing exception",e);
    }
  }
  Constructor<?> constructor=classLoader.loadClass(type).getConstructor(String.class);
  Throwable reconstructed=(Throwable)constructor.newInstance(message);
  reconstructed.initCause(causeThrowable);
  reconstructed.setStackTrace(stackTrace);
  return reconstructed;
}
