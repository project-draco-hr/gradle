{
  projectPluginsHandler.usePlugin(JavaPlugin.class,project);
  final WarPluginConvention pluginConvention=new WarPluginConvention(project);
  project.getConvention().getPlugins().put("war",pluginConvention);
  project.getTasks().withType(War.class).allTasks(new Action<War>(){
    public void execute(    War task){
      task.from(new Callable(){
        public Object call() throws Exception {
          return pluginConvention.getWebAppDir();
        }
      }
);
      task.dependsOn(new Callable(){
        public Object call() throws Exception {
          return project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getRuntimeClasspath();
        }
      }
);
      task.classpath(new Object[]{new Callable(){
        public Object call() throws Exception {
          Set<File> classpath=project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getRuntimeClasspath().getFiles();
          Set<File> provided=project.getConfigurations().getByName(PROVIDED_RUNTIME_CONFIGURATION_NAME).getFiles();
          classpath.removeAll(provided);
          return classpath;
        }
      }
});
    }
  }
);
  War war=project.getTasks().add(WAR_TASK_NAME,War.class);
  war.setDescription("Generates a war archive with all the compiled classes, the web-app content and the libraries.");
  Configuration archivesConfiguration=project.getConfigurations().getByName(Dependency.ARCHIVES_CONFIGURATION);
  disableJarTaskAndRemoveFromArchivesConfiguration(project,archivesConfiguration);
  archivesConfiguration.addArtifact(new ArchivePublishArtifact(war));
  configureConfigurations(project.getConfigurations());
}
