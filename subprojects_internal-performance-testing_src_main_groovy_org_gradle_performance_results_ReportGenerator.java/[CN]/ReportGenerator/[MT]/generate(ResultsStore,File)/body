{
  try {
    FileRenderer fileRenderer=new FileRenderer();
    TestPageGenerator testHtmlRenderer=new TestPageGenerator();
    TestDataGenerator testDataRenderer=new TestDataGenerator();
    List<NavigationItem> navigationItems=ImmutableList.of(new NavigationItem("Overview","index.html"),new NavigationItem("Graphs","graph-index.html"));
    fileRenderer.render(store,new IndexPageGenerator(navigationItems),new File(outputDirectory,"index.html"));
    fileRenderer.render(store,new GraphIndexPageGenerator(navigationItems),new File(outputDirectory,"graph-index.html"));
    File testsDir=new File(outputDirectory,"tests");
    for (    String testName : store.getTestNames()) {
      PerformanceTestHistory testResults=store.getTestResults(testName,100,90,ResultsStoreHelper.determineChannel());
      fileRenderer.render(testResults,testHtmlRenderer,new File(testsDir,testResults.getId() + ".html"));
      fileRenderer.render(testResults,testDataRenderer,new File(testsDir,testResults.getId() + ".json"));
    }
    copyResource("jquery.min-1.11.0.js",outputDirectory);
    copyResource("flot-0.8.1-min.js",outputDirectory);
    copyResource("flot.selection.min.js",outputDirectory);
    copyResource("style.css",outputDirectory);
    copyResource("report.js",outputDirectory);
    copyResource("performanceGraph.js",outputDirectory);
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not generate performance test report to '%s'.",outputDirectory),e);
  }
}
