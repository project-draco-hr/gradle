{
  String requestUrl=String.format(portalUrl + REQUEST_URL,GradleVersion.current().getVersion(),pluginRequest.getId(),pluginRequest.getVersion());
  final URI requestUri=toUri(requestUrl,"plugin request");
  HttpResponseResource response=null;
  try {
    response=resourceAccessor.getRawResource(requestUri);
    final int statusCode=response.getStatusCode();
    if (!response.getContentType().equalsIgnoreCase("application/json")) {
      final String message=String.format("Response from '%s' was not a valid plugin resolution service response (returned content type '%s', not 'application/json')",requestUri,response.getContentType());
      if (LOGGER.isInfoEnabled()) {
        response.withContent(new Action<InputStream>(){
          public void execute(          InputStream inputStream){
            try {
              String content=IOUtils.toString(inputStream,"utf8");
              LOGGER.info("{}, content:\n{}",message,content);
            }
 catch (            IOException e) {
              LOGGER.info(String.format("exception raised while trying to log response from %s",requestUri),e);
            }
          }
        }
);
      }
      throw new GradleException(message);
    }
    return response.withContent(new Transformer<Response<PluginUseMetaData>,InputStream>(){
      public Response<PluginUseMetaData> transform(      InputStream inputStream){
        Reader reader;
        try {
          reader=new InputStreamReader(inputStream,"utf-8");
        }
 catch (        UnsupportedEncodingException e) {
          throw new AssertionError(e);
        }
        try {
          if (statusCode == 200) {
            PluginUseMetaData metadata=new Gson().fromJson(reader,PluginUseMetaData.class);
            metadata.verify();
            return new SuccessResponse<PluginUseMetaData>(metadata,statusCode);
          }
 else {
            ErrorResponse errorResponse=new Gson().fromJson(reader,ErrorResponse.class);
            return new ErrorResponseResponse<PluginUseMetaData>(errorResponse,statusCode);
          }
        }
 catch (        JsonSyntaxException e) {
          throw new GradleException("Failed to parse plugin resolution service JSON response.",e);
        }
catch (        JsonIOException e) {
          throw new GradleException("Failed to read plugin resolution service JSON response.",e);
        }
      }
    }
);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
 finally {
    try {
      if (response != null) {
        response.close();
      }
    }
 catch (    IOException e) {
      LOGGER.warn("Error closing HTTP resource",e);
    }
  }
}
