{
  BuildOperationLogger operationLogger=getOperationLoggerFactory().newOperationLogger(getName(),getTemporaryDir());
  NativeCompileSpec spec=createCompileSpec();
  spec.setTargetPlatform(targetPlatform);
  spec.setTempDir(getTemporaryDir());
  spec.setObjectFileDir(getObjectFileDir());
  spec.include(getIncludes());
  spec.source(getSource());
  spec.setMacros(getMacros());
  spec.args(getCompilerArgs());
  spec.setPositionIndependentCode(isPositionIndependentCode());
  spec.setIncrementalCompile(inputs.isIncremental());
  spec.setOperationLogger(operationLogger);
  spec.setIsPreCompiledHeader(isPreCompiledHeader());
  spec.setPreCompiledHeaderFile(getPreCompiledHeaderFile());
  spec.setPreCompiledHeaderObjectFile(preCompiledHeaderInclude.isEmpty() ? null : preCompiledHeaderInclude.getSingleFile());
  PlatformToolProvider platformToolProvider=toolChain.select(targetPlatform);
  operationLogger.start();
  try {
    WorkResult result=CompilerUtil.castCompiler(getIncrementalCompilerBuilder().createIncrementalCompiler(this,platformToolProvider.newCompiler(spec.getClass()),toolChain)).execute(spec);
    setDidWork(result.getDidWork());
  }
  finally {
    operationLogger.done();
  }
}
