{
  final Iterator<VersionLister> versionListerIterator=versionListers.iterator();
  while (versionListerIterator.hasNext()) {
    VersionLister lister=versionListerIterator.next();
    try {
      final VersionList versionList=lister.getVersionList(moduleRevisionId,pattern,artifact);
      if (!versionListerIterator.hasNext() || !versionList.isEmpty()) {
        return versionList;
      }
    }
 catch (    Exception e) {
      if (versionListerIterator.hasNext()) {
        DeprecationLogger.nagUserWith(String.format("Failed to list versions of %s using %s. Proceeding with other ResourceLister.",moduleRevisionId,lister.getClass()));
      }
 else {
        throw new ComposedResourceException(String.format("Failed to list versions for %s",moduleRevisionId,lister.getClass()),e);
      }
    }
  }
  return new DefaultVersionList(Collections.<String>emptyList());
}
