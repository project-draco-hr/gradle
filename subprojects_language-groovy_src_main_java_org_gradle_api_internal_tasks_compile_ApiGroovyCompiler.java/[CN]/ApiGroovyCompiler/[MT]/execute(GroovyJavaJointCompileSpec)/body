{
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.setVerbose(spec.getGroovyCompileOptions().isVerbose());
  configuration.setSourceEncoding(spec.getGroovyCompileOptions().getEncoding());
  configuration.setTargetBytecode(spec.getTargetCompatibility());
  configuration.setTargetDirectory(spec.getDestinationDir());
  canonicalizeValues(spec.getGroovyCompileOptions().getOptimizationOptions());
  if (spec.getGroovyCompileOptions().getConfigurationScript() != null) {
    applyConfigurationScript(spec.getGroovyCompileOptions().getConfigurationScript(),configuration);
  }
  try {
    configuration.setOptimizationOptions(spec.getGroovyCompileOptions().getOptimizationOptions());
  }
 catch (  NoSuchMethodError ignored) {
  }
  Map<String,Object> jointCompilationOptions=new HashMap<String,Object>();
  final File stubDir=spec.getGroovyCompileOptions().getStubDir();
  jointCompilationOptions.put("stubDir",stubDir);
  jointCompilationOptions.put("keepStubs",spec.getGroovyCompileOptions().isKeepStubs());
  configuration.setJointCompilationOptions(jointCompilationOptions);
  URLClassLoader classPathLoader=new GroovyCompileTransformingClassLoader(getExtClassLoader(),new DefaultClassPath(spec.getClasspath()));
  GroovyClassLoader compileClasspathClassLoader=new GroovyClassLoader(classPathLoader,null);
  FilteringClassLoader groovyCompilerClassLoader=new FilteringClassLoader(GroovyClassLoader.class.getClassLoader());
  groovyCompilerClassLoader.allowPackage("org.codehaus.groovy");
  groovyCompilerClassLoader.allowPackage("groovy");
  groovyCompilerClassLoader.disallowClass("groovy.util.GroovyTestCase");
  groovyCompilerClassLoader.disallowPackage("groovy.servlet");
  final GroovyClassLoader astTransformClassLoader=new GroovyClassLoader(groovyCompilerClassLoader,null);
  for (  File file : spec.getClasspath()) {
    astTransformClassLoader.addClasspath(file.getPath());
  }
  JavaAwareCompilationUnit unit=new JavaAwareCompilationUnit(configuration,compileClasspathClassLoader){
    @Override public GroovyClassLoader getTransformLoader(){
      return astTransformClassLoader;
    }
  }
;
  final boolean shouldProcessAnnotations=shouldProcessAnnotations(astTransformClassLoader,spec);
  if (shouldProcessAnnotations) {
    unit.addSources(new File[]{new File("ForceStubGeneration.java")});
  }
  unit.addSources(Iterables.toArray(spec.getSource(),File.class));
  unit.setCompilerFactory(new JavaCompilerFactory(){
    public JavaCompiler createCompiler(    final CompilerConfiguration config){
      return new JavaCompiler(){
        public void compile(        List<String> files,        CompilationUnit cu){
          if (shouldProcessAnnotations) {
            spec.setSource(spec.getSource().plus(new SimpleFileCollection(stubDir).getAsFileTree()));
          }
 else {
            FileCollection sourcepath=new SimpleFileCollection(stubDir);
            if (spec.getCompileOptions().getSourcepath() != null) {
              sourcepath=spec.getCompileOptions().getSourcepath().plus(sourcepath);
            }
            spec.getCompileOptions().setSourcepath(sourcepath);
          }
          spec.setSource(spec.getSource().filter(new Spec<File>(){
            public boolean isSatisfiedBy(            File file){
              return file.getName().endsWith(".java");
            }
          }
));
          try {
            javaCompiler.execute(spec);
          }
 catch (          CompilationFailedException e) {
            cu.getErrorCollector().addFatalError(new SimpleMessage(e.getMessage(),cu));
          }
        }
      }
;
    }
  }
);
  try {
    unit.compile();
  }
 catch (  org.codehaus.groovy.control.CompilationFailedException e) {
    System.err.println(e.getMessage());
    throw new CompilationFailedException();
  }
  return new SimpleWorkResult(true);
}
