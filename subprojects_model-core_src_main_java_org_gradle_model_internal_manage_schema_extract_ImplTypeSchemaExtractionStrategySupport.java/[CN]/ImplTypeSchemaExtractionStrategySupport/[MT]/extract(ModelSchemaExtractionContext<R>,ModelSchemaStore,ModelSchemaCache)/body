{
  ModelType<R> type=extractionContext.getType();
  if (!isTarget(type)) {
    return null;
  }
  validateTypeHierarchy(extractionContext,type);
  List<ModelProperty<?>> properties=extractPropertySchemas(extractionContext,ModelSchemaUtils.getCandidateMethods(type.getRawClass()));
  List<ModelSchemaAspect> aspects=aspectExtractor.extract(extractionContext,properties);
  ModelSchema<R> schema=createSchema(extractionContext,store,type,properties,aspects);
  Iterable<ModelSchemaExtractionContext<?>> propertyDependencies=Iterables.transform(properties,new Function<ModelProperty<?>,ModelSchemaExtractionContext<?>>(){
    public ModelSchemaExtractionContext<?> apply(    final ModelProperty<?> property){
      return toPropertyExtractionContext(extractionContext,property,cache);
    }
  }
);
  return new ModelSchemaExtractionResult<R>(schema,propertyDependencies);
}
