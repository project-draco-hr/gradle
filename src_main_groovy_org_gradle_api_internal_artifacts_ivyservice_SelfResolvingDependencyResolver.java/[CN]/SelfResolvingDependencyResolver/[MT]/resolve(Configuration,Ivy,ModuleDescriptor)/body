{
  final ResolvedConfiguration resolvedConfiguration=resolver.resolve(configuration,ivy,moduleDescriptor);
  final Set<SelfResolvingDependency> selfResolvingDependencies=configuration.getAllDependencies(SelfResolvingDependency.class);
  return new ResolvedConfiguration(){
    public ResolveReport getResolveReport(){
      return resolvedConfiguration.getResolveReport();
    }
    public Set<File> getFiles(    Spec<Dependency> dependencySpec){
      Set<File> files=new LinkedHashSet<File>();
      Set<SelfResolvingDependency> selfResolvingDependenciesSubSet=Specs.filterIterable(selfResolvingDependencies,dependencySpec);
      for (      SelfResolvingDependency selfResolvingDependency : selfResolvingDependenciesSubSet) {
        files.addAll((selfResolvingDependency).resolve());
      }
      files.addAll(resolvedConfiguration.getFiles(dependencySpec));
      return files;
    }
    public Set<ResolvedDependency> getFirstLevelResolvedDependencies(){
      Set<ResolvedDependency> firstLevelResolvedDependencies=resolvedConfiguration.getFirstLevelResolvedDependencies();
      for (      SelfResolvingDependency selfResolvingDependency : selfResolvingDependencies) {
        Set<File> files=selfResolvingDependency.resolve();
        firstLevelResolvedDependencies.add(new DefaultResolvedDependency(GUtil.join(files,";"),"",files));
      }
      return firstLevelResolvedDependencies;
    }
    public boolean hasError(){
      return resolvedConfiguration.hasError();
    }
    public void rethrowFailure() throws GradleException {
      resolvedConfiguration.rethrowFailure();
    }
  }
;
}
