{
  new MetricsHtml(writer){
{
      html();
      head();
      headSection(this);
      title().text("Profile report").end();
      end();
      body();
      div().id("content");
      Calendar calendar=Calendar.getInstance();
      calendar.add(Calendar.DAY_OF_YEAR,-14);
      long expiry=calendar.getTime().getTime();
      Map<String,String> archived=new LinkedHashMap<String,String>();
      List<String> testNames=store.getTestNames();
      div().id("controls").end();
      for (      String testName : testNames) {
        PerformanceTestHistory testHistory=store.getTestResults(testName,5);
        List<? extends PerformanceTestExecution> results=testHistory.getExecutions();
        if (results.isEmpty() || results.get(0).getTestTime() < expiry) {
          archived.put(testHistory.getId(),testHistory.getDisplayName());
          continue;
        }
        h2().classAttr("test-execution");
        text("Test: " + testName);
        end();
        table().classAttr("history");
        tr().classAttr("control-groups");
        th().colspan("2").end();
        th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average execution time").end();
        th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average heap usage").end();
        end();
        tr();
        th().text("Date").end();
        th().text("Branch").end();
        for (        String label : testHistory.getScenarioLabels()) {
          renderHeaderForSamples(label);
        }
        for (        String label : testHistory.getScenarioLabels()) {
          renderHeaderForSamples(label);
        }
        end();
        for (        PerformanceTestExecution performanceTestExecution : results) {
          tr();
          td().text(format.timestamp(new Date(performanceTestExecution.getTestTime()))).end();
          td().text(performanceTestExecution.getVcsBranch()).end();
          renderSamplesForExperiment(performanceTestExecution.getExperiments(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
            @Override public DataSeries<Duration> transform(            MeasuredOperationList measuredOperations){
              return measuredOperations.getTotalTime();
            }
          }
);
          renderSamplesForExperiment(performanceTestExecution.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
            @Override public DataSeries<DataAmount> transform(            MeasuredOperationList measuredOperations){
              return measuredOperations.getTotalMemoryUsed();
            }
          }
);
          end();
        }
        end();
        div().classAttr("details");
        String url="tests/" + testHistory.getId() + ".html";
        a().href(url).text("details...").end();
        end();
      }
      if (!archived.isEmpty()) {
        h2().text("Archived tests").end();
        div();
        ul();
        for (        Map.Entry<String,String> entry : archived.entrySet()) {
          String url="tests/" + entry.getKey() + ".html";
          li().a().href(url).text(entry.getValue()).end().end();
        }
        end();
        end();
      }
      end();
      footer(this);
      endAll();
    }
  }
;
}
