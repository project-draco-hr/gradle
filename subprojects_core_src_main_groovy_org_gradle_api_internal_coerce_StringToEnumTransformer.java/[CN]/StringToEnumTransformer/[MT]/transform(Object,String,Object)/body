{
  if (args.length != 1 || !(args[0] instanceof CharSequence)) {
    return args;
  }
  final CharSequence charSequenceArg=(CharSequence)args[0];
  Method enumMethod=JavaReflectionUtil.findMethod(target.getClass(),new Spec<Method>(){
    @Override public boolean isSatisfiedBy(    Method method){
      Class<?>[] parameterTypes=method.getParameterTypes();
      if (method.getName().equals(methodName) && parameterTypes.length == 1) {
        Class<?> parameterType=parameterTypes[0];
        if (parameterType.isEnum()) {
          return true;
        }
      }
      return false;
    }
  }
);
  if (enumMethod == null) {
    return args;
  }
 else {
    @SuppressWarnings("unchecked") Class<? extends Enum> enumType=(Class<? extends Enum>)enumMethod.getParameterTypes()[0];
    return new Object[]{toEnumValue(enumType,charSequenceArg)};
  }
}
