{
  Matcher matcher=linkPattern.matcher(link);
  if (!matcher.matches()) {
    return null;
  }
  String className=null;
  if (matcher.group(1).length() > 0) {
    className=typeNameResolver.resolve(matcher.group(1),classMetaData);
    if (className == null) {
      return null;
    }
  }
  if (matcher.group(2) == null) {
    return linkRenderer.link(new TypeMetaData(className),listener);
  }
  ClassMetaData targetClass;
  if (className != null) {
    targetClass=repository.find(className);
    if (targetClass == null) {
      return null;
    }
  }
 else {
    targetClass=classMetaData;
  }
  String methodSignature=matcher.group(3);
  if (matcher.group(5) != null) {
    StringBuilder signature=new StringBuilder();
    signature.append(methodSignature);
    signature.append("(");
    if (matcher.group(5).length() > 0) {
      String[] types=matcher.group(5).split(",\\s*");
      for (int i=0; i < types.length; i++) {
        String type=types[i];
        Matcher typeMatcher=Pattern.compile("(\\w+)(.*)").matcher(type);
        if (!typeMatcher.matches()) {
          return null;
        }
        if (i > 0) {
          signature.append(", ");
        }
        signature.append(typeNameResolver.resolve(typeMatcher.group(1),classMetaData));
        signature.append(typeMatcher.group(2));
      }
    }
    signature.append(")");
    methodSignature=signature.toString();
  }
  MethodMetaData method=findMethod(methodSignature,targetClass);
  if (method == null) {
    return null;
  }
  return linkRenderer.link(method,listener);
}
