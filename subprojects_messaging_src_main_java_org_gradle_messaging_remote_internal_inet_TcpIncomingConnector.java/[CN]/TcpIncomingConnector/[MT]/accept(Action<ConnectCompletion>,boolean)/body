{
  final ServerSocketChannel serverSocket;
  int localPort;
  try {
    serverSocket=ServerSocketChannel.open();
    serverSocket.socket().bind(new InetSocketAddress(0));
    localPort=serverSocket.socket().getLocalPort();
  }
 catch (  Exception e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
  Object id=idGenerator.generateId();
  List<InetAddress> addresses=allowRemote ? addressFactory.findRemoteAddresses() : addressFactory.findLocalAddresses();
  final Address address=new MultiChoiceAddress(id,localPort,addresses);
  LOGGER.debug("Listening on {}.",address);
  final StoppableExecutor executor=executorFactory.create(String.format("Incoming %s TCP Connector on port %s",allowRemote ? "remote" : "local",localPort));
  executor.execute(new Receiver(serverSocket,action,allowRemote));
  return new ConnectionAcceptor(){
    public Address getAddress(){
      return address;
    }
    public void requestStop(){
      CompositeStoppable.stoppable(serverSocket).stop();
    }
    public void stop(){
      requestStop();
      executor.stop();
    }
  }
;
}
