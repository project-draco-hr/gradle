{
  logger.debug("Creating the projects and evaluating the project files!");
  Map systemAndEnvProjectProperties=GUtil.addMaps(getSystemProjectProperties(systemProperties),getEnvProjectProperties(envProperties));
  if (GUtil.isTrue(systemAndEnvProjectProperties)) {
    logger.debug("Added system and env project properties: {}",systemAndEnvProjectProperties);
  }
  File propertyFile=new File(startParameter.getGradleUserHomeDir(),Project.GRADLE_PROPERTIES);
  Properties userHomeProperties=new Properties();
  logger.debug("Looking for user properties from: {}",propertyFile);
  if (!propertyFile.isFile()) {
    logger.debug("user property file does not exists. We continue!");
  }
 else {
    try {
      userHomeProperties.load(new FileInputStream(propertyFile));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    logger.debug("Adding user properties (if not overwritten by system project properties: {}",userHomeProperties);
  }
  logger.debug("Looking for system project properties");
  ProjectInternal rootProject=projectFactory.createProject(settings.getSettingsFinder().getSettingsDir().getName(),null,settings.getSettingsFinder().getSettingsDir(),buildScriptClassLoader);
  addPropertiesToProject(startParameter.getGradleUserHomeDir(),GUtil.addMaps(userHomeProperties,startParameter.getProjectProperties()),systemAndEnvProjectProperties,rootProject);
  for (  String path : settings.getProjectPaths()) {
    String[] folders=path.split(Project.PATH_SEPARATOR);
    ProjectInternal parent=rootProject;
    for (    String name : folders) {
      if (parent.getChildProjects().get(name) == null) {
        parent.getChildProjects().put(name,parent.addChildProject(name));
        addPropertiesToProject(startParameter.getGradleUserHomeDir(),userHomeProperties,systemAndEnvProjectProperties,(ProjectInternal)parent.getChildProjects().get(name));
      }
      parent=(ProjectInternal)parent.getChildProjects().get(name);
    }
  }
  return rootProject;
}
