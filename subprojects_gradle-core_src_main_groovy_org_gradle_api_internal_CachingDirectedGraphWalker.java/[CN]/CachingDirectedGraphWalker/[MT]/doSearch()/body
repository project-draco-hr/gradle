{
  int componentCount=0;
  Map<N,NodeDetails<N,T>> seenNodes=new HashMap<N,NodeDetails<N,T>>();
  Map<Integer,NodeDetails<N,T>> components=new HashMap<Integer,NodeDetails<N,T>>();
  LinkedList<N> queue=new LinkedList<N>(startNodes);
  while (!queue.isEmpty()) {
    N node=queue.getFirst();
    NodeDetails<N,T> details=seenNodes.get(node);
    if (details == null) {
      details=new NodeDetails<N,T>(node,componentCount++);
      seenNodes.put(node,details);
      components.put(details.component,details);
      Set<T> cacheValues=cachedNodeValues.get(node);
      if (cacheValues != null) {
        details.values=cacheValues;
        details.finished=true;
        queue.removeFirst();
        continue;
      }
      graph.getNodeValues(node,details.values,details.successors);
      for (      N connectedNode : details.successors) {
        if (!seenNodes.containsKey(connectedNode)) {
          queue.add(0,connectedNode);
        }
      }
    }
 else {
      queue.removeFirst();
      if (cachedNodeValues.containsKey(node)) {
        continue;
      }
      for (      N connectedNode : details.successors) {
        NodeDetails<N,T> connectedNodeDetails=seenNodes.get(connectedNode);
        if (!connectedNodeDetails.finished) {
          details.minSeen=Math.min(details.minSeen,connectedNodeDetails.minSeen);
        }
        details.values.addAll(connectedNodeDetails.values);
        graph.getEdgeValues(node,connectedNode,details.values);
      }
      if (details.minSeen != details.component) {
        NodeDetails<N,T> rootDetails=components.get(details.minSeen);
        rootDetails.values.addAll(details.values);
        details.values.clear();
        rootDetails.strongComponentMembers.addAll(details.strongComponentMembers);
      }
 else {
        for (        NodeDetails<N,T> componentMember : details.strongComponentMembers) {
          cachedNodeValues.put(componentMember.node,details.values);
          componentMember.finished=true;
          components.remove(componentMember.component);
        }
      }
    }
  }
  Set<T> values=new LinkedHashSet<T>();
  for (  N startNode : startNodes) {
    values.addAll(cachedNodeValues.get(startNode));
  }
  return values;
}
