{
  String trimmed=constraint.trim();
  if (trimmed.equals("current")) {
    return new Spec<GradleVersion>(){
      public boolean isSatisfiedBy(      GradleVersion element){
        return element.equals(GradleVersion.current());
      }
    }
;
  }
  if (trimmed.equals("!current")) {
    return new Spec<GradleVersion>(){
      public boolean isSatisfiedBy(      GradleVersion element){
        return !element.equals(GradleVersion.current());
      }
    }
;
  }
  if (trimmed.startsWith("=")) {
    final GradleVersion target=GradleVersion.version(trimmed.substring(1)).getBaseVersion();
    return new Spec<GradleVersion>(){
      public boolean isSatisfiedBy(      GradleVersion element){
        return element.getBaseVersion().equals(target);
      }
    }
;
  }
  List<Spec<GradleVersion>> specs=new ArrayList<Spec<GradleVersion>>();
  String[] patterns=trimmed.split("\\s+");
  for (  String value : patterns) {
    if (value.startsWith(">=")) {
      final GradleVersion minVersion=GradleVersion.version(value.substring(2));
      specs.add(new Spec<GradleVersion>(){
        public boolean isSatisfiedBy(        GradleVersion element){
          return element.getBaseVersion().compareTo(minVersion) >= 0;
        }
      }
);
    }
 else     if (value.startsWith(">")) {
      final GradleVersion minVersion=GradleVersion.version(value.substring(1));
      specs.add(new Spec<GradleVersion>(){
        public boolean isSatisfiedBy(        GradleVersion element){
          return element.getBaseVersion().compareTo(minVersion) > 0;
        }
      }
);
    }
 else     if (value.startsWith("<=")) {
      final GradleVersion maxVersion=GradleVersion.version(value.substring(2));
      specs.add(new Spec<GradleVersion>(){
        public boolean isSatisfiedBy(        GradleVersion element){
          return element.getBaseVersion().compareTo(maxVersion) <= 0;
        }
      }
);
    }
 else     if (value.startsWith("<")) {
      final GradleVersion maxVersion=GradleVersion.version(value.substring(1));
      specs.add(new Spec<GradleVersion>(){
        public boolean isSatisfiedBy(        GradleVersion element){
          return element.getBaseVersion().compareTo(maxVersion) < 0;
        }
      }
);
    }
 else {
      throw new RuntimeException(String.format("Unsupported version range '%s' specified in constraint '%s'. Supported formats: '>=nnn' or '<=nnn' or space-separate patterns",value,constraint));
    }
  }
  return Specs.intersect(specs);
}
