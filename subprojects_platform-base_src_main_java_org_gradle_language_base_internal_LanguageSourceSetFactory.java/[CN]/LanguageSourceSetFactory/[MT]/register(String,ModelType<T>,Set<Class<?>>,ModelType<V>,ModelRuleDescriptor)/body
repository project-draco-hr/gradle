{
  InstanceFactory.TypeRegistrationBuilder<T> registration=register(type,ruleDescriptor);
  if (implementationType != null) {
    registration.withImplementation(implementationType,new InstanceFactory.ImplementationFactory<T>(){
      @Override public T create(      ModelType<? extends T> publicType,      String sourceSetName,      MutableModelNode modelNode){
        return BaseLanguageSourceSet.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),sourceSetName,determineParentName(modelNode),fileResolver);
      }
    }
);
  }
  for (  Class<?> internalView : internalViews) {
    registration.withInternalView(ModelType.of(internalView));
  }
  if (!StringUtils.isEmpty(languageName)) {
    languageRegistry.add(new NamedLanguageRegistration<T>(languageName,type));
  }
}
