{
  properties.put("sonar.projectName",project.getName());
  properties.put("sonar.projectDescription",project.getDescription());
  properties.put("sonar.projectVersion",project.getVersion());
  properties.put("sonar.projectBaseDir",project.getProjectDir());
  properties.put("sonar.dynamicAnalysis","reuseReports");
  if (project.equals(targetProject)) {
    properties.put("sonar.projectKey",getProjectKey(project));
    properties.put("sonar.environment.information.key","Gradle");
    properties.put("sonar.environment.information.version",project.getGradle().getGradleVersion());
    properties.put("sonar.working.directory",new File(project.getBuildDir(),"sonar"));
  }
  project.getPlugins().withType(JavaBasePlugin.class,new Action<JavaBasePlugin>(){
    public void execute(    JavaBasePlugin javaBasePlugin){
      JavaPluginConvention javaPluginConvention=new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class);
      properties.put("sonar.java.source",javaPluginConvention.getSourceCompatibility());
      properties.put("sonar.java.target",javaPluginConvention.getTargetCompatibility());
    }
  }
);
  project.getPlugins().withType(JavaPlugin.class,new Action<JavaPlugin>(){
    public void execute(    JavaPlugin javaPlugin){
      JavaPluginConvention javaPluginConvention=new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class);
      SourceSet main=javaPluginConvention.getSourceSets().getAt("main");
      properties.put("sonar.sources",nonEmptyOrNull(Iterables.filter(main.getAllSource().getSrcDirs(),FILE_EXISTS)));
      SourceSet test=javaPluginConvention.getSourceSets().getAt("test");
      properties.put("sonar.tests",nonEmptyOrNull(Iterables.filter(test.getAllSource().getSrcDirs(),FILE_EXISTS)));
      properties.put("sonar.binaries",nonEmptyOrNull(Iterables.filter(main.getRuntimeClasspath(),IS_DIRECTORY)));
      properties.put("sonar.libraries",getLibraries(main));
      final Test testTask=(Test)project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME);
      File testResultsDir=testTask.getReports().getJunitXml().getDestination();
      testResultsDir.mkdirs();
      properties.put("sonar.surefire.reportsPath",testResultsDir);
      properties.put("sonar.junit.reportsPath",testResultsDir);
      project.getPlugins().withType(JacocoPlugin.class,new Action<JacocoPlugin>(){
        public void execute(        JacocoPlugin jacocoPlugin){
          JacocoTaskExtension jacocoTaskExtension=testTask.getExtensions().getByType(JacocoTaskExtension.class);
          File destinationFile=jacocoTaskExtension.getDestinationFile();
          if (destinationFile.exists()) {
            properties.put("sonar.jacoco.reportPath",destinationFile);
          }
        }
      }
);
    }
  }
);
  if (properties.get("sonar.sources") == null) {
    properties.put("sonar.sources","");
  }
}
