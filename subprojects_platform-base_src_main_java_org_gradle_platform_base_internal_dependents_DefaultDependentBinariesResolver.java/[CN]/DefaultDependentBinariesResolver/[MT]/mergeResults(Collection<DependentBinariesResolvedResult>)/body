{
  DependentBinariesResolvedResult first=results.iterator().next();
  if (results.size() == 1) {
    return first;
  }
  boolean hasNotBuildables=false;
  boolean hasTestSuites=false;
  LinkedListMultimap<LibraryBinaryIdentifier,DependentBinariesResolvedResult> index=LinkedListMultimap.create();
  List<DependentBinariesResolvedResult> allChildren=Lists.newArrayList();
  for (  DependentBinariesResolvedResult result : results) {
    if (!result.isBuildable()) {
      hasNotBuildables=true;
    }
    if (result.isTestSuite()) {
      hasTestSuites=true;
    }
    allChildren.addAll(result.getChildren());
    for (    DependentBinariesResolvedResult child : result.getChildren()) {
      index.put(child.getId(),child);
    }
  }
  List<DependentBinariesResolvedResult> children=Lists.newArrayList();
  for (  Collection<DependentBinariesResolvedResult> childResults : index.asMap().values()) {
    children.add(mergeResults(childResults));
  }
  return new DefaultDependentBinariesResolvedResult(first.getId(),first.getProjectScopedName(),!hasNotBuildables,hasTestSuites,children);
}
