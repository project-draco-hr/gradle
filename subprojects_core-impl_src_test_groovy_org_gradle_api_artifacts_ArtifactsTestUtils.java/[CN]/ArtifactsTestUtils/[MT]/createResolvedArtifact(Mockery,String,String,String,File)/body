{
  final Artifact artifactStub=context.mock(Artifact.class,"artifact" + name);
  context.checking(new Expectations(){
{
      allowing(artifactStub).getName();
      will(returnValue(name));
      allowing(artifactStub).getType();
      will(returnValue(type));
      allowing(artifactStub).getExt();
      will(returnValue(extension));
      allowing(artifactStub).getExtraAttributes();
      will(returnValue(Collections.emptyMap()));
      allowing(artifactStub).getExtraAttribute(with(org.hamcrest.Matchers.notNullValue(String.class)));
      will(returnValue(null));
    }
  }
);
  final FileSource artifactSource=context.mock(FileSource.class);
  context.checking(new Expectations(){
{
      allowing(artifactSource).get();
      will(returnValue(file));
    }
  }
);
  final ResolvedDependency resolvedDependency=context.mock(ResolvedDependency.class);
  final ResolvedModule resolvedModule=context.mock(ResolvedModule.class);
  context.checking(new Expectations(){
{
      allowing(resolvedDependency).getModule();
      will(returnValue(resolvedModule));
      allowing(resolvedModule).getId();
      will(returnValue(new DefaultResolvedModuleId("group",name,"1.2")));
    }
  }
);
  return new DefaultResolvedArtifact(resolvedDependency,artifactStub,artifactSource);
}
