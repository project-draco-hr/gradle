{
  ScriptBlock scriptBlock=AstUtils.detectScriptBlock(statement,scriptBlockNames);
  if (scriptBlock == null) {
    seenNonClasspathStatement=true;
    return null;
  }
 else {
    if (scriptBlock.getName().equals(PLUGINS)) {
      String failMessage=null;
      if (!scriptTarget.getSupportsPluginsBlock()) {
        failMessage=makePluginsError("Only Project build scripts can contain plugins {} blocks");
      }
 else       if (seenNonClasspathStatement) {
        failMessage=String.format(makePluginsError("only %s {} and other %s {} script blocks are allowed before %s {} blocks, no other statements are allowed"),scriptTarget.getClasspathBlockName(),PLUGINS,PLUGINS);
      }
      seenPluginsBlock=true;
      if (failMessage != null) {
        sourceUnit.getErrorCollector().addError(new SyntaxException(failMessage,statement.getLineNumber(),statement.getColumnNumber()),sourceUnit);
      }
      return statement;
    }
 else     if (scriptBlock.getName().equals(PLUGIN_REPOS)) {
      String failureMessage=null;
      if (!scriptTarget.getSupportsPluginRepositoriesBlock()) {
        failureMessage="Only Settings scripts can contain a pluginRepositories {} block.";
      }
 else       if (seenClasspathBlock || seenNonClasspathStatement || seenPluginsBlock) {
        failureMessage=String.format("The %s {} block must appear before any other statements in the script.",PLUGIN_REPOS);
      }
 else       if (seenPluginRepositoriesBlock) {
        failureMessage=String.format("At most, one %s {} block may appear in the script.",PLUGIN_REPOS);
      }
      if (failureMessage != null) {
        sourceUnit.getErrorCollector().addError(new SyntaxException(makePluginRepositoriesError(failureMessage),statement.getLineNumber(),statement.getColumnNumber()),sourceUnit);
      }
      seenPluginRepositoriesBlock=true;
      return statement;
    }
 else {
      if (seenPluginsBlock) {
        String message=String.format(makePluginsError("all %s {} blocks must appear before any %s {} blocks in the script"),scriptTarget.getClasspathBlockName(),PLUGINS);
        sourceUnit.getErrorCollector().addError(new SyntaxException(message,statement.getLineNumber(),statement.getColumnNumber()),sourceUnit);
      }
      seenClasspathBlock=true;
      return statement;
    }
  }
}
