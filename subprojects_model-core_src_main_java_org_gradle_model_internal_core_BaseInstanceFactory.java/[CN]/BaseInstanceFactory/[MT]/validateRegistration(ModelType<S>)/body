{
  ImplementationTypeRegistration<S> implementationTypeRegistration=getImplementationTypeRegistration(publicType);
  if (implementationTypeRegistration == null) {
    ImplementationInfo<? extends T> implementationInfo=getImplementationInfo(publicType);
    if (!publicType.getConcreteClass().isAnnotationPresent(Managed.class) && !publicType.equals(implementationInfo.getPublicType())) {
      throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because only managed types can extend unmanaged type '%s'",publicType,implementationInfo.getPublicType()));
    }
    return;
  }
  List<InternalViewRegistration> internalViewRegistrations=getInternalViewRegistrations(publicType);
  if (internalViewRegistrations == null) {
    return;
  }
  ModelType<? extends S> implementation=implementationTypeRegistration.implementationType;
  for (  InternalViewRegistration internalViewRegistration : internalViewRegistrations) {
    ModelType<?> internalView=internalViewRegistration.internalView;
    ModelType<?> asSubclass=internalView.asSubclass(implementation);
    if (asSubclass == null) {
      StringBuilder builder=new StringBuilder();
      builder.append(String.format("Factory registration for '%s' is invalid because the implementation type '%s' does not extend internal view '%s'",publicType,implementation,internalView));
      if (implementationTypeRegistration.source != null) {
        builder.append(", implementation type was registered by ");
        implementationTypeRegistration.source.describeTo(builder);
      }
      if (internalViewRegistration.source != null) {
        builder.append(", internal view was registered by ");
        internalViewRegistration.source.describeTo(builder);
      }
      throw new IllegalStateException(builder.toString());
    }
  }
}
