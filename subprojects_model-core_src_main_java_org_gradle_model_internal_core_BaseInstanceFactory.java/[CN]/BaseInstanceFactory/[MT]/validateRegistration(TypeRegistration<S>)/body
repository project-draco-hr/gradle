{
  ModelType<S> publicType=registration.publicType;
  ImplementationRegistration<S> implementationRegistration=registration.implementationRegistration;
  if (implementationRegistration == null) {
    ImplementationInfo<? extends T> implementationInfo=getImplementationInfo(publicType);
    if (!publicType.getConcreteClass().isAnnotationPresent(Managed.class) && !publicType.equals(implementationInfo.getPublicType())) {
      throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because only managed types can extend unmanaged type '%s'",publicType,implementationInfo.getPublicType()));
    }
    return;
  }
  List<InternalViewRegistration> internalViewRegistrations=registration.internalViewRegistrations;
  if (internalViewRegistrations == null) {
    return;
  }
  ModelType<? extends S> implementation=implementationRegistration.getImplementationType();
  for (  InternalViewRegistration internalViewRegistration : internalViewRegistrations) {
    ModelType<?> internalView=internalViewRegistration.getInternalView();
    ModelType<?> asSubclass=internalView.asSubclass(implementation);
    if (asSubclass == null) {
      throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because the implementation type '%s' does not extend internal view '%s', " + "implementation type was registered by %s, " + "internal view was registered by %s",publicType,implementation,internalView,implementationRegistration.getSource(),internalViewRegistration.getSource()));
    }
  }
}
