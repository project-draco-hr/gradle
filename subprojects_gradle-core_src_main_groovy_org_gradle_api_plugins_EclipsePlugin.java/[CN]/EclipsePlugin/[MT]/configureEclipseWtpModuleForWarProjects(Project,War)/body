{
  final EclipseWtp eclipseWtp=project.getTasks().add(ECLIPSE_WTP_TASK_NAME,EclipseWtp.class);
  eclipseWtp.getConventionMapping().map(GUtil.map("warResourceMappings",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      SourceSet sourceSet=java(convention).getSource().getByName(JavaPlugin.MAIN_SOURCE_SET_NAME);
      List allSrcDirs=GUtil.addLists(sourceSet.getJava().getSrcDirs(),sourceSet.getResources().getSrcDirs());
      Map resourceMappings=WrapUtil.toMap("/WEB-INF/classes",allSrcDirs);
      resourceMappings.put("/",WrapUtil.toList(war(convention).getWebAppDir()));
      return resourceMappings;
    }
  }
,"outputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getSource().getByName(JavaPlugin.MAIN_SOURCE_SET_NAME).getClassesDir();
    }
  }
,"deployName",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return project.getName();
    }
  }
,"warLibs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      List warLibs=war.dependencies(eclipseWtp.isFailForMissingDependencies(),false);
      if (war.getAdditionalLibFileSets() != null) {
        warLibs.addAll(war.getAdditionalLibFileSets());
      }
      return warLibs;
    }
  }
,"projectDependencies",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return new ArrayList(Specs.filterIterable(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CONFIGURATION_NAME).getAllDependencies(),DependencySpecs.type(Type.PROJECT)));
    }
  }
));
  createDependencyOnEclipseProjectTaskOfDependentProjects(project,eclipseWtp);
  project.getTasks().getByName(ECLIPSE_TASK_NAME).dependsOn(eclipseWtp);
}
