{
  final EclipseWtp eclipseWtp=project.getTasks().add(ECLIPSE_WTP_TASK_NAME,EclipseWtp.class);
  eclipseWtp.getConventionMapping().map(GUtil.map("warResourceMappings",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      SourceSet sourceSet=java(convention).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);
      List allSrcDirs=GUtil.addLists(sourceSet.getJava().getSrcDirs(),sourceSet.getResources().getSrcDirs());
      Map resourceMappings=WrapUtil.toMap("/WEB-INF/classes",allSrcDirs);
      resourceMappings.put("/",WrapUtil.toList(war(convention).getWebAppDir()));
      return resourceMappings;
    }
  }
,"outputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClassesDir();
    }
  }
,"deployName",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return project.getName();
    }
  }
,"warLibs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      Spec<Dependency> spec=new Spec<Dependency>(){
        public boolean isSatisfiedBy(        Dependency element){
          return !(element instanceof ProjectDependency);
        }
      }
;
      Set<File> provided=project.getConfigurations().getByName(WarPlugin.PROVIDED_RUNTIME_CONFIGURATION_NAME).getFiles();
      Set<File> runtime=project.getConfigurations().getByName(JavaPlugin.RUNTIME_CONFIGURATION_NAME).copyRecursive(spec).getFiles();
      runtime.removeAll(provided);
      return new ArrayList<Object>(runtime);
    }
  }
,"projectDependencies",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return new ArrayList(Specs.filterIterable(project.getConfigurations().getByName(JavaPlugin.RUNTIME_CONFIGURATION_NAME).getAllDependencies(),DependencySpecs.type(Type.PROJECT)));
    }
  }
));
  createDependencyOnEclipseProjectTaskOfDependentProjects(project,eclipseWtp);
  project.getTasks().getByName(ECLIPSE_TASK_NAME).dependsOn(eclipseWtp);
}
