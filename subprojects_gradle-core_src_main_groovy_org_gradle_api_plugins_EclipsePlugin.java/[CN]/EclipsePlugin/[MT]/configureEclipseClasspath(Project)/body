{
  EclipseClasspath eclipseClasspath=project.getTasks().add(ECLIPSE_CP_TASK_NAME,EclipseClasspath.class);
  eclipseClasspath.getConventionMapping().map(GUtil.map("srcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      SourceSet sourceSet=java(convention).getSource().getByName(JavaPlugin.MAIN_SOURCE_SET_NAME);
      return GUtil.addLists(sourceSet.getJava().getSrcDirs(),sourceSet.getResources().getSrcDirs());
    }
  }
,"testSrcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      SourceSet sourceSet=java(convention).getSource().getByName(JavaPlugin.TEST_SOURCE_SET_NAME);
      return GUtil.addLists(sourceSet.getJava().getSrcDirs(),sourceSet.getResources().getSrcDirs());
    }
  }
,"outputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getSource().getByName(JavaPlugin.MAIN_SOURCE_SET_NAME).getClassesDir();
    }
  }
,"testOutputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getSource().getByName(JavaPlugin.TEST_SOURCE_SET_NAME).getClassesDir();
    }
  }
,"classpathLibs",new ConventionValue(){
    public Object getValue(    Convention convention,    final IConventionAware conventionAwareObject){
      ConfigurationContainer configurationContainer=((Task)conventionAwareObject).getProject().getConfigurations();
      return new ArrayList(configurationContainer.getByName(JavaPlugin.TEST_RUNTIME_CONFIGURATION_NAME).files(DependencySpecs.type(Type.EXTERNAL)));
    }
  }
,"projectDependencies",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return new ArrayList(project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CONFIGURATION_NAME).getAllDependencies(ProjectDependency.class));
    }
  }
));
  eclipseClasspath.setDescription("Generates an Eclipse .classpath file.");
  return eclipseClasspath;
}
