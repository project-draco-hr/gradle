{
  project.getTasks().withType(Javadoc.class).allTasks(new Action<Javadoc>(){
    public void execute(    Javadoc javadoc){
      javadoc.getConventionMapping().map("classpath",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          SourceSet mainSourceSet=convention.getPlugin(JavaPluginConvention.class).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);
          return mainSourceSet.getClasses().plus(mainSourceSet.getCompileClasspath());
        }
      }
);
      javadoc.getConventionMapping().map("defaultSource",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return convention.getPlugin(JavaPluginConvention.class).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getAllJava();
        }
      }
);
      javadoc.getConventionMapping().map("destinationDir",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return new File(convention.getPlugin(JavaPluginConvention.class).getDocsDir(),"javadoc");
        }
      }
);
      javadoc.getConventionMapping().map("optionsFile",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return new File(project.getBuildDir(),"tmp/javadoc.options");
        }
      }
);
      javadoc.getConventionMapping().map("title",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return convention.getPlugin(ReportingBasePluginConvention.class).getApiDocTitle();
        }
      }
);
      addDependsOnTaskInOtherProjects(javadoc,true,JAVADOC_TASK_NAME,COMPILE_CONFIGURATION_NAME);
    }
  }
);
  project.getTasks().add(JAVADOC_TASK_NAME,Javadoc.class).setDescription("Generates the javadoc for the source code.");
}
