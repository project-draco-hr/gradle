{
  Spec<Statement> spec=isScriptBlock();
  filterStatements(source,spec);
  Iterator iter=source.getAST().getImports().iterator();
  while (iter.hasNext()) {
    ImportNode importedClass=(ImportNode)iter.next();
    if (!isVisible(source,importedClass.getClassName())) {
      iter.remove();
    }
  }
  iter=source.getAST().getStaticImportClasses().keySet().iterator();
  while (iter.hasNext()) {
    String importedClass=(String)iter.next();
    if (!isVisible(source,importedClass)) {
      iter.remove();
    }
  }
  iter=source.getAST().getStaticImportAliases().entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    ClassNode importedClass=(ClassNode)entry.getValue();
    if (!isVisible(source,importedClass.getName())) {
      iter.remove();
      source.getAST().getStaticImportFields().remove(entry.getKey());
    }
  }
  List classes=source.getAST().getClasses();
  if (!classes.isEmpty()) {
    classes.subList(1,classes.size()).clear();
    ClassNode scriptClass=(ClassNode)classes.get(0);
    if (scriptClass.getMethods().size() > 2) {
      scriptClass.getMethods().subList(2,scriptClass.getMethods().size()).clear();
    }
  }
  source.getAST().getMethods().clear();
}
