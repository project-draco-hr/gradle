{
  super(parent);
  this.project=project;
  add(new Service(AntBuilderFactory.class){
    @Override protected Object create(){
      return new DefaultAntBuilderFactory(new AntLoggingAdapter(),project);
    }
  }
);
  add(new Service(ProjectPluginsContainer.class){
    @Override protected Object create(){
      return new DefaultProjectsPluginContainer(get(PluginRegistry.class));
    }
  }
);
  add(new Service(TaskContainerInternal.class){
    @Override protected Object create(){
      return new DefaultTaskContainer(project,get(ITaskFactory.class));
    }
  }
);
  add(new Service(Convention.class){
    @Override protected Object create(){
      return new DefaultConvention();
    }
  }
);
  add(new Service(RepositoryHandler.class){
    @Override protected Object create(){
      return get(RepositoryHandlerFactory.class).createRepositoryHandler(get(Convention.class));
    }
  }
);
  add(new Service(ConfigurationContainer.class){
    @Override protected Object create(){
      return get(ConfigurationContainerFactory.class).createConfigurationContainer(get(ResolverProvider.class),new DependencyMetaDataProviderImpl());
    }
  }
);
  add(new Service(ArtifactHandler.class){
    @Override protected Object create(){
      return new DefaultArtifactHandler(get(ConfigurationContainer.class),get(PublishArtifactFactory.class));
    }
  }
);
  add(new Service(ProjectFinder.class){
    @Override protected Object create(){
      return new ProjectFinder(){
        public Project getProject(        String path){
          return project.project(path);
        }
      }
;
    }
  }
);
  add(new Service(DependencyHandler.class){
    @Override protected Object create(){
      return new DefaultDependencyHandler(get(ConfigurationContainer.class),get(DependencyFactory.class),get(ProjectFinder.class));
    }
  }
);
  add(new Service(ScriptHandler.class){
    @Override protected Object create(){
      RepositoryHandler repositoryHandler=get(RepositoryHandlerFactory.class).createRepositoryHandler(new DefaultConvention());
      ConfigurationContainer configurationContainer=get(ConfigurationContainerFactory.class).createConfigurationContainer(repositoryHandler,new DependencyMetaDataProviderImpl());
      DependencyHandler dependencyHandler=new DefaultDependencyHandler(configurationContainer,get(DependencyFactory.class),get(ProjectFinder.class));
      ClassLoader parentClassLoader;
      if (project.getParent() != null) {
        parentClassLoader=project.getParent().getClassLoaderProvider().getClassLoader();
      }
 else {
        parentClassLoader=project.getGradle().getBuildScriptClassLoader();
      }
      return new DefaultScriptHandler(repositoryHandler,dependencyHandler,configurationContainer,parentClassLoader);
    }
  }
);
  add(new Service(ScriptClassLoaderProvider.class){
    @Override protected Object create(){
      return get(ScriptHandler.class);
    }
  }
);
}
