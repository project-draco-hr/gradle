{
  final ModuleDescriptor moduleDescriptorDummy=HelperUtil.createModuleDescriptor(WrapUtil.toSet("someConf"));
  final IvyFactory ivyFactoryStub=context.mock(IvyFactory.class);
  final Ivy ivyStub=context.mock(Ivy.class);
  final Set<Dependency> dependenciesDummy=WrapUtil.toSet(context.mock(Dependency.class));
  final List<DependencyResolver> dependencyResolversDummy=WrapUtil.toList(context.mock(DependencyResolver.class,"dependencies"));
  final IvySettings ivySettingsDummy=new IvySettings();
  context.checking(new Expectations(){
{
      allowing(ivyFactoryStub).createIvy(ivySettingsDummy);
      will(returnValue(ivyStub));
      allowing(ivyService.getDependencyResolver()).resolveAsReport(configurationDummy,ivyStub,moduleDescriptorDummy,resolveFailOnError);
      will(returnValue(resolveReportDummy));
      allowing(configurationDummy).getDependencies();
      will(returnValue(dependenciesDummy));
      allowing(configurationDummy).getDependencyResolvers();
      will(returnValue(dependencyResolversDummy));
      allowing(ivyService.getModuleDescriptorConverter()).convertForResolve(configurationDummy,moduleDummy,clientModuleRegistryDummy);
      will(returnValue(moduleDescriptorDummy));
      allowing(ivyService.getSettingsConverter()).convertForResolve(dependencyResolversDummy,cacheParentDirDummy,internalRepositoryDummy,clientModuleRegistryDummy);
      will(returnValue(ivySettingsDummy));
    }
  }
);
  ivyService.setIvyFactory(ivyFactoryStub);
}
