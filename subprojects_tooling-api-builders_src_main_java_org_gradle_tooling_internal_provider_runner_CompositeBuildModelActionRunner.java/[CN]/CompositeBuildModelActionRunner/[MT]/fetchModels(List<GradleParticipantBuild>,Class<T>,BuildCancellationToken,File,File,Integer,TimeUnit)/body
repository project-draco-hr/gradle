{
  final Set<T> results=Sets.newConcurrentHashSet();
  final AtomicReference<Throwable> firstFailure=new AtomicReference<Throwable>();
  final CountDownLatch countDownLatch=new CountDownLatch(participantBuilds.size());
  for (  GradleParticipantBuild participant : participantBuilds) {
    ProjectConnection projectConnection=connect(participant,gradleUserHomeDir,daemonBaseDir,daemonMaxIdleTimeValue,daemonMaxIdleTimeUnits);
    ModelBuilder<T> modelBuilder=projectConnection.model(modelType);
    if (cancellationToken != null) {
      modelBuilder.withCancellationToken(new CancellationTokenAdapter(cancellationToken));
    }
    modelBuilder.get(new MultiResultHandler<T>(projectConnection,countDownLatch,firstFailure,new HierarchicalResultAdapter<T>(results)));
  }
  try {
    countDownLatch.await();
  }
 catch (  InterruptedException e) {
    UncheckedException.throwAsUncheckedException(e);
  }
  if (firstFailure.get() != null) {
    throw new CompositeBuildExceptionVersion1(firstFailure.get());
  }
  return new HashSet<T>(results);
}
