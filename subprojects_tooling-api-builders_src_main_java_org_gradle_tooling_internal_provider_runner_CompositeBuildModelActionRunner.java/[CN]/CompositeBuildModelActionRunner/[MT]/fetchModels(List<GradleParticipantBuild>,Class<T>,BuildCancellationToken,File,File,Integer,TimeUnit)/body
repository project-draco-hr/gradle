{
  final Set<T> results=new LinkedHashSet<T>();
  for (  GradleParticipantBuild participant : participantBuilds) {
    if (cancellationToken.isCancellationRequested()) {
      break;
    }
    ProjectConnection projectConnection=connect(participant,gradleUserHomeDir,daemonBaseDir,daemonMaxIdleTimeValue,daemonMaxIdleTimeUnits);
    ModelBuilder<T> modelBuilder=projectConnection.model(modelType);
    modelBuilder.withCancellationToken(new CancellationTokenAdapter(cancellationToken));
    if (cancellationToken.isCancellationRequested()) {
      projectConnection.close();
      break;
    }
    try {
      accumulate(results,modelBuilder.get());
    }
 catch (    GradleConnectionException e) {
      throw new CompositeBuildExceptionVersion1(e);
    }
 finally {
      projectConnection.close();
    }
  }
  return results;
}
