{
  final Map<Object,Object> results=new HashMap<Object,Object>();
  for (  GradleParticipantBuild participant : participantBuilds) {
    if (cancellationToken.isCancellationRequested()) {
      break;
    }
    ProjectConnection projectConnection=connect(participant,compositeParameters);
    try {
      if (modelType == BuildEnvironment.class) {
        Object projectIdentity=participant.getProjectDir() + "$:";
        fetchPerBuildModels(results,projectIdentity,projectConnection,modelType,cancellationToken,progressLoggerFactory);
      }
 else {
        fetchPerProjectModels(results,projectConnection,modelType,cancellationToken,progressLoggerFactory);
      }
    }
 catch (    GradleConnectionException e) {
      throw new CompositeBuildExceptionVersion1(e);
    }
 finally {
      projectConnection.close();
    }
  }
  return results;
}
