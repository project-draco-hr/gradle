{
  final Map<Object,Object> results=new HashMap<Object,Object>();
  for (  GradleParticipantBuild participant : participantBuilds) {
    if (cancellationToken.isCancellationRequested()) {
      break;
    }
    ProjectConnection projectConnection=connect(participant,compositeParameters);
    File rootDir=participant.getProjectDir();
    DefaultBuildIdentity buildIdentity=new DefaultBuildIdentity(rootDir);
    try {
      if (modelType == BuildEnvironment.class) {
        final BuildEnvironment buildEnvironment=fetchModel(projectConnection,BuildEnvironment.class,cancellationToken,progressLoggerFactory);
        Map<Object,Object> models=fetchPerProjectModels(projectConnection,GradleBuild.class,cancellationToken,progressLoggerFactory);
        for (        Map.Entry<Object,Object> entry : models.entrySet()) {
          entry.setValue(buildEnvironment);
        }
        results.putAll(models);
      }
 else {
        results.putAll(fetchPerProjectModels(projectConnection,modelType,cancellationToken,progressLoggerFactory));
      }
    }
 catch (    GradleConnectionException e) {
      results.put(new DefaultProjectIdentity(buildIdentity,rootDir,":"),e);
    }
 finally {
      projectConnection.close();
    }
  }
  return results;
}
