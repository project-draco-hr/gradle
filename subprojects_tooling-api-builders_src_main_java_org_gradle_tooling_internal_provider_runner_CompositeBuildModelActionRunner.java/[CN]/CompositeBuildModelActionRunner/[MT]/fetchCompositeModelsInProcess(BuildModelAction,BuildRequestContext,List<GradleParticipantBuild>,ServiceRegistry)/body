{
  GradleLauncherFactory gradleLauncherFactory=sharedServices.get(GradleLauncherFactory.class);
  BuildActionRunner runner=new SubscribableBuildActionRunner(new BuildModelsActionRunner());
  org.gradle.launcher.exec.BuildActionExecuter<BuildActionParameters> buildActionExecuter=new InProcessBuildActionExecuter(gradleLauncherFactory,runner);
  DefaultBuildRequestContext requestContext=createRequestContext(buildRequestContext);
  final List<Object> results=Lists.newArrayList();
  for (  GradleParticipantBuild participant : participantBuilds) {
    DefaultBuildActionParameters actionParameters=new DefaultBuildActionParameters(Collections.EMPTY_MAP,Collections.<String,String>emptyMap(),participant.getProjectDir(),LogLevel.INFO,DaemonUsage.EXPLICITLY_DISABLED,false,true,ClassPath.EMPTY);
    StartParameter startParameter=modelAction.getStartParameter().newInstance();
    startParameter.setProjectDir(participant.getProjectDir());
    ServiceRegistry buildScopedServices=new BuildSessionScopeServices(sharedServices,startParameter,ClassPath.EMPTY);
    BuildModelAction participantAction=new BuildModelAction(startParameter,modelAction.getModelName(),false,modelAction.getClientSubscriptions());
    try {
      Map<String,Object> result=Cast.uncheckedCast(buildActionExecuter.execute(participantAction,requestContext,actionParameters,buildScopedServices));
      for (      Map.Entry<String,Object> e : result.entrySet()) {
        String projectPath=e.getKey();
        Object modelValue=e.getValue();
        results.add(compositeModelResult(participant,projectPath,modelValue));
      }
    }
 catch (    BuildCancelledException e) {
      InternalBuildCancelledException buildCancelledException=new InternalBuildCancelledException(e.getCause());
      results.add(compositeModelResult(participant,null,buildCancelledException));
    }
catch (    ReportedException e) {
      results.add(compositeModelResult(participant,null,unwrap(e)));
    }
catch (    Exception e) {
      results.add(compositeModelResult(participant,null,e));
    }
  }
  return results;
}
