{
  final Map<Object,Object> results=new HashMap<Object,Object>();
  GradleLauncherFactory gradleLauncherFactory=sharedServices.get(GradleLauncherFactory.class);
  BuildActionRunner runner=new SubscribableBuildActionRunner(new BuildModelsActionRunner());
  org.gradle.launcher.exec.BuildActionExecuter<BuildActionParameters> buildActionExecuter=new InProcessBuildActionExecuter(gradleLauncherFactory,runner);
  DefaultBuildRequestContext requestContext=new DefaultBuildRequestContext(new DefaultBuildRequestMetaData(System.currentTimeMillis()),buildRequestContext.getCancellationToken(),buildRequestContext.getEventConsumer(),buildRequestContext.getOutputListener(),buildRequestContext.getErrorListener());
  for (  GradleParticipantBuild participant : participantBuilds) {
    DefaultBuildActionParameters actionParameters=new DefaultBuildActionParameters(Collections.EMPTY_MAP,Collections.<String,String>emptyMap(),participant.getProjectDir(),LogLevel.INFO,DaemonUsage.EXPLICITLY_DISABLED,false,true,ClassPath.EMPTY);
    StartParameter startParameter=modelAction.getStartParameter().newInstance();
    startParameter.setProjectDir(participant.getProjectDir());
    ServiceRegistry buildScopedServices=new BuildSessionScopeServices(sharedServices,startParameter,ClassPath.EMPTY);
    BuildModelAction participantAction=new BuildModelAction(startParameter,modelAction.getModelName(),false,modelAction.getClientSubscriptions());
    try {
      Map<String,Object> result=Cast.uncheckedCast(buildActionExecuter.execute(participantAction,requestContext,actionParameters,buildScopedServices));
      for (      Map.Entry<String,Object> e : result.entrySet()) {
        DefaultProjectIdentifier projectIdentifier=new DefaultProjectIdentifier(participant.getProjectDir(),e.getKey());
        Object modelValue=e.getValue();
        results.put(projectIdentifier,modelValue);
      }
    }
 catch (    Exception e) {
      File rootDir=participant.getProjectDir();
      BuildIdentifier buildIdentifier=new DefaultBuildIdentifier(rootDir);
      results.put(new DefaultProjectIdentifier(buildIdentifier,":"),e);
    }
  }
  return results;
}
