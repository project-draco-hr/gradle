{
  Iterator output=FileUtils.iterateFiles(compiledClassesDir,new String[]{"class"},true);
  ClassNameProvider nameProvider=new ClassNameProvider(compiledClassesDir);
  while (output.hasNext()) {
    File classFile=(File)output.next();
    String className=nameProvider.provideName(classFile);
    if (!className.startsWith(packagePrefix)) {
      continue;
    }
    try {
      ClassAnalysis analysis=new ClassDependenciesAnalyzer().getClassAnalysis(className,classFile);
      for (      String dependency : analysis.getClassDependencies()) {
        if (!dependency.equals(className) && dependency.startsWith(packagePrefix)) {
          getOrCreateDependentMapping(dependency).addClass(className);
        }
      }
      if (analysis.isDependentToAll()) {
        getOrCreateDependentMapping(className).setDependentToAll();
      }
    }
 catch (    IOException e) {
      throw new RuntimeException("Problems extracting class dependency from " + classFile,e);
    }
  }
}
