{
  Task task=project.getTasks().create("ideaModule",GenerateIdeaModule.class,new Action<GenerateIdeaModule>(){
    @Override public void execute(    final GenerateIdeaModule task){
      task.setDescription("Generates IDEA module files (IML)");
      IdeaModuleIml iml=new IdeaModuleIml(getTaskXmlTransformer(task),project.getProjectDir());
      final IdeaModule module=instantiator.newInstance(IdeaModule.class,project,iml);
      task.setModule(module);
      ideaModel.setModule(module);
      ConventionMapping conventionMapping=((IConventionAware)module).getConventionMapping();
      conventionMapping.map("sourceDirs",Callables.returning(Sets.newLinkedHashSet()));
      conventionMapping.map("name",new Callable<String>(){
        @Override public String call(){
          return project.getName();
        }
      }
);
      conventionMapping.map("contentRoot",new Callable<File>(){
        @Override public File call(){
          return project.getProjectDir();
        }
      }
);
      conventionMapping.map("testSourceDirs",Callables.returning(Sets.newLinkedHashSet()));
      conventionMapping.map("excludeDirs",new Callable<Set<File>>(){
        @Override public Set<File> call(){
          return Sets.newLinkedHashSet(Arrays.asList(project.file(".gradle"),project.getBuildDir()));
        }
      }
);
      conventionMapping.map("pathFactory",new Callable<PathFactory>(){
        @Override public PathFactory call(){
          PathFactory factory=new PathFactory();
          factory.addPathVariable("MODULE_DIR",task.getOutputFile().getParentFile());
          for (          Map.Entry<String,File> pathVariable : module.getPathVariables().entrySet()) {
            factory.addPathVariable(pathVariable.getKey(),pathVariable.getValue());
          }
          return factory;
        }
      }
);
    }
  }
);
  addWorker(task);
}
