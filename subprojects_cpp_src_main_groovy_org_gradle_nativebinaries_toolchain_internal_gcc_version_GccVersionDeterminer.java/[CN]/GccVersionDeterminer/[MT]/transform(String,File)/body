{
  BufferedReader reader=new BufferedReader(new StringReader(output));
  String line;
  Map<String,String> defines=new HashMap<String,String>();
  try {
    while ((line=reader.readLine()) != null) {
      Matcher matcher=DEFINE_PATTERN.matcher(line);
      if (!matcher.matches()) {
        return new BrokenResult(String.format("Could not determine GCC version: %s produced unexpected output.",gccBinary.getName()));
      }
      defines.put(matcher.group(1),matcher.group(2));
    }
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
  if (!defines.containsKey("__GNUC__")) {
    return new BrokenResult(String.format("Could not determine GCC version: %s produced unexpected output.",gccBinary.getName()));
  }
  if (defines.containsKey("__clang__")) {
    return new BrokenResult(String.format("XCode %s is a wrapper around Clang. Treating it as Clang and not GCC.",gccBinary.getName()));
  }
  int major=toInt(defines.get("__GNUC__"));
  int minor=toInt(defines.get("__GNUC_MINOR__"));
  int patch=toInt(defines.get("__GNUC_PATCHLEVEL__"));
  return new DefaultGccVersionResult(new VersionNumber(major,minor,patch,null));
}
