{
  CharsetDecoder decoder=charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE);
  CharBuffer charbuffer=CharBuffer.allocate(totalBytesUnread());
  ByteBuffer buf=null;
  boolean wasUnderflow=false;
  ByteBuffer nextBuf=null;
  boolean needsFlush=false;
  while (hasRemaining(nextBuf) || hasRemaining(buf) || prepareRead() != -1) {
    if (hasRemaining(buf)) {
      if (!wasUnderflow) {
        throw new IllegalStateException("Unexpected state. Buffer has remaining bytes without underflow in decoding.");
      }
      if (!hasRemaining(nextBuf) && prepareRead() != -1) {
        nextBuf=currentReadChunk.readToNioBuffer();
      }
      buf=ByteBuffer.allocate(buf.remaining() + 1).put(buf);
      buf.put(nextBuf.get());
      buf.flip();
    }
 else {
      if (hasRemaining(nextBuf)) {
        buf=nextBuf;
      }
 else       if (prepareRead() != -1) {
        buf=currentReadChunk.readToNioBuffer();
        if (!hasRemaining(buf)) {
          throw new IllegalStateException("Unexpected state. Buffer is empty.");
        }
      }
      nextBuf=null;
    }
    boolean endOfInput=!hasRemaining(nextBuf) && prepareRead() == -1;
    int bufRemainingBefore=buf.remaining();
    CoderResult result=decoder.decode(buf,charbuffer,false);
    if (bufRemainingBefore > buf.remaining()) {
      needsFlush=true;
    }
    if (endOfInput) {
      result=decoder.decode(ByteBuffer.allocate(0),charbuffer,true);
      if (!result.isUnderflow()) {
        result.throwException();
      }
      break;
    }
    wasUnderflow=result.isUnderflow();
  }
  if (needsFlush) {
    CoderResult result=decoder.flush(charbuffer);
    if (!result.isUnderflow()) {
      result.throwException();
    }
  }
  while (hasRemaining(buf)) {
    byte b=buf.get();
    try {
      getOutputStream().write(b);
    }
 catch (    IOException e) {
      throw UncheckedException.throwAsUncheckedException(e);
    }
  }
  charbuffer.flip();
  return charbuffer;
}
