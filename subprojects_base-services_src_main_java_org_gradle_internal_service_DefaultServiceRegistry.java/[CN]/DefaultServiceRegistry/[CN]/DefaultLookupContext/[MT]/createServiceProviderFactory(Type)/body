{
  if (serviceType instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)serviceType;
    if (parameterizedType.getRawType().equals(Factory.class)) {
      final Type typeArg=parameterizedType.getActualTypeArguments()[0];
      if (typeArg instanceof Class) {
        return new BiFunction<ServiceProvider,LookupContext,Provider>(){
          @Override public ServiceProvider apply(          LookupContext lookupContext,          Provider provider){
            return provider.getFactory(lookupContext,(Class)typeArg);
          }
        }
;
      }
      if (typeArg instanceof WildcardType) {
        final WildcardType wildcardType=(WildcardType)typeArg;
        if (wildcardType.getLowerBounds().length == 1 && wildcardType.getUpperBounds().length == 1) {
          if (wildcardType.getLowerBounds()[0] instanceof Class && wildcardType.getUpperBounds()[0].equals(Object.class)) {
            return new BiFunction<ServiceProvider,LookupContext,Provider>(){
              @Override public ServiceProvider apply(              LookupContext lookupContext,              Provider provider){
                return provider.getFactory(lookupContext,(Class<?>)wildcardType.getLowerBounds()[0]);
              }
            }
;
          }
        }
        if (wildcardType.getLowerBounds().length == 0 && wildcardType.getUpperBounds().length == 1) {
          if (wildcardType.getUpperBounds()[0] instanceof Class) {
            return new BiFunction<ServiceProvider,LookupContext,Provider>(){
              @Override public ServiceProvider apply(              LookupContext lookupContext,              Provider provider){
                return provider.getFactory(lookupContext,(Class<?>)wildcardType.getUpperBounds()[0]);
              }
            }
;
          }
        }
      }
    }
  }
  final TypeSpec serviceTypeSpec=toSpec(serviceType);
  return new BiFunction<ServiceProvider,LookupContext,Provider>(){
    @Override public ServiceProvider apply(    LookupContext lookupContext,    Provider provider){
      return provider.getService(lookupContext,serviceTypeSpec);
    }
  }
;
}
