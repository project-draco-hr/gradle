{
  if (!Plugin.class.isAssignableFrom(pluginClass) && new ModelRuleSourceDetector().getDeclaredSources(pluginClass).size() > 0) {
    throw new IllegalArgumentException(String.format("'%s' is a rule source only type, use 'type' key instead of 'plugin' key to apply it via PluginAware.apply()",pluginClass.getName()));
  }
  for (  Object target : targets) {
    if (target instanceof PluginAware) {
      try {
        ((PluginAware)target).getPlugins().apply(pluginClass);
      }
 catch (      Exception e) {
        throw new PluginApplicationException("class '" + pluginClass.getName() + "'",e);
      }
    }
 else {
      throw new UnsupportedOperationException(String.format("Cannot apply plugin of class '%s' to '%s' (class: %s) as it does not implement PluginAware",pluginClass.getName(),target.toString(),target.getClass().getName()));
    }
  }
}
