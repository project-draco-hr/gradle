{
  ModelType<R> type=extractionContext.getType();
  List<ModelType<?>> typeVariables=type.getTypeVariables();
  if (typeVariables.isEmpty()) {
    throw new InvalidManagedModelElementTypeException(extractionContext,String.format("type parameter of %s has to be specified",ManagedSet.class.getName()));
  }
  if (type.isHasWildcardTypeVariables()) {
    throw new InvalidManagedModelElementTypeException(extractionContext,String.format("type parameter of %s cannot be a wildcard",ManagedSet.class.getName()));
  }
  if (!type.getRawClass().equals(ManagedSet.class)) {
    throw new InvalidManagedModelElementTypeException(extractionContext,String.format("subtyping %s is not supported",ManagedSet.class.getName()));
  }
  ModelType<?> elementType=typeVariables.get(0);
  if (MANAGED_SET_MODEL_TYPE.isAssignableFrom(elementType)) {
    throw new InvalidManagedModelElementTypeException(extractionContext,String.format("%1$s cannot be used as type parameter of %1$s",ManagedSet.class.getName()));
  }
  ModelSchema<R> schema=createSchema(extractionContext,cache);
  return new ModelSchemaExtractionResult<R>(schema,ImmutableList.of(extractionContext.child(elementType,"element type")));
}
