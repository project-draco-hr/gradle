{
  if (rootProjectDirectory == null) {
    throw new IllegalArgumentException("rootProjectDirectory is null!");
  }
  if (!rootProjectDirectory.exists()) {
    throw new IllegalArgumentException("rootProjectDirectory does not exists!");
  }
  if (!rootProjectDirectory.isDirectory()) {
    throw new IllegalArgumentException("rootProjectDirectory is not a directory!");
  }
  if (directoryToProcess == null) {
    throw new IllegalArgumentException("directoryToProcess is null!");
  }
  if (!directoryToProcess.exists()) {
    throw new IllegalArgumentException("directoryToProcess does not exists!");
  }
  if (!directoryToProcess.isDirectory()) {
    throw new IllegalArgumentException("directoryToProcess is not a directory!");
  }
  final IoFactory ioFactory=new DefaultIoFactory();
  final DigesterCache digesterCache=DigestObjectFactory.createShaDigesterCache();
  final StateFileUtil stateFileUtil=new StateFileUtil(rootProjectDirectory,directoryToProcess,dotGradleStatesDirectory,digesterCache.getDigesterFactory(),ioFactory);
  final DirectoryStateBuilder directoryStateBuilder=new DirectoryStateBuilder(stateFileUtil);
  final DirectoryListFileCreator directoryListFileCreator=new DirectoryListFileCreator(stateFileUtil);
  final BlockingQueue<StateChangeEvent> stateChangeEventQueue=new ArrayBlockingQueue<StateChangeEvent>(stateChangeEventQueueSize);
  final BlockingQueueItemProducer<StateChangeEvent> changeProcessorEventProducer=new BlockingQueueItemProducer<StateChangeEvent>(stateChangeEventQueue,stateChangeEventQueuePollTimeout,TimeUnit.MILLISECONDS);
  final List<DirectoryStateDigestComparator> directoryStateDigestComparators=new ArrayList<DirectoryStateDigestComparator>();
  final StateChangeEventFactory stateChangeEventFactory=new StateChangeEventFactory();
  final StateFileChangeListenerUtil stateFileChangeListenerUtil=new StateFileChangeListenerUtil(changeProcessorEventProducer,stateChangeEventFactory);
  return new DefaultDirectoryStateChangeDetecter(directoryToProcess,ioFactory,directoryStateBuilder,digesterCache,digesterUtil,directoryListFileCreator,stateFileUtil,stateChangeEventQueue,changeProcessorEventProducer,directoryStateDigestComparators,stateFileChangeListenerUtil,stateComparator);
}
