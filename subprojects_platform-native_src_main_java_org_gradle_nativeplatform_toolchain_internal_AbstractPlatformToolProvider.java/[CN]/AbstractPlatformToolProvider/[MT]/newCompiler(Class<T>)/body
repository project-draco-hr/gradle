{
  if (CppCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createCppCompiler());
  }
  if (CppPCHCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createCppPCHCompiler());
  }
  if (CCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createCCompiler());
  }
  if (CPCHCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createCPCHCompiler());
  }
  if (ObjectiveCppCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createObjectiveCppCompiler());
  }
  if (ObjectiveCppPCHCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createObjectiveCppPCHCompiler());
  }
  if (ObjectiveCCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createObjectiveCCompiler());
  }
  if (ObjectiveCPCHCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createObjectiveCPCHCompiler());
  }
  if (WindowsResourceCompileSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createWindowsResourceCompiler());
  }
  if (AssembleSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createAssembler());
  }
  if (LinkerSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createLinker());
  }
  if (StaticLibraryArchiverSpec.class.isAssignableFrom(spec)) {
    return CompilerUtil.castCompiler(createStaticLibraryArchiver());
  }
  throw new IllegalArgumentException(String.format("Don't know how to compile from a spec of type %s.",spec.getClass().getSimpleName()));
}
