{
  if (implicitEnd) {
    token=Token.End;
    implicitEnd=false;
    return true;
  }
  if (scanner.isEmpty()) {
    token=null;
    value=null;
    return false;
  }
  scanner.mark();
  while (!scanner.isEmpty()) {
    if (inlineTag == null && scanner.lookingAt(HTML_ELEMENT)) {
      break;
    }
    if (inlineTag == null && scanner.lookingAt(HTML_ENCODED_CHAR)) {
      break;
    }
    if (inlineTag == null && scanner.lookingAt(HTML_ENTITY)) {
      break;
    }
    if (scanner.lookingAt(TAG)) {
      break;
    }
    if (inlineTag != null && scanner.lookingAt('}')) {
      break;
    }
    scanner.next();
  }
  String region=scanner.region();
  if (region.length() > 0) {
    token=Token.Text;
    value=region;
    return true;
  }
  if (inlineTag == null && scanner.lookingAt(HTML_ELEMENT)) {
    scanner.next();
    token=Token.StartElement;
    if (scanner.lookingAt('/')) {
      token=Token.End;
      scanner.next();
    }
    scanner.mark();
    scanner.find(END_ELEMENT_NAME);
    if (scanner.lookingAt('/')) {
      implicitEnd=true;
    }
    value=scanner.region().toLowerCase();
    scanner.skip(END_ELEMENT_NAME);
    return true;
  }
  if (inlineTag == null && scanner.lookingAt(HTML_ENCODED_CHAR)) {
    scanner.next(2);
    scanner.mark();
    scanner.find(';');
    token=Token.Text;
    value=new String(new char[]{(char)Integer.parseInt(scanner.region())});
    scanner.next();
    return true;
  }
  if (inlineTag == null && scanner.lookingAt(HTML_ENTITY)) {
    scanner.next();
    scanner.mark();
    scanner.find(';');
    token=Token.Text;
    value=ENTITIES.get(scanner.region().toLowerCase());
    scanner.next();
    return true;
  }
  if (scanner.lookingAt(TAG)) {
    scanner.next(2);
    scanner.mark();
    scanner.find(END_TAG_NAME);
    token=Token.StartTag;
    value=scanner.region();
    inlineTag=value;
    scanner.skip(WHITESPACE_WITH_EOL);
    return true;
  }
  if (inlineTag != null && scanner.lookingAt('}')) {
    token=Token.End;
    value=inlineTag;
    inlineTag=null;
    scanner.next();
    return true;
  }
  throw new IllegalStateException();
}
