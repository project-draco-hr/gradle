{
  final RuntimeException failure=new RuntimeException();
  context.checking(new Expectations(){
{
      allowing(state).getExecuted();
      will(returnValue(false));
      Sequence sequence=context.sequence("seq");
      one(listener).beforeEvaluate(project);
      inSequence(sequence);
      one(state).setExecuting(true);
      inSequence(sequence);
      one(delegate).evaluate(project,state);
      will(throwException(failure));
      inSequence(sequence);
      one(state).setExecuting(false);
      inSequence(sequence);
      one(state).executed();
      inSequence(sequence);
      one(state).getFailure();
      will(returnValue(null));
      one(listener).afterEvaluate(project,null);
      inSequence(sequence);
    }
  }
);
  try {
    evaluator.evaluate(project,state);
    fail();
  }
 catch (  RuntimeException e) {
    assertThat(e,Matchers.sameInstance(failure));
  }
}
