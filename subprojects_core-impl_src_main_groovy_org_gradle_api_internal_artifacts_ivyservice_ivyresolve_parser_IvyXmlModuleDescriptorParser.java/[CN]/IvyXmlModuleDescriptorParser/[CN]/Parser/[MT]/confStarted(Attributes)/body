{
  String conf=substitute(attributes.getValue("name"));
switch (state) {
case State.CONF:
    Configuration.Visibility visibility=Configuration.Visibility.getVisibility(elvis(substitute(attributes.getValue("visibility")),"public"));
  String description=substitute(attributes.getValue("description"));
String[] extend=substitute(attributes.getValue("extends")) == null ? null : substitute(attributes.getValue("extends")).split(",");
String transitiveValue=attributes.getValue("transitive");
boolean transitive=(transitiveValue == null) || Boolean.valueOf(attributes.getValue("transitive"));
String deprecated=attributes.getValue("deprecated");
Configuration configuration=new Configuration(conf,visibility,description,extend,transitive,deprecated);
ExtendableItemHelper.fillExtraAttributes(settings,configuration,attributes,new String[]{"name","visibility","extends","transitive","description","deprecated"});
getMd().addConfiguration(configuration);
break;
case State.PUB:
if ("*".equals(conf)) {
String[] confs=getMd().getConfigurationsNames();
for (String confName : confs) {
artifact.addConfiguration(confName);
getMd().addArtifact(confName,artifact);
}
}
 else {
artifact.addConfiguration(conf);
getMd().addArtifact(conf,artifact);
}
break;
case State.DEP:
this.conf=conf;
String mappeds=substitute(attributes.getValue("mapped"));
if (mappeds != null) {
String[] mapped=mappeds.split(",");
for (String depConf : mapped) {
dd.addDependencyConfiguration(conf,depConf.trim());
}
}
break;
case State.DEP_ARTIFACT:
case State.ARTIFACT_INCLUDE:
case State.ARTIFACT_EXCLUDE:
addConfiguration(conf);
break;
default :
if (validate) {
addError("conf tag found in invalid tag: " + state);
}
break;
}
}
