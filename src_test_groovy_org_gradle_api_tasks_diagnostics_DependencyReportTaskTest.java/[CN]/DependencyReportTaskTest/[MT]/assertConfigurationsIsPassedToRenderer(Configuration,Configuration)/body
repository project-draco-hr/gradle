{
  final DependencyReportRenderer renderer=context.mock(DependencyReportRenderer.class);
  final ResolvedConfiguration resolvedConfiguration1=context.mock(ResolvedConfiguration.class,"ResolvedConf1");
  final ResolvedConfiguration resolvedConfiguration2=context.mock(ResolvedConfiguration.class,"ResolvedConf2");
  task.setRenderer(renderer);
  task.setConfigurations(WrapUtil.toSet(configuration1,configuration2));
  context.checking(new Expectations(){
{
      allowing(configuration1).getName();
      will(returnValue("config1"));
      allowing(configuration2).getName();
      will(returnValue("config2"));
      Sequence resolve=context.sequence("resolve");
      Sequence render=context.sequence("render");
      one(configuration1).getResolvedConfiguration();
      inSequence(resolve);
      will(returnValue(resolvedConfiguration1));
      one(renderer).startConfiguration(configuration1);
      inSequence(render);
      one(renderer).render(resolvedConfiguration1);
      inSequence(render);
      one(renderer).completeConfiguration(configuration1);
      inSequence(render);
      one(configuration2).getResolvedConfiguration();
      inSequence(resolve);
      will(returnValue(resolvedConfiguration2));
      one(renderer).startConfiguration(configuration2);
      inSequence(render);
      one(renderer).render(resolvedConfiguration2);
      inSequence(render);
      one(renderer).completeConfiguration(configuration2);
      inSequence(render);
    }
  }
);
  task.generate(project);
}
