{
  final File binariesDir=new File(projectLayout.getBuildDir(),"jars");
  final File classesDir=new File(projectLayout.getBuildDir(),"classes");
  jvmLibrary.getBinaries().withType(JarBinarySpecInternal.class).beforeEach(new Action<JarBinarySpecInternal>(){
    @Override public void execute(    JarBinarySpecInternal jarBinary){
      String jarBinaryName=jarBinary.getProjectScopedName();
      int idx=jarBinaryName.lastIndexOf("Jar");
      String apiJarBinaryName=idx > 0 ? jarBinaryName.substring(0,idx) + "ApiJar" : jarBinaryName + "ApiJar";
      String libraryName=jarBinary.getId().getLibraryName();
      File outputDir=new File(classesDir,jarBinaryName);
      jarBinary.setClassesDir(outputDir);
      jarBinary.setResourcesDir(outputDir);
      jarBinary.setJarFile(new File(binariesDir,String.format("%s%s%s.jar",jarBinaryName,File.separator,libraryName)));
      jarBinary.setApiJarFile(new File(binariesDir,String.format("%s%s%s.jar",apiJarBinaryName,File.separator,libraryName)));
      jarBinary.setToolChain(toolChains.getForPlatform(jarBinary.getTargetPlatform()));
    }
  }
);
}
