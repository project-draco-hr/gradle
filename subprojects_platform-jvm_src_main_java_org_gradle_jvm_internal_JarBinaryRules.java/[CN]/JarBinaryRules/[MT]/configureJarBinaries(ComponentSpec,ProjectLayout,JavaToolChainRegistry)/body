{
  jvmLibrary.getBinaries().withType(JvmBinarySpec.class).beforeEach(new Action<JvmBinarySpec>(){
    @Override public void execute(    JvmBinarySpec jarBinary){
      BinaryNamingScheme namingScheme=((BinarySpecInternal)jarBinary).getNamingScheme();
      jarBinary.setClassesDir(namingScheme.getOutputDirectory(projectLayout.getBuildDir(),"classes"));
      jarBinary.setResourcesDir(namingScheme.getOutputDirectory(projectLayout.getBuildDir(),"resources"));
    }
  }
);
  jvmLibrary.getBinaries().withType(JarBinarySpecInternal.class).beforeEach(new Action<JarBinarySpecInternal>(){
    @Override public void execute(    JarBinarySpecInternal jarBinary){
      String libraryName=jarBinary.getId().getLibraryName();
      File jarsDir=jarBinary.getNamingScheme().getOutputDirectory(projectLayout.getBuildDir(),"jars");
      jarBinary.setJarFile(new File(jarsDir,String.format("%s.jar",libraryName)));
      jarBinary.setApiJarFile(new File(jarsDir,String.format("api/%s.jar",libraryName)));
      jarBinary.setToolChain(toolChains.getForPlatform(jarBinary.getTargetPlatform()));
    }
  }
);
}
