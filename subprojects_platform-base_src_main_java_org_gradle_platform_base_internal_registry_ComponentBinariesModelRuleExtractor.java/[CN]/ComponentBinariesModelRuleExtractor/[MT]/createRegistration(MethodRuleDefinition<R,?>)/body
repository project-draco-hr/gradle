{
  try {
    RuleMethodDataCollector dataCollector=new RuleMethodDataCollector();
    visitAndVerifyMethodSignature(dataCollector,ruleDefinition);
    Class<S> binaryType=dataCollector.getParameterType(BinarySpec.class);
    Class<C> componentType=dataCollector.getParameterType(ComponentSpec.class);
    ModelReference<CollectionBuilder<BinarySpec>> subject=ModelReference.of(ModelPath.path("binaries"),DefaultCollectionBuilder.typeOf(ModelType.of(BinarySpec.class)));
    ComponentBinariesRule<R,S,C> componentBinariesRule=new ComponentBinariesRule<R,S,C>(subject,componentType,binaryType,ruleDefinition);
    return new ExtractedModelAction(ModelActionRole.Mutate,ImmutableList.of(ComponentModelBasePlugin.class),componentBinariesRule);
  }
 catch (  InvalidModelException e) {
    throw invalidModelRule(ruleDefinition,e);
  }
}
