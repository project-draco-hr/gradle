{
  try {
    RuleMethodDataCollector dataCollector=new RuleMethodDataCollector();
    visitAndVerifyMethodSignature(dataCollector,ruleDefinition);
    Class<S> binaryType=dataCollector.getParameterType(BinarySpec.class);
    Class<? extends ComponentSpec> componentType=dataCollector.getParameterType(ComponentSpec.class);
    dependencies.add(ComponentModelBasePlugin.class);
    ModelReference<BinaryContainer> subject=ModelReference.of(ModelPath.path("binaries"),ModelType.of(BinaryContainer.class));
    ComponentBinariesRule<R,S> componentBinariesRule=new ComponentBinariesRule<R,S>(subject,componentType,binaryType,ruleDefinition);
    return new ModelMutatorRegistration(ModelActionRole.Mutate,componentBinariesRule);
  }
 catch (  InvalidModelException e) {
    throw invalidModelRule(ruleDefinition,e);
  }
}
