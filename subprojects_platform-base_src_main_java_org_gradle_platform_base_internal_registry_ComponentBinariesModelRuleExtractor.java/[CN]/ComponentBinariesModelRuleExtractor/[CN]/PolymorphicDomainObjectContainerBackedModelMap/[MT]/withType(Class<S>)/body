{
  if (type.equals(elementClass)) {
    return uncheckedCast(this);
  }
  if (elementClass.isAssignableFrom(type)) {
    Class<? extends T> castType=uncheckedCast(type);
    ModelMap<? extends T> subType=toSubtype(castType);
    return uncheckedCast(subType);
  }
  return new DefaultModelMap<S>(ModelType.of(type),sourceDescriptor,modelNode,new ChildNodeCreatorStrategy<S>(){
    @Override public <D extends S>ModelCreator creator(    MutableModelNode parentNode,    ModelRuleDescriptor sourceDescriptor,    ModelType<D> type,    String name){
      throw new IllegalArgumentException(String.format("Cannot create an item of type %s as this is not a subtype of %s.",type,elementType.toString()));
    }
  }
);
}
