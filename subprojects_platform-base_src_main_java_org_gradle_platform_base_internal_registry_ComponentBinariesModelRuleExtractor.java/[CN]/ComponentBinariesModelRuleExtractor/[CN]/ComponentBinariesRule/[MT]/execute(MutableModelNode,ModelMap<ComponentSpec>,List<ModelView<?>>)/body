{
  TriAction<MutableModelNode,C,List<ModelView<?>>> action=new TriAction<MutableModelNode,C,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode componentModelNode,    C component,    List<ModelView<?>> componentRuleInputs){
      ComponentSpecInternal componentSpecInternal=uncheckedCast(componentModelNode.getPrivateData());
      MutableModelNode binariesNode=componentModelNode.getLink("binaries");
      PolymorphicDomainObjectContainerBackedModelMap<BinarySpec> binarySpecs=new PolymorphicDomainObjectContainerBackedModelMap<BinarySpec>(componentSpecInternal.getBinaries(),ModelType.of(BinarySpec.class),binariesNode,getDescriptor());
      invoke(componentRuleInputs,binarySpecs.withType(binaryType),componentSpecInternal);
    }
  }
;
  modelNode.applyToAllLinks(ModelActionRole.Mutate,TriActionBackedModelAction.of(ModelReference.of(ModelType.of(componentType)),getDescriptor(),getInputs(),action));
}
