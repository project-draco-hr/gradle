{
  checkAvailable();
  return new PlatformToolChain(){
    public <T extends BinaryToolSpec>Compiler<T> createCppCompiler(){
      CommandLineTool<CppCompileSpec> commandLineTool=commandLineTool(ToolType.CPP_COMPILER);
      return (Compiler<T>)new CppCompiler(commandLineTool,true);
    }
    public <T extends BinaryToolSpec>Compiler<T> createCCompiler(){
      CommandLineTool<CCompileSpec> commandLineTool=commandLineTool(ToolType.C_COMPILER);
      return (Compiler<T>)new CCompiler(commandLineTool,true);
    }
    public <T extends BinaryToolSpec>Compiler<T> createAssembler(){
      CommandLineTool<AssembleSpec> commandLineTool=commandLineTool(ToolType.ASSEMBLER);
      return (Compiler<T>)new Assembler(commandLineTool);
    }
    public <T extends LinkerSpec>Compiler<T> createLinker(){
      CommandLineTool<LinkerSpec> commandLineTool=commandLineTool(ToolType.LINKER);
      return (Compiler<T>)new GccLinker(commandLineTool,true);
    }
    public <T extends StaticLibraryArchiverSpec>Compiler<T> createStaticLibraryArchiver(){
      CommandLineTool<StaticLibraryArchiverSpec> commandLineTool=commandLineTool(ToolType.STATIC_LIB_ARCHIVER);
      return (Compiler<T>)new ArStaticLibraryArchiver(commandLineTool);
    }
    private <T extends BinaryToolSpec>CommandLineTool<T> commandLineTool(    ToolType key){
      return new CommandLineTool<T>(key.getToolName(),tools.locate(key),execActionFactory);
    }
  }
;
}
