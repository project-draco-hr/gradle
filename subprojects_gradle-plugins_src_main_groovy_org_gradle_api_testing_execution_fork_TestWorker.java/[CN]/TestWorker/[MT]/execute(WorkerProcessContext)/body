{
  Policy.setPolicy(new TestPolicy(Policy.getPolicy()));
  LOGGER.info("{} executing tests.",workerProcessContext.getDisplayName());
  completed=new CountDownLatch(1);
  ObjectConnection serverConnection=workerProcessContext.getServerConnection();
  IdGenerator<Object> idGenerator=new CompositeIdGenerator(workerProcessContext.getWorkerId(),new LongIdGenerator());
  TestClassProcessor targetProcessor=factory.create(idGenerator);
  targetProcessor=new WorkerTestClassProcessor(targetProcessor,idGenerator.generateId(),workerProcessContext.getDisplayName(),new TrueTimeProvider());
  ContextClassLoaderProxy<TestClassProcessor> proxy=new ContextClassLoaderProxy<TestClassProcessor>(TestClassProcessor.class,targetProcessor,workerProcessContext.getApplicationClassLoader());
  processor=proxy.getSource();
  TestResultProcessor resultProcessor=serverConnection.addOutgoing(TestResultProcessor.class);
  resultProcessor=new AttachParentTestResultProcessor(resultProcessor);
  ThreadSafeProxy<TestResultProcessor> resultProcessorProxy=new ThreadSafeProxy<TestResultProcessor>(TestResultProcessor.class,resultProcessor);
  processor.startProcessing(resultProcessorProxy.getSource());
  serverConnection.addIncoming(TestClassProcessor.class,this);
  try {
    completed.await();
  }
 catch (  InterruptedException e) {
    throw new GradleException(e);
  }
  LOGGER.info("{} finished executing tests.",workerProcessContext.getDisplayName());
}
