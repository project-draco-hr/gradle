{
  DefaultExecutorFactory executorFactory=new DefaultExecutorFactory();
  TcpIncomingConnector incomingConnector=new TcpIncomingConnector(executorFactory,getClass().getClassLoader());
  final CompletionHandler finished=new CompletionHandler();
  LOGGER.lifecycle("Awaiting requests.");
  URI uri=incomingConnector.accept(new Action<ConnectEvent<Connection<Object>>>(){
    public void execute(    ConnectEvent<Connection<Object>> connectionConnectEvent){
      try {
        finished.onStartActivity();
        handler.handle(connectionConnectEvent.getConnection(),finished);
      }
  finally {
        finished.onActivityComplete();
        connectionConnectEvent.getConnection().stop();
      }
    }
  }
);
  try {
    File registryFile=getRegistryFile();
    registryFile.getParentFile().mkdirs();
    FileOutputStream outputStream=new FileOutputStream(registryFile);
    try {
      outputStream.getChannel().lock();
      DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
      dataOutputStream.writeUTF(uri.toString());
      dataOutputStream.flush();
    }
  finally {
      outputStream.close();
    }
  }
 catch (  IOException e) {
    throw UncheckedException.asUncheckedException(e);
  }
  boolean stopped=finished.awaitStop();
  if (!stopped) {
    LOGGER.lifecycle("Time-out waiting for requests. Stopping.");
  }
  new CompositeStoppable(incomingConnector,executorFactory).stop();
  getRegistryFile().delete();
}
