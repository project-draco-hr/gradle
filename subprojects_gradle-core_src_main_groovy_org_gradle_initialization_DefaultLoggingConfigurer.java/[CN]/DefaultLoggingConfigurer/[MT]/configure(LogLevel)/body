{
  if (applied) {
    return;
  }
  applied=true;
  SLF4JBridgeHandler.install();
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  lc.reset();
  ch.qos.logback.classic.Logger rootLogger=lc.getLogger("ROOT");
  stderrConsoleAppender.setContext(lc);
  stderrConsoleAppender.setTarget("System.err");
  stderrConsoleAppender.addFilter(createLevelFilter(lc,Level.ERROR,FilterReply.ACCEPT,FilterReply.DENY));
  Level level=Level.INFO;
  stdoutConsoleAppender.setContext(lc);
  setLayouts(logLevel,stderrConsoleAppender,stdoutConsoleAppender,lc);
  MarkerFilter quietFilter=new MarkerFilter(FilterReply.DENY,Logging.QUIET);
  stdoutConsoleAppender.addFilter(quietFilter);
  if (!(logLevel == LogLevel.QUIET)) {
    quietFilter.setOnMismatch(FilterReply.NEUTRAL);
    if (logLevel == LogLevel.DEBUG) {
      level=Level.DEBUG;
      stdoutConsoleAppender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.ACCEPT,FilterReply.NEUTRAL));
      stdoutConsoleAppender.addFilter(createLevelFilter(lc,Level.DEBUG,FilterReply.ACCEPT,FilterReply.NEUTRAL));
    }
 else {
      if (logLevel == LogLevel.INFO) {
        level=Level.INFO;
        stdoutConsoleAppender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.ACCEPT,FilterReply.NEUTRAL));
      }
 else {
        stdoutConsoleAppender.addFilter(new MarkerFilter(Logging.LIFECYCLE,Logging.PROGRESS));
      }
    }
    stdoutConsoleAppender.addFilter(createLevelFilter(lc,Level.WARN,FilterReply.ACCEPT,FilterReply.DENY));
  }
  rootLogger.addAppender(stdoutConsoleAppender);
  stdoutConsoleAppender.start();
  rootLogger.addAppender(stderrConsoleAppender);
  stderrConsoleAppender.start();
  Message.setDefaultLogger(new IvyLoggingAdaper());
  rootLogger.setLevel(level);
}
