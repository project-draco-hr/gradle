{
  final IvySettings ivySettingsDummy=new IvySettings();
  final EventManager ivyEventManagerDummy=new EventManager();
  final ConfigurationInternal configuration=context.mock(ConfigurationInternal.class);
  final Set<Configuration> configurations=createConfiguration();
  final File someDescriptorDestination=new File("somePath");
  final List<DependencyResolver> publishResolversDummy=createPublishResolversDummy();
  final Module moduleDummy=context.mock(Module.class,"moduleForResolve");
  final IvyBackedArtifactPublisher ivyService=createIvyService();
  setUpIvyFactory(ivySettingsDummy,ivyEventManagerDummy);
  setUpForPublish(configurations,publishResolversDummy,moduleDummy,ivySettingsDummy);
  final Set<String> expectedConfigurations=Configurations.getNames(configurations,true);
  context.checking(new Expectations(){
{
      allowing(configuration).getHierarchy();
      will(returnValue(configurations));
      allowing(configuration).getModule();
      will(returnValue(moduleDummy));
      allowing(resolverProvider).getResolvers();
      will(returnValue(publishResolversDummy));
      allowing(configuration).getResolutionStrategy();
      will(returnValue(new DefaultResolutionStrategy()));
      one(fileModuleDescriptorMock).toIvyFile(someDescriptorDestination);
      one(ivyDependencyPublisherMock).publish(expectedConfigurations,publishResolversDummy,publishModuleDescriptorDummy,someDescriptorDestination,ivyEventManagerDummy);
    }
  }
);
  ivyService.publish(configuration,someDescriptorDestination);
}
