{
  boolean isConventionAware=type.getAnnotation(NoConventionMapping.class) == null;
  boolean extensible=JavaReflectionUtil.getAnnotation(type,NonExtensible.class) == null;
  ClassMetaData classMetaData=new ClassMetaData(extensible,isConventionAware);
  for (Class<?> current=type; current != Object.class; current=current.getSuperclass()) {
    inspectType(current,classMetaData);
  }
  attachSetMethods(classMetaData);
  findMissingClosureOverloads(classMetaData);
  classMetaData.complete();
  return classMetaData;
}
