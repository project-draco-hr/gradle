{
  ModelRegistration taskFactoryRegistration=ModelRegistrations.serviceInstance(ModelReference.of("taskFactory",ITaskFactory.class),services.get(ITaskFactory.class)).descriptor("Project.<init>.taskFactory").ephemeral(true).build();
  modelRegistry.registerOrReplace(taskFactoryRegistration);
  modelRegistry.registerOrReplace(ModelRegistrations.serviceInstance(ModelReference.of("serviceRegistry",ServiceRegistry.class),services).descriptor("Project.<init>.serviceRegistry()").ephemeral(true).build());
  ModelSchemaStore schemaStore=services.get(ModelSchemaStore.class);
  ManagedProxyFactory proxyFactory=services.get(ManagedProxyFactory.class);
  NodeInitializerRegistry nodeInitializerRegistry=new DefaultNodeInitializerRegistry(schemaStore,proxyFactory);
  modelRegistry.registerOrReplace(ModelRegistrations.serviceInstance(ModelReference.of("nodeInitializerRegistry",NodeInitializerRegistry.class),nodeInitializerRegistry).descriptor("Project.<init>.nodeInitializerRegistry()").ephemeral(true).build());
  modelRegistry.registerOrReplace(ModelRegistrations.unmanagedInstance(ModelReference.of("buildDir",File.class),new Factory<File>(){
    public File create(){
      return getBuildDir();
    }
  }
).descriptor("Project.<init>.buildDir()").ephemeral(true).hidden(true).build());
  modelRegistry.registerOrReplace(ModelRegistrations.bridgedInstance(ModelReference.of("projectIdentifier",ProjectIdentifier.class),this).descriptor("Project.<init>.projectIdentifier()").ephemeral(true).hidden(true).build());
  modelRegistry.registerOrReplace(ModelRegistrations.bridgedInstance(ModelReference.of("extensionContainer",ExtensionContainer.class),getExtensions()).descriptor("Project.<init>.extensions()").ephemeral(true).hidden(true).build());
}
