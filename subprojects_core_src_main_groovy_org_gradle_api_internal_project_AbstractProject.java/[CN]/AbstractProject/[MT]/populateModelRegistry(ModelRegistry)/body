{
  ModelPath taskFactoryPath=ModelPath.path("taskFactory");
  ModelCreator taskFactoryCreator=ModelCreators.bridgedInstance(ModelReference.of(taskFactoryPath,ITaskFactory.class),services.get(ITaskFactory.class)).descriptor("Project.<init>.taskFactory").ephemeral(true).build();
  ModelNode taskFactoryNode=modelRegistry.node(taskFactoryPath);
  if (taskFactoryNode == null) {
    modelRegistry.create(taskFactoryCreator);
  }
 else {
    modelRegistry.replace(taskFactoryCreator);
  }
  modelRegistry.create(ModelCreators.bridgedInstance(ModelReference.of("serviceRegistry",ServiceRegistry.class),services).descriptor("Project.<init>.serviceRegistry()").build());
  modelRegistry.create(ModelCreators.unmanagedInstance(ModelReference.of("buildDir",File.class),new Factory<File>(){
    public File create(){
      return getBuildDir();
    }
  }
).descriptor("Project.<init>.buildDir()").build());
  modelRegistry.create(ModelCreators.bridgedInstance(ModelReference.of("projectIdentifier",ProjectIdentifier.class),this).descriptor("Project.<init>.projectIdentifier()").build());
  modelRegistry.create(ModelCreators.bridgedInstance(ModelReference.of("extensions",ExtensionContainer.class),getExtensions()).descriptor("Project.<init>.extensions()").build());
}
