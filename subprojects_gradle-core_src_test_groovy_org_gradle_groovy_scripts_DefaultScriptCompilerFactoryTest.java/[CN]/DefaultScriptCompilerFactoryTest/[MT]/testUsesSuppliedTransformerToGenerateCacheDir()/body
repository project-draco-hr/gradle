{
  final Transformer transformer=context.mock(Transformer.class);
  final File expectedCacheDir=new TestFile(expectedScriptCacheDir.getParentFile(),"transformer_Script").createDir();
  context.checking(new Expectations(){
{
      allowing(transformer).getId();
      will(returnValue("transformer"));
      one(cacheRepositoryMock).getGlobalCache("scripts/class-name",expectedCacheProperties);
      will(returnValue(cacheMock));
      allowing(cacheMock).isValid();
      will(returnValue(true));
      one(scriptCompilationHandlerMock).loadScriptFromDir(source,testClassLoader,expectedCacheDir,expectedScriptBaseClass);
      will(returnValue(expectedScript));
      one(expectedScript).setScriptSource(source);
      one(scriptRunnerFactoryMock).create(expectedScript);
      will(returnValue(expectedScriptRunner));
    }
  }
);
  assertSame(expectedScriptRunner,scriptProcessor.createCompiler(source).setTransformer(transformer).compile(expectedScriptBaseClass));
}
