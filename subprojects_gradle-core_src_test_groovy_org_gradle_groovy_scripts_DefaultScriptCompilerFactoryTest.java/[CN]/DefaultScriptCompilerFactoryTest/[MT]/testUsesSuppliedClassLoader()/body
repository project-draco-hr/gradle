{
  final ClassLoader classLoader=new ClassLoader(){
  }
;
  context.checking(new Expectations(){
{
      one(cacheRepositoryMock).getGlobalCache("scripts/class-name",expectedCacheProperties);
      will(returnValue(cacheMock));
      allowing(cacheMock).isValid();
      will(returnValue(true));
      one(scriptCompilationHandlerMock).loadScriptFromDir(source,classLoader,expectedScriptCacheDir,expectedScriptBaseClass);
      will(returnValue(expectedScript));
      one(expectedScript).setScriptSource(source);
      one(scriptRunnerFactoryMock).create(expectedScript);
      will(returnValue(expectedScriptRunner));
    }
  }
);
  assertSame(expectedScriptRunner,scriptProcessor.createCompiler(source).setClassloader(classLoader).compile(expectedScriptBaseClass));
}
