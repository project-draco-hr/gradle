{
  try {
    Class<? extends LibrarySpec> type=componentModel.type();
    if (!LibrarySpec.class.isAssignableFrom(type)) {
      throw new InvalidComponentModelException(String.format("ComponentModel type '%s' must extend '%s'.",type.getSimpleName(),LibrarySpec.class.getSimpleName()));
    }
  }
 catch (  IncompleteAnnotationException ex) {
    throw new InvalidComponentModelException("Parameter 'type' not declared in ComponentModel declaration.",ex);
  }
  try {
    Class<? extends LibrarySpec> implementation=componentModel.implementation();
    if (!componentModel.type().isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("ComponentModel implementation '%s' must implement '%s'.",implementation.getSimpleName(),componentModel.type().getSimpleName()));
    }
    if (!DefaultLibrarySpec.class.isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("ComponentModel implementation '%s' must extend '%s'.",implementation.getSimpleName(),DefaultLibrarySpec.class.getSimpleName()));
    }
    try {
      implementation.getConstructor();
    }
 catch (    NoSuchMethodException nsmException) {
      throw new InvalidComponentModelException(String.format("ComponentModel implementation '%s' must have public default constructor.",implementation.getSimpleName()));
    }
  }
 catch (  IncompleteAnnotationException ex) {
    throw new InvalidComponentModelException("Parameter 'implementation' not declared in ComponentModel declaration.",ex);
  }
}
