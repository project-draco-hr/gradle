{
  final GenerateMetadataFileTask task=project.getTasks().create("cdtCproject",GenerateMetadataFileTask.class);
  project.getExtensions().getByType(ComponentSpecContainer.class).all(new Action<ComponentSpec>(){
    @Override public void execute(    ComponentSpec componentSpec){
      if (componentSpec.getName().equals("main")) {
        task.setSettings(new CprojectSettings((NativeComponentSpec)componentSpec,(ProjectInternal)project));
      }
    }
  }
);
  task.doFirst(new Closure<Void>(CdtIdePlugin.this,CdtIdePlugin.this){
    public void doCall(    Task it){
      if (task.getSettings() == null) {
        throw new InvalidUserDataException("There is neither a main binary or library");
      }
    }
  }
);
  task.getInputs().files(new Callable<FileCollection>(){
    @Override public FileCollection call() throws Exception {
      return task.getSettings().getIncludeRoots();
    }
  }
).withPropertyName("settings.includeRoots");
  task.setInputFile(project.file(".cproject"));
  task.setOutputFile(project.file(".cproject"));
  task.factory(new Closure<CprojectDescriptor>(CdtIdePlugin.this,CdtIdePlugin.this){
    public CprojectDescriptor doCall(    Object it){
      return new CprojectDescriptor();
    }
  }
);
  task.onConfigure(new Closure<Void>(CdtIdePlugin.this,CdtIdePlugin.this){
    public void doCall(    Object descriptor){
      task.getSettings().applyTo((CprojectDescriptor)descriptor);
    }
  }
);
  return task;
}
