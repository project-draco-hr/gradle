{
  super(target);
  validateTestName(target);
  previous=new ArrayList<GradleDistribution>();
  final ReleasedVersionDistributions releasedVersions=new ReleasedVersionDistributions();
  if (versionStr.equals("latest")) {
    implicitVersion=true;
    addVersionIfCompatibleWithJvmAndOs(releasedVersions.getMostRecentFinalRelease());
  }
 else   if (versionStr.equals("all")) {
    implicitVersion=true;
    List<GradleDistribution> previousVersionsToTest=choosePreviousVersionsToTest(releasedVersions);
    for (    GradleDistribution previousVersion : previousVersionsToTest) {
      addVersionIfCompatibleWithJvmAndOs(previousVersion);
    }
  }
 else   if (versionStr.matches("^\\d.*$")) {
    implicitVersion=false;
    String[] versions=versionStr.split(",");
    List<GradleVersion> gradleVersions=CollectionUtils.sort(collect(Arrays.asList(versions),new Transformer<GradleVersion,String>(){
      public GradleVersion transform(      String versionString){
        return GradleVersion.version(versionString);
      }
    }
),Collections.reverseOrder());
    inject(previous,gradleVersions,new Action<InjectionStep<List<GradleDistribution>,GradleVersion>>(){
      public void execute(      InjectionStep<List<GradleDistribution>,GradleVersion> step){
        GradleDistribution distribution=releasedVersions.getDistribution(step.getItem());
        if (distribution == null) {
          throw new RuntimeException("Gradle version '" + step.getItem().getVersion() + "' is not a valid testable released version");
        }
        step.getTarget().add(distribution);
      }
    }
);
  }
 else {
    throw new RuntimeException("Invalid value for " + VERSIONS_SYSPROP_NAME + " system property: "+ versionStr+ "(valid values: 'all', 'latest' or comma separated list of versions)");
  }
}
