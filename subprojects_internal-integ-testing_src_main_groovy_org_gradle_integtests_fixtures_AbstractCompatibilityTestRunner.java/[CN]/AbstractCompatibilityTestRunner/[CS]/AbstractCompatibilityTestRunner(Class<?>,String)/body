{
  super(target);
  validateTestName(target);
  previous=new ArrayList<GradleDistribution>();
  if (versionStr == null) {
    versionStr=System.getProperty(VERSIONS_SYSPROP_NAME,"latest");
  }
  final ReleasedVersionDistributions previousVersions=new ReleasedVersionDistributions();
  if (versionStr.equals("latest")) {
    previous.add(previousVersions.getMostRecentFinalRelease());
  }
 else   if (versionStr.equals("all")) {
    List<GradleDistribution> all=previousVersions.getAll();
    for (    GradleDistribution previous : all) {
      if (!previous.worksWith(Jvm.current())) {
        add(new IgnoredVersion(previous,"does not work with current JVM"));
        continue;
      }
      if (!previous.worksWith(OperatingSystem.current())) {
        add(new IgnoredVersion(previous,"does not work with current OS"));
        continue;
      }
      this.previous.add(previous);
    }
  }
 else   if (versionStr.matches("^\\d.*$")) {
    String[] versions=versionStr.split(",");
    List<GradleVersion> gradleVersions=CollectionUtils.sort(collect(Arrays.asList(versions),new Transformer<GradleVersion,String>(){
      public GradleVersion transform(      String versionString){
        GradleVersion gradleVersion=GradleVersion.version(versionString);
        if (!gradleVersion.isValid()) {
          throw new RuntimeException("Specified Gradle version '" + versionString + "' is not a valid Gradle version");
        }
        return gradleVersion;
      }
    }
),Collections.reverseOrder());
    inject(previous,gradleVersions,new Action<InjectionStep<List<GradleDistribution>,GradleVersion>>(){
      public void execute(      InjectionStep<List<GradleDistribution>,GradleVersion> step){
        GradleDistribution distribution=previousVersions.getDistribution(step.getItem());
        if (distribution == null) {
          throw new RuntimeException("Gradle version '" + step.getItem().getVersion() + "' is not a valid testable released version");
        }
        step.getTarget().add(distribution);
      }
    }
);
  }
 else {
    throw new RuntimeException("Invalid value for " + VERSIONS_SYSPROP_NAME + " system property: "+ versionStr+ "(valid values: 'all', 'latest' or comma separated list of versions)");
  }
}
