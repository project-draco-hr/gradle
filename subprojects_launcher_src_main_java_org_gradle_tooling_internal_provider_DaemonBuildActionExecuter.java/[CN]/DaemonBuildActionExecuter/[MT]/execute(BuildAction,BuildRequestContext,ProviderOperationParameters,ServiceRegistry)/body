{
  boolean continuous=action.getStartParameter() != null && action.getStartParameter().isContinuous() && isNotBuildingModel(action);
  if (continuous && !doesConsumerSupportCancellation(buildRequestContext)) {
    throw new UnsupportedVersionException("Continuous build requires Tooling API client version 2.1 or later.");
  }
  ClassPath classPath=DefaultClassPath.of(parameters.getInjectedPluginClasspath(Collections.<File>emptyList()));
  BuildActionParameters actionParameters;
  List<GradleParticipantBuild> compositeParticipants=parameters.getBuilds(null);
  if (compositeParticipants != null) {
    List<GradleParticipantBuild> clonedCompositeParticipants=new ArrayList<GradleParticipantBuild>();
    for (    GradleParticipantBuild build : compositeParticipants) {
      clonedCompositeParticipants.add(new DefaultGradleParticipantBuild(build));
    }
    CompositeParameters compositeParameters=new CompositeParameters(clonedCompositeParticipants,parameters.getGradleUserHomeDir(),parameters.getDaemonBaseDir(null),parameters.getDaemonMaxIdleTimeValue(),parameters.getDaemonMaxIdleTimeUnits(),parameters.getCompositeTargetBuildRootDir(null));
    actionParameters=new DefaultCompositeBuildActionParameters(daemonParameters.getEffectiveSystemProperties(),System.getenv(),SystemProperties.getInstance().getCurrentDir(),parameters.getBuildLogLevel(),daemonParameters.getDaemonUsage(),continuous,false,classPath,compositeParameters);
  }
 else {
    actionParameters=new DefaultBuildActionParameters(daemonParameters.getEffectiveSystemProperties(),System.getenv(),SystemProperties.getInstance().getCurrentDir(),parameters.getBuildLogLevel(),daemonParameters.getDaemonUsage(),continuous,false,classPath);
  }
  try {
    return executer.execute(action,buildRequestContext,actionParameters,contextServices);
  }
 catch (  ReportedException e) {
    Throwable t=e.getCause();
    while (t != null) {
      if (t instanceof BuildCancelledException) {
        throw new InternalBuildCancelledException(e.getCause());
      }
      t=t.getCause();
    }
    throw new BuildExceptionVersion1(e.getCause());
  }
}
