{
  boolean continuous=action.getStartParameter() != null && action.getStartParameter().isContinuous() && isNotBuildingModel(action);
  if (continuous && !doesConsumerSupportCancellation(buildRequestContext)) {
    throw new UnsupportedVersionException("Continuous build requires Tooling API client version 2.1 or later.");
  }
  ClassPath classPath=DefaultClassPath.of(parameters.getInjectedPluginClasspath(Collections.<File>emptyList()));
  List<GradleParticipantBuild> builds=parameters.getBuilds(null);
  BuildActionParameters actionParameters=new DefaultBuildActionParameters(daemonParameters.getEffectiveSystemProperties(),System.getenv(),SystemProperties.getInstance().getCurrentDir(),parameters.getBuildLogLevel(),daemonParameters.isEnabled(),continuous,false,classPath);
  if (builds != null) {
    List<GradleParticipantBuild> buildsCopy=new ArrayList<GradleParticipantBuild>();
    for (    GradleParticipantBuild build : builds) {
      buildsCopy.add(new DefaultGradleParticipantBuild(build));
    }
    CompositeParameters compositeParameters=new CompositeParameters(buildsCopy);
    actionParameters=new DefaultCompositeBuildActionParameters(actionParameters,compositeParameters);
  }
  try {
    return executer.execute(action,buildRequestContext,actionParameters,contextServices);
  }
 catch (  ReportedException e) {
    Throwable t=e.getCause();
    while (t != null) {
      if (t instanceof BuildCancelledException) {
        throw new InternalBuildCancelledException(e.getCause());
      }
      t=t.getCause();
    }
    throw new BuildExceptionVersion1(e.getCause());
  }
}
