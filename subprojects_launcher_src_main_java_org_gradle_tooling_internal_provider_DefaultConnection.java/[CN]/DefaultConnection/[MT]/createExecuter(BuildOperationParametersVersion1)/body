{
  if (Boolean.TRUE.equals(operationParameters.isEmbedded())) {
    return embeddedExecuterSupport.getExecuter();
  }
 else {
    LoggingServiceRegistry loggingServices=LoggingServiceRegistry.newEmbeddableLogging();
    File gradleUserHomeDir=GUtil.elvis(operationParameters.getGradleUserHomeDir(),StartParameter.DEFAULT_GRADLE_USER_HOME);
    DaemonParameters parameters=new DaemonParameters();
    boolean searchUpwards=operationParameters.isSearchUpwards() != null ? operationParameters.isSearchUpwards() : true;
    parameters.configureFromBuildDir(operationParameters.getProjectDir(),searchUpwards);
    parameters.configureFromGradleUserHome(gradleUserHomeDir);
    parameters.configureFromSystemProperties(System.getProperties());
    if (operationParameters.getDaemonMaxIdleTimeValue() != null && operationParameters.getDaemonMaxIdleTimeUnits() != null) {
      int idleTimeout=(int)operationParameters.getDaemonMaxIdleTimeUnits().toMillis(operationParameters.getDaemonMaxIdleTimeValue());
      parameters.setIdleTimeout(idleTimeout);
    }
    DaemonClientServices clientServices=new DaemonClientServices(loggingServices,parameters,safeStandardInput(operationParameters));
    DaemonClient client=clientServices.get(DaemonClient.class);
    GradleLauncherActionExecuter<BuildOperationParametersVersion1> executer=new DaemonGradleLauncherActionExecuter(client,parameters);
    Factory<LoggingManagerInternal> loggingManagerFactory=loggingServices.getFactory(LoggingManagerInternal.class);
    return new LoggingBridgingGradleLauncherActionExecuter(executer,loggingManagerFactory);
  }
}
