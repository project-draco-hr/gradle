{
  ModelType<T> targetType=binding.getReference().getType();
  if (canBeViewedAsWritable(targetType)) {
    ModelType<?> targetItemType=targetType.getTypeVariables().get(0);
    if (targetItemType.getRawClass().isAssignableFrom(itemType)) {
      return toView(binding,sourceDescriptor,inputs,modelRuleRegistrar,itemType);
    }
 else {
      Class<? extends M> subType=targetItemType.getRawClass().asSubclass(itemType);
      return toView(binding,sourceDescriptor,inputs,modelRuleRegistrar,subType);
    }
  }
 else {
    return null;
  }
}
