{
  this.requested=dependencyState.requested;
  this.changing=dependencyState.changing;
  this.transitive=dependencyState.transitive;
  this.force=dependencyState.force;
  this.dynamicConstraintVersion=dependencyState.dynamicConstraintVersion;
  this.confs=Maps.newLinkedHashMap();
  Map<String,List<String>> configMappings=dependencyState.confMappings;
  for (  String config : configMappings.keySet()) {
    List<String> mappings=new ArrayList<String>(configMappings.get(config));
    confs.put(config,mappings);
  }
  dependencyArtifacts=Maps.newLinkedHashMap();
  for (  ModuleDescriptorState.Artifact dependencyArtifact : dependencyState.dependencyArtifacts) {
    dependencyArtifacts.put(dependencyArtifact.artifactName,dependencyArtifact.configurations);
  }
  excludeRules=Maps.newLinkedHashMap();
  for (  ExcludeRule excludeRule : dependencyState.dependencyExcludes) {
    excludeRules.put(excludeRule,Sets.newHashSet(excludeRule.getConfigurations()));
  }
}
