{
  final Deque<FileVisitDetails> directoryDetailsHolder=new LinkedList<FileVisitDetails>();
  try {
    Files.walkFileTree(rootDir.toPath(),EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,new java.nio.file.FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        FileVisitDetails details=getFileVisitDetails(dir,attrs,true);
        if (directoryDetailsHolder.size() == 0 || isAllowed(details,spec)) {
          directoryDetailsHolder.push(details);
          if (directoryDetailsHolder.size() > 1 && !postfix) {
            visitor.visitDir(details);
          }
          return checkStopFlag();
        }
 else {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      private FileVisitResult checkStopFlag(){
        return stopFlag.get() ? FileVisitResult.TERMINATE : FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isSymbolicLink()) {
          throw new GradleException(String.format("Could not list contents of '%s'. Couldn't follow symbolic link.",file));
        }
        FileVisitDetails details=getFileVisitDetails(file,attrs,false);
        if (isAllowed(details,spec)) {
          visitor.visitFile(details);
        }
        return checkStopFlag();
      }
      private FileVisitDetails getFileVisitDetails(      Path file,      BasicFileAttributes attrs,      boolean isDirectory){
        File child=file.toFile();
        FileVisitDetails dirDetails=directoryDetailsHolder.peek();
        RelativePath childPath=dirDetails != null ? dirDetails.getRelativePath().append(!isDirectory,relativePathStringInterner.intern(child.getName())) : rootPath;
        return new FileVisitDetailsWithAttributes(child,childPath,stopFlag,fileSystem,fileSystem,isDirectory,attrs.lastModifiedTime().toMillis(),attrs.size());
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        if (exc != null && !(exc instanceof FileSystemLoopException)) {
          throw new GradleException(String.format("Could not read path '%s'.",file),exc);
        }
        return checkStopFlag();
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        if (exc != null) {
          if (!(exc instanceof FileSystemLoopException)) {
            throw new GradleException(String.format("Could not read directory path '%s'.",dir),exc);
          }
        }
 else {
          if (postfix) {
            FileVisitDetails details=directoryDetailsHolder.peek();
            if (directoryDetailsHolder.size() > 1 && details != null) {
              visitor.visitDir(details);
            }
          }
        }
        directoryDetailsHolder.pop();
        return checkStopFlag();
      }
    }
);
  }
 catch (  IOException e) {
    throw new GradleException(String.format("Could not list contents of directory '%s'.",rootDir),e);
  }
}
