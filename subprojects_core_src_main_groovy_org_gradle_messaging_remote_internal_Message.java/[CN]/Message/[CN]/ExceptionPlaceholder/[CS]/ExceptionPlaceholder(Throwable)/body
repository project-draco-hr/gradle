{
  ByteArrayOutputStream outstr=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ExceptionReplacingObjectOutputStream(outstr){
    @Override protected Object replaceObject(    Object obj) throws IOException {
      if (obj == throwable) {
        return throwable;
      }
      if (obj == throwable.getCause()) {
        return new CausePlaceholder();
      }
      return super.replaceObject(obj);
    }
  }
;
  try {
    oos.writeObject(throwable);
    oos.close();
    serializedException=outstr.toByteArray();
  }
 catch (  NotSerializableException e) {
  }
  type=throwable.getClass().getName();
  message=throwable.getMessage();
  if (throwable.getCause() != null) {
    cause=new ExceptionPlaceholder(throwable.getCause());
  }
  stackTrace=throwable.getStackTrace();
}
