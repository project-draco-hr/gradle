{
  return new StreamReaderDelegate(xmlStreamReader){
    private boolean intercepting;
    @Override public int next() throws XMLStreamException {
      int eventType=super.next();
      if (eventType == XMLStreamConstants.ENTITY_REFERENCE) {
        intercepting=true;
        return XMLStreamConstants.CHARACTERS;
      }
 else {
        intercepting=false;
        return eventType;
      }
    }
    @Override public int getEventType(){
      return intercepting ? XMLStreamConstants.CHARACTERS : super.getEventType();
    }
    private boolean isIntercepting(){
      return intercepting;
    }
    @Override public boolean isCharacters(){
      return super.isCharacters() || isIntercepting();
    }
    @Override public boolean isWhiteSpace(){
      if (isIntercepting()) {
        return false;
      }
 else {
        return super.isWhiteSpace();
      }
    }
    @Override public String getText(){
      if (isIntercepting()) {
        String entityName=super.getLocalName();
        String replacement=entityName != null ? entitiesMap.get(entityName) : "";
        return replacement != null ? replacement : "";
      }
 else {
        return super.getText();
      }
    }
    @Override public char[] getTextCharacters(){
      if (isIntercepting()) {
        return getText().toCharArray();
      }
 else {
        return super.getTextCharacters();
      }
    }
    @Override public int getTextStart(){
      if (isIntercepting()) {
        return 0;
      }
 else {
        return super.getTextStart();
      }
    }
    @Override public int getTextLength(){
      if (isIntercepting()) {
        return getText().length();
      }
 else {
        return super.getTextLength();
      }
    }
  }
;
}
