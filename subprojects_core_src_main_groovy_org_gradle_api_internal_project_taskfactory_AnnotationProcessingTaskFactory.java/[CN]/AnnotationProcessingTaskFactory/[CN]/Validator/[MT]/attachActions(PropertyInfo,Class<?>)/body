{
  Class<?> superclass=type.getSuperclass();
  if (!(superclass == null || superclass.equals(ConventionTask.class) || superclass.equals(DefaultTask.class) || superclass.equals(AbstractTask.class) || superclass.equals(Object.class))) {
    attachActions(parent,superclass);
  }
  Field[] fields=type.getDeclaredFields();
  for (  Method method : type.getDeclaredMethods()) {
    if (!isGetter(method)) {
      continue;
    }
    String name=method.getName();
    int prefixLength=name.startsWith("is") ? 2 : 3;
    String fieldName=StringUtils.uncapitalize(name.substring(prefixLength));
    String propertyName=fieldName;
    if (parent != null) {
      propertyName=parent.getName() + '.' + propertyName;
    }
    Field field=findField(fields,fieldName);
    PropertyInfo propertyInfo=new PropertyInfo(type,this,parent,propertyName,method,field);
    attachValidationActions(propertyInfo,fieldName,field);
    if (propertyInfo.required) {
      properties.add(propertyInfo);
    }
  }
}
