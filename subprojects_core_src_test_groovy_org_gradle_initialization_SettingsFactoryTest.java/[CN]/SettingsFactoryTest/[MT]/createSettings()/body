{
  final File expectedSettingsDir=new File("settingsDir");
  ScriptSource expectedScriptSource=context.mock(ScriptSource.class);
  Map<String,String> expectedGradleProperties=WrapUtil.toMap("key","myvalue");
  StartParameter expectedStartParameter=new StartParameter();
  final ServiceRegistryFactory serviceRegistryFactory=context.mock(ServiceRegistryFactory.class);
  final SettingsInternalServiceRegistry settingsInternallServiceRegistry=context.mock(SettingsInternalServiceRegistry.class);
  final PluginContainer pluginContainer=context.mock(PluginContainer.class);
  final FileResolver fileResolver=context.mock(FileResolver.class);
  final ScriptPluginFactory scriptPluginFactory=context.mock(ScriptPluginFactory.class);
  final IProjectDescriptorRegistry expectedProjectDescriptorRegistry=context.mock(IProjectDescriptorRegistry.class);
  context.checking(new Expectations(){
{
      one(serviceRegistryFactory).createFor(with(any(Settings.class)));
      will(returnValue(settingsInternallServiceRegistry));
      one(settingsInternallServiceRegistry).get(PluginContainer.class);
      will(returnValue(pluginContainer));
      one(settingsInternallServiceRegistry).get(FileResolver.class);
      will(returnValue(fileResolver));
      one(settingsInternallServiceRegistry).get(ScriptPluginFactory.class);
      will(returnValue(scriptPluginFactory));
      one(settingsInternallServiceRegistry).get(IProjectDescriptorRegistry.class);
      will(returnValue(expectedProjectDescriptorRegistry));
      one(expectedProjectDescriptorRegistry).addProject(with(any(DefaultProjectDescriptor.class)));
    }
  }
);
  SettingsFactory settingsFactory=new SettingsFactory(ThreadGlobalInstantiator.getOrCreate(),serviceRegistryFactory);
  final URLClassLoader urlClassLoader=new URLClassLoader(new URL[0]);
  GradleInternal gradle=context.mock(GradleInternal.class);
  DefaultSettings settings=(DefaultSettings)settingsFactory.createSettings(gradle,expectedSettingsDir,expectedScriptSource,expectedGradleProperties,expectedStartParameter,urlClassLoader);
  assertSame(gradle,settings.getGradle());
  assertSame(expectedProjectDescriptorRegistry,settings.getProjectDescriptorRegistry());
  for (  Map.Entry<String,String> entry : expectedGradleProperties.entrySet()) {
    assertEquals(entry.getValue(),((DynamicObjectAware)settings).getAsDynamicObject().getProperty(entry.getKey()));
  }
  assertSame(expectedSettingsDir,settings.getSettingsDir());
  assertSame(expectedScriptSource,settings.getSettingsScript());
  assertSame(expectedStartParameter,settings.getStartParameter());
}
