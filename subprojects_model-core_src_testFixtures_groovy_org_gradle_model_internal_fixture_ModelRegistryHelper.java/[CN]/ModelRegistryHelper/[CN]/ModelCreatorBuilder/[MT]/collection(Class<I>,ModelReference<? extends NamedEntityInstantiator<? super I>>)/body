{
  final ModelType<I> itemModelType=ModelType.of(itemType);
  final ModelType<CollectionBuilder<I>> collectionBuilderType=DefaultCollectionBuilder.typeOf(itemModelType);
  return ModelCreators.of(ModelReference.of(path,collectionBuilderType),new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode node,    List<ModelView<?>> inputs){
      node.setPrivateData(collectionBuilderType,new DefaultCollectionBuilder<I>(itemModelType,descriptor,node,DefaultCollectionBuilder.createVia(instantiator)));
    }
  }
).withProjection(new UnmanagedModelProjection<CollectionBuilder<I>>(collectionBuilderType,true,true)).descriptor(descriptor).ephemeral(ephemeral).build();
}
