{
  final ModelType<RuleAwarePolymorphicNamedEntityInstantiator<I>> instantiatorType=instantiatorType(itemType);
  ModelType<I> modelType=ModelType.of(itemType);
  return ModelCreators.of(ModelReference.of(path,instantiatorType),new Factory<RuleAwarePolymorphicNamedEntityInstantiator<I>>(){
    @Override public RuleAwarePolymorphicNamedEntityInstantiator<I> create(){
      return new DefaultRuleAwarePolymorphicNamedEntityInstantiator<I>(new DefaultPolymorphicNamedEntityInstantiator<I>(itemType,"this collection"));
    }
  }
).withProjection(PolymorphicModelMapProjection.of(modelType,ChildNodeInitializerStrategyAccessors.of(NodeBackedModelMap.createUsingParentNode(modelType)))).withProjection(UnmanagedModelProjection.of(instantiatorType)).descriptor(descriptor).ephemeral(ephemeral).build();
}
