{
  LOGGER.debug("Resolving {}",resolveContext);
  ivyContextManager.withIvy(new Action<Ivy>(){
    public void execute(    Ivy ivy){
      DependencyGraphBuilder builder=createDependencyGraphBuilder(resolveContext,repositories,metadataHandler);
      StoreSet stores=storeFactory.createStoreSet();
      BinaryStore newModelStore=stores.nextBinaryStore();
      Store<ResolvedComponentResult> newModelCache=stores.oldModelStore();
      ResolutionResultBuilder newModelBuilder=new StreamingResolutionResultBuilder(newModelStore,newModelCache);
      BinaryStore oldModelStore=stores.nextBinaryStore();
      Store<TransientConfigurationResults> oldModelCache=stores.newModelStore();
      TransientConfigurationResultsBuilder oldTransientModelBuilder=new TransientConfigurationResultsBuilder(oldModelStore,oldModelCache);
      DefaultResolvedConfigurationBuilder oldModelBuilder=new DefaultResolvedConfigurationBuilder(oldTransientModelBuilder);
      ResolvedLocalComponentsResultBuilder localComponentsResultBuilder=new DefaultResolvedLocalComponentsResultBuilder(buildProjectDependencies);
      DefaultResolverResults defaultResolverResults=(DefaultResolverResults)results;
      DefaultResolvedArtifactsBuilder artifactsBuilder=new DefaultResolvedArtifactsBuilder();
      builder.resolve(resolveContext,newModelBuilder,oldModelBuilder,artifactsBuilder,localComponentsResultBuilder);
      defaultResolverResults.resolved(newModelBuilder.complete(),localComponentsResultBuilder.complete());
      ResolvedGraphResults graphResults=oldModelBuilder.complete();
      defaultResolverResults.retainState(graphResults,artifactsBuilder,oldTransientModelBuilder);
    }
  }
);
}
