{
  LOGGER.debug("Resolving {}",resolveContext);
  ivyContextManager.withIvy(new Action<Ivy>(){
    public void execute(    Ivy ivy){
      ResolutionStrategyInternal resolutionStrategy;
      if (resolveContext instanceof ConfigurationInternal) {
        resolutionStrategy=((ConfigurationInternal)resolveContext).getResolutionStrategy();
      }
 else {
        resolutionStrategy=new DefaultResolutionStrategy();
      }
      RepositoryChain repositoryChain=ivyFactory.create(resolutionStrategy,repositories,metadataHandler.getComponentMetadataProcessor());
      ComponentMetaDataResolver metaDataResolver=new ClientModuleResolver(repositoryChain.getComponentResolver(),dependencyDescriptorFactory);
      ProjectDependencyResolver projectDependencyResolver;
      if (resolveContext instanceof ResolveContextInternal) {
        projectDependencyResolver=((ResolveContextInternal)resolveContext).newProjectDependencyResolver(projectComponentRegistry,localComponentFactory,repositoryChain.getComponentIdResolver(),metaDataResolver);
      }
 else {
        projectDependencyResolver=new ProjectDependencyResolver(projectComponentRegistry,localComponentFactory,repositoryChain.getComponentIdResolver(),metaDataResolver);
      }
      DependencyToComponentIdResolver idResolver=new DependencySubstitutionResolver(projectDependencyResolver,resolutionStrategy.getDependencySubstitutionRule());
      ArtifactResolver artifactResolver=createArtifactResolver(repositoryChain);
      ModuleConflictResolver conflictResolver;
      if (resolutionStrategy.getConflictResolution() instanceof StrictConflictResolution) {
        conflictResolver=new StrictConflictResolver();
      }
 else {
        conflictResolver=new LatestModuleConflictResolver(versionComparator);
      }
      conflictResolver=new VersionSelectionReasonResolver(conflictResolver);
      ConflictHandler conflictHandler=new DefaultConflictHandler(conflictResolver,metadataHandler.getModuleMetadataProcessor().getModuleReplacements());
      DependencyGraphBuilder builder=new DependencyGraphBuilder(idResolver,projectDependencyResolver,projectDependencyResolver,artifactResolver,conflictHandler,new DefaultDependencyToConfigurationResolver());
      StoreSet stores=storeFactory.createStoreSet();
      BinaryStore newModelStore=stores.nextBinaryStore();
      Store<ResolvedComponentResult> newModelCache=stores.oldModelStore();
      ResolutionResultBuilder newModelBuilder=new StreamingResolutionResultBuilder(newModelStore,newModelCache);
      BinaryStore oldModelStore=stores.nextBinaryStore();
      Store<TransientConfigurationResults> oldModelCache=stores.newModelStore();
      TransientConfigurationResultsBuilder oldTransientModelBuilder=new TransientConfigurationResultsBuilder(oldModelStore,oldModelCache);
      DefaultResolvedConfigurationBuilder oldModelBuilder=new DefaultResolvedConfigurationBuilder(oldTransientModelBuilder);
      DefaultResolvedArtifactsBuilder artifactsBuilder=new DefaultResolvedArtifactsBuilder();
      ResolvedProjectConfigurationResultBuilder projectModelBuilder=new DefaultResolvedProjectConfigurationResultBuilder(buildProjectDependencies);
      builder.resolve(resolveContext,newModelBuilder,oldModelBuilder,artifactsBuilder,projectModelBuilder);
      results.resolved(newModelBuilder.complete(),projectModelBuilder.complete());
      ResolvedGraphResults graphResults=oldModelBuilder.complete();
      results.retainState(graphResults,artifactsBuilder,oldTransientModelBuilder);
    }
  }
);
}
