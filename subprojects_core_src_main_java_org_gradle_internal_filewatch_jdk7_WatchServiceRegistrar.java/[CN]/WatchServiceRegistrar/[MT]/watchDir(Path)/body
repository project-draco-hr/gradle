{
  LOG.debug("Registering watch for {}",dir);
  if (Thread.currentThread().isInterrupted()) {
    LOG.debug("Skipping adding watch since current thread is interrupted.");
  }
  for (Path path=dir; path != null; path=FILE_TREE_WATCHING_SUPPORTED ? path.getParent() : null) {
    WatchKey previousWatchKey=watchKeys.get(path);
    if (previousWatchKey != null && previousWatchKey.isValid()) {
      LOG.debug("Directory {} is already watched and the watch is valid, not adding another one.",path);
      return;
    }
  }
  int retryCount=0;
  IOException lastException=null;
  while (retryCount++ < 2) {
    try {
      WatchKey watchKey=dir.register(watchService,WATCH_KINDS,WATCH_MODIFIERS);
      watchKeys.put(dir,watchKey);
      return;
    }
 catch (    IOException e) {
      LOG.debug("Exception in registering for watching of " + dir,e);
      lastException=e;
      if (e instanceof NoSuchFileException) {
        LOG.debug("Return silently since directory doesn't exist.");
        return;
      }
      if (e instanceof FileSystemException && e.getMessage() != null && e.getMessage().contains("Bad file descriptor")) {
        LOG.debug("Retrying after 'Bad file descriptor'");
        continue;
      }
      if (!Files.exists(dir)) {
        LOG.debug("Return silently since directory doesn't exist.");
        return;
      }
 else {
        throw e;
      }
    }
  }
  LOG.debug("Retry count exceeded, throwing last exception");
  throw lastException;
}
