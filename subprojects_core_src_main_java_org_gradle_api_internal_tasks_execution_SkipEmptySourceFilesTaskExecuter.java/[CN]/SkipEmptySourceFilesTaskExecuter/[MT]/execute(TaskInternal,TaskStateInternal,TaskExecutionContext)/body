{
  FileCollection sourceFiles=task.getInputs().getSourceFiles();
  if (task.getInputs().getHasSourceFiles() && sourceFiles.isEmpty()) {
    TaskArtifactState taskArtifactState=context.getTaskArtifactState();
    FileCollection outputFiles=taskArtifactState.getExecutionHistory().getOutputFiles();
    if (outputFiles == null) {
      state.setOutcome(TaskExecutionOutcome.UP_TO_DATE);
      LOGGER.info("Skipping {} as it has no source files and no history of previous output files.",task);
    }
 else     if (outputFiles.isEmpty()) {
      state.setOutcome(TaskExecutionOutcome.UP_TO_DATE);
      LOGGER.info("Skipping {} as it has no source files and no previous output files.",task);
    }
 else {
      Set<File> outputFileSet=outputFiles.getFiles();
      boolean deletedFiles=false;
      boolean debugEnabled=LOGGER.isDebugEnabled();
      for (      File file : outputFileSet) {
        if (file.isFile()) {
          if (file.delete()) {
            if (debugEnabled) {
              LOGGER.debug("Deleted stale output file '{}'.",file.getAbsolutePath());
            }
          }
 else {
            state.executed(new GradleException(String.format("Could not delete file: '%s'.",file.getAbsolutePath())));
            return;
          }
          deletedFiles=true;
        }
      }
      if (deletedFiles) {
        LOGGER.info("Cleaned previous output of {} as it has no source files.",task);
        state.setOutcome(TaskExecutionOutcome.EXECUTED);
      }
 else {
        state.setOutcome(TaskExecutionOutcome.UP_TO_DATE);
      }
    }
    taskInputsListener.onExecute(task,Cast.cast(FileCollectionInternal.class,sourceFiles));
    return;
  }
 else {
    taskInputsListener.onExecute(task,Cast.cast(FileCollectionInternal.class,task.getInputs().getFiles()));
  }
  executer.execute(task,state,context);
}
