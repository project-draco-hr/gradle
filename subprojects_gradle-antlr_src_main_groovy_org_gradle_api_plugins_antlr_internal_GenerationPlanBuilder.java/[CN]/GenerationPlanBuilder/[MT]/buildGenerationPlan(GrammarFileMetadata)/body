{
  File generationDirectory=isEmpty(grammarFileMetadata.getPackageName()) ? outputDirectory : new File(outputDirectory,grammarFileMetadata.getPackageName().replace('.',File.separatorChar));
  GenerationPlan generationPlan=new GenerationPlan(grammarFileMetadata.getFilePath(),generationDirectory);
  for (  GrammarMetadata grammarMetadata : grammarFileMetadata.getGrammars()) {
    final File generatedParserFile=new File(outputDirectory,grammarMetadata.determineGeneratedParserPath());
    if (!generatedParserFile.exists()) {
      generationPlan.markOutOfDate();
    }
 else     if (generatedParserFile.lastModified() < generationPlan.getSource().lastModified()) {
      generationPlan.markOutOfDate();
    }
    if (!grammarMetadata.extendsStandardGrammar()) {
      final GrammarFileMetadata superGrammarGrammarFileMetadata=grammarMetadata.getSuperGrammarDelegate().getAssociatedGrammarMetadata().getGrammarFile();
      if (superGrammarGrammarFileMetadata != null) {
        final GenerationPlan superGrammarGenerationPlan=loacteOrBuildGenerationPlan(superGrammarGrammarFileMetadata);
        if (superGrammarGenerationPlan.isOutOfDate()) {
          generationPlan.markOutOfDate();
        }
 else         if (superGrammarGenerationPlan.getSource().lastModified() > generatedParserFile.lastModified()) {
          generationPlan.markOutOfDate();
        }
      }
    }
    if (isNotEmpty(grammarMetadata.getImportVocab())) {
      final GrammarFileMetadata importVocabGrammarFileMetadata=metadataXRef.getGrammarFileByExportVocab(grammarMetadata.getImportVocab());
      if (importVocabGrammarFileMetadata == null) {
        LOGGER.warn("unable to locate grammar exporting specifcied import vocab [" + grammarMetadata.getImportVocab() + "]");
      }
 else       if (!importVocabGrammarFileMetadata.getFilePath().equals(grammarFileMetadata.getFilePath())) {
        final GenerationPlan importVocabGrammarGenerationPlan=loacteOrBuildGenerationPlan(importVocabGrammarFileMetadata);
        generationPlan.setImportVocabTokenTypesDirectory(importVocabGrammarGenerationPlan.getGenerationDirectory());
        if (importVocabGrammarGenerationPlan.isOutOfDate()) {
          generationPlan.markOutOfDate();
        }
 else         if (importVocabGrammarGenerationPlan.getSource().lastModified() > generatedParserFile.lastModified()) {
          generationPlan.markOutOfDate();
        }
      }
    }
  }
  generationPlans.put(generationPlan.getId(),generationPlan);
  return generationPlan;
}
