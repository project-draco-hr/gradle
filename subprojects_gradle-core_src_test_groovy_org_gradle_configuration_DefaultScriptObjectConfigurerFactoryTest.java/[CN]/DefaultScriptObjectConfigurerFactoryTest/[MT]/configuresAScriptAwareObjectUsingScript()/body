{
  final ScriptClassLoaderProvider buildClassLoaderProviderMock=context.mock(ScriptClassLoaderProvider.class);
  final ScriptAware target=context.mock(ScriptAware.class);
  final URLClassLoader classLoader=new URLClassLoader(new URL[0]);
  final ScriptRunner classPathScriptRunnerMock=context.mock(ScriptRunner.class,"classpathScriptRunner");
  final Script scriptMock=context.mock(Script.class);
  context.checking(new Expectations(){
{
      Sequence sequence=context.sequence("seq");
      one(scriptCompilerFactoryMock).createCompiler(with(reflectionEquals(new ImportsScriptSource(scriptSourceMock,importsReaderMock,null))));
      will(returnValue(scriptCompilerMock));
      allowing(target).getClassLoaderProvider();
      will(returnValue(buildClassLoaderProviderMock));
      allowing(buildClassLoaderProviderMock).getClassLoader();
      will(returnValue(classLoader));
      one(scriptCompilerMock).setClassloader(classLoader);
      inSequence(sequence);
      one(scriptCompilerMock).setTransformer(with(any(ClasspathScriptTransformer.class)));
      inSequence(sequence);
      one(scriptCompilerMock).compile(BasicScript.class);
      will(returnValue(classPathScriptRunnerMock));
      one(classPathScriptRunnerMock).setDelegate(target);
      inSequence(sequence);
      one(classPathScriptRunnerMock).run();
      inSequence(sequence);
      one(buildClassLoaderProviderMock).updateClassPath();
      inSequence(sequence);
      one(scriptCompilerMock).setTransformer(with(notNullValue(Transformer.class)));
      inSequence(sequence);
      one(scriptCompilerMock).compile(BasicScript.class);
      will(returnValue(scriptRunnerMock));
      inSequence(sequence);
      one(scriptRunnerMock).setDelegate(target);
      inSequence(sequence);
      allowing(scriptRunnerMock).getScript();
      will(returnValue(scriptMock));
      one(target).setScript(scriptMock);
      inSequence(sequence);
      one(scriptRunnerMock).run();
      inSequence(sequence);
    }
  }
);
  ScriptObjectConfigurer configurer=factory.create(scriptSourceMock);
  configurer.apply(target);
}
