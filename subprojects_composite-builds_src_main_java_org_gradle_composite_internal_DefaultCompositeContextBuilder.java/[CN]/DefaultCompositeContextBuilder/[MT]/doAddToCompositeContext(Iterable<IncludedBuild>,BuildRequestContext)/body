{
  GradleLauncherFactory gradleLauncherFactory=sharedServices.get(GradleLauncherFactory.class);
  CompositeBuildContext context=sharedServices.get(CompositeBuildContext.class);
  for (  IncludedBuild build : includedBuilds) {
    StartParameter includedBuildStartParam=buildStartParam.newBuild();
    includedBuildStartParam.setProjectDir(build.getProjectDir());
    includedBuildStartParam.setSearchUpwards(false);
    includedBuildStartParam.setConfigureOnDemand(false);
    if (build.getProvided().isEmpty()) {
      configureBuildToDetermineSubstitutions(requestContext,gradleLauncherFactory,context,includedBuildStartParam);
    }
 else {
      registerDefinedSubstitutions(context,build);
    }
    configureBuildToRegisterDependencyMetadata(requestContext,gradleLauncherFactory,context,includedBuildStartParam);
  }
}
