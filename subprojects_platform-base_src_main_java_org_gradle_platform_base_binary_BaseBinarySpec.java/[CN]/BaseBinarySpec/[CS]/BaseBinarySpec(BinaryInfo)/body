{
  super(validate(info).componentId,info.publicType);
  this.publicType=info.publicType;
  this.componentNode=info.componentNode;
  this.tasks=info.instantiator.newInstance(DefaultBinaryTasksCollection.class,this,info.taskFactory);
  MutableModelNode modelNode=info.modelNode;
  sources=ModelMaps.addModelMapNode(modelNode,LANGUAGE_SOURCE_SET_MODELTYPE,"sources");
  ModelRegistration itemRegistration=ModelRegistrations.of(modelNode.getPath().child("tasks")).action(ModelActionRole.Create,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode modelNode){
      modelNode.setPrivateData(BINARY_TASKS_COLLECTION,tasks);
    }
  }
).withProjection(new UnmanagedModelProjection<BinaryTasksCollection>(BINARY_TASKS_COLLECTION)).descriptor(modelNode.getDescriptor()).build();
  modelNode.addLink(itemRegistration);
  namingScheme=DefaultBinaryNamingScheme.component(parentComponentName()).withBinaryName(getName()).withBinaryType(getTypeName());
}
