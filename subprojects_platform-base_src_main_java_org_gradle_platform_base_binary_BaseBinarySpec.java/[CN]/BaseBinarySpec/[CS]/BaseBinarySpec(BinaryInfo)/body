{
  if (info == null) {
    throw new ModelInstantiationException("Direct instantiation of a BaseBinarySpec is not permitted. Use a @BinaryType rule instead.");
  }
  this.name=info.name;
  this.publicType=info.publicType;
  MutableModelNode modelNode=info.modelNode;
  this.componentNode=info.componentNode;
  this.tasks=info.instantiator.newInstance(DefaultBinaryTasksCollection.class,this,info.taskFactory);
  sources=ModelMaps.addModelMapNode(modelNode,LanguageSourceSet.class,"sources");
  ModelRegistration itemRegistration=ModelRegistrations.of(modelNode.getPath().child("tasks")).action(ModelActionRole.Create,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode modelNode){
      modelNode.setPrivateData(BINARY_TASKS_COLLECTION,tasks);
    }
  }
).withProjection(new UnmanagedModelProjection<BinaryTasksCollection>(BINARY_TASKS_COLLECTION)).descriptor(modelNode.getDescriptor()).build();
  modelNode.addLink(itemRegistration);
  namingScheme=DefaultBinaryNamingScheme.component(componentName()).withBinaryName(name).withBinaryType(getTypeName());
}
