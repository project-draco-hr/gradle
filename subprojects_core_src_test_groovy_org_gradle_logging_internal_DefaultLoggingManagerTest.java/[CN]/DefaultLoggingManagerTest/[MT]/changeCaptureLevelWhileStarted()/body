{
  final LoggingSystem.Snapshot stdOutSnapshot=context.mock(LoggingSystem.Snapshot.class);
  final LoggingSystem.Snapshot stdErrSnapshot=context.mock(LoggingSystem.Snapshot.class);
  context.checking(new Expectations(){
{
      ignoring(loggingSystem);
      one(stdOutLoggingSystem).on(LogLevel.DEBUG,LogLevel.DEBUG);
      will(returnValue(stdOutSnapshot));
      one(stdErrLoggingSystem).on(LogLevel.DEBUG,LogLevel.DEBUG);
      will(returnValue(stdErrSnapshot));
    }
  }
);
  loggingManager.captureStandardOutput(LogLevel.DEBUG);
  loggingManager.captureStandardError(LogLevel.DEBUG);
  loggingManager.start();
  context.checking(new Expectations(){
{
      one(stdOutLoggingSystem).on(LogLevel.WARN,LogLevel.WARN);
    }
  }
);
  loggingManager.captureStandardOutput(LogLevel.WARN);
  context.checking(new Expectations(){
{
      one(stdOutLoggingSystem).restore(stdOutSnapshot);
      one(stdErrLoggingSystem).restore(stdErrSnapshot);
    }
  }
);
  loggingManager.stop();
}
