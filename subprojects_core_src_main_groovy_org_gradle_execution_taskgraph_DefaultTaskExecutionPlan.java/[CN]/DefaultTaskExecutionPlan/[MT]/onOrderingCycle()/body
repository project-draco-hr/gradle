{
  CachingDirectedGraphWalker<TaskInfo,Void> graphWalker=new CachingDirectedGraphWalker<TaskInfo,Void>(new DirectedGraph<TaskInfo,Void>(){
    public void getNodeValues(    TaskInfo node,    Collection<? super Void> values,    Collection<? super TaskInfo> connectedNodes){
      connectedNodes.addAll(node.getHardSuccessors());
      connectedNodes.addAll(node.getSoftSuccessors());
    }
  }
);
  graphWalker.add(entryTasks);
  final List<TaskInfo> firstCycle=new ArrayList<TaskInfo>(graphWalker.findCycles().get(0));
  Collections.sort(firstCycle);
  DirectedGraphRenderer<TaskInfo> graphRenderer=new DirectedGraphRenderer<TaskInfo>(new GraphNodeRenderer<TaskInfo>(){
    public void renderTo(    TaskInfo node,    StyledTextOutput output){
      output.withStyle(StyledTextOutput.Style.Identifier).text(node.getTask().getPath());
    }
  }
,new DirectedGraph<TaskInfo,Object>(){
    public void getNodeValues(    TaskInfo node,    Collection<? super Object> values,    Collection<? super TaskInfo> connectedNodes){
      for (      TaskInfo dependency : firstCycle) {
        if (node.getHardSuccessors().contains(dependency) || node.getSoftSuccessors().contains(dependency)) {
          connectedNodes.add(dependency);
        }
      }
    }
  }
);
  StringWriter writer=new StringWriter();
  graphRenderer.renderTo(firstCycle.get(0),writer);
  throw new CircularReferenceException(String.format("Circular dependency between the following tasks:%n%s",writer.toString()));
}
