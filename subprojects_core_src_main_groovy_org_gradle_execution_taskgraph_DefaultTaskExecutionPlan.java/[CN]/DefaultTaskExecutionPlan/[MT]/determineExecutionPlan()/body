{
  List<TaskInfoInVisitingSegment> nodeQueue=Lists.newArrayList(Iterables.transform(entryTasks,new Function<TaskInfo,TaskInfoInVisitingSegment>(){
    int index;
    public TaskInfoInVisitingSegment apply(    TaskInfo taskInfo){
      return new TaskInfoInVisitingSegment(taskInfo,index++);
    }
  }
));
  int visitingSegmentCounter=nodeQueue.size();
  HashMultimap<TaskInfo,Integer> visitingNodes=HashMultimap.create();
  Stack<GraphEdge> walkedShouldRunAfterEdges=new Stack<GraphEdge>();
  Stack<TaskInfo> path=new Stack<TaskInfo>();
  HashMap<TaskInfo,Integer> planBeforeVisiting=new HashMap<TaskInfo,Integer>();
  while (!nodeQueue.isEmpty()) {
    TaskInfoInVisitingSegment taskInfoInVisitingSegment=nodeQueue.get(0);
    int currentSegment=taskInfoInVisitingSegment.visitingSegment;
    TaskInfo taskNode=taskInfoInVisitingSegment.taskInfo;
    if (taskNode.isIncludeInGraph() || executionPlan.containsKey(taskNode.getTask())) {
      nodeQueue.remove(0);
      maybeRemoveProcessedShouldRunAfterEdge(walkedShouldRunAfterEdges,taskNode);
      continue;
    }
    boolean alreadyVisited=visitingNodes.containsKey(taskNode);
    visitingNodes.put(taskNode,currentSegment);
    if (!alreadyVisited) {
      recordEdgeIfArrivedViaShouldRunAfter(walkedShouldRunAfterEdges,path,taskNode);
      removeShouldRunAfterSuccessorsIfTheyImposeACycle(visitingNodes,taskInfoInVisitingSegment);
      takePlanSnapshotIfCanBeRestoredToCurrentTask(planBeforeVisiting,taskNode);
      ArrayList<TaskInfo> successors=new ArrayList<TaskInfo>();
      addAllSuccessorsInReverseOrder(taskNode,successors);
      for (      TaskInfo successor : successors) {
        if (visitingNodes.containsEntry(successor,currentSegment)) {
          if (!walkedShouldRunAfterEdges.empty()) {
            GraphEdge toBeRemoved=walkedShouldRunAfterEdges.pop();
            toBeRemoved.from.removeShouldRunAfterSuccessor(toBeRemoved.to);
            restorePath(path,toBeRemoved);
            restoreQueue(nodeQueue,visitingNodes,toBeRemoved);
            restoreExecutionPlan(planBeforeVisiting,toBeRemoved);
            break;
          }
 else {
            onOrderingCycle();
          }
        }
        nodeQueue.add(0,new TaskInfoInVisitingSegment(successor,currentSegment));
      }
      path.push(taskNode);
    }
 else {
      nodeQueue.remove(0);
      visitingNodes.remove(taskNode,currentSegment);
      path.pop();
      executionPlan.put(taskNode.getTask(),taskNode);
      ArrayList<TaskInfo> finalizerTasks=new ArrayList<TaskInfo>();
      addAllReversed(finalizerTasks,taskNode.getFinalizers());
      for (      TaskInfo finalizer : finalizerTasks) {
        if (!visitingNodes.containsKey(finalizer)) {
          nodeQueue.add(finalizerTaskPosition(finalizer,nodeQueue),new TaskInfoInVisitingSegment(finalizer,visitingSegmentCounter++));
        }
      }
    }
  }
}
