{
  List<TaskInfo> queue=new ArrayList<TaskInfo>();
  List<Task> sortedTasks=new ArrayList<Task>(tasks);
  Collections.sort(sortedTasks);
  for (  Task task : sortedTasks) {
    TaskInfo node=graph.addNode(task);
    if (node.isMustNotRun()) {
      requireWithDependencies(node);
    }
 else     if (filter.isSatisfiedBy(task)) {
      node.require();
    }
    entryTasks.add(node);
    queue.add(node);
  }
  Set<TaskInfo> visiting=new HashSet<TaskInfo>();
  CachingTaskDependencyResolveContext context=new CachingTaskDependencyResolveContext();
  while (!queue.isEmpty()) {
    TaskInfo node=queue.get(0);
    if (node.getDependenciesProcessed()) {
      queue.remove(0);
      continue;
    }
    TaskInternal task=node.getTask();
    boolean filtered=!filter.isSatisfiedBy(task);
    if (filtered) {
      queue.remove(0);
      node.dependenciesProcessed();
      node.doNotRequire();
      continue;
    }
    if (visiting.add(node)) {
      Set<? extends Task> dependsOnTasks=realizedDependencies(task,context);
      for (      Task dependsOnTask : dependsOnTasks) {
        TaskInfo targetNode=graph.addNode(dependsOnTask);
        node.addDependencySuccessor(targetNode);
        if (!visiting.contains(targetNode)) {
          queue.add(0,targetNode);
        }
      }
      for (      Task finalizerTask : realizedDependencies(task,task.getFinalizedBy())) {
        TaskInfo targetNode=graph.addNode(finalizerTask);
        addFinalizerNode(node,targetNode);
        if (!visiting.contains(targetNode)) {
          queue.add(0,targetNode);
        }
      }
      for (      Task mustRunAfter : task.getMustRunAfter().getDependencies(task)) {
        TaskInfo targetNode=graph.addNode(mustRunAfter);
        node.addMustSuccessor(targetNode);
      }
      for (      Task shouldRunAfter : task.getShouldRunAfter().getDependencies(task)) {
        TaskInfo targetNode=graph.addNode(shouldRunAfter);
        node.addShouldSuccessor(targetNode);
      }
      if (node.isRequired()) {
        for (        TaskInfo successor : node.getDependencySuccessors()) {
          if (filter.isSatisfiedBy(successor.getTask())) {
            successor.require();
          }
        }
      }
 else {
        tasksInUnknownState.add(node);
      }
    }
 else {
      queue.remove(0);
      visiting.remove(node);
      node.dependenciesProcessed();
    }
  }
  resolveTasksInUnknownState();
}
