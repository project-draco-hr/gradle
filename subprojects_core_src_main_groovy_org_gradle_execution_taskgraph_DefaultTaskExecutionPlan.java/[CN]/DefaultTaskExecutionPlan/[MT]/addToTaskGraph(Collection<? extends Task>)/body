{
  List<Task> queue=new ArrayList<Task>(tasks);
  Collections.sort(queue);
  for (  Task task : queue) {
    TaskInfo node=graph.addNode(task);
    if (node.getMustNotRun()) {
      requireWithDependencies(node);
    }
 else {
      node.require();
    }
    entryTasks.add(node);
  }
  Set<Task> visiting=new HashSet<Task>();
  CachingTaskDependencyResolveContext context=new CachingTaskDependencyResolveContext();
  while (!queue.isEmpty()) {
    Task task=queue.get(0);
    TaskInfo node=graph.addNode(task);
    if (node.getDependenciesProcessed()) {
      queue.remove(0);
      continue;
    }
    boolean filtered=!filter.isSatisfiedBy(task);
    if (filtered) {
      queue.remove(0);
      node.dependenciesProcessed();
      node.doNotRequire();
      continue;
    }
    if (visiting.add(task)) {
      Set<? extends Task> dependsOnTasks=context.getDependencies(task);
      for (      Task dependsOnTask : dependsOnTasks) {
        graph.addHardEdge(node,dependsOnTask);
        if (!visiting.contains(dependsOnTask)) {
          queue.add(0,dependsOnTask);
        }
      }
      for (      Task finalizerTask : task.getFinalizedBy().getDependencies(task)) {
        addFinalizerNode(node,finalizerTask);
        if (!visiting.contains(finalizerTask)) {
          queue.add(0,finalizerTask);
        }
      }
      for (      Task mustRunAfter : task.getMustRunAfter().getDependencies(task)) {
        graph.addSoftEdge(node,mustRunAfter);
      }
      if (node.isRequired()) {
        for (        TaskInfo hardSuccessor : node.getHardSuccessors()) {
          hardSuccessor.require();
        }
      }
 else {
        tasksInUnknownState.add(node);
      }
    }
 else {
      queue.remove(0);
      visiting.remove(task);
      node.dependenciesProcessed();
    }
  }
  resolveTasksInUnknownState();
}
