{
  List<Task> queue=new ArrayList<Task>(tasks);
  Collections.sort(queue);
  entryTasks.addAll(queue);
  Set<Task> visiting=new HashSet<Task>();
  CachingTaskDependencyResolveContext context=new CachingTaskDependencyResolveContext();
  while (!queue.isEmpty()) {
    Task task=queue.get(0);
    if (graph.hasTask(task) && graph.getNode(task).getRequired()) {
      queue.remove(0);
      continue;
    }
    if (visiting.add(task)) {
      Set<Task> dependsOnTasks=new TreeSet<Task>(Collections.reverseOrder());
      dependsOnTasks.addAll(context.getDependencies(task));
      for (      Task dependsOnTask : dependsOnTasks) {
        if (visiting.contains(dependsOnTask)) {
          throw new CircularReferenceException(String.format("Circular dependency between tasks. Cycle includes [%s, %s].",task,dependsOnTask));
        }
        queue.add(0,dependsOnTask);
      }
    }
 else {
      queue.remove(0);
      visiting.remove(task);
      TaskDependencyGraphNode node=graph.addNode(task);
      Set<? extends Task> dependencies=context.getDependencies(task);
      for (      Task dependency : dependencies) {
        graph.addHardEdge(node,dependency);
      }
      for (      Task mustRunAfter : task.getMustRunAfter()) {
        graph.addSoftEdge(node,mustRunAfter);
      }
    }
  }
  determineExecutionPlan();
}
