{
  if (sourceBuild.equals(targetBuild)) {
    getLogger().warn("The source build and target build are identical. Set '{}.targetBuild.gradleVersion' if you want to compare with a different Gradle version.",getName());
  }
  ProgressLogger progressLogger=progressLoggerFactory.newOperation(getClass());
  progressLogger.setDescription("Gradle Build Comparison");
  progressLogger.setShortDescription(getName());
  progressLogger.started("executing source build");
  GradleBuildOutcomeSetTransformer fromOutcomeTransformer=createOutcomeSetTransformer("source");
  ProjectOutcomes fromOutput=buildProjectOutcomes(getSourceBuild());
  progressLogger.progress("inspecting source build outcomes");
  Set<BuildOutcome> fromOutcomes=fromOutcomeTransformer.transform(fromOutput);
  progressLogger.progress("executing target build");
  GradleBuildOutcomeSetTransformer toOutcomeTransformer=createOutcomeSetTransformer("target");
  ProjectOutcomes toOutput=buildProjectOutcomes(getTargetBuild());
  progressLogger.progress("inspecting target build outcomes");
  Set<BuildOutcome> toOutcomes=toOutcomeTransformer.transform(toOutput);
  progressLogger.progress("preparing for comparison");
  DefaultBuildOutcomeComparatorFactory comparatorFactory=new DefaultBuildOutcomeComparatorFactory();
  BuildOutcomeAssociator[] associators=new BuildOutcomeAssociator[2];
  DefaultBuildOutcomeComparisonResultRendererFactory<HtmlRenderContext> renderers=new DefaultBuildOutcomeComparisonResultRendererFactory<HtmlRenderContext>(HtmlRenderContext.class);
  associators[0]=new ByTypeAndNameBuildOutcomeAssociator<BuildOutcome>(GeneratedArchiveBuildOutcome.class);
  comparatorFactory.registerComparator(new GeneratedArchiveBuildOutcomeComparator());
  renderers.registerRenderer(new GeneratedArchiveBuildOutcomeComparisonResultHtmlRenderer("Source Build","Target Build"));
  associators[1]=new ByTypeAndNameBuildOutcomeAssociator<BuildOutcome>(UnknownBuildOutcome.class);
  comparatorFactory.registerComparator(new UnknownBuildOutcomeComparator());
  renderers.registerRenderer(new UnknownBuildOutcomeComparisonResultHtmlRenderer("Source Build","Target Build"));
  BuildOutcomeAssociator compositeAssociator=new CompositeBuildOutcomeAssociator(associators);
  BuildComparisonSpecFactory specFactory=new BuildComparisonSpecFactory(compositeAssociator);
  BuildComparisonSpec comparisonSpec=specFactory.createSpec(fromOutcomes,toOutcomes);
  progressLogger.progress("comparing build outcomes");
  BuildComparator buildComparator=new DefaultBuildComparator(comparatorFactory);
  BuildComparisonResult result=buildComparator.compareBuilds(comparisonSpec);
  writeReport(result,renderers);
  progressLogger.completed();
}
