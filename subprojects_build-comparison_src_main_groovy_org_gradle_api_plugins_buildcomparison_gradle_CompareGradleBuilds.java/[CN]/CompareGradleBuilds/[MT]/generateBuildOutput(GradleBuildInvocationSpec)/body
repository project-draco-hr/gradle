{
  GradleVersion gradleVersion=GradleVersion.version(spec.getGradleVersion());
  GradleConnector connector=GradleConnector.newConnector().forProjectDirectory(spec.getProjectDir());
  connector.useGradleUserHomeDir(getProject().getGradle().getStartParameter().getGradleUserHomeDir());
  if (gradleVersion.equals(GradleVersion.current())) {
    connector.useInstallation(getProject().getGradle().getGradleHomeDir());
  }
 else {
    connector.useGradleVersion(gradleVersion.getVersion());
  }
  ProjectConnection connection=connector.connect();
  try {
    List<String> tasksList=spec.getTasks();
    String[] tasks=tasksList.toArray(new String[tasksList.size()]);
    List<String> argumentsList=getImpliedArguments(spec);
    String[] arguments=argumentsList.toArray(new String[argumentsList.size()]);
    return connection.model(ProjectOutcomes.class).withArguments(arguments).forTasks(tasks).get();
  }
  finally {
    connection.close();
  }
}
