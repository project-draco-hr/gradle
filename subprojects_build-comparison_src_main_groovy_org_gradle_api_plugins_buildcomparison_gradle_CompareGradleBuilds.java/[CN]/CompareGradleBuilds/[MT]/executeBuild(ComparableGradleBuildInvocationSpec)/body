{
  GradleVersion gradleVersion=spec.getGradleVersion();
  GradleConnector connector=GradleConnector.newConnector().forProjectDirectory(spec.getProjectDir());
  File gradleUserHomeDir=getProject().getGradle().getStartParameter().getGradleUserHomeDir();
  if (gradleUserHomeDir != null) {
    connector.useGradleUserHomeDir(gradleUserHomeDir);
  }
  if (gradleVersion.equals(GradleVersion.current())) {
    connector.useInstallation(getProject().getGradle().getGradleHomeDir());
  }
 else {
    connector.useGradleVersion(gradleVersion.getVersion());
  }
  ProjectConnection connection=connector.connect();
  try {
    List<String> tasksList=spec.getTasks();
    String[] tasks=tasksList.toArray(new String[tasksList.size()]);
    List<String> argumentsList=getImpliedArguments(spec);
    String[] arguments=argumentsList.toArray(new String[argumentsList.size()]);
    if (spec.isCanObtainProjectOutcomesModel()) {
      ModelBuilder<ProjectOutcomes> modelBuilder=connection.model(ProjectOutcomes.class);
      return modelBuilder.withArguments(arguments).forTasks(tasks).get();
    }
 else {
      BuildLauncher buildLauncher=connection.newBuild();
      buildLauncher.withArguments(arguments).forTasks(tasks).run();
      return null;
    }
  }
  finally {
    connection.close();
  }
}
