{
  ModuleVersionSelector requestedModule=dependency.getRequested();
  VersionSelector requestedVersion=versionSelectorScheme.parseSelector(requestedModule.getVersion());
  Collection<SpecRuleAction<? super ComponentSelection>> rules=componentSelectionRules.getRules();
  for (  Versioned candidate : sortLatestFirst(versions)) {
    ModuleComponentIdentifier candidateIdentifier=DefaultModuleComponentIdentifier.newId(requestedModule.getGroup(),requestedModule.getName(),candidate.getVersion());
    MetadataProvider metadataProvider=new MetadataProvider(dependency,candidateIdentifier,moduleAccess);
    boolean versionMatches=versionMatches(requestedVersion,candidateIdentifier,metadataProvider);
    if (!metadataProvider.isUsable()) {
      applyTo(metadataProvider,result);
      return;
    }
    if (versionMatches) {
      boolean accepted=!isRejectedByRules(candidateIdentifier,rules,metadataProvider);
      if (!metadataProvider.isUsable()) {
        applyTo(metadataProvider,result);
        return;
      }
      if (accepted) {
        result.matches(candidateIdentifier);
        return;
      }
      if (requestedVersion.matchesUniqueVersion()) {
        break;
      }
    }
  }
  result.noMatchFound();
}
