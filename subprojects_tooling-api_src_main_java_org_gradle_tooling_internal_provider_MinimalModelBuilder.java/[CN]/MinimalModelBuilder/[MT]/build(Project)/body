{
  Configuration configuration=project.getConfigurations().findByName("testRuntime");
  final List<EclipseProjectDependencyVersion2> projectDependencies=new ArrayList<EclipseProjectDependencyVersion2>();
  if (configuration != null) {
    for (    final ProjectDependency projectDependency : configuration.getAllDependencies(ProjectDependency.class)) {
      projectDependencies.add(new EclipseProjectDependencyVersion2(){
        public HierarchicalEclipseProjectVersion1 getTargetProject(){
          return get(projectDependency.getDependencyProject());
        }
        public String getPath(){
          return projectDependency.getDependencyProject().getName();
        }
      }
);
    }
  }
  List<DefaultEclipseProject> children=buildChildren(project);
  String name=project.getName();
  String description=project.getDescription();
  List<TaskVersion1> tasks=Collections.emptyList();
  List<EclipseSourceDirectoryVersion1> sourceDirectories=Collections.emptyList();
  List<ExternalDependencyVersion1> dependencies=Collections.emptyList();
  DefaultEclipseProject eclipseProject=new DefaultEclipseProject(name,project.getPath(),description,project.getProjectDir(),children,tasks,sourceDirectories,dependencies,projectDependencies);
  for (  DefaultEclipseProject child : children) {
    child.setParent(eclipseProject);
  }
  addProject(project,eclipseProject);
  return eclipseProject;
}
