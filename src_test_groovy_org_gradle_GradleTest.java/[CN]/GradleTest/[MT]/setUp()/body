{
  context.setImposteriser(ClassImposteriser.INSTANCE);
  HelperUtil.deleteTestDir();
  settingsFinderMock=context.mock(ISettingsFinder.class);
  gradlePropertiesLoaderMock=context.mock(IGradlePropertiesLoader.class);
  settingsMock=context.mock(SettingsInternal.class);
  taskExecuterMock=context.mock(TaskExecuter.class);
  settingsProcessorMock=context.mock(SettingsProcessor.class);
  buildLoaderMock=context.mock(BuildLoader.class);
  buildConfigurerMock=context.mock(BuildConfigurer.class);
  buildListenerMock=context.mock(BuildListener.class);
  buildMock=context.mock(BuildInternal.class);
  testGradleProperties=WrapUtil.toMap("prop1","value1");
  boolean expectedSearchUpwards=false;
  expectedClassLoader=new URLClassLoader(new URL[0]);
  expectedRootDir=new File("rootDir");
  File expectedCurrentDir=new File(expectedRootDir,"currentDir");
  expectedRootProjectDescriptor=new DefaultProjectDescriptor(null,"someName",new File("somedir"),new DefaultProjectDescriptorRegistry());
  expectedRootProject=HelperUtil.createRootProject(expectedRootDir);
  expectedCurrentProject=HelperUtil.createRootProject(expectedCurrentDir);
  expectTasks("a","b");
  expectedStartParams=new StartParameter();
  expectedStartParams.setTaskNames(expectedTaskNames);
  expectedStartParams.setCurrentDir(expectedCurrentDir);
  expectedStartParams.setSearchUpwards(expectedSearchUpwards);
  expectedStartParams.setGradleUserHomeDir(new File(HelperUtil.TMP_DIR_FOR_TEST,"gradleUserHomeDir"));
  gradle=new Gradle(expectedStartParams,settingsFinderMock,gradlePropertiesLoaderMock,settingsProcessorMock,buildLoaderMock,buildConfigurerMock);
  context.checking(new Expectations(){
{
      allowing(settingsFinderMock).find(with(any(StartParameter.class)));
      allowing(gradlePropertiesLoaderMock).loadProperties(with(equal(expectedRootDir)),with(any(StartParameter.class)));
      allowing(gradlePropertiesLoaderMock).getGradleProperties();
      will(returnValue(testGradleProperties));
      allowing(settingsFinderMock).getSettingsDir();
      will(returnValue(expectedRootDir));
      allowing(settingsMock).createClassLoader();
      will(returnValue(expectedClassLoader));
      allowing(settingsMock).getRootProject();
      will(returnValue(expectedRootProjectDescriptor));
      allowing(buildMock).getRootProject();
      will(returnValue(expectedRootProject));
      allowing(buildMock).getCurrentProject();
      will(returnValue(expectedCurrentProject));
      allowing(buildMock).getTaskGraph();
      will(returnValue(taskExecuterMock));
    }
  }
);
}
