{
  final ScriptAware target=context.mock(ScriptAware.class);
  context.checking(new Expectations(){
{
      Sequence sequence=context.sequence("seq");
      ScriptSource sourceWithImportsMock=context.mock(ScriptSource.class,"imports");
      LoggingManagerInternal loggingManagerMock=context.mock(LoggingManagerInternal.class);
      one(pluginHandlerFactoryMock).createPluginHandler(target,scriptClassLoader);
      one(loggingManagerFactoryMock).create();
      will(returnValue(loggingManagerMock));
      one(importsReaderMock).withImports(scriptSourceMock);
      will(returnValue(sourceWithImportsMock));
      one(scriptCompilerFactoryMock).createCompiler(sourceWithImportsMock);
      will(returnValue(scriptCompilerMock));
      allowing(target).beforeCompile(with(notNullValue(ScriptPlugin.class)));
      one(scriptHandlerFactoryMock).create(sourceWithImportsMock,parentClassLoader);
      will(returnValue(scriptHandlerMock));
      allowing(scriptHandlerMock).getClassLoader();
      will(returnValue(scriptClassLoader));
      one(scriptCompilerMock).setClassloader(scriptClassLoader);
      inSequence(sequence);
      one(scriptCompilerMock).setTransformer(with(any(StatementExtractingScriptTransformer.class)));
      inSequence(sequence);
      one(scriptCompilerMock).compile(DefaultScript.class);
      will(returnValue(classPathScriptRunnerMock));
      allowing(classPathScriptRunnerMock).getScript();
      will(returnValue(classPathScriptMock));
      one(classPathScriptMock).init(with(sameInstance(target)),with(notNullValue(ServiceRegistry.class)));
      inSequence(sequence);
      one(classPathScriptRunnerMock).run();
      inSequence(sequence);
      one(scriptHandlerMock).updateClassPath();
      inSequence(sequence);
      one(scriptCompilerMock).setTransformer(with(notNullValue(Transformer.class)));
      inSequence(sequence);
      one(scriptCompilerMock).compile(DefaultScript.class);
      will(returnValue(scriptRunnerMock));
      inSequence(sequence);
      allowing(scriptRunnerMock).getScript();
      will(returnValue(scriptMock));
      one(scriptMock).init(with(sameInstance(target)),with(notNullValue(ServiceRegistry.class)));
      inSequence(sequence);
      one(target).afterCompile(with(notNullValue(ScriptPlugin.class)),with(sameInstance(scriptMock)));
      inSequence(sequence);
      one(scriptRunnerMock).run();
      inSequence(sequence);
    }
  }
);
  ScriptPlugin configurer=factory.create(scriptSourceMock);
  configurer.apply(target);
}
