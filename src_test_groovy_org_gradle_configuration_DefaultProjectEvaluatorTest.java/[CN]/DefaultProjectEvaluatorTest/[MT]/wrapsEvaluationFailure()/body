{
  final ScriptSource expectedScriptSource=new ImportsScriptSource(scriptSource,importsReader,rootDir);
  final Throwable failure=new RuntimeException();
  context.checking(new Expectations(){
{
      one(scriptProcessor).createScript(with(Matchers.reflectionEquals(expectedScriptSource)),with(same(classLoader)),with(equal(ProjectScript.class)));
      will(returnValue(buildScript));
      one(projectScriptMetaData).applyMetaData(buildScript,project);
      one(project).setBuildScript(buildScript);
      one(standardOutputRedirector).on(LogLevel.QUIET);
      one(buildScript).run();
      will(throwException(failure));
      one(standardOutputRedirector).flush();
    }
  }
);
  try {
    evaluator.evaluate(project);
    fail();
  }
 catch (  GradleScriptException e) {
    assertThat(e.getOriginalMessage(),equalTo("A problem occurred evaluating " + project + "."));
    assertThat(e.getScriptSource(),sameInstance(scriptSource));
    assertThat(e.getCause(),sameInstance(failure));
  }
}
