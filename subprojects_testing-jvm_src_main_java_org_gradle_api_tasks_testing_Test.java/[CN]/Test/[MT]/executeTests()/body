{
  LogLevel currentLevel=getCurrentLogLevel();
  TestLogging levelLogging=testLogging.get(currentLevel);
  TestExceptionFormatter exceptionFormatter=getExceptionFormatter(levelLogging);
  TestEventLogger eventLogger=new TestEventLogger(getTextOutputFactory(),currentLevel,levelLogging,exceptionFormatter);
  addTestListener(eventLogger);
  addTestOutputListener(eventLogger);
  if (getFilter().isFailOnNoMatchingTests() && !getFilter().getIncludePatterns().isEmpty()) {
    addTestListener(new NoMatchingTestsReporter("No tests found for given includes: " + getFilter().getIncludePatterns()));
  }
  File binaryResultsDir=getBinResultsDir();
  getProject().delete(binaryResultsDir);
  getProject().mkdir(binaryResultsDir);
  Map<String,TestClassResult> results=new HashMap<String,TestClassResult>();
  TestOutputStore testOutputStore=new TestOutputStore(binaryResultsDir);
  TestOutputStore.Writer outputWriter=testOutputStore.writer();
  TestReportDataCollector testReportDataCollector=new TestReportDataCollector(results,outputWriter);
  addTestListener(testReportDataCollector);
  addTestOutputListener(testReportDataCollector);
  TestCountLogger testCountLogger=new TestCountLogger(getProgressLoggerFactory());
  addTestListener(testCountLogger);
  testListenerInternalBroadcaster.add(new TestListenerAdapter(testListenerBroadcaster.getSource(),testOutputListenerBroadcaster.getSource()));
  TestResultProcessor resultProcessor=new StateTrackingTestResultProcessor(testListenerInternalBroadcaster.getSource());
  if (testExecuter == null) {
    testExecuter=new DefaultTestExecuter(getProcessBuilderFactory(),getActorFactory());
  }
  try {
    testExecuter.execute(this,resultProcessor);
  }
  finally {
    testExecuter=null;
    testListenerBroadcaster.removeAll();
    testOutputListenerBroadcaster.removeAll();
    testListenerInternalBroadcaster.removeAll();
    outputWriter.close();
  }
  new TestResultSerializer(binaryResultsDir).write(results.values());
  TestResultsProvider testResultsProvider=new InMemoryTestResultsProvider(results.values(),testOutputStore.reader());
  try {
    if (testReporter == null) {
      testReporter=new DefaultTestReport(getBuildOperationProcessor());
    }
    JUnitXmlReport junitXml=reports.getJunitXml();
    if (junitXml.isEnabled()) {
      TestOutputAssociation outputAssociation=junitXml.isOutputPerTestCase() ? TestOutputAssociation.WITH_TESTCASE : TestOutputAssociation.WITH_SUITE;
      Binary2JUnitXmlReportGenerator binary2JUnitXmlReportGenerator=new Binary2JUnitXmlReportGenerator(junitXml.getDestination(),testResultsProvider,outputAssociation,getBuildOperationProcessor());
      binary2JUnitXmlReportGenerator.generate();
    }
    DirectoryReport html=reports.getHtml();
    if (!html.isEnabled()) {
      getLogger().info("Test report disabled, omitting generation of the HTML test report.");
    }
 else {
      testReporter.generateReport(testResultsProvider,html.getDestination());
    }
  }
  finally {
    CompositeStoppable.stoppable(testResultsProvider).stop();
    testReporter=null;
    testFramework=null;
  }
  if (testCountLogger.hadFailures()) {
    handleTestFailures();
  }
}
