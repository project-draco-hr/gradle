{
  context.checking(new Expectations(){
{
      allowing(project).absoluteProjectPath("list");
      will(returnValue(":path"));
      allowing(project).getTasks();
      will(returnValue(taskContainer));
      allowing(project).getConvention();
      will(returnValue(null));
      allowing(project).getAllprojects();
      will(returnValue(toSet(project)));
      allowing(project).getSubprojects();
      will(returnValue(toSet()));
      allowing(project).getModelRegistry();
      will(returnValue(modelRegistry));
      allowing(modelRegistry).atState(ModelPath.path("tasks"),ModelNode.State.GraphClosed);
    }
  }
);
  task=TestUtil.createTask(TaskReportTask.class);
  task.setRenderer(renderer);
}
