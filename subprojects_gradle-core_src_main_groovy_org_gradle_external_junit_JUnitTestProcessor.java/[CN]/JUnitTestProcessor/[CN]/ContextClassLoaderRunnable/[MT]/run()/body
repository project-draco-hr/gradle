{
  final String testClassName=testClassRunInfo.getTestClassName();
  junit.framework.TestResult testResult=new junit.framework.TestResult();
  for (  final junit.framework.TestListener testListener : testListeners) {
    testResult.addListener(testListener);
  }
  try {
    final Class testClass=Class.forName(testClassName,true,sandboxClassLoader);
    junit.framework.Test suite=null;
    Method suiteMethod=null;
    try {
      suiteMethod=testClass.getMethod("suite");
    }
 catch (    NoSuchMethodException noSuiteMethodException) {
    }
    if (suiteMethod == null) {
      if (junit4TestAdapterClass == null) {
        suite=new junit.framework.TestSuite(testClass);
      }
 else {
        suite=(junit.framework.Test)junit4TestAdapterClass.getConstructor(Class.class).newInstance(testClass);
      }
    }
 else {
      suite=(junit.framework.Test)suiteMethod.invoke(null);
    }
    stdOutputCapture.start();
    suite.run(testResult);
    stdOutputCapture.stop();
  }
 catch (  ClassNotFoundException e) {
    classProcessResult=testProcessResultFactory.createClassProcessErrorResult(testClassRunInfo,e);
  }
catch (  InvocationTargetException e) {
    classProcessResult=testProcessResultFactory.createClassProcessErrorResult(testClassRunInfo,e);
  }
catch (  IllegalAccessException e) {
    classProcessResult=testProcessResultFactory.createClassProcessErrorResult(testClassRunInfo,e);
  }
catch (  NoSuchMethodException e) {
    classProcessResult=testProcessResultFactory.createClassProcessErrorResult(testClassRunInfo,e);
  }
catch (  InstantiationException e) {
    classProcessResult=testProcessResultFactory.createClassProcessErrorResult(testClassRunInfo,e);
  }
  int failures=0;
  int errors=0;
  Enumeration e=testResult.failures();
  while (e.hasMoreElements()) {
    e.nextElement();
    failures++;
  }
  e=testResult.errors();
  while (e.hasMoreElements()) {
    Throwable t=((TestFailure)e.nextElement()).thrownException();
    if (t instanceof AssertionFailedError || t.getClass().getName().equals("java.lang.AssertionError")) {
      failures++;
    }
 else {
      errors++;
    }
  }
  final int errorCount=errors;
  final int failureCount=failures;
  final int runCount=testResult.runCount();
  final int successCount=runCount - (errorCount + failureCount);
  if (errorCount > 0 || failureCount > 0) {
    logger.warn(testClassName + "[run #: " + runCount+ ", success #: "+ successCount+ ", failure #: "+ failureCount+ ", error #: "+ errorCount+ "]");
    if (failureCount > 0) {
      final Enumeration failuresEnumeration=testResult.failures();
      while (failuresEnumeration.hasMoreElements()) {
        final junit.framework.TestFailure testFailure=(junit.framework.TestFailure)failuresEnumeration.nextElement();
        Throwable t=testFailure.thrownException();
        logger.warn("\t {} failed because of [FAILURE] {}",testFailure.failedTest(),testFailure.exceptionMessage());
        logger.warn("\t\t",t);
      }
    }
    if (errorCount > 0) {
      final Enumeration errorsEnumeration=testResult.errors();
      while (errorsEnumeration.hasMoreElements()) {
        final junit.framework.TestFailure testError=(junit.framework.TestFailure)errorsEnumeration.nextElement();
        Throwable t=testError.thrownException();
        if (t instanceof AssertionFailedError || t.getClass().getName().equals("java.lang.AssertionError")) {
          logger.warn("\t {} failed because of [FAILURE] {}",testError.failedTest(),testError.exceptionMessage());
          logger.warn("\t\t",t);
        }
 else {
          logger.warn("\t {} failed because of [ERROR] {}",testError.failedTest(),testError.exceptionMessage());
          logger.warn("\t\t",t);
        }
      }
    }
  }
 else   logger.debug(testClassName + "[run #: " + runCount+ ", success #: "+ successCount+ ", failure #: "+ failureCount+ ", error #: "+ errorCount+ "]");
}
