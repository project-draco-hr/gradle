{
  final String testClassName=testClassRunInfo.getTestClassName();
  classProcessResult=testProcessResultFactory.createEmptyClassResult(testClassRunInfo);
  testListeners.add(new JUnitTestListenerWrapper(new JUnitClassProcessResultAdapaterListener(classProcessResult)));
  junit.framework.TestResult testResult=new junit.framework.TestResult();
  for (  final junit.framework.TestListener testListener : testListeners) {
    testResult.addListener(testListener);
  }
  try {
    final Class testClass=Class.forName(testClassName,true,sandboxClassLoader);
    final JUnitTestClassHandler testClassHandler=testClassHandlerFactory.createTestClassHandler(testClass);
    final junit.framework.Test suite=testClassHandler.getSuite();
    stdOutputCapture.start();
    suite.run(testResult);
    stdOutputCapture.stop();
    int failures=0;
    int errors=0;
    Enumeration e=testResult.failures();
    while (e.hasMoreElements()) {
      e.nextElement();
      failures++;
    }
    e=testResult.errors();
    while (e.hasMoreElements()) {
      Throwable t=((TestFailure)e.nextElement()).thrownException();
      if (t instanceof AssertionFailedError || t.getClass().getName().equals("java.lang.AssertionError")) {
        failures++;
      }
 else {
        errors++;
      }
    }
    final int errorCount=errors;
    final int failureCount=failures;
    final int runCount=testResult.runCount();
    final int successCount=runCount - (errorCount + failureCount);
    if (errorCount > 0 || failureCount > 0) {
      LOGGER.warn(testClassName + "[run #: " + runCount+ ", success #: "+ successCount+ ", failure #: "+ failureCount+ ", error #: "+ errorCount+ "]");
      if (failureCount > 0) {
        final Enumeration failuresEnumeration=testResult.failures();
        while (failuresEnumeration.hasMoreElements()) {
          final junit.framework.TestFailure testFailure=(junit.framework.TestFailure)failuresEnumeration.nextElement();
          Throwable t=testFailure.thrownException();
          LOGGER.warn("\t {} failed because of [FAILURE] {}",testFailure.failedTest(),testFailure.exceptionMessage());
          LOGGER.warn("\t\t",t);
        }
      }
      if (errorCount > 0) {
        final Enumeration errorsEnumeration=testResult.errors();
        while (errorsEnumeration.hasMoreElements()) {
          final junit.framework.TestFailure testError=(junit.framework.TestFailure)errorsEnumeration.nextElement();
          Throwable t=testError.thrownException();
          if (t instanceof AssertionFailedError || t.getClass().getName().equals("java.lang.AssertionError")) {
            LOGGER.warn("\t {} failed because of [FAILURE] {}",testError.failedTest(),testError.exceptionMessage());
            LOGGER.warn("\t\t",t);
          }
 else {
            LOGGER.warn("\t {} failed because of [ERROR] {}",testError.failedTest(),testError.exceptionMessage());
            LOGGER.warn("\t\t",t);
          }
        }
      }
    }
 else     LOGGER.debug(testClassName + "[run #: " + runCount+ ", success #: "+ successCount+ ", failure #: "+ failureCount+ ", error #: "+ errorCount+ "]");
  }
 catch (  Throwable t) {
    classProcessResult.setProcessorErrorReason(t);
  }
}
