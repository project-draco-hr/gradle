{
  if (project.hasProperty("heapdump")) {
    boolean skipHeapDump=false;
    if (project.hasProperty("buildExperimentPhase") && project.hasProperty("buildExperimentIterationNumber") && project.hasProperty("buildExperimentIterationMax")) {
      if (!"measurement".equals(project.property("buildExperimentPhase")) || !project.property("buildExperimentIterationNumber").equals(project.property("buildExperimentIterationMax"))) {
        skipHeapDump=true;
      }
    }
    if (!skipHeapDump) {
      PlatformManagedObject hotspotDiagnosticMXBean=null;
      try {
        Class<? extends PlatformManagedObject> hotspotDiagnosticMXBeanClass=(Class<? extends PlatformManagedObject>)Class.forName("com.sun.management.HotSpotDiagnosticMXBean");
        hotspotDiagnosticMXBean=ManagementFactory.getPlatformMXBeans(hotspotDiagnosticMXBeanClass).get(0);
      }
 catch (      Exception e) {
        logger.error("Couldn't locate MBean for doing heap dump.",e);
      }
      if (hotspotDiagnosticMXBean != null) {
        logger.lifecycle("Creating heap dump...");
        final String dumpDescription=(project.hasProperty("buildExperimentDisplayName") ? (project.getName() + "_" + project.property("buildExperimentDisplayName")) : project.getName()).replaceAll("[^a-zA-Z0-9.-]","_").replaceAll("[_]+","_");
        final File dumpFile=new File(System.getProperty("java.io.tmpdir"),"heapdump-" + dumpDescription + "-"+ new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss").format(new Date())+ ".hprof");
        final boolean liveObjectsOnly=!"all".equals(project.property("heapdump"));
        DefaultGroovyMethods.invokeMethod(hotspotDiagnosticMXBean,"dumpHeap",new Object[]{dumpFile.getAbsolutePath(),liveObjectsOnly});
        logger.lifecycle("Dumped to " + dumpFile.getAbsolutePath() + ".");
      }
    }
  }
}
