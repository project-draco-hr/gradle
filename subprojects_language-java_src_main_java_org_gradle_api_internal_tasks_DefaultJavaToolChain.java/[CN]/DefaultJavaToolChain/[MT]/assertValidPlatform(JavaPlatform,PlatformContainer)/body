{
  List<JavaPlatform> alternatives=new ArrayList<JavaPlatform>();
  alternatives.addAll(platforms.withType(JavaPlatform.class));
  Collections.sort(alternatives,new Comparator<JavaPlatform>(){
    public int compare(    JavaPlatform p1,    JavaPlatform p2){
      return -p1.getTargetCompatibility().compareTo(p2.getTargetCompatibility());
    }
  }
);
  if (!isCompatible(platform,getJavaVersion())) {
    List<String> compatibleVersions=new ArrayList<String>();
    for (    JavaPlatform alternative : alternatives) {
      if (isCompatible(alternative,getJavaVersion())) {
        compatibleVersions.add(alternative.getName());
      }
    }
    String compatibleVersionsString=compatibleVersions.isEmpty() ? "(None)" : compatibleVersions.toString();
    throw new IllegalArgumentException(String.format("Cannot use target JVM platform: '" + platform.getName() + "' with target compatibility '"+ platform.getTargetCompatibility()+ "' because it is too high compared to Java toolchain version '"+ getJavaVersion()+ "'. Compatible target platforms are: "+ compatibleVersionsString+ "."));
  }
}
