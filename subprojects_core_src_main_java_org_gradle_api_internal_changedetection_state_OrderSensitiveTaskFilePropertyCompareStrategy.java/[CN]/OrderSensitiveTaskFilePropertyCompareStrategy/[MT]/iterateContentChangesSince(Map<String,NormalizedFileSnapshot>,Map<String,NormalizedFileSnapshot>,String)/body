{
  final Iterator<Map.Entry<String,NormalizedFileSnapshot>> currentEntries=current.entrySet().iterator();
  final Iterator<Map.Entry<String,NormalizedFileSnapshot>> previousEntries=previous.entrySet().iterator();
  return new AbstractIterator<TaskStateChange>(){
    @Override protected TaskStateChange computeNext(){
      while (true) {
        if (currentEntries.hasNext()) {
          Map.Entry<String,NormalizedFileSnapshot> current=currentEntries.next();
          String absolutePath=current.getKey();
          if (previousEntries.hasNext()) {
            Map.Entry<String,NormalizedFileSnapshot> other=previousEntries.next();
            NormalizedFileSnapshot normalizedSnapshot=current.getValue();
            NormalizedFileSnapshot otherNormalizedSnapshot=other.getValue();
            String normalizedPath=normalizedSnapshot.getNormalizedPath();
            String otherNormalizedPath=otherNormalizedSnapshot.getNormalizedPath();
            if (normalizedPath.equals(otherNormalizedPath)) {
              if (normalizedSnapshot.getSnapshot().isContentUpToDate(otherNormalizedSnapshot.getSnapshot())) {
                continue;
              }
 else {
                return new FileChange(absolutePath,ChangeType.MODIFIED,fileType);
              }
            }
 else {
              return new FileChange(absolutePath,ChangeType.REPLACED,fileType);
            }
          }
 else {
            return new FileChange(absolutePath,ChangeType.ADDED,fileType);
          }
        }
 else {
          if (previousEntries.hasNext()) {
            return new FileChange(previousEntries.next().getKey(),ChangeType.REMOVED,fileType);
          }
 else {
            return endOfData();
          }
        }
      }
    }
  }
;
}
