{
  out.println("\t<info organisation=\"" + XMLHelper.escape(md.getModuleRevisionId().getOrganisation()) + "\"");
  out.println("\t\tmodule=\"" + XMLHelper.escape(md.getModuleRevisionId().getName()) + "\"");
  String branch=md.getResolvedModuleRevisionId().getBranch();
  if (branch != null) {
    out.println("\t\tbranch=\"" + XMLHelper.escape(branch) + "\"");
  }
  String revision=md.getResolvedModuleRevisionId().getRevision();
  if (revision != null) {
    out.println("\t\trevision=\"" + XMLHelper.escape(revision) + "\"");
  }
  out.println("\t\tstatus=\"" + XMLHelper.escape(md.getStatus()) + "\"");
  out.println("\t\tpublication=\"" + Ivy.DATE_FORMAT.format(md.getResolvedPublicationDate()) + "\"");
  if (md.isDefault()) {
    out.println("\t\tdefault=\"true\"");
  }
  if (md instanceof DefaultModuleDescriptor) {
    DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
    if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals("system")) {
      out.println("\t\tnamespace=\"" + XMLHelper.escape(dmd.getNamespace().getName()) + "\"");
    }
  }
  if (!md.getExtraAttributes().isEmpty()) {
    printExtraAttributes(md,out,"\t\t");
    out.println();
  }
  if (requireInnerInfoElement(md)) {
    out.println("\t>");
    ExtendsDescriptor[] parents=md.getInheritedDescriptors();
    for (int i=0; i < parents.length; i++) {
      ExtendsDescriptor parent=parents[i];
      ModuleRevisionId mrid=parent.getParentRevisionId();
      out.print("\t\t<extends organisation=\"" + XMLHelper.escape(mrid.getOrganisation()) + "\""+ " module=\""+ XMLHelper.escape(mrid.getName())+ "\""+ " revision=\""+ XMLHelper.escape(mrid.getRevision())+ "\"");
      String location=parent.getLocation();
      if (location != null) {
        out.print(" location=\"" + XMLHelper.escape(location) + "\"");
      }
      out.print(" extendType=\"" + StringUtils.join(parent.getExtendsTypes(),",") + "\"");
      out.println("/>");
    }
    License[] licenses=md.getLicenses();
    for (int i=0; i < licenses.length; i++) {
      License license=licenses[i];
      out.print("\t\t<license ");
      if (license.getName() != null) {
        out.print("name=\"" + XMLHelper.escape(license.getName()) + "\" ");
      }
      if (license.getUrl() != null) {
        out.print("url=\"" + XMLHelper.escape(license.getUrl()) + "\" ");
      }
      out.println("/>");
    }
    if (md.getHomePage() != null || md.getDescription() != null) {
      out.print("\t\t<description");
      if (md.getHomePage() != null) {
        out.print(" homepage=\"" + XMLHelper.escape(md.getHomePage()) + "\"");
      }
      if (md.getDescription() != null && md.getDescription().trim().length() > 0) {
        out.println(">");
        out.println("\t\t" + XMLHelper.escape(md.getDescription()));
        out.println("\t\t</description>");
      }
 else {
        out.println(" />");
      }
    }
    for (Iterator it=md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) {
      Map.Entry extraDescr=(Map.Entry)it.next();
      if (extraDescr.getValue() == null || ((String)extraDescr.getValue()).length() == 0) {
        continue;
      }
      out.print("\t\t<");
      out.print(extraDescr.getKey());
      out.print(">");
      out.print(XMLHelper.escape((String)extraDescr.getValue()));
      out.print("</");
      out.print(extraDescr.getKey());
      out.println(">");
    }
    out.println("\t</info>");
  }
 else {
    out.println("\t/>");
  }
}
