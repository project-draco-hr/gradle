{
  return new ModuleComponentRepositoryAccess(){
    public void listModuleVersions(    final DependencyMetaData dependency,    final BuildableModuleVersionSelectionResolveResult result){
      cacheLockingManager.longRunningOperation(String.format("List %s using repository %s",dependency,getId()),new Runnable(){
        public void run(){
          repository.listModuleVersions(dependency,result);
        }
      }
);
    }
    public void resolveComponentMetaData(    final DependencyMetaData dependency,    final ModuleComponentIdentifier moduleComponentIdentifier,    final BuildableModuleVersionMetaDataResolveResult result){
      cacheLockingManager.longRunningOperation(String.format("Resolve %s using repository %s",dependency,getId()),new Runnable(){
        public void run(){
          repository.resolveComponentMetaData(dependency,moduleComponentIdentifier,result);
        }
      }
);
    }
    public void resolveModuleArtifacts(    final ComponentMetaData component,    final ArtifactResolveContext context,    final BuildableArtifactSetResolveResult result){
      cacheLockingManager.longRunningOperation(String.format("Resolve %s for %s using repository %s",context,component,getId()),new Runnable(){
        public void run(){
          repository.resolveModuleArtifacts(component,context,result);
        }
      }
);
    }
  }
;
}
