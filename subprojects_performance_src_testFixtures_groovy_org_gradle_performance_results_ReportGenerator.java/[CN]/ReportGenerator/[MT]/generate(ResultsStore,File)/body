{
  try {
    File outputFile=new File(outputDirectory,"index.html");
    GFileUtils.parentMkdirs(outputFile);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),"UTF-8"));
    try {
      new Html(writer){
{
          html();
          head();
          meta().httpEquiv("Content-Type").content("text/html; charset=utf-8");
          style().text("body { font-family: sans-serif; margin: 3em; } h2 { font-size: 14pt; margin-top: 2em; } table { width: 100%; } th { text-align: left; } #footer { margin-top: 4em; font-size: 8pt; }").end();
          title().text("Profile report").end();
          end();
          body();
          div().id("content");
          h2().text("All tests").end();
          List<String> testNames=store.getTestNames();
          ul();
          for (          String testName : testNames) {
            li();
            a().href(String.format("#%s",testName)).text(testName).end();
            end();
          }
          end();
          for (          String testName : testNames) {
            TestExecutionHistory testHistory=store.getTestResults(testName);
            h2();
            a().name(testName).end();
            text(testName);
            end();
            table();
            tr();
            th().end();
            th().colspan(String.valueOf(testHistory.getBaselineVersions().size() + 1)).text("Average execution time").end();
            th().colspan(String.valueOf(testHistory.getBaselineVersions().size() + 1)).text("Average heap usage").end();
            end();
            tr();
            th().text("Date").end();
            for (            String version : testHistory.getBaselineVersions()) {
              th().text(version).end();
            }
            th().text("Current").end();
            for (            String version : testHistory.getBaselineVersions()) {
              th().text(version).end();
            }
            th().text("Current").end();
            end();
            for (            PerformanceResults performanceResults : testHistory.getResults()) {
              tr();
              td().text(format.format(new Date(performanceResults.getTestTime()))).end();
              for (              String version : testHistory.getBaselineVersions()) {
                BaselineVersion baselineVersion=performanceResults.getBaselineVersions().get(version);
                if (baselineVersion == null) {
                  td().text("").end();
                }
 else {
                  td().text(baselineVersion.getResults().avgTime().format()).end();
                }
              }
              td().text(performanceResults.getCurrent().avgTime().format()).end();
              for (              String version : testHistory.getBaselineVersions()) {
                BaselineVersion baselineVersion=performanceResults.getBaselineVersions().get(version);
                if (baselineVersion == null) {
                  td().text("").end();
                }
 else {
                  td().text(baselineVersion.getResults().avgMemory().format()).end();
                }
              }
              td().text(performanceResults.getCurrent().avgMemory().format()).end();
              end();
            }
            end();
          }
          end();
          div().id("footer").text(String.format("Generated at %s by %s",format.format(new Date()),GradleVersion.current()));
          end();
          endAll();
        }
      }
;
    }
  finally {
      writer.close();
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not generate performance test report to '%s'.",outputDirectory),e);
  }
}
