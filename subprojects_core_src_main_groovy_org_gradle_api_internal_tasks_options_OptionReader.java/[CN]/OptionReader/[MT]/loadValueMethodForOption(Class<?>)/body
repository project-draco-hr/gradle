{
  List<JavaMethod<Object,Collection>> methods=new ArrayList<JavaMethod<Object,Collection>>();
  for (Class<?> type=declaredClass; type != Object.class && type != null; type=type.getSuperclass()) {
    for (    Method method : type.getDeclaredMethods()) {
      OptionValues optionValues=method.getAnnotation(OptionValues.class);
      if (optionValues != null) {
        if (Collection.class.isAssignableFrom(method.getReturnType()) && method.getParameterTypes().length == 0 && !Modifier.isStatic(method.getModifiers())) {
          methods.add(JavaReflectionUtil.method(Object.class,Collection.class,method));
        }
 else {
          throw new OptionValidationException(String.format("OptionValues annotation not supported on method '%s' in class '%s'. Supported method must be non static, return Collection and take no parameters.",method.getName(),type.getName()));
        }
      }
    }
  }
  return methods;
}
