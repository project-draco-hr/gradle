{
  try {
    return withConnection(new ConnectionAction<TestExecutionHistory>(){
      public TestExecutionHistory execute(      Connection connection) throws Exception {
        List<PerformanceResults> results=new ArrayList<PerformanceResults>();
        Set<String> allVersions=new TreeSet<String>(new Comparator<String>(){
          public int compare(          String o1,          String o2){
            return GradleVersion.version(o1).compareTo(GradleVersion.version(o2));
          }
        }
);
        PreparedStatement executionsForName=connection.prepareStatement("select id, executionTime, targetVersion, testProject, tasks, args, operatingSystem, jvm, vcsBranch, vcsCommit from testExecution where testId = ? order by executionTime desc");
        PreparedStatement operationsForExecution=connection.prepareStatement("select version, executionTimeMs, heapUsageBytes, totalHeapUsageBytes, maxHeapUsageBytes, maxUncollectedHeapBytes, maxCommittedHeapBytes from testOperation where testExecution = ?");
        executionsForName.setString(1,testName);
        ResultSet testExecutions=executionsForName.executeQuery();
        while (testExecutions.next()) {
          long id=testExecutions.getLong(1);
          PerformanceResults performanceResults=new PerformanceResults();
          performanceResults.setTestId(testName);
          performanceResults.setTestTime(testExecutions.getTimestamp(2).getTime());
          performanceResults.setVersionUnderTest(testExecutions.getString(3));
          performanceResults.setTestProject(testExecutions.getString(4));
          performanceResults.setTasks(toArray(testExecutions.getObject(5)));
          performanceResults.setArgs(toArray(testExecutions.getObject(6)));
          performanceResults.setOperatingSystem(testExecutions.getString(7));
          performanceResults.setJvm(testExecutions.getString(8));
          performanceResults.setVcsBranch(testExecutions.getString(9));
          performanceResults.setVcsCommit(testExecutions.getString(10));
          results.add(performanceResults);
          operationsForExecution.setLong(1,id);
          ResultSet builds=operationsForExecution.executeQuery();
          while (builds.next()) {
            String version=builds.getString(1);
            if ("1.7".equals(version) && performanceResults.getTestTime() <= ignoreV17Before) {
              continue;
            }
            MeasuredOperation operation=new MeasuredOperation();
            operation.setExecutionTime(Duration.millis(builds.getBigDecimal(2)));
            operation.setTotalMemoryUsed(DataAmount.bytes(builds.getBigDecimal(3)));
            operation.setTotalHeapUsage(DataAmount.bytes(builds.getBigDecimal(4)));
            operation.setMaxHeapUsage(DataAmount.bytes(builds.getBigDecimal(5)));
            operation.setMaxUncollectedHeap(DataAmount.bytes(builds.getBigDecimal(6)));
            operation.setMaxCommittedHeap(DataAmount.bytes(builds.getBigDecimal(7)));
            if (version == null) {
              performanceResults.getCurrent().add(operation);
            }
 else {
              BaselineVersion baselineVersion=performanceResults.baseline(version);
              baselineVersion.getResults().add(operation);
              allVersions.add(version);
            }
          }
        }
        testExecutions.close();
        operationsForExecution.close();
        executionsForName.close();
        return new TestExecutionHistory(testName,new ArrayList<String>(allVersions),results);
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not load results from datastore '%s'.",dbFile),e);
  }
}
