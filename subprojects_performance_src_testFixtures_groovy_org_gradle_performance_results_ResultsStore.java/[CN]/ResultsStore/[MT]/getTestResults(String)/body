{
  try {
    return withConnection(new ConnectionAction<TestExecutionHistory>(){
      public TestExecutionHistory execute(      Connection connection) throws Exception {
        List<PerformanceResults> results=new ArrayList<PerformanceResults>();
        Set<String> allVersions=new TreeSet<String>();
        PreparedStatement executionsForName=connection.prepareStatement("select id, executionTime, targetVersion from testExecution where testName = ? order by executionTime desc");
        PreparedStatement buildsForTest=connection.prepareStatement("select version, executionTimeMs, heapUsageBytes from testOperation where testExecution = ?");
        executionsForName.setString(1,testName);
        ResultSet testExecutions=executionsForName.executeQuery();
        while (testExecutions.next()) {
          long id=testExecutions.getLong(1);
          Timestamp executionTime=testExecutions.getTimestamp(2);
          String versionUnderTest=testExecutions.getString(3);
          PerformanceResults performanceResults=new PerformanceResults();
          performanceResults.setTestTime(executionTime.getTime());
          performanceResults.setDisplayName(testName);
          performanceResults.setVersionUnderTest(versionUnderTest);
          results.add(performanceResults);
          buildsForTest.setLong(1,id);
          ResultSet builds=buildsForTest.executeQuery();
          while (builds.next()) {
            String version=builds.getString(1);
            BigDecimal executionTimeMs=builds.getBigDecimal(2);
            BigDecimal heapUsageBytes=builds.getBigDecimal(3);
            MeasuredOperation operation=new MeasuredOperation();
            operation.setExecutionTime(Duration.millis(executionTimeMs));
            operation.setTotalMemoryUsed(DataAmount.bytes(heapUsageBytes));
            if (version == null) {
              performanceResults.getCurrent().add(operation);
            }
 else {
              BaselineVersion baselineVersion=performanceResults.baseline(version);
              baselineVersion.getResults().add(operation);
              allVersions.add(version);
            }
          }
        }
        testExecutions.close();
        buildsForTest.close();
        executionsForName.close();
        return new TestExecutionHistory(new ArrayList<String>(allVersions),results);
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not load results from datastore '%s'.",dbFile),e);
  }
}
