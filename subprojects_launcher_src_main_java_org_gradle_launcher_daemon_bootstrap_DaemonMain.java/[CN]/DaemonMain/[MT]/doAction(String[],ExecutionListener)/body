{
  if (args.length < 4) {
    invalidArgs("Following arguments are required: <gradle-version> <gradle-home-dir> <daemon-dir> <timeout-millis> <daemonUid> <optional startup jvm opts>");
  }
  File gradleHomeDir=new File(args[1]);
  File daemonBaseDir=new File(args[2]);
  int idleTimeoutMs=0;
  try {
    idleTimeoutMs=Integer.parseInt(args[3]);
  }
 catch (  NumberFormatException e) {
    invalidArgs("Second argument must be a whole number (i.e. daemon idle timeout in ms)");
  }
  String daemonUid=args[4];
  List<String> startupOpts=new ArrayList<String>(args.length - 5);
  for (int i=5; i < args.length; i++) {
    startupOpts.add(args[i]);
  }
  LOGGER.debug("Assuming the daemon was started with following jvm opts: {}",startupOpts);
  NativeServices.initialize(gradleHomeDir);
  DaemonServerConfiguration parameters=new DefaultDaemonServerConfiguration(daemonUid,daemonBaseDir,idleTimeoutMs,startupOpts);
  LoggingServiceRegistry loggingRegistry=LoggingServiceRegistry.newCommandLineProcessLogging();
  LoggingManagerInternal loggingManager=loggingRegistry.newInstance(LoggingManagerInternal.class);
  DaemonServices daemonServices=new DaemonServices(parameters,loggingRegistry,loggingManager);
  File daemonLog=daemonServices.getDaemonLogFile();
  initialiseLogging(loggingManager,daemonLog);
  Daemon daemon=daemonServices.get(Daemon.class);
  daemon.start();
  try {
    DaemonContext daemonContext=daemonServices.get(DaemonContext.class);
    Long pid=daemonContext.getPid();
    daemonStarted(pid,daemon.getUid(),daemon.getAddress(),daemonLog);
    daemon.requestStopOnIdleTimeout(parameters.getIdleTimeout(),TimeUnit.MILLISECONDS);
  }
  finally {
    daemon.stop();
  }
}
