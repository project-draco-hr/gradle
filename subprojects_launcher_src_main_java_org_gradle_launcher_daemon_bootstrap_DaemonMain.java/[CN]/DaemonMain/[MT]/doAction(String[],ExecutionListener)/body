{
  if (args.length != 1) {
    invalidArgs("Following arguments are required: <gradle-version>");
  }
  List<String> startupOpts;
  File gradleHomeDir;
  File daemonBaseDir;
  int idleTimeoutMs;
  int periodicCheckIntervalMs;
  String daemonUid;
  List<File> additionalClassPath;
  KryoBackedDecoder decoder=new KryoBackedDecoder(new EncodedStream.EncodedInput(System.in));
  try {
    gradleHomeDir=new File(decoder.readString());
    daemonBaseDir=new File(decoder.readString());
    idleTimeoutMs=decoder.readSmallInt();
    periodicCheckIntervalMs=decoder.readSmallInt();
    daemonUid=decoder.readString();
    int argCount=decoder.readSmallInt();
    startupOpts=new ArrayList<String>(argCount);
    for (int i=0; i < argCount; i++) {
      startupOpts.add(decoder.readString());
    }
    int additionalClassPathLength=decoder.readSmallInt();
    additionalClassPath=new ArrayList<File>(additionalClassPathLength);
    for (int i=0; i < additionalClassPathLength; i++) {
      additionalClassPath.add(new File(decoder.readString()));
    }
  }
 catch (  EOFException e) {
    throw new UncheckedIOException(e);
  }
  LOGGER.debug("Assuming the daemon was started with following jvm opts: {}",startupOpts);
  NativeServices.initialize(gradleHomeDir);
  DaemonServerConfiguration parameters=new DefaultDaemonServerConfiguration(daemonUid,daemonBaseDir,idleTimeoutMs,periodicCheckIntervalMs,startupOpts);
  LoggingServiceRegistry loggingRegistry=LoggingServiceRegistry.newCommandLineProcessLogging();
  LoggingManagerInternal loggingManager=loggingRegistry.newInstance(LoggingManagerInternal.class);
  DaemonServices daemonServices=new DaemonServices(parameters,loggingRegistry,loggingManager,new DefaultClassPath(additionalClassPath));
  File daemonLog=daemonServices.getDaemonLogFile();
  initialiseLogging(loggingManager,daemonLog);
  Daemon daemon=daemonServices.get(Daemon.class);
  daemon.start();
  try {
    DaemonContext daemonContext=daemonServices.get(DaemonContext.class);
    Long pid=daemonContext.getPid();
    daemonStarted(pid,daemon.getUid(),daemon.getAddress(),daemonLog);
    daemon.stopOnExpiration(DaemonExpirationStrategies.getDefaultStrategy(daemon,daemonServices,parameters),parameters.getPeriodicCheckIntervalMs());
  }
  finally {
    daemon.stop();
  }
}
