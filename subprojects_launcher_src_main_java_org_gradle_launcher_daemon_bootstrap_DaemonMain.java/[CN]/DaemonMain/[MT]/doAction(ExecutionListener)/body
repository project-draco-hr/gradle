{
  File registryDir=startParameter.getGradleUserHomeDir();
  LoggingServiceRegistry loggingServices=LoggingServiceRegistry.newChildProcessLogging();
  DaemonServices daemonServices=new DaemonServices(registryDir,loggingServices);
  if (redirectIo) {
    try {
      redirectOutputsAndInput(daemonServices.get(DaemonDir.class));
    }
 catch (    IOException e) {
      listener.onFailure(e);
      return;
    }
  }
  final Long pid=daemonServices.get(ProcessEnvironment.class).getPid();
  int idleTimeout=getIdleTimeout(startParameter);
  float idleTimeoutSecs=idleTimeout / 1000;
  LOGGER.lifecycle("Starting daemon[pid = {}] with settings: idleTimeout = {} secs, registryDir = {}",pid,idleTimeoutSecs,registryDir);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      LOGGER.info("Daemon[pid = {}] finishing",pid);
    }
  }
);
  Daemon daemon=daemonServices.get(Daemon.class);
  daemon.start();
  try {
    daemon.awaitIdleTimeout(idleTimeout);
    LOGGER.info("Daemon hit idle timeout (" + idleTimeoutSecs + " secs), stopping");
    daemon.stop();
  }
 catch (  DaemonStoppedException e) {
    LOGGER.info("Daemon stopping due to stop request");
    listener.onFailure(e);
  }
}
