{
  LoggingServiceRegistry loggingRegistry=LoggingServiceRegistry.newChildProcessLogging();
  LoggingManagerInternal loggingManager=loggingRegistry.newInstance(LoggingManagerInternal.class);
  DaemonServices daemonServices=new DaemonServices(configuration,loggingRegistry,loggingManager);
  File daemonLog=daemonServices.getDaemonLogFile();
  final DaemonContext daemonContext=daemonServices.get(DaemonContext.class);
  initialiseLogging(loggingManager,daemonLog);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      LOGGER.info("Daemon[pid = {}] process has finished.",daemonContext.getPid());
    }
  }
);
  Daemon daemon=startDaemon(daemonServices);
  Long pid=daemonContext.getPid();
  LOGGER.lifecycle(DaemonMessages.PROCESS_STARTED + ((pid == null) ? "" : " Pid: " + pid + "."));
  daemonStarted(pid,daemonLog);
  try {
    daemon.requestStopOnIdleTimeout(configuration.getIdleTimeout(),TimeUnit.MILLISECONDS);
    LOGGER.info("Daemon hit idle timeout (" + configuration.getIdleTimeout() + "ms), stopping...");
  }
  finally {
    daemon.stop();
  }
}
