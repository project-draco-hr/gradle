{
  LoggingServiceRegistry loggingRegistry=LoggingServiceRegistry.newChildProcessLogging();
  LoggingManagerInternal loggingManager=loggingRegistry.getFactory(LoggingManagerInternal.class).create();
  DaemonServices daemonServices=new DaemonServices(configuration,loggingRegistry,loggingManager);
  File daemonLog=daemonServices.getDaemonLogFile();
  final DaemonContext daemonContext=daemonServices.get(DaemonContext.class);
  initialiseLogging(loggingRegistry.get(OutputEventRenderer.class),loggingManager,daemonLog);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      LOGGER.info("Daemon[pid = {}] process has finished.",daemonContext.getPid());
    }
  }
);
  Daemon daemon=startDaemon(daemonServices);
  LOGGER.lifecycle(DaemonMessages.PROCESS_STARTED);
  daemonStarted(daemonContext.getPid(),daemonLog);
  try {
    daemon.awaitIdleTimeout(configuration.getIdleTimeout());
    LOGGER.info("Daemon hit idle timeout (" + configuration.getIdleTimeout() + "ms), stopping...");
    daemon.stop();
  }
 catch (  DaemonStoppedException e) {
    LOGGER.debug("Daemon stopping due to the stop request");
    listener.onFailure(e);
  }
}
