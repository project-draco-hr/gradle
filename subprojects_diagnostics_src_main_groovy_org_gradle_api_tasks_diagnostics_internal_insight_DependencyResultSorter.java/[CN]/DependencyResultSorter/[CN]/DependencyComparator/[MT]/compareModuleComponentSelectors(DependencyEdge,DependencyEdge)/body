{
  ModuleComponentSelector leftRequested=(ModuleComponentSelector)left.getRequested();
  ModuleComponentSelector rightRequested=(ModuleComponentSelector)right.getRequested();
  int byGroup=leftRequested.getGroup().compareTo(rightRequested.getGroup());
  if (byGroup != 0) {
    return byGroup;
  }
  int byModule=leftRequested.getModule().compareTo(rightRequested.getModule());
  if (byModule != 0) {
    return byModule;
  }
  boolean leftMatches=leftRequested.matchesStrictly(left.getActual());
  boolean rightMatches=rightRequested.matchesStrictly(right.getActual());
  if (leftMatches && !rightMatches) {
    return -1;
  }
 else   if (!leftMatches && rightMatches) {
    return 1;
  }
  boolean leftDynamic=matcher.isDynamic(leftRequested.getVersion());
  boolean rightDynamic=matcher.isDynamic(rightRequested.getVersion());
  if (leftDynamic && !rightDynamic) {
    return 1;
  }
 else   if (!leftDynamic && rightDynamic) {
    return -1;
  }
  int byVersion;
  if (leftDynamic && rightDynamic) {
    byVersion=leftRequested.getVersion().compareTo(rightRequested.getVersion());
  }
 else {
    byVersion=matcher.compare(leftRequested.getVersion(),rightRequested.getVersion());
  }
  if (byVersion != 0) {
    return byVersion;
  }
  return new FromComponentIdentifierComparator(matcher).compare(left.getFrom(),right.getFrom());
}
