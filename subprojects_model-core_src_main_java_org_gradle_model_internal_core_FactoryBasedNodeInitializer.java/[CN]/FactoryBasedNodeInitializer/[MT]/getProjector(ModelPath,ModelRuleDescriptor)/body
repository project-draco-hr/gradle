{
  return new AbstractModelAction<Object>(ModelReference.of(path),descriptor,ModelReference.of(ModelSchemaStore.class),ModelReference.of(ManagedProxyFactory.class)){
    @Override public void execute(    MutableModelNode modelNode,    List<ModelView<?>> inputs){
      ModelSchemaStore schemaStore=ModelViews.getInstance(inputs.get(0),ModelSchemaStore.class);
      ManagedProxyFactory proxyFactory=ModelViews.getInstance(inputs.get(1),ManagedProxyFactory.class);
      ModelType<S> publicType=schema.getType();
      ModelType<? extends T> delegateType;
      if (schema instanceof ManagedImplSchema) {
        InstanceFactory.ManagedSubtypeImplementationInfo<? extends T> implementationInfo=instanceFactory.getManagedSubtypeImplementationInfo(publicType);
        if (implementationInfo == null) {
          throw new IllegalStateException(String.format("No default implementation registered for managed type '%s'",publicType));
        }
        delegateType=implementationInfo.getDelegateType();
      }
 else {
        delegateType=instanceFactory.getImplementationType(publicType);
      }
      ModelSchema<? extends T> delegateSchema=schemaStore.getSchema(delegateType);
      if (!(delegateSchema instanceof StructSchema)) {
        throw new IllegalStateException(String.format("Default implementation '%s' registered for managed type '%s' must be a struct",delegateType,publicType));
      }
      StructSchema<? extends T> delegateStructSchema=Cast.uncheckedCast(delegateSchema);
      addProjection(modelNode,publicType,delegateStructSchema,schemaStore,proxyFactory);
      for (      ModelType<?> internalView : instanceFactory.getInternalViews(publicType)) {
        addProjection(modelNode,internalView,delegateStructSchema,schemaStore,proxyFactory);
      }
    }
    private <D>void addProjection(    MutableModelNode modelNode,    ModelType<?> type,    StructSchema<? extends D> delegateSchema,    ModelSchemaStore schemaStore,    ManagedProxyFactory proxyFactory){
      ModelSchema<?> schema=schemaStore.getSchema(type);
      if (!(schema instanceof StructSchema)) {
        throw new IllegalStateException("View type must be a struct: " + type);
      }
      StructSchema<D> structSchema=Cast.uncheckedCast(schema);
      ModelProjection projection;
      if (structSchema instanceof ManagedImplSchema) {
        projection=new ManagedModelProjection<D>(structSchema,delegateSchema,schemaStore,proxyFactory,services);
      }
 else {
        projection=UnmanagedModelProjection.of(structSchema.getType());
      }
      modelNode.addProjection(projection);
    }
  }
;
}
