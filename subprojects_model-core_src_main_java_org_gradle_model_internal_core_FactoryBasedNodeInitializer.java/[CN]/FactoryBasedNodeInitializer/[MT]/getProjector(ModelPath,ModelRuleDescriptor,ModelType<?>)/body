{
  if (!type.isAssignableFrom(typeToCreate)) {
    throw new IllegalArgumentException(String.format("Type %s is not a subtype of %s",typeToCreate,type));
  }
  final ModelType<? extends S> projectedType=Cast.uncheckedCast(typeToCreate);
  return new AbstractModelAction<Object>(ModelReference.of(path),descriptor,factoryReference){
    @Override public void execute(    MutableModelNode modelNode,    List<ModelView<?>> inputs){
      InstanceFactory<S,String> factory=Cast.uncheckedCast(inputs.get(0).getInstance());
      Set<ModelType<? extends S>> internalViews=factory.getInternalViews(projectedType);
      for (      ModelType<? extends S> internalView : internalViews) {
        modelNode.addProjection(UnmanagedModelProjection.of(internalView));
      }
    }
  }
;
}
