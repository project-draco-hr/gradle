{
  setMocks();
  context.checking(new Expectations(){
{
      allowing(projectMock).getPlugins();
      will(returnValue(projectPluginsHandlerMock));
      allowing(projectPluginsHandlerMock).hasPlugin(JavaPlugin.class);
      will(returnValue(true));
      allowing(projectPluginsHandlerMock).hasPlugin(with(Matchers.not(JavaPlugin.class)));
      will(returnValue(true));
      one(jUnitOptionsMock).getForkOptions();
      will(returnValue(jUnitForkOptionsMock));
      one(jUnitOptionsMock).setFork(true);
      one(jUnitForkOptionsMock).setForkMode(ForkMode.PER_TEST);
      one(projectMock).getProjectDir();
      will(returnValue(projectDir));
      one(jUnitForkOptionsMock).setDir(projectDir);
      one(testMock).getTestClassesDir();
      will(returnValue(testClassesDir));
      one(testMock).getClasspath();
      will(returnValue(classpathMock));
      one(classpathMock).getAsFileTree();
      will(returnValue(classpathAsFileTreeMock));
      one(classpathAsFileTreeMock).visit(with(aNonNull(FileVisitor.class)));
    }
  }
);
  jUnitTestFrameworkInstance.initialize(projectMock,testMock);
  assertNotNull(jUnitTestFrameworkInstance.getOptions());
  assertNotNull(jUnitTestFrameworkInstance.getAntJUnitExecute());
  assertNotNull(jUnitTestFrameworkInstance.getAntJUnitReport());
}
