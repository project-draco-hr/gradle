{
  final Throwable failure=new RuntimeException("failure");
  expectTaskEnabled();
  context.checking(new Expectations(){
{
      allowing(task).getActions();
      will(returnValue(toList(action1,action2)));
      one(standardOutputCapture).start();
      inSequence(sequence);
      one(action1).execute(task);
      will(throwException(failure));
      inSequence(sequence);
      one(standardOutputCapture).stop();
      inSequence(sequence);
    }
  }
);
  TaskExecutionResult result=executer.execute(task,state);
  assertThat(result.getFailure(),instanceOf(GradleScriptException.class));
  GradleScriptException exception=(GradleScriptException)result.getFailure();
  assertThat(exception.getOriginalMessage(),equalTo("Execution failed for <task>."));
  assertThat(exception.getCause(),sameInstance(failure));
  assertThat(exception.getScriptSource(),sameInstance(scriptSource));
  assertThat(result.getSkipMessage(),nullValue());
  assertTrue(state.isExecuted());
  assertFalse(state.isExecuting());
  assertTrue(state.isDidWork());
}
