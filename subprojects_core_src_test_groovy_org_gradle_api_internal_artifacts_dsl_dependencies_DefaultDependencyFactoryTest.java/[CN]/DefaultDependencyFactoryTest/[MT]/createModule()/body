{
  final IDependencyImplementationFactory testImplStringFactoryStub=context.mock(IDependencyImplementationFactory.class,"String");
  final IDependencyImplementationFactory clientModuleFactoryStub=context.mock(IDependencyImplementationFactory.class);
  final ClientModule clientModuleMock=context.mock(ClientModule.class);
  DefaultDependencyFactory dependencyFactory=new DefaultDependencyFactory(WrapUtil.toSet(testImplStringFactoryStub),clientModuleFactoryStub,null);
  final String someNotation1="someNotation1";
  final String someNotation2="someNotation2";
  final String someNotation3="someNotation3";
  final String someNotation4="someNotation4";
  final String someModuleNotation="junit:junit:4.4";
  final ModuleDependency dependencyDummy1=context.mock(ModuleDependency.class,"dep1");
  final ModuleDependency dependencyDummy2=context.mock(ModuleDependency.class,"dep2");
  final ModuleDependency dependencyDummy3=context.mock(ModuleDependency.class,"dep3");
  final ModuleDependency dependencyMock=context.mock(ModuleDependency.class,"dep4");
  context.checking(new Expectations(){
{
      allowing(clientModuleFactoryStub).createDependency(ClientModule.class,someModuleNotation);
      will(returnValue(clientModuleMock));
      allowing(testImplStringFactoryStub).createDependency(Dependency.class,someNotation1);
      will(returnValue(dependencyDummy1));
      allowing(testImplStringFactoryStub).createDependency(Dependency.class,someNotation2);
      will(returnValue(dependencyDummy2));
      allowing(testImplStringFactoryStub).createDependency(Dependency.class,someNotation3);
      will(returnValue(dependencyDummy3));
      allowing(testImplStringFactoryStub).createDependency(Dependency.class,someNotation4);
      will(returnValue(dependencyMock));
      one(dependencyMock).setTransitive(true);
      one(clientModuleMock).addDependency(dependencyDummy1);
      one(clientModuleMock).addDependency(dependencyDummy2);
      one(clientModuleMock).addDependency(dependencyDummy3);
      one(clientModuleMock).addDependency(dependencyMock);
    }
  }
);
  Closure configureClosure=HelperUtil.toClosure(String.format("{dependency('%s'); dependencies('%s', '%s'); dependency('%s') { transitive = true }}",someNotation1,someNotation2,someNotation3,someNotation4));
  assertThat(dependencyFactory.createModule(someModuleNotation,configureClosure),equalTo(clientModuleMock));
}
