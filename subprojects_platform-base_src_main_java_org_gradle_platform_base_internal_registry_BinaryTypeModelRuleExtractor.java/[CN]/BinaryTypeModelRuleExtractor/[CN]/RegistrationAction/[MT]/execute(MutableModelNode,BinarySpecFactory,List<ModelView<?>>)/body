{
  InstanceFactory.TypeRegistrationBuilder<S> registration=binaries.register(publicType,descriptor);
  if (implementationType != null) {
    ServiceRegistry serviceRegistry=ModelViews.assertType(inputs.get(0),ModelType.of(ServiceRegistry.class)).getInstance();
    final Instantiator instantiator=serviceRegistry.get(Instantiator.class);
    final ITaskFactory taskFactory=ModelViews.assertType(inputs.get(1),ModelType.of(ITaskFactory.class)).getInstance();
    registration.withImplementation(Cast.<ModelType<? extends S>>uncheckedCast(implementationType),new BiFunction<S,String,MutableModelNode>(){
      @Override public S apply(      String name,      MutableModelNode binaryNode){
        MutableModelNode parentNode=binaryNode.getParent().getParent();
        ComponentSpecInternal owner=parentNode.canBeViewedAs(ModelType.of(ComponentSpecInternal.class)) ? parentNode.asImmutable(ModelType.of(ComponentSpecInternal.class),descriptor).getInstance() : null;
        return Cast.uncheckedCast(BaseBinarySpec.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),name,binaryNode,owner,instantiator,taskFactory));
      }
    }
);
  }
  for (  ModelType<?> internalView : internalViews) {
    registration.withInternalView(internalView);
  }
}
