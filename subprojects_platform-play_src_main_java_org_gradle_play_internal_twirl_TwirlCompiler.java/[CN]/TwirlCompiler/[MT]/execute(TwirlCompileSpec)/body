{
  ArrayList<File> outputFiles=Lists.newArrayList();
  try {
    VersionedInvocationSpec invocationSpec=invocationSpecBuilder.build(spec);
    Function<Object[],Object> compile=ScalaUtil.scalaObjectFunction(getClass().getClassLoader(),invocationSpec.getVersion().getCompilerClassname(),"compile",invocationSpec.getParameterTypes());
    Iterable<File> sources=spec.getSources();
    for (    File sourceFile : sources) {
      Object[] parameters=invocationSpec.getParameter(sourceFile.getCanonicalFile());
      Object result=compile.apply(parameters);
      Method resultIsDefined=result.getClass().getMethod("isDefined");
      if ((Boolean)resultIsDefined.invoke(result)) {
        File createdFile=(File)result.getClass().getMethod("get").invoke(result);
        outputFiles.add(createdFile);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error invoking template compiler",e);
  }
  return new TwirlCompilerWorkResult(outputFiles);
}
