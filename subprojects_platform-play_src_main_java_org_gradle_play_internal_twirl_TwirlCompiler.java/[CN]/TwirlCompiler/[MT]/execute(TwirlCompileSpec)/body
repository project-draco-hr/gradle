{
  ArrayList<File> outputFiles=Lists.newArrayList();
  try {
    VersionedTwirlCompileSpec versionedTwirlCompileSpec=createVersionedSpec(spec);
    Function<Object[],Object> compile=ScalaUtil.scalaObjectFunction(getClass().getClassLoader(),spec.getCompilerClassName(),"compile",versionedTwirlCompileSpec.getParameterTypes());
    Iterable<File> sources=spec.getSources();
    Object[] prefilledCompileParameters=versionedTwirlCompileSpec.getParameters();
    for (    File sourceFile : sources) {
      prefilledCompileParameters[0]=sourceFile.getCanonicalFile();
      Object result=compile.apply(prefilledCompileParameters);
      Method resultIsDefined=result.getClass().getMethod("isDefined");
      if ((Boolean)resultIsDefined.invoke(result)) {
        File createdFile=(File)result.getClass().getMethod("get").invoke(result);
        outputFiles.add(createdFile);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error invoking template compiler",e);
  }
  return new TwirlCompilerWorkResult(outputFiles);
}
