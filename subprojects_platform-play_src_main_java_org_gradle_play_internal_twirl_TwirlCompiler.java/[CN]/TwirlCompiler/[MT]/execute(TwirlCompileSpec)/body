{
  ArrayList<File> outputFiles=Lists.newArrayList();
  try {
    ClassLoader cl=getClass().getClassLoader();
    ScalaMethod compile=adapter.getCompileMethod(cl);
    Iterable<RelativeFile> sources=spec.getSources();
    for (    RelativeFile sourceFile : sources) {
      Object result=compile.invoke(adapter.createCompileParameters(cl,sourceFile.getFile(),sourceFile.getBaseDir(),spec.getDestinationDir(),spec.isJavaProject()));
      ScalaOptionInvocationWrapper<File> maybeFile=new ScalaOptionInvocationWrapper<File>(result);
      if (maybeFile.isDefined()) {
        outputFiles.add(maybeFile.get());
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error invoking Play Twirl template compiler.",e);
  }
  return new SimpleWorkResult(!outputFiles.isEmpty());
}
