{
  String name=extractName(t);
  Matcher matcher=GETTER_METHOD_NAME.matcher(name);
  if (matcher.matches()) {
    int startName=matcher.start(2);
    String propName=name.substring(startName,startName + 1).toLowerCase() + name.substring(startName + 1);
    String type=extractTypeName(t);
    getCurrentClass().addReadableProperty(propName,type,getJavaDocCommentsBeforeNode(t));
    return;
  }
  GroovySourceAST paramsAst=t.childOfType(PARAMETERS);
  if (paramsAst.getFirstChild() == null || paramsAst.getFirstChild().getNextSibling() != null) {
    return;
  }
  matcher=SETTER_METHOD_NAME.matcher(name);
  if (matcher.matches()) {
    int startName=matcher.start(1);
    String propName=name.substring(startName,startName + 1).toLowerCase() + name.substring(startName + 1);
    String type=extractTypeName((GroovySourceAST)paramsAst.getFirstChild());
    getCurrentClass().addWriteableProperty(propName,type,getJavaDocCommentsBeforeNode(t));
  }
}
