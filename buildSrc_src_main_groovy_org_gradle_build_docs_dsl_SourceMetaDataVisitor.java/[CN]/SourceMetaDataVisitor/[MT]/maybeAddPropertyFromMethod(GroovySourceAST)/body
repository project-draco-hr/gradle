{
  String name=extractName(t);
  if (!groovy && name.equals(getCurrentClass().getSimpleName())) {
    return;
  }
  String rawCommentText=getJavaDocCommentsBeforeNode(t);
  TypeMetaData returnType=extractTypeName(t);
  MethodMetaData method=getCurrentClass().addMethod(name,returnType,rawCommentText);
  extractParameters(t,method);
  Matcher matcher=GETTER_METHOD_NAME.matcher(name);
  if (matcher.matches()) {
    int startName=matcher.start(2);
    String propName=name.substring(startName,startName + 1).toLowerCase() + name.substring(startName + 1);
    getCurrentClass().addReadableProperty(propName,returnType,rawCommentText);
    return;
  }
  if (method.getParameters().size() != 1) {
    return;
  }
  matcher=SETTER_METHOD_NAME.matcher(name);
  if (matcher.matches()) {
    int startName=matcher.start(1);
    String propName=name.substring(startName,startName + 1).toLowerCase() + name.substring(startName + 1);
    TypeMetaData type=method.getParameters().get(0).getType();
    getCurrentClass().addWriteableProperty(propName,type,rawCommentText);
  }
}
