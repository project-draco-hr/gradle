{
  GroovySourceAST modifiers=ast.childOfType(MODIFIERS);
  if (modifiers == null) {
    return 0;
  }
  int modifierFlags=0;
  for (GroovySourceAST child=(GroovySourceAST)modifiers.getFirstChild(); child != null; child=(GroovySourceAST)child.getNextSibling()) {
switch (child.getType()) {
case LITERAL_private:
      modifierFlags|=Modifier.PRIVATE;
    break;
case LITERAL_protected:
  modifierFlags|=Modifier.PROTECTED;
break;
case LITERAL_public:
modifierFlags|=Modifier.PUBLIC;
break;
case FINAL:
modifierFlags|=Modifier.FINAL;
break;
case LITERAL_static:
modifierFlags|=Modifier.STATIC;
break;
}
}
return modifierFlags;
}
