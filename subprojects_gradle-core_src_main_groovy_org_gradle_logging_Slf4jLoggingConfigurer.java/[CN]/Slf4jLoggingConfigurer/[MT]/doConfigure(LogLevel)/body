{
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  ch.qos.logback.classic.Logger rootLogger;
  if (currentLevel == null) {
    lc.reset();
    appender.setContext(lc);
    rootLogger=lc.getLogger("ROOT");
    rootLogger.addAppender(appender);
  }
 else {
    rootLogger=lc.getLogger("ROOT");
  }
  currentLevel=logLevel;
  appender.stop();
  appender.clearAllFilters();
switch (logLevel) {
case DEBUG:
    rootLogger.setLevel(Level.DEBUG);
  break;
case INFO:
rootLogger.setLevel(Level.INFO);
break;
case LIFECYCLE:
appender.addFilter(new MarkerFilter(Logging.QUIET,Logging.LIFECYCLE));
appender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.DENY,FilterReply.NEUTRAL));
rootLogger.setLevel(Level.INFO);
break;
case QUIET:
appender.addFilter(new MarkerFilter(Logging.QUIET));
appender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.DENY,FilterReply.NEUTRAL));
rootLogger.setLevel(Level.INFO);
break;
case WARN:
rootLogger.setLevel(Level.WARN);
break;
case ERROR:
rootLogger.setLevel(Level.ERROR);
break;
default :
throw new IllegalArgumentException();
}
appender.start();
}
