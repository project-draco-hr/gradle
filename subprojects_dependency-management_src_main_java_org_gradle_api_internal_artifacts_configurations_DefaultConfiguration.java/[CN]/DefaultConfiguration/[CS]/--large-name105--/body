{
  this.path=path;
  this.name=name;
  this.configurationsProvider=configurationsProvider;
  this.resolver=resolver;
  this.listenerManager=listenerManager;
  this.metaDataProvider=metaDataProvider;
  this.resolutionStrategy=resolutionStrategy;
  this.projectAccessListener=projectAccessListener;
  this.projectFinder=projectFinder;
  this.configurationComponentMetaDataBuilder=configurationComponentMetaDataBuilder;
  this.fileCollectionFactory=fileCollectionFactory;
  this.componentIdentifierFactory=componentIdentifierFactory;
  dependencyResolutionListeners=listenerManager.createAnonymousBroadcaster(DependencyResolutionListener.class);
  DefaultDomainObjectSet<Dependency> ownDependencies=new DefaultDomainObjectSet<Dependency>(Dependency.class);
  ownDependencies.beforeChange(validateMutationType(this,MutationType.DEPENDENCIES));
  final String displayName=getDisplayName();
  dependencies=new DefaultDependencySet(displayName + " dependencies",ownDependencies);
  inheritedDependencies=CompositeDomainObjectSet.create(Dependency.class,ownDependencies);
  allDependencies=new DefaultDependencySet(displayName + " all dependencies",inheritedDependencies);
  DefaultDomainObjectSet<PublishArtifact> ownArtifacts=new DefaultDomainObjectSet<PublishArtifact>(PublishArtifact.class);
  ownArtifacts.beforeChange(validateMutationType(this,MutationType.ARTIFACTS));
  artifacts=new DefaultPublishArtifactSet(displayName + " artifacts",ownArtifacts,fileCollectionFactory);
  inheritedArtifacts=CompositeDomainObjectSet.create(PublishArtifact.class,ownArtifacts);
  allArtifacts=new DefaultPublishArtifactSet(displayName + " all artifacts",inheritedArtifacts,fileCollectionFactory);
  resolutionStrategy.setMutationValidator(this);
}
