{
  if (state == InternalState.RESULTS_RESOLVED) {
    if (dependenciesModified) {
      DeprecationLogger.nagUserOfDeprecatedBehaviour(String.format("Attempting to resolve %s that has been resolved previously. Changes made since the configuration was originally resolved are ignored",getDisplayName()));
    }
    return;
  }
  if (state == InternalState.TASK_DEPENDENCIES_RESOLVED) {
    if (!dependenciesModified) {
      return;
    }
    DeprecationLogger.nagUserOfDeprecatedBehaviour(String.format("Resolving %s again after modification",getDisplayName()));
  }
  DependencyResolutionListener broadcast=resolutionListenerBroadcast.getSource();
  ResolvableDependencies incoming=getIncoming();
  broadcast.beforeResolve(incoming);
  triggerWhenEmptyActionsIfNecessary();
  resolver.resolve(this,cachedResolverResults);
  markAsObserved(requestedState);
  for (  ResolvedProjectConfigurationResult projectResult : cachedResolverResults.getResolvedProjectConfigurationResults().getAllProjectConfigurationResults()) {
    ProjectInternal project=projectFinder.getProject(projectResult.getId().getProjectPath());
    for (    String targetConfigName : projectResult.getTargetConfigurations()) {
      ConfigurationInternal targetConfig=(ConfigurationInternal)project.getConfigurations().getByName(targetConfigName);
      targetConfig.markAsObserved(requestedState);
    }
  }
  markAsResolved(InternalState.TASK_DEPENDENCIES_RESOLVED);
  dependenciesModified=false;
  broadcast.afterResolve(incoming);
}
