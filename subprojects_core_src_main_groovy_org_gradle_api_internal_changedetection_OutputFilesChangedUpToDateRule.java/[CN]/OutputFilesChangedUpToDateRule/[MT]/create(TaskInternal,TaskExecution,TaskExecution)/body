{
  final FileCollectionSnapshot outputFilesBefore=outputFilesSnapshotter.snapshot(task.getOutputs().getFiles());
  return new TaskUpToDateState(){
    public void checkUpToDate(    final Collection<String> messages){
      outputFilesBefore.changesSince(previousExecution.getOutputFilesSnapshot(),new ChangeListener<File>(){
        public void added(        File element){
          messages.add(String.format("Output file '%s' has been added for %s.",element,task));
        }
        public void removed(        File element){
          messages.add(String.format("Output file %s has been removed for %s.",element.getAbsolutePath(),task));
        }
        public void changed(        File element){
          messages.add(String.format("Output file %s for %s has changed.",element.getAbsolutePath(),task));
        }
      }
);
    }
    public void snapshotBeforeTask(){
    }
    public void snapshotAfterTask(){
      FileCollectionSnapshot lastExecutionOutputFiles=previousExecution == null ? outputFilesSnapshotter.snapshot() : previousExecution.getOutputFilesSnapshot();
      FileCollectionSnapshot newOutputFiles=outputFilesBefore.changesSince(lastExecutionOutputFiles).applyTo(lastExecutionOutputFiles,new ChangeListener<FileCollectionSnapshot.Merge>(){
        public void added(        FileCollectionSnapshot.Merge element){
          element.ignore();
        }
        public void removed(        FileCollectionSnapshot.Merge element){
        }
        public void changed(        FileCollectionSnapshot.Merge element){
        }
      }
);
      FileCollectionSnapshot outputFilesAfter=outputFilesSnapshotter.snapshot(task.getOutputs().getFiles());
      currentExecution.setOutputFilesSnapshot(outputFilesAfter.changesSince(outputFilesBefore).applyTo(newOutputFiles));
    }
  }
;
}
