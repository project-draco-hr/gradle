{
  compile.setSrcDirs(WrapUtil.toList(new File("sourceDir1"),new File("sourceDir2")));
  compile.setIncludes(TEST_INCLUDES);
  compile.setExcludes(TEST_EXCLUDES);
  setupExistingDirsFilter(scalaCompile,new ExistingDirsFilter(){
    @Override public List<File> checkDestDirAndFindExistingDirsAndThrowStopActionIfNone(    File destDir,    Collection<File> dirFiles){
      assertSame(destDir,compile.getDestinationDir());
      assertSame(dirFiles,compile.getSrcDirs());
      return compile.getSrcDirs();
    }
  }
);
  compile.setTargetCompatibility("1.5");
  compile.setDestinationDir(destDir);
  compile.setDependencyCacheDir(depCacheDir);
  final FileCollection configuration=context.mock(FileCollection.class);
  context.checking(new Expectations(){
{
      allowing(configuration).iterator();
      will(returnIterator(TEST_DEPENDENCY_MANAGER_CLASSPATH));
    }
  }
);
  compile.setClasspath(configuration);
}
