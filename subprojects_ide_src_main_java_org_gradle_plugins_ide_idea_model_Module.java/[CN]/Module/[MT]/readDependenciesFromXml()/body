{
  for (  Node orderEntry : findOrderEntries()) {
    Object orderEntryType=orderEntry.attribute("type");
    if ("module-library".equals(orderEntryType)) {
      Set<Path> classes=Sets.newLinkedHashSet();
      Set<Path> javadoc=Sets.newLinkedHashSet();
      Set<Path> sources=Sets.newLinkedHashSet();
      Set<JarDirectory> jarDirectories=Sets.newLinkedHashSet();
      for (      Node library : getChildren(orderEntry,"library")) {
        for (        Node classesNode : getChildren(library,"CLASSES")) {
          readDependenciesPathsFromXml(classes,classesNode);
        }
        for (        Node javadocNode : getChildren(library,"JAVADOC")) {
          readDependenciesPathsFromXml(javadoc,javadocNode);
        }
        for (        Node sourcesNode : getChildren(library,"SOURCES")) {
          readDependenciesPathsFromXml(sources,sourcesNode);
        }
        for (        Node jarDirNode : getChildren(library,"jarDirectory")) {
          jarDirectories.add(new JarDirectory(pathFactory.path((String)jarDirNode.attribute("url")),Boolean.parseBoolean((String)jarDirNode.attribute("recursive"))));
        }
      }
      ModuleLibrary moduleLibrary=new ModuleLibrary(classes,javadoc,sources,jarDirectories,(String)orderEntry.attribute("scope"));
      dependencies.add(moduleLibrary);
    }
 else     if ("module".equals(orderEntryType)) {
      dependencies.add(new ModuleDependency((String)orderEntry.attribute("module-name"),(String)orderEntry.attribute("scope")));
    }
  }
}
