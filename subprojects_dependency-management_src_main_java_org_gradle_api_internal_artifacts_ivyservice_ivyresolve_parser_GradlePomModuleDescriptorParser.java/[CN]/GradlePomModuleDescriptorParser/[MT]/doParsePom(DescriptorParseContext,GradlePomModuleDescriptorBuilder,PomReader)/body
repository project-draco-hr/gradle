{
  if (pomReader.hasParent()) {
    ModuleComponentIdentifier parentId=DefaultModuleComponentIdentifier.newId(pomReader.getParentGroupId(),pomReader.getParentArtifactId(),pomReader.getParentVersion());
    PomReader parentPomReader=parseOtherPom(parserSettings,parentId);
    pomReader.setPomParent(parentPomReader);
  }
  pomReader.resolveGAV();
  String groupId=pomReader.getGroupId();
  String artifactId=pomReader.getArtifactId();
  String version=pomReader.getVersion();
  mdBuilder.setModuleRevId(groupId,artifactId,version);
  mdBuilder.setDescription(pomReader.getDescription());
  ModuleVersionIdentifier relocation=pomReader.getRelocation();
  if (relocation != null) {
    if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getGroup())) {
      LOGGER.error("POM relocation to an other version number is not fully supported in Gradle : {} relocated to {}.",mdBuilder.getModuleDescriptor().getComponentIdentifier(),relocation);
      LOGGER.warn("Please update your dependency to directly use the correct version '{}'.",relocation);
      LOGGER.warn("Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.");
      PomReader relocatedModule=parseOtherPom(parserSettings,DefaultModuleComponentIdentifier.newId(relocation));
      Collection<PomDependencyData> pomDependencyDataList=relocatedModule.getDependencies().values();
      for (      PomDependencyData pomDependencyData : pomDependencyDataList) {
        mdBuilder.addDependency(pomDependencyData);
      }
    }
 else {
      LOGGER.info(mdBuilder.getModuleDescriptor().getComponentIdentifier() + " is relocated to " + relocation+ ". Please update your dependencies.");
      LOGGER.debug("Relocated module will be considered as a dependency");
      ModuleVersionSelector selector=DefaultModuleVersionSelector.newSelector(relocation.getGroup(),relocation.getName(),relocation.getVersion());
      mdBuilder.addDependencyForRelocation(selector);
    }
  }
 else {
    overrideDependencyMgtsWithImported(parserSettings,pomReader);
    for (    PomDependencyData dependency : pomReader.getDependencies().values()) {
      mdBuilder.addDependency(dependency);
    }
  }
}
