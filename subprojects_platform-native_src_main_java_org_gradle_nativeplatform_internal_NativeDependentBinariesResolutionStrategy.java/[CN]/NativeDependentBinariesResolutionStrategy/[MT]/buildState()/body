{
  State state=new State();
  List<ProjectInternal> orderedProjects=Ordering.usingToString().sortedCopy(projectRegistry.getAllProjects());
  for (  ProjectInternal project : orderedProjects) {
    if (project.getPlugins().hasPlugin(ComponentModelBasePlugin.class)) {
      ModelRegistry modelRegistry=projectModelResolver.resolveProjectModel(project.getPath());
      ModelMap<NativeComponentSpec> components=modelRegistry.realize("components",ModelTypes.modelMap(NativeComponentSpec.class));
      for (      NativeBinarySpecInternal binary : allBinariesOf(components.withType(VariantComponentSpec.class))) {
        state.registerBinary(binary);
      }
    }
    for (    NativeBinarySpecInternal extraBinary : getExtraBinaries(project,projectModelResolver)) {
      state.registerBinary(extraBinary);
    }
  }
  for (  NativeBinarySpecInternal nativeBinary : state.dependencies.keySet()) {
    for (    NativeLibraryBinary libraryBinary : nativeBinary.getDependentBinaries()) {
      if (libraryBinary instanceof NativeBinarySpecInternal) {
        state.dependencies.get(nativeBinary).add((NativeBinarySpecInternal)libraryBinary);
      }
    }
    state.dependencies.get(nativeBinary).addAll(getExtraDependents(nativeBinary));
  }
  return state;
}
