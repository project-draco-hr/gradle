{
  List<String> arguments=spec.getArguments();
  Set<File> grammarFiles=spec.getGrammarFiles();
  String[] allArguments=new String[arguments.size() + grammarFiles.size()];
  int i=0;
  for (  String argument : arguments) {
    allArguments[i++]=argument;
  }
  for (  File grammarFile : grammarFiles) {
    allArguments[i++]=grammarFile.getAbsolutePath();
  }
  try {
    Object toolObj=loadTool("org.antlr.v4.Tool",allArguments);
    LOGGER.info("Processing with ANTLR 4");
    return processV4(toolObj);
  }
 catch (  ClassNotFoundException e) {
    LOGGER.debug("ANTLR 4 not found on classpath");
  }
  try {
    Object toolObj=loadTool("org.antlr.Tool",allArguments);
    LOGGER.info("Processing with ANTLR 3");
    return processV3(toolObj);
  }
 catch (  ClassNotFoundException e) {
    LOGGER.debug("ANTLR 3 not found on classpath");
  }
  try {
    Object toolObj=loadTool("antlr.Tool",null);
    LOGGER.info("Processing with ANTLR 2");
    return processV2(toolObj,spec);
  }
 catch (  ClassNotFoundException e) {
    LOGGER.debug("ANTLR 2 not found on classpath");
  }
  throw new IllegalStateException("No Antlr implementation available");
}
