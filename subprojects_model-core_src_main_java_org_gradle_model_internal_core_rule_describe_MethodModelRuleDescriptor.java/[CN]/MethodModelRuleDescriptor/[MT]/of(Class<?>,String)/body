{
  List<Method> methodsOfName=CollectionUtils.filter(clazz.getDeclaredMethods(),new Spec<Method>(){
    public boolean isSatisfiedBy(    Method element){
      return element.getName().equals(methodName);
    }
  }
);
  if (methodsOfName.isEmpty()) {
    throw new IllegalStateException("Class " + clazz.getName() + " has no method named '"+ methodName+ "'");
  }
  if (methodsOfName.size() > 1) {
    throw new IllegalStateException("Class " + clazz.getName() + " has more than one method named '"+ methodName+ "'");
  }
  return new MethodModelRuleDescriptor(methodsOfName.get(0));
}
