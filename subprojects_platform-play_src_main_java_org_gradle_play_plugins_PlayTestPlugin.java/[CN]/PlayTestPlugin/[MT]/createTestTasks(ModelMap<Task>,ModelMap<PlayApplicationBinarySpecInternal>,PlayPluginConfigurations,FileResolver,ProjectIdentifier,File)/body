{
  for (  final PlayApplicationBinarySpecInternal binary : playBinaries) {
    final PlayToolProvider playToolProvider=binary.getToolChain().select(binary.getTargetPlatform());
    final FileCollection testCompileClasspath=getTestCompileClasspath(binary,playToolProvider,configurations);
    final String testCompileTaskName=binary.getTasks().taskName("compile","tests");
    final File testSourceDir=fileResolver.resolve("test");
    final FileCollection testSources=new SimpleFileCollection(testSourceDir).getAsFileTree().matching(new PatternSet().include("**/*.scala","**/*.java"));
    final File testClassesDir=new File(buildDir,String.format("%s/testClasses",binary.getProjectScopedName()));
    tasks.create(testCompileTaskName,PlatformScalaCompile.class,new Action<PlatformScalaCompile>(){
      public void execute(      PlatformScalaCompile scalaCompile){
        scalaCompile.setDescription("Compiles the scala and java test sources for the " + binary.getDisplayName() + ".");
        scalaCompile.setClasspath(testCompileClasspath);
        scalaCompile.dependsOn(binary.getBuildTask());
        scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());
        scalaCompile.setDestinationDir(testClassesDir);
        scalaCompile.setSource(testSources);
        String targetCompatibility=binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();
        scalaCompile.setSourceCompatibility(targetCompatibility);
        scalaCompile.setTargetCompatibility(targetCompatibility);
        IncrementalCompileOptions incrementalOptions=scalaCompile.getScalaCompileOptions().getIncrementalOptions();
        incrementalOptions.setAnalysisFile(new File(buildDir,String.format("tmp/scala/compilerAnalysis/%s.analysis",testCompileTaskName)));
      }
    }
);
    final String testTaskName=binary.getTasks().taskName("test");
    final File binaryBuildDir=new File(buildDir,binary.getProjectScopedName());
    tasks.create(testTaskName,Test.class,new Action<Test>(){
      public void execute(      Test test){
        test.setDescription("Runs tests for the " + binary.getDisplayName() + ".");
        test.setClasspath(getRuntimeClasspath(testClassesDir,testCompileClasspath));
        test.setTestClassesDir(testClassesDir);
        test.setBinResultsDir(new File(binaryBuildDir,String.format("results/%s/bin",testTaskName)));
        test.getReports().getJunitXml().setDestination(new File(binaryBuildDir,"reports/test/xml"));
        test.getReports().getHtml().setDestination(new File(binaryBuildDir,"reports/test"));
        test.dependsOn(testCompileTaskName);
        test.setTestSrcDirs(Arrays.asList(testSourceDir));
        test.setWorkingDir(projectIdentifier.getProjectDir());
      }
    }
);
    binary.getTasks().add(tasks.get(testTaskName));
  }
}
