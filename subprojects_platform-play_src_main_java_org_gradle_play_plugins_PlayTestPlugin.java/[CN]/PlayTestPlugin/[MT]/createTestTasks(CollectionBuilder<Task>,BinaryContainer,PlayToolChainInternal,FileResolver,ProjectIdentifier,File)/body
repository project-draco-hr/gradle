{
  for (  final PlayApplicationBinarySpec binary : binaryContainer.withType(PlayApplicationBinarySpec.class)) {
    final PlayPlatform targetPlatform=binary.getTargetPlatform();
    FileCollection playTestDependencies=playToolChain.select(targetPlatform).getPlayTestDependencies();
    final FileCollection testCompileClasspath=fileResolver.resolveFiles(binary.getJarFile()).plus(playTestDependencies);
    final String testCompileTaskName=String.format("compile%sTests",StringUtils.capitalize(binary.getName()));
    final File testSourceDir=fileResolver.resolve("test");
    final File testClassesDir=new File(buildDir,String.format("testClasses/%s",binary.getName()));
    tasks.create(testCompileTaskName,PlatformScalaCompile.class,new Action<PlatformScalaCompile>(){
      public void execute(      PlatformScalaCompile scalaCompile){
        scalaCompile.dependsOn(binary.getBuildTask());
        scalaCompile.setClasspath(testCompileClasspath);
        scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());
        scalaCompile.setDestinationDir(testClassesDir);
        scalaCompile.setSource(testSourceDir);
        String targetCompatibility=binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();
        scalaCompile.setSourceCompatibility(targetCompatibility);
        scalaCompile.setTargetCompatibility(targetCompatibility);
        IncrementalCompileOptions incrementalOptions=scalaCompile.getScalaCompileOptions().getIncrementalOptions();
        incrementalOptions.setAnalysisFile(new File(buildDir,String.format("tmp/scala/compilerAnalysis/%s.analysis",testCompileTaskName)));
        binary.getTasks().add(scalaCompile);
      }
    }
);
    String testTaskName=String.format("test%s",StringUtils.capitalize(binary.getName()));
    tasks.create(testTaskName,Test.class,new Action<Test>(){
      public void execute(      Test test){
        test.setTestClassesDir(testClassesDir);
        test.setBinResultsDir(new File(buildDir,String.format("tmp/testResults/%s",test.getName())));
        test.getReports().getJunitXml().setDestination(new File(buildDir,String.format("reports/test/%s/junit",binary.getName())));
        test.getReports().getHtml().setDestination(new File(buildDir,String.format("reports/test/%s",binary.getName())));
        test.dependsOn(testCompileTaskName);
        test.setTestSrcDirs(Arrays.asList(testSourceDir));
        test.setWorkingDir(projectIdentifier.getProjectDir());
        test.setClasspath(testCompileClasspath.plus(fileResolver.resolveFiles(testClassesDir)));
        binary.getTasks().add(test);
      }
    }
);
  }
}
