{
  final FileCollectionSnapshot inputFilesSnapshot=inputFilesSnapshotter.snapshot(task.getInputs().getFiles());
  return new TaskUpToDateState(){
    public void findChanges(    final Action<? super TaskUpToDateStateChange> failures){
      if (previousExecution.getInputFilesSnapshot() == null) {
        failures.execute(new DescriptiveChange("Input file history is not available for %s.",task));
        return;
      }
      inputFilesSnapshot.changesSince(previousExecution.getInputFilesSnapshot(),new ChangeListener<File>(){
        public void added(        File file){
          failures.execute(new InputFileChange(task,file,ChangeType.ADDED));
        }
        public void removed(        File file){
          failures.execute(new InputFileChange(task,file,ChangeType.REMOVED));
        }
        public void changed(        File file){
          failures.execute(new InputFileChange(task,file,ChangeType.MODIFIED));
        }
      }
);
    }
    public void snapshotAfterTask(){
      currentExecution.setInputFilesSnapshot(inputFilesSnapshot);
    }
  }
;
}
