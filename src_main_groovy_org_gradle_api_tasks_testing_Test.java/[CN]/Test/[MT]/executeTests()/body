{
  final File testClassesDir=getTestClassesDir();
  if (testClassesDir == null)   throw new InvalidUserDataException("The testClassesDir property is not set, testing can't be triggered!");
  if (getTestResultsDir() == null)   throw new InvalidUserDataException("The testResultsDir property is not set, testing can't be triggered!");
  existingDirsFilter.checkExistenceAndThrowStopActionIfNot(testClassesDir);
  final TestFramework testFramework=getTestFramework();
  testFramework.prepare(getProject(),this);
  final Set<String> includes=getIncludes();
  final Set<String> excludes=getExcludes();
  final TestClassScanner testClassScanner=new TestClassScanner(testClassesDir,includes,excludes,testFramework,getProject().getAnt(),scanForTestClasses);
  final Set<String> testClassNames=testClassScanner.getTestClassNames();
  Collection<String> toUseIncludes=null;
  Collection<String> toUseExcludes=null;
  if (testClassNames.isEmpty()) {
    toUseIncludes=includes;
    toUseExcludes=excludes;
  }
 else {
    toUseIncludes=testClassNames;
    toUseExcludes=new ArrayList<String>();
  }
  testFramework.execute(getProject(),this,toUseIncludes,toUseExcludes);
  if (testReport) {
    testFramework.report(getProject(),this);
  }
  if (stopAtFailuresOrErrors && GUtil.isTrue(getProject().getAnt().getProject().getProperty(FAILURES_OR_ERRORS_PROPERTY))) {
    throw new GradleException("There were failing tests. See the report at " + getTestReportDir() + ".");
  }
}
