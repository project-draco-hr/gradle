{
  project.getPlugins().apply(PublishingPlugin.class);
  final PublishingExtension extension=project.getExtensions().getByType(PublishingExtension.class);
  project.getComponents().all(new Action<SoftwareComponent>(){
    public void execute(    SoftwareComponent softwareComponent){
      if (!extension.getPublications().withType(MavenPublication.class).isEmpty()) {
        throw new IllegalStateException("Cannot publish multiple components to Maven : need to fix this before we add another softwareComponent");
      }
      extension.getPublications().add(createPublication("maven",project,softwareComponent));
    }
  }
);
  TaskContainer tasks=project.getTasks();
  Task publishLifecycleTask=tasks.getByName(PublishingPlugin.PUBLISH_LIFECYCLE_TASK_NAME);
  MavenPublishDynamicTaskCreator publishTaskCreator=new MavenPublishDynamicTaskCreator(tasks,publishLifecycleTask);
  publishTaskCreator.monitor(extension.getPublications(),extension.getRepositories());
  Task publishLocalLifecycleTask=tasks.add(PUBLISH_LOCAL_LIFECYCLE_TASK_NAME);
  MavenPublishLocalDynamicTaskCreator publishLocalTaskCreator=new MavenPublishLocalDynamicTaskCreator(tasks,publishLocalLifecycleTask);
  publishLocalTaskCreator.monitor(extension.getPublications());
}
