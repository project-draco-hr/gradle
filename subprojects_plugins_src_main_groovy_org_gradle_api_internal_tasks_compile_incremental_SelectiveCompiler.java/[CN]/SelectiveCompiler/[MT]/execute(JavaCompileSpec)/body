{
  Clock clock=new Clock();
  RecompilationSpec recompilationSpec=recompilationSpecProvider.provideRecompilationSpec(inputs,classDependencyInfo);
  if (recompilationSpec.isFullRebuildNeeded()) {
    LOG.info("Detection of classes for compilation took {}. Full rebuild is needed due to a change to: {}.",clock.getTime(),recompilationSpec.getFullRebuildCause());
    return cleaningCompiler.execute(spec);
  }
  incrementalCompilationInitilizer.initializeCompilation(spec,recompilationSpec.getClassNames());
  if (spec.getSource().isEmpty()) {
    LOG.info("Detection of classes for compilation took {}. No recompilation is needed!",clock.getTime());
    return new RecompilationNotNecessary();
  }
  try {
    return cleaningCompiler.getCompiler().execute(spec);
  }
  finally {
    LOG.info("Detection of {} classes for compilation and the compilation took {}.",recompilationSpec.getClassNames().size(),clock.getTime());
  }
}
