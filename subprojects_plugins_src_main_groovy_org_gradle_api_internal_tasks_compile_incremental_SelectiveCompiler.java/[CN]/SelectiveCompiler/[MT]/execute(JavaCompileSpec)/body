{
  Clock clock=new Clock();
  RecompilationSpec staleClasses=recompilationSpecProvider.provideRecompilationSpec(inputs);
  if (staleClasses.isFullRebuildNeeded()) {
    LOG.lifecycle("Stale classes detection completed in {}. Full rebuild is needed due to: {}.",clock.getTime(),staleClasses.getFullRebuildReason());
    return cleaningCompiler.execute(spec);
  }
  incrementalCompilationInitilizer.initializeCompilation(spec,staleClasses.getClassNames());
  if (spec.getSource().isEmpty()) {
    return new WorkResult(){
      public boolean getDidWork(){
        return true;
      }
    }
;
  }
  try {
    return cleaningCompiler.getCompiler().execute(spec);
  }
  finally {
    LOG.lifecycle("Incremental compilation of {} class(es) took {}.",staleClasses.getClassNames().size(),clock.getTime());
  }
}
