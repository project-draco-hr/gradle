{
  final IvyArtifactName artifactStub=context.mock(IvyArtifactName.class,"artifact" + name);
  context.checking(new Expectations(){
{
      allowing(artifactStub).getName();
      will(returnValue(name));
      allowing(artifactStub).getType();
      will(returnValue(type));
      allowing(artifactStub).getExtension();
      will(returnValue(extension));
      allowing(artifactStub).getClassifier();
      will(returnValue(null));
    }
  }
);
  final Factory artifactSource=context.mock(Factory.class);
  context.checking(new Expectations(){
{
      allowing(artifactSource).create();
      will(returnValue(file));
    }
  }
);
  final ResolvedDependency resolvedDependency=context.mock(ResolvedDependency.class);
  final ResolvedModuleVersion version=context.mock(ResolvedModuleVersion.class);
  context.checking(new Expectations(){
{
      allowing(resolvedDependency).getModule();
      will(returnValue(version));
      allowing(version).getId();
      will(returnValue(new DefaultModuleVersionIdentifier("group",name,"1.2")));
    }
  }
);
  return new DefaultResolvedArtifact(resolvedDependency.getModule(),null,artifactStub,artifactSource,0);
}
