{
  loggingConfigurationCommandLineConverter.configure(parser);
  systemPropertiesCommandLineConverter.configure(parser);
  projectPropertiesCommandLineConverter.configure(parser);
  layoutCommandLineConverter.configure(parser);
  parser.allowMixedSubcommandsAndOptions();
  parser.option(PROJECT_CACHE_DIR).hasArgument().hasDescription("Specifies the project-specific cache directory. Defaults to .gradle in the root project directory.");
  parser.option(DRY_RUN,"dry-run").hasDescription("Runs the builds with all task actions disabled.");
  parser.option(INIT_SCRIPT,"init-script").hasArguments().hasDescription("Specifies an initialization script.");
  parser.option(SETTINGS_FILE,"settings-file").hasArgument().hasDescription("Specifies the settings file.");
  parser.option(BUILD_FILE,"build-file").hasArgument().hasDescription("Specifies the build file.");
  parser.option(NO_PROJECT_DEPENDENCY_REBUILD,"no-rebuild").hasDescription("Do not rebuild project dependencies.");
  parser.option(RERUN_TASKS).hasDescription("Ignore previously cached task results.");
  parser.option(RECOMPILE_SCRIPTS).hasDescription("Force build script recompiling.");
  parser.option(EXCLUDE_TASK,"exclude-task").hasArguments().hasDescription("Specify a task to be excluded from execution.");
  parser.option(PROFILE).hasDescription("Profiles build execution time and generates a report in the <build_dir>/reports/profile directory.");
  parser.option(CONTINUE).hasDescription("Continues task execution after a task failure.");
  parser.option(OFFLINE).hasDescription("The build should operate without accessing network resources.");
  parser.option(REFRESH_DEPENDENCIES).hasDescription("Refresh the state of dependencies.");
  parser.option(PARALLEL).hasDescription("Build projects in parallel. Gradle will attempt to determine the optimal number of executor threads to use.").incubating();
  parser.option(PARALLEL_THREADS).hasArgument().hasDescription("Build projects in parallel, using the specified number of executor threads.").deprecated("Prefer to use --parallel if you want to build in parallel.").incubating();
  parser.option(WORKERS).hasArgument().hasDescription("Configure the number of concurrent workers Gradle is allowed to use.").incubating();
  parser.option(CONFIGURE_ON_DEMAND).hasDescription("Only relevant projects are configured in this build run. This means faster build for large multi-project builds.").incubating();
}
