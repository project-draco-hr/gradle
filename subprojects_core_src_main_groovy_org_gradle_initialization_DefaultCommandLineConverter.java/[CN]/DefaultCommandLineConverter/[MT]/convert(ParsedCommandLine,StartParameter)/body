{
  loggingConfigurationCommandLineConverter.convert(options,startParameter);
  Transformer<File,String> resolver=new BasicFileResolver(startParameter.getCurrentDir());
  Map<String,String> systemProperties=systemPropertiesCommandLineConverter.convert(options,new HashMap<String,String>());
  convertCommandLineSystemProperties(systemProperties,startParameter,resolver);
  Map<String,String> projectProperties=projectPropertiesCommandLineConverter.convert(options,new HashMap<String,String>());
  startParameter.getProjectProperties().putAll(projectProperties);
  BuildLayoutParameters layout=new BuildLayoutParameters().setGradleUserHomeDir(startParameter.getGradleUserHomeDir()).setProjectDir(startParameter.getProjectDir()).setCurrentDir(startParameter.getCurrentDir());
  layoutCommandLineConverter.convert(options,layout);
  startParameter.setGradleUserHomeDir(layout.getGradleUserHomeDir());
  if (layout.getProjectDir() != null) {
    startParameter.setProjectDir(layout.getProjectDir());
  }
  startParameter.setSearchUpwards(layout.getSearchUpwards());
  if (options.hasOption(BUILD_FILE)) {
    startParameter.setBuildFile(resolver.transform(options.option(BUILD_FILE).getValue()));
  }
  if (options.hasOption(SETTINGS_FILE)) {
    startParameter.setSettingsFile(resolver.transform(options.option(SETTINGS_FILE).getValue()));
  }
  for (  String script : options.option(INIT_SCRIPT).getValues()) {
    startParameter.addInitScript(resolver.transform(script));
  }
  if (options.hasOption(PROJECT_CACHE_DIR)) {
    startParameter.setProjectCacheDir(resolver.transform(options.option(PROJECT_CACHE_DIR).getValue()));
  }
  if (options.hasOption(NO_PROJECT_DEPENDENCY_REBUILD)) {
    startParameter.setBuildProjectDependencies(false);
  }
  if (!options.getExtraArguments().isEmpty()) {
    startParameter.setTaskNames(options.getExtraArguments());
  }
  if (options.hasOption(DRY_RUN)) {
    startParameter.setDryRun(true);
  }
  if (options.hasOption(RERUN_TASKS)) {
    startParameter.setRerunTasks(true);
  }
  if (options.hasOption(RECOMPILE_SCRIPTS)) {
    startParameter.setRecompileScripts(true);
  }
  if (options.hasOption(EXCLUDE_TASK)) {
    startParameter.setExcludedTaskNames(options.option(EXCLUDE_TASK).getValues());
  }
  if (options.hasOption(PROFILE)) {
    startParameter.setProfile(true);
  }
  if (options.hasOption(CONTINUE)) {
    startParameter.setContinueOnFailure(true);
  }
  if (options.hasOption(OFFLINE)) {
    startParameter.setOffline(true);
  }
  if (options.hasOption(REFRESH_DEPENDENCIES)) {
    startParameter.setRefreshDependencies(true);
  }
  if (options.hasOption(PARALLEL) || options.hadOptionRemoved(PARALLEL_THREADS)) {
    startParameter.setParallelProjectExecutionEnabled(true);
  }
  if (options.hasOption(PARALLEL_THREADS)) {
    try {
      int parallelThreads=Integer.parseInt(options.option(PARALLEL_THREADS).getValue());
      startParameter.setParallelThreadCount(parallelThreads);
    }
 catch (    NumberFormatException e) {
      throw new CommandLineArgumentException(String.format("Not a numeric argument for %s",PARALLEL_THREADS));
    }
  }
  if (options.hasOption(MAX_WORKERS)) {
    String value=options.option(MAX_WORKERS).getValue();
    try {
      int workerCount=Integer.parseInt(value);
      if (workerCount < 1) {
        invalidMaxWorkersSwitchValue(value);
      }
      startParameter.setMaxWorkerCount(workerCount);
    }
 catch (    NumberFormatException e) {
      invalidMaxWorkersSwitchValue(value);
    }
  }
  if (options.hasOption(CONFIGURE_ON_DEMAND)) {
    startParameter.setConfigureOnDemand(true);
  }
  return startParameter;
}
