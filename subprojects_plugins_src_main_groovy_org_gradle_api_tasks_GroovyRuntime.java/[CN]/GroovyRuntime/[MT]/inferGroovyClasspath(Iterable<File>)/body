{
  return new LazilyInitializedFileCollection(){
    @Override public String getDisplayName(){
      return "Groovy runtime classpath";
    }
    @Override public FileCollection createDelegate(){
      GroovyJarFile groovyJar=findGroovyJarFile(classpath);
      if (groovyJar == null) {
        throw new GradleException(String.format("Cannot infer Groovy class path because no Groovy Jar was found on class path: %s",classpath));
      }
      if (groovyJar.isGroovyAll()) {
        return Cast.cast(FileCollectionInternal.class,project.files(groovyJar.getFile()));
      }
      if (project.getRepositories().isEmpty()) {
        throw new GradleException("Cannot infer Groovy class path because no repository is declared for the project.");
      }
      String notation=groovyJar.getDependencyNotation();
      List<Dependency> dependencies=Lists.newArrayList();
      dependencies.add(project.getDependencies().create(notation));
      if (groovyJar.getVersion().getMajor() >= 2) {
        dependencies.add(project.getDependencies().create(notation.replace(":groovy:",":groovy-ant:")));
      }
      return project.getConfigurations().detachedConfiguration(dependencies.toArray(new Dependency[dependencies.size()]));
    }
    @Override public void visitDependencies(    TaskDependencyResolveContext context){
      if (classpath instanceof Buildable) {
        context.add(classpath);
      }
    }
  }
;
}
