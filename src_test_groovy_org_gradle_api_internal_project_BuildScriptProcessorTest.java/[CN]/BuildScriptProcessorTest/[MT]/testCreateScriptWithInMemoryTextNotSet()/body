{
  context.checking(new Expectations(){
{
      allowing(testProject).getRootDir();
      will(returnValue(testProjectDir.getParentFile()));
      allowing(testProject).getBuildScriptClassLoader();
      will(returnValue(expectedClassloader));
      allowing(testProject).getProjectDir();
      will(returnValue(testProjectDir));
      allowing(testProject).getBuildFileName();
      will(returnValue(TEST_BUILD_FILE_NAME));
      allowing(importsReaderMock).getImports(testProjectDir.getParentFile());
      will(returnValue(TEST_IMPORTS));
      one(scriptProcessorMock).createScriptFromFile(new File(testProjectDir,Project.CACHE_DIR_NAME),testBuildScriptFile,TEST_IMPORTS,CacheUsage.ON,expectedClassloader,ProjectScript.class);
      will(returnValue(expectedScript));
      one(projectScriptMetaDataMock).applyMetaData((ProjectScript)expectedScript,testProject);
    }
  }
);
  buildScriptProcessor.createScript(testProject);
}
