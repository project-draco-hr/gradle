{
  MemoryUsage heap=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
  MemoryUsage nonHeap=ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();
  logger.lifecycle("BEFORE GC");
  logger.lifecycle("heap: " + format(heap.getUsed()) + " (initial "+ format(heap.getInit())+ ", committed "+ format(heap.getCommitted())+ ", max "+ format(heap.getMax()));
  logger.lifecycle("nonHeap: " + format(nonHeap.getUsed()) + " (initial "+ format(nonHeap.getInit())+ ", committed "+ format(nonHeap.getCommitted())+ ", max "+ format(nonHeap.getMax()));
  ManagementFactory.getMemoryMXBean().gc();
  heap=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
  nonHeap=ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();
  logger.lifecycle("AFTER GC");
  logger.lifecycle("heap: " + format(heap.getUsed()) + " (initial "+ format(heap.getInit())+ ", committed "+ format(heap.getCommitted())+ ", max "+ format(heap.getMax()));
  logger.lifecycle("nonHeap: " + format(nonHeap.getUsed()) + " (initial "+ format(nonHeap.getInit())+ ", committed "+ format(nonHeap.getCommitted())+ ", max "+ format(nonHeap.getMax()));
  project.getBuildDir().mkdirs();
  File totalMemoryUsedFile=new File(project.getBuildDir(),"totalMemoryUsed.txt");
  try {
    FileWriter writer=new FileWriter(totalMemoryUsedFile);
    try {
      writer.write(String.valueOf(heap.getUsed()));
    }
  finally {
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
