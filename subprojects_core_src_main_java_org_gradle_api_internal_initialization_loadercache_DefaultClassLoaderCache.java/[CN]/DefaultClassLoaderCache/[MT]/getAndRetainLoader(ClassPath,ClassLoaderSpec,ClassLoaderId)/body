{
  CachedClassLoader cachedLoader=bySpec.get(spec);
  if (cachedLoader == null) {
    ClassLoader classLoader;
    CachedClassLoader parentCachedLoader=null;
    long snapshotHash=spec.classPathSnapshot.getStrongHash().asLong();
    final long hashCode=31 * snapshotHash + (spec.filterSpec != null ? spec.filterSpec.hashCode() : 0);
    if (spec.isFiltered()) {
      parentCachedLoader=getAndRetainLoader(classPath,spec.unfiltered(),id);
      classLoader=new HashedFilteringClassLoader(parentCachedLoader,spec,hashCode);
    }
 else {
      classLoader=new HashedVisitableURLClassLoader(spec,classPath,hashCode);
    }
    cachedLoader=new CachedClassLoader(classLoader,spec,parentCachedLoader);
    bySpec.put(spec,cachedLoader);
  }
  return cachedLoader.retain(id);
}
