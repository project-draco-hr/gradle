{
  registerConverter(new NumberConverter<Double>(Double.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Double> result) throws TypeConversionException {
      result.converted(Double.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Double> result){
      result.converted(n.doubleValue());
    }
  }
,Double.class);
  registerConverter(new NumberConverter<Double>(double.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Double> result) throws TypeConversionException {
      result.converted(Double.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Double> result){
      result.converted(n.doubleValue());
    }
  }
,double.class);
  registerConverter(new NumberConverter<Float>(Float.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Float> result) throws TypeConversionException {
      result.converted(Float.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Float> result){
      result.converted(n.floatValue());
    }
  }
,Float.class);
  registerConverter(new NumberConverter<Float>(float.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Float> result) throws TypeConversionException {
      result.converted(Float.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Float> result){
      result.converted(n.floatValue());
    }
  }
,float.class);
  registerConverter(new NumberConverter<Integer>(Integer.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Integer> result) throws TypeConversionException {
      result.converted(Integer.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Integer> result){
      result.converted(n.intValue());
    }
  }
,Integer.class);
  registerConverter(new NumberConverter<Integer>(int.class){
    protected void convertStringToNumber(    String s,    NotationConvertResult<? super Integer> result) throws TypeConversionException {
      result.converted(Integer.valueOf(s));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Integer> result){
      result.converted(n.intValue());
    }
  }
,int.class);
  registerConverter(new NumberConverter<Long>(Long.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Long> result) throws TypeConversionException {
      result.converted(Long.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Long> result){
      result.converted(n.longValue());
    }
  }
,Long.class);
  registerConverter(new NumberConverter<Long>(long.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Long> result) throws TypeConversionException {
      result.converted(Long.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Long> result){
      result.converted(n.longValue());
    }
  }
,long.class);
  registerConverter(new NumberConverter<Short>(Short.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Short> result) throws TypeConversionException {
      result.converted(Short.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Short> result){
      result.converted(n.shortValue());
    }
  }
,Short.class);
  registerConverter(new NumberConverter<Short>(short.class){
    protected void convertStringToNumber(    String s,    NotationConvertResult<? super Short> result) throws TypeConversionException {
      result.converted(Short.valueOf(s));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Short> result){
      result.converted(n.shortValue());
    }
  }
,short.class);
  registerConverter(new NumberConverter<Byte>(Byte.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Byte> result) throws TypeConversionException {
      result.converted(Byte.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Byte> result){
      result.converted(n.byteValue());
    }
  }
,Byte.class);
  registerConverter(new NumberConverter<Byte>(byte.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super Byte> result) throws TypeConversionException {
      result.converted(Byte.valueOf(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super Byte> result){
      result.converted(n.byteValue());
    }
  }
,byte.class);
  registerConverter(new NumberConverter<BigDecimal>(BigDecimal.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super BigDecimal> result) throws TypeConversionException {
      result.converted(new BigDecimal(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super BigDecimal> result){
      if (n instanceof BigDecimal) {
        result.converted((BigDecimal)n);
      }
 else       if (n instanceof BigInteger) {
        result.converted(new BigDecimal((BigInteger)n));
      }
    }
  }
,BigDecimal.class);
  registerConverter(new NumberConverter<BigInteger>(BigInteger.class){
    protected void convertStringToNumber(    String notation,    NotationConvertResult<? super BigInteger> result) throws TypeConversionException {
      result.converted(new BigInteger(notation));
    }
    protected void convertNumberToNumber(    Number n,    NotationConvertResult<? super BigInteger> result){
      if (n instanceof BigInteger) {
        result.converted((BigInteger)n);
      }
    }
  }
,BigInteger.class);
  CharSequenceConverter<Boolean> booleanConverter=new CharSequenceConverter<Boolean>(){
    public void convert(    String notation,    NotationConvertResult<? super Boolean> result) throws TypeConversionException {
      result.converted("true".equals(notation));
    }
  }
;
  registerStringConverter(booleanConverter,Boolean.class);
  registerStringConverter(booleanConverter,boolean.class);
  registerStringConverter(new CharSequenceConverter<Character>(){
    public void convert(    String notation,    NotationConvertResult<? super Character> result) throws TypeConversionException {
      convertToCharacter(notation,result,Character.class);
    }
  }
,Character.class);
  registerStringConverter(new CharSequenceConverter<Character>(){
    public void convert(    String notation,    NotationConvertResult<? super Character> result) throws TypeConversionException {
      convertToCharacter(notation,result,char.class);
    }
  }
,char.class);
  registerConverter(new StringConverter(),String.class);
}
