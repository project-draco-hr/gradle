{
  validateType(type,context);
  List<Method> methodList=Arrays.asList(type.getRawClass().getDeclaredMethods());
  if (methodList.isEmpty()) {
    ManagedTypeInstantiator<R> elementInstantiator=new ManagedTypeInstantiator<R>();
    ModelSchema<R> schema=new ModelSchema<R>(type,elementInstantiator);
    return new ModelSchemaExtractionResult<R>(schema);
  }
  List<ModelProperty<?>> properties=Lists.newLinkedList();
  Map<String,Method> methods=Maps.newHashMap();
  for (  Method method : methodList) {
    String name=method.getName();
    if (methods.containsKey(name)) {
      throw invalidMethod(type,name,"overloaded methods are not supported",context);
    }
    methods.put(name,method);
  }
  List<String> methodNames=Lists.newLinkedList(methods.keySet());
  List<String> handled=Lists.newArrayList();
  for (  String methodName : methodNames) {
    Method method=methods.get(methodName);
    if (methodName.startsWith("get") && !methodName.equals("get")) {
      if (method.getParameterTypes().length != 0) {
        throw invalidMethod(type,methodName,"getter methods cannot take parameters",context);
      }
      Character getterPropertyNameFirstChar=methodName.charAt(3);
      if (!Character.isUpperCase(getterPropertyNameFirstChar)) {
        throw invalidMethod(type,methodName,"the 4th character of the getter method name must be an uppercase character",context);
      }
      ModelType<?> returnType=ModelType.of(method.getGenericReturnType());
      if (isManaged(returnType)) {
        properties.add(extractPropertyOfManagedType(cache,type,methods,methodName,returnType,handled,context));
      }
 else {
        properties.add(extractPropertyOfUnmanagedType(type,methods,methodName,returnType,handled,context));
      }
      handled.add(methodName);
    }
  }
  methodNames.removeAll(handled);
  if (!methodNames.isEmpty()) {
    throw new InvalidManagedModelElementTypeException(type,"only paired getter/setter methods are supported (invalid methods: [" + Joiner.on(", ").join(methodNames) + "])",context);
  }
  ManagedTypeInstantiator<R> elementInstantiator=new ManagedTypeInstantiator<R>();
  ModelSchema<R> schema=new ModelSchema<R>(type,properties,elementInstantiator);
  Iterable<? extends ModelSchemaExtractionContext> dependencies=getModelSchemaDependencies(properties,type,context);
  return new ModelSchemaExtractionResult<R>(schema,dependencies);
}
