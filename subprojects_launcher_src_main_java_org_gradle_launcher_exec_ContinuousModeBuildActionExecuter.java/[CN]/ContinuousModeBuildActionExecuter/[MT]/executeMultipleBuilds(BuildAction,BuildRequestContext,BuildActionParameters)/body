{
  if (!javaVersion.isJava7Compatible()) {
    throw new IllegalStateException(String.format("Continuous building requires Java %s or later.",JavaVersion.VERSION_1_7));
  }
  SingleMessageLogger.incubatingFeatureUsed("Continuous building");
  BuildCancellationToken cancellationToken=requestContext.getCancellationToken();
  if (!(System.in instanceof DisconnectableInputStream)) {
    System.setIn(new DisconnectableInputStream(System.in));
  }
  DisconnectableInputStream inputStream=(DisconnectableInputStream)System.in;
  final DefaultCancellableOperationManager cancellableOperationManager=new DefaultCancellableOperationManager(executorFactory.create("cancel signal monitor"),inputStream,cancellationToken);
  Object lastResult=null;
  int counter=0;
  while (!cancellationToken.isCancellationRequested()) {
    if (++counter != 1) {
      requestContext.getBuildTimeClock().reset();
      logger.println("Change detected, executing build...").println();
    }
    FileSystemSubset.Builder fileSystemSubsetBuilder=FileSystemSubset.builder();
    try {
      lastResult=executeBuildAndAccumulateInputs(action,requestContext,actionParameters,fileSystemSubsetBuilder);
    }
 catch (    Throwable t) {
    }
    final FileSystemSubset toWatch=fileSystemSubsetBuilder.build();
    if (toWatch.isEmpty()) {
      logger.println().withStyle(StyledTextOutput.Style.Failure).println("Exiting continuous building as no executed tasks declared file system inputs.");
      return lastResult;
    }
 else {
      cancellableOperationManager.monitorInputExecute(new Action<BuildCancellationToken>(){
        @Override public void execute(        BuildCancellationToken cancellationToken){
          waiter.wait(toWatch,cancellationToken,new Runnable(){
            @Override public void run(){
              logger.println().println("Waiting for changes to input files of tasks... (ctrl+d to exit)");
            }
          }
);
        }
      }
);
    }
  }
  logger.println("Build cancelled.");
  return lastResult;
}
