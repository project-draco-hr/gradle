{
  if (TestClassProcessResultReportInfo.class == reportInfo.getClass()) {
    final TestClassProcessResultReportInfo testClassInfo=(TestClassProcessResultReportInfo)reportInfo;
    final Pipeline pipeline=testClassInfo.getPipeline();
    final TestClassProcessResult classResult=testClassInfo.getTestClassProcessResult();
    final List<TestMethodProcessResult> methodResults=classResult.getMethodResults();
    final Map<TestMethodProcessResultState,Integer> stateCounts=new HashMap<TestMethodProcessResultState,Integer>();
    for (    final TestMethodProcessResult methodResult : methodResults) {
      final TestMethodProcessResultState mappedState=methodProcessResultStateMapping.get(methodResult.getState());
      Integer stateCount=stateCounts.get(mappedState);
      if (stateCount == null) {
        stateCount=1;
      }
 else {
        stateCount++;
      }
      stateCounts.put(mappedState,stateCount);
    }
    final List<TestMethodProcessResultState> noneZeroStates=new ArrayList<TestMethodProcessResultState>();
    for (    final TestMethodProcessResultState state : TestMethodProcessResultStates.values()) {
      final Integer stateCount=stateCounts.get(state);
      if (stateCount != null) {
        noneZeroStates.add(state);
      }
    }
    boolean show=false;
    final List<TestMethodProcessResultState> toShowStates=config.getToShowStates();
    final Iterator<TestMethodProcessResultState> toShowStatesIterator=toShowStates.iterator();
    while (!show && toShowStatesIterator.hasNext()) {
      show=noneZeroStates.contains(toShowStatesIterator.next());
    }
    if (show) {
      final int failureCount=stateCounts.get(TestMethodProcessResultStates.FAILURE) == null ? 0 : stateCounts.get(TestMethodProcessResultStates.FAILURE);
      final int errorCount=stateCounts.get(TestMethodProcessResultStates.ERROR) == null ? 0 : stateCounts.get(TestMethodProcessResultStates.ERROR);
      final int successCount=stateCounts.get(TestMethodProcessResultStates.SUCCESS) == null ? 0 : stateCounts.get(TestMethodProcessResultStates.SUCCESS);
      logger.info("pipeline {}, fork {} : Test {} : success#{}, failure#{}, error#{}",new Object[]{pipeline.getConfig().getName(),reportInfo.getForkId(),classResult.getTestClassRunInfo().getTestClassName(),successCount,failureCount,errorCount});
      if (failureCount > 0 || errorCount > 0) {
        for (        final TestMethodProcessResult methodResult : methodResults) {
          if (methodResult.getState() == TestMethodProcessResultStates.ERROR || methodResult.getState() == TestMethodProcessResultStates.FAILURE) {
            logger.info("pipeline {}, fork {} : Test {} :",new Object[]{pipeline.getConfig().getName(),reportInfo.getForkId(),classResult.getTestClassRunInfo().getTestClassName() + "." + methodResult.getMethodName()});
            logger.info("cause",methodResult.getThrownException());
          }
        }
      }
    }
  }
}
