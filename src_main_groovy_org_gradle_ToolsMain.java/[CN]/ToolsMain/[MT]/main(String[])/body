{
  boolean modernCompilerFound=false;
  ClassLoader classLoader=ClassLoader.getSystemClassLoader();
  try {
    classLoader.loadClass("com.sun.tools.javac.Main");
    modernCompilerFound=true;
  }
 catch (  ClassNotFoundException e) {
  }
  if (!modernCompilerFound) {
    ClassLoader _cl=classLoader;
    while (_cl.getParent() != null) {
      _cl=_cl.getParent();
    }
    File toolsJar=Locator.getToolsJar();
    List jars=new ArrayList();
    File gradleHomeLib=new File(System.getProperty("gradle.home") + "/lib");
    if (gradleHomeLib.exists()) {
      File[] files=gradleHomeLib.listFiles();
      for (int i=0; i < files.length; i++) {
        jars.add(Locator.fileToURL(files[i]));
      }
      jars.add(Locator.fileToURL(toolsJar));
      ClassLoader contextClassLoader=new URLClassLoader((URL[])jars.toArray(new URL[jars.size()]),_cl);
      contextClassLoader.loadClass("com.sun.tools.javac.Main");
      classLoader=contextClassLoader;
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  Class mainClass=classLoader.loadClass("org.gradle.Main");
  Method mainMethod=mainClass.getMethod("main",new Class[]{String[].class});
  mainMethod.invoke(null,new Object[]{args});
}
