{
  LOGGER.debug("Waiting to acquire {} lock on {}.",lockMode.toString().toLowerCase(),displayName);
  long waitUntil=System.currentTimeMillis() + lockTimeoutMs;
  java.nio.channels.FileLock stateRegionLock=lockStateRegion(lockMode,waitUntil);
  if (stateRegionLock == null) {
    LockInfo lockInfo=readInformationRegion(System.currentTimeMillis() + shortTimeoutMs);
    throw new LockTimeoutException(String.format("Timeout waiting to lock %s. It is currently in use by another Gradle instance.%nOwner PID: %s%nOur PID: %s%nOwner Operation: %s%nOur operation: %s%nLock file: %s",displayName,lockInfo.pid,metaDataProvider.getProcessIdentifier(),lockInfo.operation,operationDisplayName,lockFile));
  }
  try {
    LockState lockState;
    if (!stateRegionLock.isShared()) {
      lockState=lockFileAccess.ensureLockState();
      java.nio.channels.FileLock informationRegionLock=lockInformationRegion(LockMode.Exclusive,System.currentTimeMillis() + shortTimeoutMs);
      if (informationRegionLock == null) {
        throw new IllegalStateException(String.format("Unable to lock the information region for %s",displayName));
      }
      try {
        lockFileAccess.writeLockInfo(port,lockId,metaDataProvider.getProcessIdentifier(),operationDisplayName);
      }
  finally {
        informationRegionLock.release();
      }
    }
 else {
      lockState=lockFileAccess.readLockState();
    }
    LOGGER.debug("Lock acquired.");
    lock=stateRegionLock;
    return lockState;
  }
 catch (  Throwable t) {
    stateRegionLock.release();
    throw t;
  }
}
