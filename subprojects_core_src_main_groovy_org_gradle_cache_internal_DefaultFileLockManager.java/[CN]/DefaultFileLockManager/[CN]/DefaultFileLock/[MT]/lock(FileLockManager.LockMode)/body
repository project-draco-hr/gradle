{
  LOGGER.debug("Waiting to acquire {} lock on {}.",lockMode.toString().toLowerCase(),displayName);
  long timeout=System.currentTimeMillis() + LOCK_TIMEOUT;
  java.nio.channels.FileLock stateRegionLock=lockStateRegion(lockMode,timeout);
  if (stateRegionLock == null) {
    String ownerPid="unknown";
    String ownerOperation="unknown";
    java.nio.channels.FileLock informationRegionLock=lockInformationRegion(LockMode.Shared,timeout);
    if (informationRegionLock == null) {
      LOGGER.debug("Could not lock information region for {}. Ignoring.",displayName);
    }
 else {
      try {
        if (lockFileAccess.length() < INFORMATION_REGION_POS) {
          LOGGER.debug("Lock file for {} is too short to contain information region. Ignoring.",displayName);
        }
 else {
          lockFileAccess.seek(INFORMATION_REGION_POS);
          if (lockFileAccess.readByte() != INFORMATION_REGION_PROTOCOL) {
            throw new IllegalStateException(String.format("Unexpected lock protocol found in lock file '%s' for %s.",lockFile,displayName));
          }
          ownerPid=lockFileAccess.readUTF();
          ownerOperation=lockFileAccess.readUTF();
        }
      }
  finally {
        informationRegionLock.release();
      }
    }
    throw new LockTimeoutException(String.format("Timeout waiting to lock %s. It is currently in use by another Gradle instance.%nOwner PID: %s%nOur PID: %s%nOwner Operation: %s%nOur operation: %s%nLock file: %s",displayName,metaDataProvider.getProcessIdentifier(),ownerPid,ownerOperation,operationDisplayName,lockFile));
  }
  try {
    if (lockFileAccess.length() > 0) {
      lockFileAccess.seek(STATE_REGION_POS);
      if (lockFileAccess.readByte() != STATE_REGION_PROTOCOL) {
        throw new IllegalStateException(String.format("Unexpected lock protocol found in lock file '%s' for %s.",lockFile,displayName));
      }
    }
    if (!stateRegionLock.isShared()) {
      if (lockFileAccess.length() < STATE_REGION_SIZE) {
        lockFileAccess.seek(STATE_REGION_POS);
        lockFileAccess.writeByte(STATE_REGION_PROTOCOL);
        lockFileAccess.writeBoolean(false);
      }
      java.nio.channels.FileLock informationRegionLock=lockInformationRegion(LockMode.Exclusive,timeout);
      if (informationRegionLock == null) {
        throw new IllegalStateException(String.format("Timeout waiting to lock the information region for lock %s",displayName));
      }
      try {
        lockFileAccess.seek(INFORMATION_REGION_POS);
        lockFileAccess.writeByte(INFORMATION_REGION_PROTOCOL);
        lockFileAccess.writeUTF(trimIfNecessary(metaDataProvider.getProcessIdentifier()));
        lockFileAccess.writeUTF(trimIfNecessary(operationDisplayName));
        lockFileAccess.setLength(lockFileAccess.getFilePointer());
      }
  finally {
        informationRegionLock.release();
      }
    }
  }
 catch (  Throwable t) {
    stateRegionLock.release();
    throw t;
  }
  LOGGER.debug("Lock acquired.");
  return stateRegionLock;
}
