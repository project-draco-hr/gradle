{
  new MetricsHtml(writer){
{
      html();
      head();
      headSection(this);
      title().text(String.format("Profile test %s report",testHistory.getName())).end();
      script();
      text("$(function() {\n");
      text("$.ajax({ url:'" + testHistory.getId() + ".json\', dataType: 'json',");
      text("  success: function(data) {\n");
      text("    var labels = data.labels;\n");
      text("    var options = { series: { points: { show: true }, lines: { show: true } }, legend: { noColumns: 0, margin: 1 }, grid: { hoverable: true, clickable: true }, xaxis: { tickFormatter: function(index, value) { return labels[index]; } }, selection: { mode: 'x' } };\n");
      text("    var executionChart = $.plot('#executionTimeChart', data.totalTime, options);\n");
      text("    var heapChart = $.plot('#heapUsageChart', data.heapUsage, options);\n");
      text("    var zoomFunction = function(plot, reset) {\n");
      text("      var reset = reset || false;\n");
      text("      return function (event, ranges) {\n");
      text("        $.each(plot.getXAxes(), function(_, axis) {\n");
      text("          var opts = axis.options;\n");
      text("          opts.min = reset ? null : ranges.xaxis.from;\n");
      text("          opts.max = reset ? null : ranges.xaxis.to;\n");
      text("        });\n");
      text("        plot.setupGrid();\n");
      text("        plot.draw();\n");
      text("        plot.clearSelection();\n");
      text("      };\n");
      text("    };\n");
      text("    $('#executionTimeChart').bind('plothover', function (event, pos, item) {\n");
      text("      if (!item) {\n");
      text("        $('#tooltip').hide();\n");
      text("      } else {\n");
      text("        var text = 'Version: ' + item.series.label + ', date: ' + labels[item.datapoint[0]] + ', execution time: ' + item.datapoint[1] + 's';\n");
      text("        $('#tooltip').html(text).css({top: item.pageY - 10, left: item.pageX + 10}).show();\n");
      text("      }\n");
      text("    }).bind('plotselected', zoomFunction(executionChart)).bind('dblclick', zoomFunction(executionChart, true));\n");
      text("    $('#heapUsageChart').bind('plothover', function (event, pos, item) {\n");
      text("      if (!item) {\n");
      text("        $('#tooltip').hide();\n");
      text("      } else {\n");
      text("        var text = 'Version: ' + item.series.label + ', date: ' + labels[item.datapoint[0]] + ', heap usage: ' + item.datapoint[1] + 'mb';\n");
      text("        $('#tooltip').html(text).css({top: item.pageY - 10, left: item.pageX + 10}).show();\n");
      text("      }\n");
      text("    }).bind('plotselected', zoomFunction(heapChart)).bind('dblclick', zoomFunction(heapChart, true));\n");
      text("  }\n");
      text("});\n");
      text("});");
      end();
      end();
      body();
      div().id("content");
      h2().text(String.format("Test %s",testHistory.getName())).end();
      h3().text("Average execution time").end();
      div().id("executionTimeChart").classAttr("chart");
      p().text("Loading...").end();
      end();
      h3().text("Average heap usage").end();
      div().id("heapUsageChart").classAttr("chart");
      p().text("Loading...").end();
      end();
      div().id("tooltip").end();
      h3().text("Test history").end();
      div().id("controls").end();
      table().classAttr("history");
      tr().classAttr("control-groups");
      th().colspan("4").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average build time").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average configuration time").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average execution time").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average heap usage (old measurement)").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average total heap usage").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average max heap usage").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average max uncollected heap").end();
      th().colspan(String.valueOf(testHistory.getExperimentCount())).text("Average max committed heap").end();
      th().colspan("4").text("Details").end();
      end();
      tr();
      th().text("Date").end();
      th().text("Test version").end();
      th().text("Branch").end();
      th().text("Git commit").end();
      for (int i=0; i < 8; i++) {
        for (        String label : testHistory.getExperimentLabels()) {
          th().classAttr("numeric").text(label).end();
        }
      }
      th().text("Operating System").end();
      th().text("JVM").end();
      th().text("Test project").end();
      th().text("Tasks").end();
      th().text("Gradle args").end();
      th().text("Gradle JVM opts").end();
      th().text("Daemon").end();
      end();
      for (      PerformanceResults results : testHistory.getPerformanceResults()) {
        tr();
        td().text(format.timestamp(new Date(results.getTestTime()))).end();
        td().text(results.getVersionUnderTest()).end();
        td().text(results.getVcsBranch()).end();
        td();
        List<Link> vcsCommits=urlify(results.getVcsCommits());
        for (int i=0; i < vcsCommits.size(); i++) {
          Link vcsCommit=vcsCommits.get(i);
          a().href(vcsCommit.getValue()).text(vcsCommit.getLabel()).end();
          if (i != vcsCommits.size() - 1) {
            text(" | ");
          }
        }
        end();
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getTotalTime();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getConfigurationTime();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getExecutionTime();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getTotalMemoryUsed();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getTotalHeapUsage();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxHeapUsage();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxUncollectedHeap();
          }
        }
);
        renderSamplesForExperiment(results.getExperiments(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxCommittedHeap();
          }
        }
);
        textCell(results.getOperatingSystem());
        textCell(results.getJvm());
        textCell(results.getTestProject());
        textCell(results.getTasks());
        textCell(results.getArgs());
        textCell(results.getGradleOpts());
        textCell(results.getDaemon());
        end();
      }
      end();
      end();
      footer(this);
      endAll();
    }
    void textCell(    Object obj){
      td();
      if (obj != null) {
        text(obj.toString());
      }
      end();
    }
  }
;
}
