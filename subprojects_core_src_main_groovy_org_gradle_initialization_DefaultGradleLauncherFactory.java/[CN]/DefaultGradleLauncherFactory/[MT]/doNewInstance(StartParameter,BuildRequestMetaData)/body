{
  TopLevelBuildServiceRegistry serviceRegistry=new TopLevelBuildServiceRegistry(sharedServices,startParameter);
  serviceRegistry.add(BuildRequestMetaData.class,requestMetaData);
  serviceRegistry.add(BuildClientMetaData.class,requestMetaData.getClient());
  ListenerManager listenerManager=serviceRegistry.get(ListenerManager.class);
  LoggingManagerInternal loggingManager=serviceRegistry.newInstance(LoggingManagerInternal.class);
  loggingManager.setLevel(startParameter.getLogLevel());
  loggingManager.colorStdOutAndStdErr(startParameter.isColorOutput());
  loggingManager.addStandardOutputListener(listenerManager.getBroadcaster(StandardOutputListener.class));
  loggingManager.addStandardErrorListener(listenerManager.getBroadcaster(StandardOutputListener.class));
  listenerManager.useLogger(new TaskExecutionLogger(serviceRegistry.get(ProgressLoggerFactory.class)));
  if (tracker.getCurrentBuild() == null) {
    listenerManager.useLogger(new BuildLogger(Logging.getLogger(BuildLogger.class),serviceRegistry.get(StyledTextOutputFactory.class),startParameter,requestMetaData));
  }
  listenerManager.addListener(tracker);
  listenerManager.addListener(new BuildCleanupListener(serviceRegistry));
  if (startParameter.isProfile()) {
    listenerManager.addListener(new ProfileListener(requestMetaData.getBuildTimeClock().getStartTime()));
  }
  GradleInternal gradle=serviceRegistry.get(Instantiator.class).newInstance(DefaultGradle.class,tracker.getCurrentBuild(),startParameter,serviceRegistry);
  return new DefaultGradleLauncher(gradle,serviceRegistry.get(InitScriptHandler.class),new SettingsHandler(new DefaultSettingsFinder(new BuildLayoutFactory()),serviceRegistry.get(SettingsProcessor.class),new BuildSourceBuilder(this,serviceRegistry.get(ClassLoaderRegistry.class),serviceRegistry.get(CacheRepository.class))),serviceRegistry.get(BuildLoader.class),serviceRegistry.get(BuildConfigurer.class),gradle.getBuildListenerBroadcaster(),serviceRegistry.get(ExceptionAnalyser.class),loggingManager,gradle.getServices().get(BuildExecuter.class));
}
