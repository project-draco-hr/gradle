{
  return new SourceTransformTaskConfig(){
    public String getTaskPrefix(){
      return "compile";
    }
    public Class<? extends DefaultTask> getTaskType(){
      return PlatformJavaCompile.class;
    }
    public void configureTask(    Task task,    BinarySpec binarySpec,    LanguageSourceSet sourceSet,    ServiceRegistry serviceRegistry){
      PlatformJavaCompile compile=(PlatformJavaCompile)task;
      JavaSourceSet javaSourceSet=(JavaSourceSet)sourceSet;
      JarBinarySpec binary=(JarBinarySpec)binarySpec;
      ArtifactDependencyResolver dependencyResolver=serviceRegistry.get(ArtifactDependencyResolver.class);
      RepositoryHandler repositories=serviceRegistry.get(RepositoryHandler.class);
      List<ResolutionAwareRepository> resolutionAwareRepositories=CollectionUtils.collect(repositories,Transformers.cast(ResolutionAwareRepository.class));
      compile.setDescription(String.format("Compiles %s.",javaSourceSet));
      compile.setDestinationDir(binary.getClassesDir());
      compile.setToolChain(binary.getToolChain());
      compile.setPlatform(binary.getTargetPlatform());
      compile.setSource(javaSourceSet.getSource());
      DependencyResolvingClasspath classpath=new DependencyResolvingClasspath(binary,(DependentSourceSetInternal)javaSourceSet,dependencyResolver,schemaStore,resolutionAwareRepositories);
      compile.setClasspath(classpath);
      compile.setTargetCompatibility(binary.getTargetPlatform().getTargetCompatibility().toString());
      compile.setSourceCompatibility(binary.getTargetPlatform().getTargetCompatibility().toString());
      compile.setDependencyCacheDir(new File(compile.getProject().getBuildDir(),"jvm-dep-cache"));
      compile.dependsOn(javaSourceSet);
      for (      Task jarTask : binary.getTasks().withType(Jar.class)) {
        jarTask.dependsOn(compile);
      }
    }
  }
;
}
