{
  final Set<File> classpath=new LinkedHashSet<File>();
  classpath.addAll(sourceSet.getCompileClasspath().getFiles().getFiles());
  ResolverResults results=new ResolverResults();
  final List<ResolutionAwareRepository> resolutionRepositories=getResolutionAwareRepositories();
  DefaultJavaSourceSetResolveContext resolveContext=new DefaultJavaSourceSetResolveContext(project,(DefaultJavaLanguageSourceSet)sourceSet);
  dependencyResolver.resolve(resolveContext,resolutionRepositories,globalDependencyResolutionRules,results);
  ResolutionResult resolutionResult=results.getResolutionResult();
  resolutionResult.allDependencies(new Action<DependencyResult>(){
    @Override public void execute(    DependencyResult dependencyResult){
      if (dependencyResult instanceof ResolvedDependencyResult) {
        ResolvedDependencyResult resolved=(ResolvedDependencyResult)dependencyResult;
        ResolvedComponentResult selected=resolved.getSelected();
        ComponentIdentifier id=selected.getId();
      }
    }
  }
);
  return classpath;
}
