{
  Set<File> classpath=new LinkedHashSet<File>();
  classpath.addAll(sourceSet.getCompileClasspath().getFiles().getFiles());
  ResolverResults results=new ResolverResults();
  ImmutableList<ArtifactRepository> artifactRepositories=ImmutableList.copyOf(repositories.iterator());
  List<ResolutionAwareRepository> resolutionRepositories=new LinkedList<ResolutionAwareRepository>();
  for (  ArtifactRepository artifactRepository : artifactRepositories) {
    if (artifactRepository instanceof ResolutionAwareRepository) {
      resolutionRepositories.add((ResolutionAwareRepository)artifactRepository);
    }
  }
  DependentSourceSetInternal dss=(DependentSourceSetInternal)sourceSet;
  ResolveContext context=new ResolveContext(){
    @Override public ResolutionStrategyInternal getResolutionStrategy(){
      return null;
    }
    @Override public DependencySet getDependencies(){
      return new DefaultDependencySet("foo",new DefaultDomainObjectSet<Dependency>(Dependency.class));
    }
    @Override public DependencySet getAllDependencies(){
      return new DefaultDependencySet("foo",new DefaultDomainObjectSet<Dependency>(Dependency.class));
    }
    @Override public ModuleInternal getModule(){
      return new DefaultModule("foo","bar","baz");
    }
  }
;
  return classpath;
}
