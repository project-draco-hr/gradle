{
  RunnerBuilder runnerBuilder=new RunnerBuilder(){
    @Override public Runner runnerForClass(    Class<?> testClass) throws Throwable {
      for (Class<?> candidate=testClass; candidate != null; candidate=candidate.getSuperclass()) {
        RunWith runWith=candidate.getAnnotation(RunWith.class);
        if (runWith != null && !AbstractMultiTestRunner.class.isAssignableFrom(runWith.value())) {
          try {
            Runner r=(Runner)runWith.value().getConstructors()[0].newInstance(testClass);
            return filter(r);
          }
 catch (          InvocationTargetException e) {
            throw e.getTargetException();
          }
        }
      }
      return filter(new BlockJUnit4ClassRunner(testClass));
    }
    private Runner filter(    Runner r){
      for (      Filter filter : filters) {
        try {
          ((Filterable)r).filter(filter);
        }
 catch (        NoTestsRemainException e) {
        }
      }
      return r;
    }
  }
;
  return new Suite(runnerBuilder,targetClasses.toArray(new Class<?>[0]));
}
