{
  final TaskContainerInternal tasks=project.getTasks();
  tasks.addPlaceholderAction(ProjectInternal.HELP_TASK,Help.class,new Action<Help>(){
    public void execute(    Help task){
      task.setDescription("Displays a help message.");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(ProjectInternal.PROJECTS_TASK,ProjectReportTask.class,new Action<ProjectReportTask>(){
    public void execute(    ProjectReportTask task){
      task.setDescription("Displays the sub-projects of " + project + ".");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(ProjectInternal.TASKS_TASK,TaskReportTask.class,new Action<TaskReportTask>(){
    public void execute(    TaskReportTask task){
      String description;
      if (project.getChildProjects().isEmpty()) {
        description="Displays the tasks runnable from " + project + ".";
      }
 else {
        description="Displays the tasks runnable from " + project + " (some of the displayed tasks may belong to subprojects).";
      }
      task.setDescription(description);
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(PROPERTIES_TASK,PropertyReportTask.class,new Action<PropertyReportTask>(){
    public void execute(    PropertyReportTask task){
      task.setDescription("Displays the properties of " + project + ".");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(DEPENDENCY_INSIGHT_TASK,DependencyInsightReportTask.class,new Action<DependencyInsightReportTask>(){
    public void execute(    final DependencyInsightReportTask task){
      task.setDescription("Displays the insight into a specific dependency in " + project + ".");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
      new DslObject(task).getConventionMapping().map("configuration",new Callable<Object>(){
        public Object call(){
          BuildableJavaComponent javaProject=project.getServices().get(ComponentRegistry.class).getMainComponent();
          return javaProject == null ? null : javaProject.getCompileDependencies();
        }
      }
);
    }
  }
);
  tasks.addPlaceholderAction(DEPENDENCIES_TASK,DependencyReportTask.class,new Action<DependencyReportTask>(){
    public void execute(    DependencyReportTask task){
      task.setDescription("Displays all dependencies declared in " + project + ".");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(COMPONENTS_TASK,ComponentReport.class,new Action<ComponentReport>(){
    public void execute(    ComponentReport task){
      task.setDescription("Displays the components produced by " + project + ". [incubating]");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
  tasks.addPlaceholderAction(MODEL_TASK,ModelReport.class,new Action<ModelReport>(){
    public void execute(    ModelReport task){
      task.setDescription("Displays the configuration model of " + project + ". [incubating]");
      task.setGroup(HELP_GROUP);
      task.setImpliesSubProjects(true);
    }
  }
);
}
