{
  Type type=extractionContext.getType().getType();
  if (!(type instanceof Class)) {
    return null;
  }
  Class<?> contractType=(Class<?>)type;
  if (!contractType.isInterface()) {
    return null;
  }
  if (contractType.getGenericInterfaces().length != 1) {
    return null;
  }
  Type superType=contractType.getGenericInterfaces()[0];
  if (!(superType instanceof ParameterizedType)) {
    return null;
  }
  ParameterizedType parameterizedSuperType=(ParameterizedType)superType;
  if (!parameterizedSuperType.getRawType().equals(ModelMap.class)) {
    return null;
  }
  ModelType<?> elementType=ModelType.of(parameterizedSuperType.getActualTypeArguments()[0]);
  Class<?> proxyImpl=generator.generate(ModelMapGroovyDecorator.class,contractType);
  return new ModelSchemaExtractionResult<T>(ModelSchema.map(extractionContext.getType(),elementType,proxyImpl));
}
