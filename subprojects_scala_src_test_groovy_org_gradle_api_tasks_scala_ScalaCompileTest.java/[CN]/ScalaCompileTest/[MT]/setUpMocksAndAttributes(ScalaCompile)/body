{
  compile.source(srcDir);
  compile.setIncludes(TEST_INCLUDES);
  compile.setExcludes(TEST_EXCLUDES);
  compile.setSourceCompatibility("1.5");
  compile.setTargetCompatibility("1.5");
  compile.setDestinationDir(destDir);
  scalaClasspath=context.mock(FileTreeInternal.class);
  compile.setScalaClasspath(scalaClasspath);
  final FileTree classpath=context.mock(FileTreeInternal.class);
  final FileTree zincClasspath=context.mock(FileTreeInternal.class);
  context.checking(new Expectations(){
{
      allowing(scalaClasspath).getFiles();
      will(returnValue(new HashSet<File>()));
      allowing(classpath).getFiles();
      will(returnValue(new HashSet<File>()));
      allowing(zincClasspath).getFiles();
      will(returnValue(new HashSet<File>()));
    }
  }
);
  compile.setClasspath(classpath);
  compile.setZincClasspath(zincClasspath);
  compile.getScalaCompileOptions().getIncrementalOptions().setAnalysisFile(new File("analysisFile"));
}
