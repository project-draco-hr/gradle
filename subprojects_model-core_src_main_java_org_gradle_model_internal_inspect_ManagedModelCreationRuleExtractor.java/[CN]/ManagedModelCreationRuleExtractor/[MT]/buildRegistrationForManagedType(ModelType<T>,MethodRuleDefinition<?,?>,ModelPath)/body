{
  final ModelSchema<T> modelSchema=getModelSchema(managedType,ruleDefinition);
  if (modelSchema instanceof ScalarValueSchema) {
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),"a void returning model element creation rule cannot take a value type as the first parameter, which is the element being created. Return the value from the method.");
  }
  List<ModelReference<?>> bindings=ruleDefinition.getReferences();
  List<ModelReference<?>> inputs=bindings.subList(1,bindings.size());
  final ModelRuleDescriptor descriptor=ruleDefinition.getDescriptor();
  final ModelReference<T> reference=ModelReference.of(modelPath,managedType);
  return ModelRegistrations.of(modelPath).descriptor(descriptor).action(ModelActionRole.Discover,Collections.singletonList(ModelReference.of(NodeInitializerRegistry.class)),new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode node,    List<ModelView<?>> modelViews){
      NodeInitializerRegistry nodeInitializerRegistry=(NodeInitializerRegistry)modelViews.get(0).getInstance();
      NodeInitializer initializer=getNodeInitializer(descriptor,modelSchema,nodeInitializerRegistry);
      for (      Map.Entry<ModelActionRole,ModelAction> actionInRole : initializer.getActions(ModelReference.of(modelPath),descriptor).entries()) {
        ModelActionRole role=actionInRole.getKey();
        ModelAction action=actionInRole.getValue();
        node.applyToSelf(role,action);
      }
    }
  }
).action(ModelActionRole.Initialize,InputUsingModelAction.of(reference,descriptor,inputs,new RuleMethodBackedMutationAction<T>(ruleDefinition.getRuleInvoker()))).build();
}
