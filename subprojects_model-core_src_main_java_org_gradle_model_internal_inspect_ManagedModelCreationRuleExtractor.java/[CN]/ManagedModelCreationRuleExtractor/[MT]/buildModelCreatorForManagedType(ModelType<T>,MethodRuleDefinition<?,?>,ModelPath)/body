{
  ModelSchema<T> modelSchema=getModelSchema(managedType,ruleDefinition);
  if (modelSchema.getKind().equals(ModelSchema.Kind.VALUE)) {
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),"a void returning model element creation rule cannot take a value type as the first parameter, which is the element being created. Return the value from the method.");
  }
  if (!modelSchema.getKind().isManaged()) {
    String description=String.format("a void returning model element creation rule has to take an instance of a managed type as the first argument");
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),description);
  }
  List<ModelReference<?>> bindings=ruleDefinition.getReferences();
  List<ModelReference<?>> inputs=bindings.subList(1,bindings.size());
  ModelRuleDescriptor descriptor=ruleDefinition.getDescriptor();
  return modelCreatorFactory.creator(descriptor,modelPath,modelSchema,inputs,new RuleMethodBackedMutationAction<T>(ruleDefinition.getRuleInvoker()));
}
