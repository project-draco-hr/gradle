{
  ModelSchema<T> modelSchema=getModelSchema(managedType,ruleDefinition);
  if (modelSchema instanceof ModelValueSchema) {
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),"a void returning model element creation rule cannot take a value type as the first parameter, which is the element being created. Return the value from the method.");
  }
  NodeInitializer nodeInitializer;
  try {
    nodeInitializer=nodeInitializerRegistry.getNodeInitializer(modelSchema);
  }
 catch (  ModelTypeInitializationException e) {
    throw new InvalidModelRuleDeclarationException(ruleDefinition.getDescriptor(),e);
  }
  List<ModelReference<?>> bindings=ruleDefinition.getReferences();
  List<ModelReference<?>> inputs=bindings.subList(1,bindings.size());
  ModelRuleDescriptor descriptor=ruleDefinition.getDescriptor();
  final ModelReference<T> reference=ModelReference.of(modelPath,managedType);
  return ModelCreators.of(modelPath,nodeInitializer).descriptor(descriptor).action(ModelActionRole.Initialize,InputUsingModelAction.of(reference,descriptor,inputs,new RuleMethodBackedMutationAction<T>(ruleDefinition.getRuleInvoker()))).build();
}
