{
  if (!canBuild(modelName)) {
    throw new GradleException("Unknown model name " + modelName);
  }
  List<LaunchableGradleTaskSelector> selectors=Lists.newArrayList();
  Set<String> aggregatedTasks=Sets.newLinkedHashSet();
  Set<String> visibleTasks=Sets.newLinkedHashSet();
  TreeBasedTable<String,String,String> taskDescriptions=TreeBasedTable.create(Ordering.usingToString(),new TaskNameComparator());
  findTasks(project,aggregatedTasks,visibleTasks,taskDescriptions);
  for (  String selectorName : aggregatedTasks) {
    SortedMap<String,String> descriptionsFromAllPaths=taskDescriptions.row(selectorName);
    selectors.add(new LaunchableGradleTaskSelector().setName(selectorName).setTaskName(selectorName).setProjectPath(project.getPath()).setDisplayName(String.format("%s in %s and subprojects.",selectorName,project.toString())).setDescription(descriptionsFromAllPaths.get(descriptionsFromAllPaths.firstKey())).setPublic(visibleTasks.contains(selectorName)));
  }
  List<LaunchableGradleTask> projectTasks=tasks(project);
  return new DefaultBuildInvocations().setSelectors(selectors).setTasks(projectTasks);
}
