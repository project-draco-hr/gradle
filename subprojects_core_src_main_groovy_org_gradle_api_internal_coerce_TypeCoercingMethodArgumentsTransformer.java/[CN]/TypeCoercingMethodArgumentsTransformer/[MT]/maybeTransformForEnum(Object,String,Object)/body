{
  if (args.length != 1 || !(args[0] instanceof CharSequence)) {
    return args;
  }
  CharSequence charSequenceArg=(CharSequence)args[0];
  List<Method> singleArgEnumMethods=JavaReflectionUtil.findAllMethods(target.getClass(),new Spec<Method>(){
    public boolean isSatisfiedBy(    Method method){
      return method.getName().equals(methodName) && method.getParameterTypes().length == 1 && method.getParameterTypes()[0].isEnum();
    }
  }
);
  if (singleArgEnumMethods.size() != 1) {
    return args;
  }
  Method match=singleArgEnumMethods.get(0);
  @SuppressWarnings("unchecked") Class<? extends Enum> enumType=(Class<? extends Enum>)match.getParameterTypes()[0];
  return new Object[]{toEnumValue(enumType,charSequenceArg)};
}
