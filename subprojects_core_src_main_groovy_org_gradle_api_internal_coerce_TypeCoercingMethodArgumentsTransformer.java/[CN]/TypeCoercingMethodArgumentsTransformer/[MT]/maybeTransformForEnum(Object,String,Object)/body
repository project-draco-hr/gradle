{
  if (args.length != 1 || !(args[0] instanceof CharSequence)) {
    return args;
  }
  final CharSequence charSequenceArg=(CharSequence)args[0];
  final List<Method> enumMethodHolder=new ArrayList<Method>(2);
  final List<Method> stringMethodHolder=new ArrayList<Method>(1);
  JavaReflectionUtil.searchMethods(target.getClass(),new Transformer<Boolean,Method>(){
    public Boolean transform(    Method method){
      Class<?>[] parameterTypes=method.getParameterTypes();
      if (method.getName().equals(methodName) && parameterTypes.length == 1) {
        Class<?> parameterType=parameterTypes[0];
        if (parameterType.isAssignableFrom(charSequenceArg.getClass())) {
          stringMethodHolder.add(method);
          return true;
        }
 else         if (parameterType.isEnum()) {
          enumMethodHolder.add(method);
          if (enumMethodHolder.size() > 1) {
            return true;
          }
        }
      }
      return false;
    }
  }
);
  if (!stringMethodHolder.isEmpty()) {
    return args;
  }
  if (enumMethodHolder.size() != 1) {
    return args;
  }
  Method match=enumMethodHolder.get(0);
  @SuppressWarnings("unchecked") Class<? extends Enum> enumType=(Class<? extends Enum>)match.getParameterTypes()[0];
  return new Object[]{toEnumValue(enumType,charSequenceArg)};
}
