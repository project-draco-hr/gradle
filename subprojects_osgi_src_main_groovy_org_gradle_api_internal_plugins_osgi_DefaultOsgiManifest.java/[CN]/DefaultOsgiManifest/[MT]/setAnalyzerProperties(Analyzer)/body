{
  for (  Map.Entry<String,Object> attribute : getAttributes().entrySet()) {
    String key=attribute.getKey();
    if (!"Manifest-Version".equals(key)) {
      analyzer.setProperty(key,attribute.getValue().toString());
    }
  }
  Set<String> instructionNames=instructions.keySet();
  if (!instructionNames.contains(Analyzer.IMPORT_PACKAGE)) {
    analyzer.setProperty(Analyzer.IMPORT_PACKAGE,"*, !org.apache.ant.*, !org.junit.*, !org.jmock.*, !org.easymock.*, !org.mockito.*");
  }
  if (!instructionNames.contains(Analyzer.EXPORT_PACKAGE)) {
    analyzer.setProperty(Analyzer.EXPORT_PACKAGE,"*;-noimport:=false;version=" + version);
  }
  for (  String instructionName : instructionNames) {
    String list=createPropertyStringFromList(instructionValue(instructionName));
    analyzer.setProperty(instructionName,list);
  }
  setProperty(analyzer,Analyzer.BUNDLE_VERSION,getVersion());
  setProperty(analyzer,Analyzer.BUNDLE_SYMBOLICNAME,getSymbolicName());
  setProperty(analyzer,Analyzer.BUNDLE_NAME,getName());
  setProperty(analyzer,Analyzer.BUNDLE_DESCRIPTION,getDescription());
  setProperty(analyzer,Analyzer.BUNDLE_LICENSE,getLicense());
  setProperty(analyzer,Analyzer.BUNDLE_VENDOR,getVendor());
  setProperty(analyzer,Analyzer.BUNDLE_DOCURL,getDocURL());
  analyzer.setJar(getClassesDir());
  analyzer.setClasspath(getClasspath().getFiles().toArray(new File[getClasspath().getFiles().size()]));
}
