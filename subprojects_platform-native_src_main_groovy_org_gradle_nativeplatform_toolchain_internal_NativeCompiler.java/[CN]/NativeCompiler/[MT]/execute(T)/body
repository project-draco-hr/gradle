{
  final MutableCommandLineToolInvocation invocation=baseInvocation.copy();
  T transformedSpec=specTransformer.transform(spec);
  invocation.setArgs(argsTransformer.transform(transformedSpec));
  List<String> invocationArgs=invocation.getArgs();
  if (useCommandFile) {
    getOptionsWriter(transformedSpec).execute(invocationArgs);
  }
  final StoppableExecutor executor;
  if (useParallelCompile()) {
    executor=new DefaultExecutorFactory().create(commandLineTool.getDisplayName());
  }
 else {
    executor=new CallingThreadExecutor();
  }
  boolean windowsPathLimitation=OperatingSystem.current().isWindows();
  for (  File sourceFile : transformedSpec.getSourceFiles()) {
    SingleSourceCompileArgTransformer<T> sourceArgTransformer=new SingleSourceCompileArgTransformer<T>(sourceFile,objectFileSuffix,invocationArgs,windowsPathLimitation,outputFileArgTransformer);
    MutableCommandLineToolInvocation perFileInvocation=invocation.copy();
    perFileInvocation.setWorkDirectory(transformedSpec.getObjectFileDir());
    perFileInvocation.setArgs(sourceArgTransformer.transform(transformedSpec));
    executor.execute(commandLineTool.toRunnableExecution(perFileInvocation));
  }
  executor.stop();
  return new SimpleWorkResult(!transformedSpec.getSourceFiles().isEmpty());
}
