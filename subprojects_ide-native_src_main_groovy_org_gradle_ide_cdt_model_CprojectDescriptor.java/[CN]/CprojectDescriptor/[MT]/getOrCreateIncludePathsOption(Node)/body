{
  if (!isGnuCompilerTool(compilerToolNode)) {
    throw new IllegalArgumentException("Arg must be a gnu compiler tool def, was " + String.valueOf(compilerToolNode));
  }
  List<Node> options=getChildren(compilerToolNode,"option");
  Node includePathsOption=Iterables.find(options,new Predicate<Node>(){
    @Override public boolean apply(    Node option){
      return ((String)option.attributes().get("id")).startsWith(GNU_COMPILER_TOOL_INCLUDE_PATHS_OPTION_PREFIX);
    }
  }
);
  if (includePathsOption == null) {
    Map<String,String> map=new LinkedHashMap<String,String>(3);
    map.put("id",createId(GNU_COMPILER_TOOL_INCLUDE_PATHS_OPTION_PREFIX));
    map.put("superClass",GNU_COMPILER_TOOL_INCLUDE_PATHS_OPTION_PREFIX);
    map.put("valueType","includePath");
    includePathsOption=compilerToolNode.appendNode("option",map);
  }
  return includePathsOption;
}
