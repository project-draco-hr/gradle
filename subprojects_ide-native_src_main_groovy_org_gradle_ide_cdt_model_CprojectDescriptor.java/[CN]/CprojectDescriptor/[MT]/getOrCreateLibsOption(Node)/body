{
  if (!isGnuLinkerTool(linkerToolNode)) {
    throw new IllegalArgumentException("Arg must be a gnu linker tool def, was " + String.valueOf(linkerToolNode));
  }
  List<Node> options=getChildren(linkerToolNode,"option");
  Node libsOption=Iterables.find(options,new Predicate<Node>(){
    @Override public boolean apply(    Node option){
      return ((String)option.attributes().get("id")).startsWith(GNU_LINKER_TOOL_LIBS_PATHS_OPTION_PREFIX);
    }
  }
);
  if (libsOption == null) {
    Map<String,String> map=new LinkedHashMap<String,String>(3);
    map.put("id",createId(GNU_LINKER_TOOL_LIBS_PATHS_OPTION_PREFIX));
    map.put("superClass",GNU_LINKER_TOOL_LIBS_PATHS_OPTION_PREFIX);
    map.put("valueType","userObjs");
    libsOption=linkerToolNode.appendNode("option",map);
  }
  return libsOption;
}
