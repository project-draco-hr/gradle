{
  try {
    Method method=getMethod(methodName);
    method.setAccessible(true);
    return (T)method.invoke(target);
  }
 catch (  NoSuchMethodException e) {
    return defaultValue;
  }
catch (  InvocationTargetException e) {
    throw UncheckedException.throwAsUncheckedException(e.getCause());
  }
catch (  Exception e) {
    throw new RuntimeException("Unable to get value reflectively",e);
  }
}
