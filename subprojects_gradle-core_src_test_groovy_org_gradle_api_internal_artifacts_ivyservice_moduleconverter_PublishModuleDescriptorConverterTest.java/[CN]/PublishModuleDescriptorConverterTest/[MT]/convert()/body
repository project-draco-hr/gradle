{
  final Set<Configuration> configurationsDummy=WrapUtil.toSet(context.mock(Configuration.class,"conf1"),context.mock(Configuration.class,"conf2"));
  final Module moduleDummy=context.mock(Module.class);
  final IvySettings ivySettingsDummy=context.mock(IvySettings.class);
  final DefaultModuleDescriptor moduleDescriptorDummy=context.mock(DefaultModuleDescriptor.class);
  final ArtifactsToModuleDescriptorConverter artifactsToModuleDescriptorConverter=context.mock(ArtifactsToModuleDescriptorConverter.class);
  final ModuleDescriptorConverter resolveModuleDescriptorConverter=context.mock(ModuleDescriptorConverter.class);
  PublishModuleDescriptorConverter publishModuleDescriptorConverter=new PublishModuleDescriptorConverter(resolveModuleDescriptorConverter,artifactsToModuleDescriptorConverter);
  context.checking(new Expectations(){
{
      allowing(resolveModuleDescriptorConverter).convert(configurationsDummy,moduleDummy,ivySettingsDummy);
      will(returnValue(moduleDescriptorDummy));
      one(artifactsToModuleDescriptorConverter).addArtifacts(moduleDescriptorDummy,configurationsDummy);
    }
  }
);
  DefaultModuleDescriptor actualModuleDescriptor=(DefaultModuleDescriptor)publishModuleDescriptorConverter.convert(configurationsDummy,moduleDummy,ivySettingsDummy);
  assertThat(actualModuleDescriptor,equalTo(moduleDescriptorDummy));
}
