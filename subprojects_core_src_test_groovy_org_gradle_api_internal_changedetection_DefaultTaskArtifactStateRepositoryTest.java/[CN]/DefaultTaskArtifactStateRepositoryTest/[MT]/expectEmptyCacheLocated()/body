{
  context.checking(new Expectations(){
{
      ObjectCacheBuilder<?,PersistentIndexedCache<String,?>> tasksCacheBuilder=context.mock(ObjectCacheBuilder.class);
      ObjectCacheBuilder<Object,PersistentIndexedCache<String,Object>> fileSnapshotCacheBuilder=context.mock(ObjectCacheBuilder.class);
      Matcher<Class> stringClassMatcher=equalTo((Class)String.class);
      Matcher<Class> notNullClassMatcher=notNullValue();
      one(cacheRepository).indexedCache(with(stringClassMatcher),with(notNullClassMatcher),with(equalTo("taskArtifacts")));
      will(returnValue(tasksCacheBuilder));
      one(tasksCacheBuilder).forObject(gradle);
      will(returnValue(tasksCacheBuilder));
      Matcher<Serializer> defaultSerializerMatcher=(Matcher)instanceOf(DefaultSerializer.class);
      one(tasksCacheBuilder).withSerializer(with(defaultSerializerMatcher));
      will(returnValue(tasksCacheBuilder));
      one(tasksCacheBuilder).open();
      will(returnValue(new InMemoryIndexedCache<String,Object>()));
      atMost(1).of(cacheRepository).indexedCache(Object.class,Object.class,"fileSnapshots");
      will(returnValue(fileSnapshotCacheBuilder));
      atMost(1).of(fileSnapshotCacheBuilder).open();
      will(returnValue(new InMemoryIndexedCache()));
    }
  }
);
}
