{
  try {
    db.withConnection(new ConnectionAction<Void>(){
      public Void execute(      Connection connection) throws SQLException {
        long testId;
        PreparedStatement statement=null;
        ResultSet keys=null;
        try {
          statement=connection.prepareStatement("insert into testExecution(testId, startTime, endTime, targetVersion, testProject, tasks, args, gradleOpts, daemon, operatingSystem, jvm, vcsBranch, vcsCommit) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
          statement.setString(1,results.getTestId());
          statement.setTimestamp(2,new Timestamp(results.getStartTime()));
          statement.setTimestamp(3,new Timestamp(results.getEndTime()));
          statement.setString(4,results.getVersionUnderTest());
          statement.setString(5,results.getTestProject());
          statement.setObject(6,toArray(results.getTasks()));
          statement.setObject(7,toArray(results.getArgs()));
          statement.setObject(8,toArray(results.getGradleOpts()));
          statement.setObject(9,results.getDaemon());
          statement.setString(10,results.getOperatingSystem());
          statement.setString(11,results.getJvm());
          statement.setString(12,results.getVcsBranch());
          String vcs=results.getVcsCommits() == null ? null : Joiner.on(",").join(results.getVcsCommits());
          statement.setString(13,vcs);
          statement.execute();
          keys=statement.getGeneratedKeys();
          keys.next();
          testId=keys.getLong(1);
        }
  finally {
          closeStatement(statement);
          closeResultSet(keys);
        }
        try {
          statement=connection.prepareStatement("insert into testOperation(testExecution, version, totalTime, configurationTime, executionTime, heapUsageBytes, totalHeapUsageBytes, maxHeapUsageBytes, maxUncollectedHeapBytes, maxCommittedHeapBytes) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
          addOperations(statement,testId,null,results.getCurrent());
          for (          BaselineVersion baselineVersion : results.getBaselineVersions()) {
            addOperations(statement,testId,baselineVersion.getVersion(),baselineVersion.getResults());
          }
          statement.executeBatch();
        }
  finally {
          closeStatement(statement);
        }
        for (        String previousId : results.getPreviousTestIds()) {
          statement=connection.prepareStatement("update testExecution set testId = ? where testId = ?");
          try {
            statement.setString(1,results.getTestId());
            statement.setString(2,previousId);
            statement.execute();
          }
  finally {
            closeStatement(statement);
          }
        }
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not open results datastore '%s'.",db.getUrl()),e);
  }
}
