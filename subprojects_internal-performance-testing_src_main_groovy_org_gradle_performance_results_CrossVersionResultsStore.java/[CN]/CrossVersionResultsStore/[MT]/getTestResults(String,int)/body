{
  try {
    return db.withConnection(new ConnectionAction<CrossVersionPerformanceTestHistory>(){
      public CrossVersionPerformanceTestHistory execute(      Connection connection) throws SQLException {
        Map<Long,CrossVersionPerformanceResults> results=Maps.newLinkedHashMap();
        Set<String> allVersions=new TreeSet<String>(new Comparator<String>(){
          public int compare(          String o1,          String o2){
            return GradleVersion.version(o1).compareTo(GradleVersion.version(o2));
          }
        }
);
        Set<String> allBranches=new TreeSet<String>();
        PreparedStatement executionsForName=null;
        PreparedStatement operationsForExecution=null;
        ResultSet testExecutions=null;
        ResultSet operations=null;
        try {
          executionsForName=connection.prepareStatement("select top ? id, startTime, endTime, targetVersion, testProject, tasks, args, gradleOpts, daemon, operatingSystem, jvm, vcsBranch, vcsCommit from testExecution where testId = ? order by startTime desc");
          executionsForName.setFetchSize(mostRecentN);
          executionsForName.setInt(1,mostRecentN);
          executionsForName.setString(2,testName);
          testExecutions=executionsForName.executeQuery();
          while (testExecutions.next()) {
            long id=testExecutions.getLong(1);
            CrossVersionPerformanceResults performanceResults=new CrossVersionPerformanceResults();
            performanceResults.setTestId(testName);
            performanceResults.setStartTime(testExecutions.getTimestamp(2).getTime());
            performanceResults.setEndTime(testExecutions.getTimestamp(3).getTime());
            performanceResults.setVersionUnderTest(testExecutions.getString(4));
            performanceResults.setTestProject(testExecutions.getString(5));
            performanceResults.setTasks(ResultsStoreHelper.toList(testExecutions.getObject(6)));
            performanceResults.setArgs(ResultsStoreHelper.toList(testExecutions.getObject(7)));
            performanceResults.setGradleOpts(ResultsStoreHelper.toList(testExecutions.getObject(8)));
            performanceResults.setDaemon((Boolean)testExecutions.getObject(9));
            performanceResults.setOperatingSystem(testExecutions.getString(10));
            performanceResults.setJvm(testExecutions.getString(11));
            performanceResults.setVcsBranch(testExecutions.getString(12).trim());
            performanceResults.setVcsCommits(ResultsStoreHelper.splitVcsCommits(testExecutions.getString(13)));
            results.put(id,performanceResults);
            allBranches.add(performanceResults.getVcsBranch());
          }
          operationsForExecution=connection.prepareStatement("select version, totalTime, configurationTime, executionTime, heapUsageBytes, totalHeapUsageBytes, maxHeapUsageBytes, maxUncollectedHeapBytes, maxCommittedHeapBytes, testExecution, compileTotalTime, gcTotalTime from testOperation where testExecution in (select * from table(x int = ?))");
          operationsForExecution.setFetchSize(10 * results.size());
          operationsForExecution.setObject(1,results.keySet().toArray());
          operations=operationsForExecution.executeQuery();
          while (operations.next()) {
            CrossVersionPerformanceResults result=results.get(operations.getLong(10));
            String version=operations.getString(1);
            if ("1.7".equals(version) && result.getStartTime() <= ignoreV17Before) {
              continue;
            }
            MeasuredOperation operation=new MeasuredOperation();
            operation.setTotalTime(Duration.millis(operations.getBigDecimal(2)));
            operation.setConfigurationTime(Duration.millis(operations.getBigDecimal(3)));
            operation.setExecutionTime(Duration.millis(operations.getBigDecimal(4)));
            operation.setTotalMemoryUsed(DataAmount.bytes(operations.getBigDecimal(5)));
            operation.setTotalHeapUsage(DataAmount.bytes(operations.getBigDecimal(6)));
            operation.setMaxHeapUsage(DataAmount.bytes(operations.getBigDecimal(7)));
            operation.setMaxUncollectedHeap(DataAmount.bytes(operations.getBigDecimal(8)));
            operation.setMaxCommittedHeap(DataAmount.bytes(operations.getBigDecimal(9)));
            BigDecimal compileTotalTime=operations.getBigDecimal(10);
            if (compileTotalTime != null) {
              operation.setCompileTotalTime(Duration.millis(compileTotalTime));
            }
            BigDecimal gcTotalTime=operations.getBigDecimal(11);
            if (gcTotalTime != null) {
              operation.setGcTotalTime(Duration.millis(gcTotalTime));
            }
            if (version == null) {
              result.getCurrent().add(operation);
            }
 else {
              BaselineVersion baselineVersion=result.baseline(version);
              baselineVersion.getResults().add(operation);
              allVersions.add(version);
            }
          }
        }
  finally {
          closeResultSet(operations);
          closeStatement(operationsForExecution);
          closeResultSet(testExecutions);
          closeStatement(executionsForName);
        }
        return new CrossVersionPerformanceTestHistory(testName,new ArrayList<String>(allVersions),new ArrayList<String>(allBranches),Lists.newArrayList(results.values()));
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("Could not load results from datastore '%s'.",db.getUrl()),e);
  }
}
