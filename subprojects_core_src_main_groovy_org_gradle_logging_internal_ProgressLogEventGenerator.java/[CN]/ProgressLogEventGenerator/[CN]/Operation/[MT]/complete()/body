{
  boolean hasStatus=GUtil.isTrue(status);
switch (state) {
case None:
    if (hasLoggingHeader && hasStatus) {
      doOutput(new StyledTextOutputEvent(completeTime,category,LogLevel.LIFECYCLE,new StyledTextOutputEvent.Span(loggingHeader + ' '),new StyledTextOutputEvent.Span(Style.ProgressStatus,status),new StyledTextOutputEvent.Span(EOL)));
    }
 else     if (hasLoggingHeader) {
      doOutput(new StyledTextOutputEvent(completeTime,category,LogLevel.LIFECYCLE,loggingHeader + EOL));
    }
  break;
case HeaderStarted:
assert hasLoggingHeader;
if (hasStatus) {
doOutput(new StyledTextOutputEvent(completeTime,category,LogLevel.LIFECYCLE,new StyledTextOutputEvent.Span(" "),new StyledTextOutputEvent.Span(Style.ProgressStatus,status),new StyledTextOutputEvent.Span(EOL)));
}
 else {
doOutput(new StyledTextOutputEvent(completeTime,category,LogLevel.LIFECYCLE,EOL));
}
break;
case HeaderCompleted:
if (hasLoggingHeader && hasStatus) {
doOutput(new StyledTextOutputEvent(completeTime,category,LogLevel.LIFECYCLE,new StyledTextOutputEvent.Span(loggingHeader + ' '),new StyledTextOutputEvent.Span(Style.ProgressStatus,status),new StyledTextOutputEvent.Span(EOL)));
}
break;
default :
throw new IllegalStateException("state is " + state);
}
state=State.Completed;
}
