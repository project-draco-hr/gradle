{
  if (ruleDefinition.getReferences().size() == 0) {
    problems.add(ruleDefinition,"A method " + getDescription() + " must have at least two parameters.");
    return;
  }
  ModelType<?> subjectType=ruleDefinition.getSubjectReference().getType();
  if (!isModelMap(subjectType)) {
    problems.add(ruleDefinition,String.format("The first parameter of a method %s must be of type %s.",getDescription(),ModelMap.class.getName()));
    return;
  }
  List<ModelType<?>> typeVariables=subjectType.getTypeVariables();
  if (typeVariables.size() != 1) {
    problems.add(ruleDefinition,String.format("Parameter of type %s must declare a type parameter extending %s.",ModelMap.class.getSimpleName(),typeParameter.getDisplayName()));
    return;
  }
  ModelType<?> elementType=typeVariables.get(0);
  if (elementType.isWildcard()) {
    problems.add(ruleDefinition,String.format("%s type %s cannot be a wildcard type (i.e. cannot use ? super, ? extends etc.).",typeParameter.getDisplayName(),elementType.getDisplayName()));
    return;
  }
  dataCollector.parameterTypes.put(typeParameter,elementType);
}
