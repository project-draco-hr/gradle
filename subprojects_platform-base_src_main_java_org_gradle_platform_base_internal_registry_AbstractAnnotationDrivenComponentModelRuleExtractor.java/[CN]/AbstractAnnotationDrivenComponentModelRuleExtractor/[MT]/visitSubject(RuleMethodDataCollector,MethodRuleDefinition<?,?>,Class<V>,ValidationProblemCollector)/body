{
  if (ruleDefinition.getReferences().size() == 0) {
    problems.add(ruleDefinition,"A method " + getDescription() + " must have at least two parameters.");
    return;
  }
  ModelType<?> builder=ruleDefinition.getSubjectReference().getType();
  if (!ModelType.of(ModelMap.class).isAssignableFrom(builder)) {
    problems.add(ruleDefinition,String.format("The first parameter of a method %s must be of type %s.",getDescription(),ModelMap.class.getName()));
    return;
  }
  if (builder.getTypeVariables().size() != 1) {
    problems.add(ruleDefinition,String.format("Parameter of type %s must declare a type parameter extending %s.",ModelMap.class.getSimpleName(),typeParameter.getSimpleName()));
    return;
  }
  ModelType<?> subType=builder.getTypeVariables().get(0);
  if (subType.isWildcard()) {
    problems.add(ruleDefinition,String.format("%s type %s cannot be a wildcard type (i.e. cannot use ? super, ? extends etc.).",typeParameter.getName(),subType.toString()));
    return;
  }
  dataCollector.parameterTypes.put(typeParameter,subType.getConcreteClass());
}
