{
  BufferedReader configFileReader=null;
  try {
    configFileReader=new BufferedReader(new StringReader(configFileContents));
    String currentConfigSection=null;
    String configFileLine=null;
    while ((configFileLine=configFileReader.readLine()) != null) {
      if (configFileLine.startsWith("[")) {
        currentConfigSection=configFileLine.trim().toLowerCase();
      }
 else {
        if (currentConfigSection == null)         throw new IllegalArgumentException("invalid config file, doesn't start with a config section!");
        if (currentConfigSection.equals(ARGUMENTS_CONFIG_SECTION)) {
          arguments.add(configFileLine);
        }
 else {
          final File pathElement=new File(configFileLine.trim()).getAbsoluteFile();
          if (!pathElement.exists())           throw new IllegalArgumentException("path element [" + pathElement.getAbsolutePath() + "] doesn't exists in "+ currentConfigSection+ "!");
          if (currentConfigSection.equals(SHARED_CONFIG_SECTION)) {
            sharedPaths.add(pathElement);
          }
 else           if (currentConfigSection.equals(CONTROL_CONFIG_SECTION)) {
            controlPaths.add(pathElement);
          }
 else           if (currentConfigSection.equals(SANDBOX_CONFIG_SECTION)) {
            sandboxPaths.add(pathElement);
          }
 else {
            throw new IllegalArgumentException("invalid config file, contains an unsupported config section " + currentConfigSection + "!");
          }
        }
      }
    }
    if (currentConfigSection == null)     throw new IllegalArgumentException("invalid config file, doesn't start with a config section!");
  }
 catch (  IOException e) {
    throw new RuntimeException("failed to read config file contents",e);
  }
 finally {
    closeQuietly(configFileReader);
  }
}
