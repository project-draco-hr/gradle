{
  lifecycleLock.lock();
  try {
    if (started) {
      throw new IllegalStateException("cannot start daemon as it is already running");
    }
    connectorAddress=connector.start(new IncomingConnectionHandler(){
      public void handle(      final Connection<Object> connection){
        handlersExecutor.execute(new Runnable(){
          public void run(){
            Command command=(Command)connection.receive();
            if (command == null) {
              LOGGER.warn("It seems the client dropped the connection before sending any command. Stopping connection.");
              connection.stop();
              return;
            }
            if (command instanceof Stop) {
              LOGGER.lifecycle("Stopping");
              connection.dispatch(new CommandComplete(null));
              stopLatch.countDown();
              return;
            }
            try {
              control.onStartActivity();
            }
 catch (            BusyException e) {
              LOGGER.info("The daemon is busy and another build request received. Returning Busy response.");
              connection.dispatch(new CommandComplete(e));
              return;
            }
            try {
              doRun(connection,control,command);
            }
  finally {
              control.onActivityComplete();
              connection.stop();
            }
          }
        }
);
      }
    }
);
    control.setActivityListener(new CompletionHandler.ActivityListener(){
      public void onStartActivity(){
        daemonRegistry.markBusy(connectorAddress);
      }
      public void onCompleteActivity(){
        daemonRegistry.markIdle(connectorAddress);
      }
      public void onStart(){
        daemonRegistry.store(connectorAddress);
      }
      public void onStop(){
        LOGGER.info("Removing our presence to clients, eg. removing this address from the registry: " + connectorAddress);
        daemonRegistry.remove(connectorAddress);
        LOGGER.info("Address removed from registry.");
      }
    }
);
    stopperExecutor.execute(new Runnable(){
      public void run(){
        try {
          stopLatch.await();
        }
 catch (        InterruptedException e) {
          return;
        }
        LOGGER.info("Received Stop request. Daemon is stopping accepting new connections...");
        connector.stop();
        LOGGER.info("Waking and signalling stop to the main daemon thread...");
        control.stop();
        LOGGER.info("Gracefully stopping the connection handling thread...");
        handlersExecutor.stop();
        LOGGER.info("Daemon is stopped!");
      }
    }
);
    control.start();
    started=true;
    LOGGER.lifecycle("Daemon started at: " + new Date() + ", with address: "+ connectorAddress);
  }
 catch (  Exception e) {
    LOGGER.warn("exception starting daemon",e);
    stopLatch.countDown();
  }
 finally {
    lifecycleLock.unlock();
  }
}
