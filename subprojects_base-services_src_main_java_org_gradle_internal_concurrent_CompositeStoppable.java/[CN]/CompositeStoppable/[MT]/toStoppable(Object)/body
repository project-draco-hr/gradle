{
  if (object == null) {
    return new Stoppable(){
      public void stop(){
      }
    }
;
  }
  if (object instanceof Stoppable) {
    return (Stoppable)object;
  }
  if (object instanceof Closeable) {
    final Closeable closeable=(Closeable)object;
    return new Stoppable(){
      @Override public String toString(){
        return closeable.toString();
      }
      public void stop(){
        try {
          closeable.close();
        }
 catch (        IOException e) {
          throw UncheckedException.throwAsUncheckedException(e);
        }
      }
    }
;
  }
  return new Stoppable(){
    @Override public String toString(){
      return object.toString();
    }
    public void stop(){
      try {
        invoke(object.getClass().getMethod("stop"),object);
        throw new UnsupportedOperationException("Can't use reflection to stop: " + object + " ("+ object.getClass().getSimpleName()+ ")");
      }
 catch (      NoSuchMethodException e) {
      }
      try {
        invoke(object.getClass().getMethod("close"),object);
        throw new UnsupportedOperationException("Can't use reflection to close: " + object + " ("+ object.getClass().getSimpleName()+ ")");
      }
 catch (      NoSuchMethodException e) {
      }
    }
  }
;
}
