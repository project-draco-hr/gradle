{
  this.project=project;
  services.add(new Service(ProjectEvaluator.class){
    @Override protected Object create(){
      return projectEvaluator;
    }
  }
);
  services.add(new Service(RepositoryHandlerFactory.class){
    @Override protected Object create(){
      return repositoryHandlerFactory;
    }
  }
);
  services.add(new Service(AntBuilderFactory.class){
    @Override protected Object create(){
      return new DefaultAntBuilderFactory(new AntLoggingAdapter(),project);
    }
  }
);
  services.add(new Service(ProjectPluginsContainer.class){
    @Override protected Object create(){
      return new DefaultProjectsPluginContainer(project.getBuild().getPluginRegistry());
    }
  }
);
  services.add(new Service(TaskContainerInternal.class){
    @Override protected Object create(){
      return new DefaultTaskContainer(project,taskFactory);
    }
  }
);
  services.add(new Service(Convention.class){
    @Override protected Object create(){
      return new DefaultConvention();
    }
  }
);
  services.add(new Service(RepositoryHandler.class){
    @Override protected Object create(){
      return repositoryHandlerFactory.createRepositoryHandler(get(Convention.class));
    }
  }
);
  services.add(new Service(ConfigurationHandler.class){
    @Override protected Object create(){
      return configurationContainerFactory.createConfigurationContainer(get(ResolverProvider.class),new DependencyMetaDataProviderImpl());
    }
  }
);
  services.add(new Service(ArtifactHandler.class){
    @Override protected Object create(){
      return new DefaultArtifactHandler(get(ConfigurationContainer.class),publishArtifactFactory);
    }
  }
);
  services.add(new Service(ProjectFinder.class){
    @Override protected Object create(){
      return new ProjectFinder(){
        public Project getProject(        String path){
          return project.project(path);
        }
      }
;
    }
  }
);
  services.add(new Service(DependencyHandler.class){
    @Override protected Object create(){
      return new DefaultDependencyHandler(get(ConfigurationContainer.class),dependencyFactory,get(ProjectFinder.class));
    }
  }
);
  services.add(new Service(ScriptHandler.class){
    @Override protected Object create(){
      RepositoryHandler repositoryHandler=repositoryHandlerFactory.createRepositoryHandler(new DefaultConvention());
      ConfigurationHandler configurationContainer=configurationContainerFactory.createConfigurationContainer(repositoryHandler,new DependencyMetaDataProviderImpl());
      DependencyHandler dependencyHandler=new DefaultDependencyHandler(configurationContainer,dependencyFactory,get(ProjectFinder.class));
      return new DefaultScriptHandler(repositoryHandler,dependencyHandler,configurationContainer,project.getBuild().getBuildScriptClassLoader());
    }
  }
);
  services.add(new Service(ScriptClassLoaderProvider.class){
    @Override protected Object create(){
      return get(ScriptHandler.class);
    }
  }
);
}
