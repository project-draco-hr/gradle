{
  rethrowFailure();
  Set<ModuleDependency> allDependencies=configuration.getAllDependencies(ModuleDependency.class);
  Set<ModuleDependency> selectedDependencies=Specs.filterIterable(allDependencies,dependencySpec);
  Set<ResolvedArtifact> artifacts=new LinkedHashSet<ResolvedArtifact>();
  for (  ModuleDependency moduleDependency : selectedDependencies) {
    Set<ResolvedDependency> resolvedDependencies=conversionResult.getFirstLevelResolvedDependencies().get(moduleDependency);
    if (resolvedDependencies != null) {
      for (      ResolvedDependency resolvedDependency : resolvedDependencies) {
        artifacts.addAll(resolvedDependency.getParentArtifacts(conversionResult.getRoot()));
        walker.add(resolvedDependency);
      }
    }
  }
  artifacts.addAll(walker.findValues());
  Set<File> files=new LinkedHashSet<File>();
  for (  ResolvedArtifact artifact : artifacts) {
    File depFile=artifact.getFile();
    if (depFile == null) {
      throw new GradleException(String.format("Resolved artifact %s contains a null value.",artifact));
    }
    files.add(depFile);
  }
  return files;
}
