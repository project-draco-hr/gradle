{
  final File runtimeClassesDir=binary.getClassesDir();
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String runtimeJarArchiveName=binary.getJarFile().getName();
  final String createRuntimeJar="create" + capitalize(binary.getName());
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.from(binary.getResourcesDir());
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(runtimeJarArchiveName);
    }
  }
);
  String binaryName=binary.getName();
  if (!binaryName.endsWith("Jar")) {
    return;
  }
  String libName=binaryName.replace("Jar","");
  final File apiClassesDir=new File(new File(buildDir,"apiClasses"),runtimeClassesDir.getName());
  final String extractApiClasses="extract" + capitalize(libName + "ApiClasses");
  tasks.create(extractApiClasses,Copy.class,new Action<Copy>(){
    @Override public void execute(    Copy copy){
      copy.from(runtimeClassesDir);
      copy.into(apiClassesDir);
      for (      String packageName : binary.getExportedPackages()) {
        copy.include(packageName.replace('.','/') + "/*");
      }
      copy.dependsOn(createRuntimeJar);
    }
  }
);
  final File apiJarDestDir=binary.getApiJarFile().getParentFile();
  final String apiJarArchiveName=binary.getApiJarFile().getName();
  String createApiJar="create" + capitalize(binary.getName().replace("Jar","ApiJar"));
  tasks.create(createApiJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the API binary file for %s.",binary));
      jar.from(apiClassesDir);
      jar.setDestinationDir(apiJarDestDir);
      jar.setArchiveName(apiJarArchiveName);
      jar.dependsOn(extractApiClasses);
    }
  }
);
}
