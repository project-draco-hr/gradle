{
  final File runtimeClassesDir=binary.getClassesDir();
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String runtimeJarArchiveName=binary.getJarFile().getName();
  final String createRuntimeJar="create" + capitalize(binary.getName());
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.from(binary.getResourcesDir());
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(runtimeJarArchiveName);
    }
  }
);
  String binaryName=binary.getName();
  if (!binaryName.endsWith("Jar")) {
    return;
  }
  String libName=binaryName.substring(0,binaryName.lastIndexOf("Jar"));
  String createApiJar="create" + capitalize(libName + "ApiJar");
  final ImmutableList<String> allowedPackages=ImmutableList.copyOf(binary.getExportedPackages());
  final ApiStubGenerator stubGenerator=new ApiStubGenerator(allowedPackages);
  tasks.create(createApiJar,StubbedJar.class,new Action<StubbedJar>(){
    @Override public void execute(    StubbedJar jar){
      jar.setDescription(String.format("Creates the API binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.include(new Spec<FileTreeElement>(){
        @Override public boolean isSatisfiedBy(        FileTreeElement element){
          if (element.isDirectory()) {
            return true;
          }
          File file=element.getFile();
          if (!file.getName().endsWith(".class")) {
            return false;
          }
          try {
            return stubGenerator.belongsToAPI(element.open());
          }
 catch (          IOException e) {
            return false;
          }
        }
      }
);
      jar.setExportedPackages(allowedPackages);
      jar.setDestinationDir(binary.getApiJarFile().getParentFile());
      jar.setArchiveName(binary.getApiJarFile().getName());
      jar.dependsOn(createRuntimeJar);
    }
  }
);
}
