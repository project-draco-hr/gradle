{
  final File runtimeClassesDir=binary.getClassesDir();
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String runtimeJarArchiveName=binary.getJarFile().getName();
  final String createRuntimeJar="create" + capitalize(binary.getName());
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.from(binary.getResourcesDir());
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(runtimeJarArchiveName);
    }
  }
);
  String binaryName=binary.getName();
  if (!binaryName.endsWith("Jar")) {
    return;
  }
  String libName=binaryName.replace("Jar","");
  String createApiJar="create" + capitalize(binary.getName().replace("Jar","ApiJar"));
  if (binary.getExportedPackages().isEmpty()) {
    tasks.create(createApiJar,Copy.class,new Action<Copy>(){
      @Override public void execute(      Copy copy){
        copy.setDescription(String.format("Creates the API binary file for %s.",binary));
        copy.from(new File(runtimeJarDestDir,runtimeJarArchiveName));
        copy.setDestinationDir(binary.getApiJarFile().getParentFile());
        copy.dependsOn(createRuntimeJar);
      }
    }
);
  }
 else {
    tasks.create(createApiJar,Jar.class,new Action<Jar>(){
      @Override public void execute(      Jar jar){
        jar.setDescription(String.format("Creates the API binary file for %s.",binary));
        jar.from(runtimeClassesDir);
        for (        String packageName : binary.getExportedPackages()) {
          jar.include(packageName.replace('.','/') + "/*");
        }
        jar.setDestinationDir(binary.getApiJarFile().getParentFile());
        jar.setArchiveName(binary.getApiJarFile().getName());
        jar.dependsOn(createRuntimeJar);
      }
    }
);
  }
}
