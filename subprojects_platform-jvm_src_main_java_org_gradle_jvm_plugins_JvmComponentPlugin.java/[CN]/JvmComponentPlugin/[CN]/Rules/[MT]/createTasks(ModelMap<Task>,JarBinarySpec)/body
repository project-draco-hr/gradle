{
  final String jarArchiveName=binary.getJarFile().getName();
  String runtimeJarName=binary.getName();
  final File runtimeClassesDir=binary.getClassesDir();
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String createRuntimeJar="create" + capitalize(binary.getName());
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.from(binary.getResourcesDir());
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(jarArchiveName);
    }
  }
);
  String libName=runtimeJarName.replace("Jar","");
  String apiJarName=runtimeJarName.replace("Jar","ApiJar");
  final File apiClassesDir=new File(runtimeClassesDir.getParent(),"apiClasses");
  final String extractApiClasses="extract" + capitalize(libName + "ApiClasses");
  tasks.create(extractApiClasses,Copy.class,new Action<Copy>(){
    @Override public void execute(    Copy copy){
      copy.from(runtimeClassesDir);
      copy.into(apiClassesDir);
      for (      String packageName : binary.getExportedPackages()) {
        copy.include(packageName.replace('.','/') + "/**/*");
      }
      copy.dependsOn(createRuntimeJar);
    }
  }
);
  final File apiJarDestDir=new File(runtimeJarDestDir.getParentFile(),apiJarName);
  String createApiJar="create" + capitalize(apiJarName);
  tasks.create(createApiJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the API binary file for %s.",binary));
      jar.from(apiClassesDir);
      jar.setDestinationDir(apiJarDestDir);
      jar.setArchiveName(jarArchiveName);
      jar.dependsOn(extractApiClasses);
    }
  }
);
}
