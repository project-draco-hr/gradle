{
  @SuppressWarnings("unchecked") final Action<JarBinarySpec> initAction=Actions.composite(new JarBinarySpecInitializer(buildDir),new MarkBinariesBuildable());
  List<String> targetPlatforms=jvmLibrary.getTargetPlatforms();
  if (targetPlatforms.isEmpty()) {
    targetPlatforms=Collections.singletonList(new JavaPlatformUnmanaged(JavaVersion.current()).getName());
  }
  List<JavaPlatform> selectedPlatforms=platforms.chooseFromTargets(JavaPlatform.class,targetPlatforms);
  for (  final JavaPlatform platform : selectedPlatforms) {
    final JavaToolChain toolChain=toolChains.getForPlatform(platform);
    final String binaryName=createBinaryName(jvmLibrary,namingSchemeBuilder,selectedPlatforms,platform);
    binaries.create(binaryName,new Action<JarBinarySpec>(){
      public void execute(      JarBinarySpec jarBinary){
        ((JarBinarySpecInternal)jarBinary).setBaseName(jvmLibrary.getName());
        jarBinary.setToolChain(toolChain);
        jarBinary.setTargetPlatform(platform);
        initAction.execute(jarBinary);
        jvmComponentExtension.getAllBinariesAction().execute(jarBinary);
      }
    }
);
  }
}
