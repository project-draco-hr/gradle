{
  List<JavaPlatform> selectedPlatforms=resolvePlatforms(platforms,jvmLibrary);
  final Set<String> exportedPackages=jvmLibrary.getExportedPackages();
  final Collection<DependencySpec> apiDependencies=jvmLibrary.getApiDependencies();
  final Collection<DependencySpec> dependencies=jvmLibrary.getDependencies();
  for (  final JavaPlatform platform : selectedPlatforms) {
    String binaryName=buildBinaryName(jvmLibrary,namingSchemeBuilder,selectedPlatforms,platform);
    binaries.create(binaryName,new Action<JarBinarySpec>(){
      @Override public void execute(      JarBinarySpec jarBinarySpec){
        JarBinarySpecInternal jarBinary=(JarBinarySpecInternal)jarBinarySpec;
        jarBinary.setTargetPlatform(platform);
        jarBinary.setExportedPackages(exportedPackages);
        jarBinary.setApiDependencies(apiDependencies);
        jarBinary.setDependencies(dependencies);
      }
    }
);
  }
}
