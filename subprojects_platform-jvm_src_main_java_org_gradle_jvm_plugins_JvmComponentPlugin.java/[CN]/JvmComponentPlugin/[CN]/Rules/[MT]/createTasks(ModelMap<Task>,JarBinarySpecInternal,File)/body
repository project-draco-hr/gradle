{
  final File runtimeClassesDir=binary.getClassesDir();
  final File resourcesDir=binary.getResourcesDir();
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String runtimeJarArchiveName=binary.getJarFile().getName();
  final String createRuntimeJar="create" + capitalize(binary.getProjectScopedName());
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(runtimeClassesDir);
      jar.from(resourcesDir);
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(runtimeJarArchiveName);
    }
  }
);
  final JarFile apiJar=binary.getApiJar();
  final Set<String> exportedPackages=binary.getExportedPackages();
  String apiJarTaskName=apiJarTaskName(binary);
  if (exportedPackages.isEmpty()) {
    tasks.create(apiJarTaskName,Copy.class,new Action<Copy>(){
      @Override public void execute(      Copy copy){
        copy.setDescription(String.format("Creates the API binary file for %s.",binary));
        copy.from(new File(runtimeJarDestDir,runtimeJarArchiveName));
        copy.setDestinationDir(apiJar.getFile().getParentFile());
        copy.dependsOn(createRuntimeJar);
        apiJar.setBuildTask(copy);
      }
    }
);
  }
 else {
    tasks.create(apiJarTaskName,ApiJar.class,new Action<ApiJar>(){
      @Override public void execute(      ApiJar jar){
        final File apiClassesDir=binary.getNamingScheme().getOutputDirectory(buildDir,"apiClasses");
        jar.setDescription(String.format("Creates the API binary file for %s.",binary));
        jar.setRuntimeClassesDir(runtimeClassesDir);
        jar.setExportedPackages(exportedPackages);
        jar.setApiClassesDir(apiClassesDir);
        jar.setDestinationDir(apiJar.getFile().getParentFile());
        jar.setArchiveName(apiJar.getFile().getName());
        apiJar.setBuildTask(jar);
      }
    }
);
  }
}
