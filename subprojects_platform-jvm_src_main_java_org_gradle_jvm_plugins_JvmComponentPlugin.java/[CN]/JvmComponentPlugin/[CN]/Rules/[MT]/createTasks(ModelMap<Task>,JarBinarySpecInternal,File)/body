{
  final File runtimeJarDestDir=binary.getJarFile().getParentFile();
  final String runtimeJarArchiveName=binary.getJarFile().getName();
  final String createRuntimeJar="create" + capitalize(binary.getProjectScopedName());
  final JvmAssembly assembly=binary.getAssembly();
  final JarFile runtimeJarFile=binary.getRuntimeJar();
  tasks.create(createRuntimeJar,Jar.class,new Action<Jar>(){
    @Override public void execute(    Jar jar){
      jar.setDescription(String.format("Creates the binary file for %s.",binary));
      jar.from(assembly.getClassDirectories());
      jar.from(assembly.getResourceDirectories());
      jar.setDestinationDir(runtimeJarDestDir);
      jar.setArchiveName(runtimeJarArchiveName);
      jar.dependsOn(assembly);
      runtimeJarFile.setBuildTask(jar);
    }
  }
);
  final JarFile apiJarFile=binary.getApiJar();
  final Set<String> exportedPackages=binary.getExportedPackages();
  String apiJarTaskName=apiJarTaskName(binary);
  tasks.create(apiJarTaskName,ApiJar.class,new Action<ApiJar>(){
    @Override public void execute(    ApiJar apiJarTask){
      apiJarTask.setDescription(String.format("Creates the API binary file for %s.",binary));
      apiJarTask.setOutputFile(apiJarFile.getFile());
      apiJarTask.setExportedPackages(exportedPackages);
      setInputsOf(apiJarTask,assembly);
      apiJarTask.dependsOn(assembly);
      apiJarFile.setBuildTask(apiJarTask);
    }
  }
);
}
