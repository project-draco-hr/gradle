{
  if (!(target instanceof Project)) {
    throw new InvalidComponentModelException("ComponentModel can only be declared for project plugins.");
  }
  target.getPlugins().apply(ComponentModelBasePlugin.class);
  final Project project=(Project)target;
  final ProjectSourceSet projectSourceSet=project.getExtensions().getByType(ProjectSourceSet.class);
  ComponentSpecContainer componentSpecs=project.getExtensions().getByType(ComponentSpecContainer.class);
  try {
    componentSpecs.registerFactory(componentModel.type(),new NamedDomainObjectFactory(){
      public Object create(      String name){
        FunctionalSourceSet componentSourceSet=projectSourceSet.maybeCreate(name);
        ComponentSpecIdentifier id=new DefaultComponentSpecIdentifier(project.getPath(),name);
        return DefaultLibrarySpec.create((Class<DefaultLibrarySpec>)componentModel.implementation(),id,componentSourceSet,instantiator);
      }
    }
);
  }
 catch (  GradleException ex) {
    throw new InvalidComponentModelException(String.format("Cannot declare component of type '%s'.",componentModel.type().getSimpleName()),ex);
  }
}
