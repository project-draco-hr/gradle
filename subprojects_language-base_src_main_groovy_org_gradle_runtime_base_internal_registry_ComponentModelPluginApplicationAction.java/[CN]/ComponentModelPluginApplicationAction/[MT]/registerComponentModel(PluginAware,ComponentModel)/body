{
  if (!(target instanceof Project)) {
    throw new InvalidComponentModelException("ComponentModel can only be declared for project plugins.");
  }
  target.getPlugins().apply(ComponentModelBasePlugin.class);
  final Project project=(Project)target;
  ComponentSpecContainer componentSpecs=project.getExtensions().getByType(ComponentSpecContainer.class);
  componentSpecs.registerFactory(componentModel.type(),new NamedDomainObjectFactory(){
    public Object create(    String name){
      ComponentSpecIdentifier id=new DefaultComponentSpecIdentifier(project.getPath(),name);
      return DefaultLibrarySpec.create((Class<DefaultLibrarySpec>)componentModel.implementation(),id,instantiator);
    }
  }
);
}
