{
  final ForkMemoryLowConfig config=context.mock(ForkMemoryLowConfig.class);
  context.checking(new Expectations(){
{
      one(config).getMemoryLowThreshold();
      will(returnValue(50D));
    }
  }
);
  dataProcessor.configure(config);
  final Pipeline pipeline=context.mock(Pipeline.class);
  final int forkId=1;
  final ForkMemoryLowData data=context.mock(ForkMemoryLowData.class);
  final long freeMemory=49L;
  final long maxMemory=100L;
  final long totalMemory=99L;
  context.checking(new Expectations(){
{
      one(data).getCurrentUsagePercentage();
      will(returnValue(51D));
      one(pipeline).getName();
      will(returnValue("default"));
      one(data).getFreeMemory();
      will(returnValue(freeMemory));
      one(data).getMaxMemory();
      will(returnValue(maxMemory));
      one(data).getTotalMemory();
      will(returnValue(totalMemory));
    }
  }
);
  final boolean restartNeeded=dataProcessor.determineReforkNeeded(pipeline,forkId,data);
  assertTrue(restartNeeded);
}
