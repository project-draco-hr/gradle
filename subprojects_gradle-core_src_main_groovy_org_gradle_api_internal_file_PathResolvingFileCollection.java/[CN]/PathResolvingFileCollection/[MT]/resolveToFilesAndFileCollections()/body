{
  List<Object> result=new ArrayList<Object>();
  LinkedList<Object> queue=new LinkedList<Object>();
  queue.addAll(files);
  while (!queue.isEmpty()) {
    Object first=queue.removeFirst();
    if (first instanceof FileCollection) {
      result.add(first);
    }
 else     if (first instanceof Closure) {
      Closure closure=(Closure)first;
      queue.addFirst(closure.call());
    }
 else     if (first instanceof Collection) {
      Collection<?> collection=(Collection<?>)first;
      queue.addAll(0,collection);
    }
 else     if (first instanceof Callable) {
      Callable callable=(Callable)first;
      try {
        queue.add(0,callable.call());
      }
 catch (      Exception e) {
        throw new GradleException(e);
      }
    }
 else {
      result.add(resolver.resolve(first));
    }
  }
  return result;
}
