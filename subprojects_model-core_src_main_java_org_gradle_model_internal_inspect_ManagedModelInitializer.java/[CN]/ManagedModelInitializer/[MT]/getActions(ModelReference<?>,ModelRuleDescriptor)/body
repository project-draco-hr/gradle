{
  return ImmutableSetMultimap.<ModelActionRole,ModelAction>builder().put(ModelActionRole.Discover,DirectNodeInputUsingModelAction.of(subject,descriptor,Arrays.<ModelReference<?>>asList(ModelReference.of(ManagedProxyFactory.class),ModelReference.of(TypeConverter.class)),new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode mutableModelNode,    List<ModelView<?>> modelViews){
      ManagedProxyFactory proxyFactory=ModelViews.getInstance(modelViews.get(0),ManagedProxyFactory.class);
      TypeConverter typeConverter=ModelViews.getInstance(modelViews,1,TypeConverter.class);
      mutableModelNode.addProjection(new ManagedModelProjection<T>(schema,null,proxyFactory,typeConverter));
    }
  }
)).put(ModelActionRole.Create,DirectNodeInputUsingModelAction.of(subject,descriptor,Arrays.<ModelReference<?>>asList(ModelReference.of(NodeInitializerRegistry.class),ModelReference.of(ManagedProxyFactory.class),ModelReference.of(TypeConverter.class)),new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode modelNode,    List<ModelView<?>> modelViews){
      NodeInitializerRegistry nodeInitializerRegistry=ModelViews.getInstance(modelViews,0,NodeInitializerRegistry.class);
      ManagedProxyFactory proxyFactory=ModelViews.getInstance(modelViews,1,ManagedProxyFactory.class);
      TypeConverter typeConverter=ModelViews.getInstance(modelViews,2,TypeConverter.class);
      addPropertyLinks(modelNode,nodeInitializerRegistry,proxyFactory,schema.getProperties(),typeConverter);
    }
  }
)).build();
}
