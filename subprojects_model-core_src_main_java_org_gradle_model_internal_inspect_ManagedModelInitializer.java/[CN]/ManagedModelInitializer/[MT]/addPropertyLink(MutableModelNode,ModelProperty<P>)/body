{
  if (!property.getStateManagementType().equals(ModelProperty.StateManagementType.MANAGED)) {
    return;
  }
  ModelType<P> propertyType=property.getType();
  ModelSchema<P> propertySchema=schemaStore.getSchema(propertyType);
  final ModelRuleDescriptor descriptor=modelNode.getDescriptor();
  if (propertySchema instanceof ManagedImplModelSchema) {
    if (propertySchema instanceof ModelCollectionSchema) {
      ModelCollectionSchema<P,?> propertyCollectionsSchema=(ModelCollectionSchema<P,?>)propertySchema;
      ModelType<?> elementType=propertyCollectionsSchema.getElementType();
      if (!(propertySchema instanceof ScalarCollectionSchema)) {
        if (!property.isWritable()) {
          nodeInitializerRegistry.getNodeInitializer(elementType);
        }
      }
    }
    if (!property.isWritable()) {
      if (property.isDeclaredAsHavingUnmanagedType()) {
        throw new UnmanagedPropertyMissingSetterException(property);
      }
      ManagedImplModelSchema<P> managedPropertySchema=(ManagedImplModelSchema<P>)propertySchema;
      ModelCreator creator=ModelCreators.of(modelNode.getPath().child(property.getName()),nodeInitializerRegistry.getNodeInitializer(managedPropertySchema)).descriptor(descriptor).build();
      modelNode.addLink(creator);
    }
 else {
      if (propertySchema instanceof ScalarCollectionSchema) {
        ManagedImplModelSchema<P> managedPropertySchema=(ManagedImplModelSchema<P>)propertySchema;
        ModelCreator creator=ModelCreators.of(modelNode.getPath().child(property.getName()),nodeInitializerRegistry.getNodeInitializer(managedPropertySchema)).descriptor(descriptor).build();
        modelNode.addLink(creator);
      }
 else {
        ModelManagedImplStructSchema<P> structSchema=(ModelManagedImplStructSchema<P>)propertySchema;
        ModelProjection projection=new ManagedModelProjection<P>(structSchema,schemaStore,nodeInitializerRegistry,ManagedProxyFactory.INSTANCE);
        ModelCreator creator=ModelCreators.of(modelNode.getPath().child(property.getName())).withProjection(projection).descriptor(descriptor).build();
        modelNode.addReference(creator);
      }
    }
  }
 else {
    ModelProjection projection=new UnmanagedModelProjection<P>(propertyType,true,true);
    ModelCreators.Builder creatorBuilder=ModelCreators.of(modelNode.getPath().child(property.getName())).withProjection(projection).descriptor(descriptor);
    if (shouldHaveANodeInitializer(property,propertySchema)) {
      creatorBuilder.action(ModelActionRole.Create,nodeInitializerRegistry.getNodeInitializer(propertyType));
    }
 else     if (isAModelValueSchema(propertySchema) && !property.isWritable() && !isNamePropertyOfANamedType(property)) {
      throw new ReadonlyImmutableManagedPropertyException(modelSchema.getType(),property.getName(),property.getType());
    }
    modelNode.addLink(creatorBuilder.build());
  }
}
