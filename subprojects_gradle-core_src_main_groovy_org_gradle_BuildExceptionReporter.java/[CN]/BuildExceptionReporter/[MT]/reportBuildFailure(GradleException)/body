{
  boolean stacktrace=startParameter != null && (startParameter.getShowStacktrace() != StartParameter.ShowStacktrace.INTERNAL_EXCEPTIONS || startParameter.getLogLevel() == LogLevel.DEBUG);
  boolean fullStacktrace=startParameter != null && (startParameter.getShowStacktrace() == StartParameter.ShowStacktrace.ALWAYS_FULL);
  Formatter formatter=new Formatter();
  formatter.format("%nBuild failed with an exception.%n");
  if (!fullStacktrace) {
    if (!stacktrace) {
      formatter.format("Run with -%s or -%s option to get more details. ",DefaultCommandLine2StartParameterConverter.STACKTRACE,DefaultCommandLine2StartParameterConverter.DEBUG);
    }
    formatter.format("Run with -%s option to get the full (very verbose) stacktrace.%n",DefaultCommandLine2StartParameterConverter.FULL_STACKTRACE);
  }
  formatter.format("%n");
  if (failure instanceof GradleScriptException) {
    GradleScriptException scriptException=((GradleScriptException)failure).getReportableException();
    formatter.format("%s%n%n",scriptException.getLocation());
    formatter.format("%s%nCause: %s",scriptException.getOriginalMessage(),getMessage(scriptException.getCause()));
  }
 else {
    formatter.format("%s",getMessage(failure));
  }
  if (stacktrace || fullStacktrace) {
    formatter.format("%n%nException is:");
    logger.error(formatter.toString(),fullStacktrace ? failure : StackTraceUtils.deepSanitize(failure));
  }
 else {
    logger.error(formatter.toString());
  }
}
