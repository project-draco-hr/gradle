{
  Clock c=new Clock();
  try {
    int lowestLevel=0;
    try {
      lowestLevel=directoryListFileCreator.createDirectoryListFiles(directoryToProcess);
    }
 catch (    IOException e) {
      throw new GradleException("failed to create directory list files",e);
    }
    Map<String,DirectoryState> previousLevelDirectoryStates=Collections.unmodifiableMap(new HashMap<String,DirectoryState>());
    Map<String,DirectoryState> currentLevelDirectoryStates=new ConcurrentHashMap<String,DirectoryState>();
    for (int levelIndex=lowestLevel; levelIndex >= 0; levelIndex--) {
      final File directoryLevelListFile=stateFileUtil.getDirsListFile(levelIndex);
      threadPool=ThreadUtils.newFixedThreadPool(4);
      if (directoryLevelListFile.exists()) {
        final File stateFile=stateFileUtil.getNewDirsStateFile(stateFileUtil.getDirsStateFilename(levelIndex));
        final StateFileWriter newDirectoriesStateFileWriter=new StateFileWriter(ioFactory,stateFile);
        BufferedReader directoryListFileReader=null;
        try {
          directoryListFileReader=new BufferedReader(new FileReader(directoryLevelListFile));
          String absoluteDirectoryPath=null;
          while ((absoluteDirectoryPath=directoryListFileReader.readLine()) != null) {
            final DirectoryState directoryState=directoryStateBuilder.directory(new File(absoluteDirectoryPath)).getDirectoryState();
            final DirectoryStateDigestCalculator digestCalculator=new DirectoryStateDigestCalculator(directoryState,digesterCache,digesterUtil,this,currentLevelDirectoryStates,previousLevelDirectoryStates,ioFactory);
            threadPool.submit(digestCalculator);
          }
          ThreadUtils.shutdown(threadPool);
          final List<DirectoryState> currentLevelDirectoryStatesList=new ArrayList<DirectoryState>(currentLevelDirectoryStates.values());
          Collections.sort(currentLevelDirectoryStatesList);
          for (          final DirectoryState directoryState : currentLevelDirectoryStatesList) {
            final Throwable failureCause=directoryState.getFailureCause();
            if (failureCause != null) {
              throw new GradleException("Failed to detect changes",failureCause);
            }
 else {
              newDirectoriesStateFileWriter.addDigest(directoryState.getRelativePath(),directoryState.getDigest());
            }
          }
        }
 catch (        IOException e) {
          throw new GradleException("failed to detect changes (dirs." + newDirectoriesStateFileWriter.getStateFile().getAbsolutePath() + ".state write failed)",e);
        }
 finally {
          IOUtils.closeQuietly(directoryListFileReader);
          FileUtils.deleteQuietly(directoryLevelListFile);
          newDirectoriesStateFileWriter.close();
        }
      }
      previousLevelDirectoryStates=Collections.unmodifiableMap(new HashMap<String,DirectoryState>(currentLevelDirectoryStates));
      currentLevelDirectoryStates=new ConcurrentHashMap<String,DirectoryState>();
    }
    try {
      boolean keepComparing=true;
      int currentLevel=0;
      final StateChangeEventDispatcher stateChangeEventDispatcher=new StateChangeEventDispatcher(stateChangeEventQueue,100L,TimeUnit.MILLISECONDS,changeProcessor);
      final Thread changeProcessorEventThread=new Thread(stateChangeEventDispatcher);
      changeProcessorEventThread.start();
      threadPool=ThreadUtils.newFixedThreadPool(4);
      while (keepComparing && currentLevel <= lowestLevel) {
        keepComparing=stateComparator.compareState(this,currentLevel);
        currentLevel++;
      }
      ThreadUtils.shutdown(threadPool);
      while (!stateChangeEventQueue.isEmpty()) {
        Thread.yield();
      }
      stateChangeEventDispatcher.stopConsuming();
      ThreadUtils.join(changeProcessorEventThread);
      for (      DirectoryStateDigestComparator directoryStateDigestComparator : directoryStateDigestComparators) {
        final Throwable failureCause=directoryStateDigestComparator.getFailureCause();
        if (failureCause != null) {
          throw new GradleException("failed to compare directory state",failureCause);
        }
      }
    }
 catch (    IOException e) {
      throw new GradleException("failed to compare new and old state",e);
    }
    try {
      FileUtils.deleteDirectory(stateFileUtil.getOldDirectoryStateDir());
    }
 catch (    IOException e) {
      throw new GradleException("failed to clean old state",e);
    }
    try {
      FileUtils.moveDirectory(stateFileUtil.getNewDirectoryStateDir(),stateFileUtil.getOldDirectoryStateDir());
    }
 catch (    IOException e) {
      throw new GradleException("failed to transfer current state to old state",e);
    }
  }
  finally {
    System.out.println(c.getTime());
  }
}
