{
  final FileCollectionSnapshotImpl other=(FileCollectionSnapshotImpl)oldSnapshot;
  return new Diff(){
    public FileCollectionSnapshot applyTo(    FileCollectionSnapshot snapshot){
      return applyTo(snapshot,new ChangeListener<Merge>(){
        public void added(        Merge element){
        }
        public void removed(        Merge element){
        }
        public void changed(        Merge element){
        }
      }
);
    }
    public FileCollectionSnapshot applyTo(    FileCollectionSnapshot snapshot,    final ChangeListener<Merge> listener){
      FileCollectionSnapshotImpl target=(FileCollectionSnapshotImpl)snapshot;
      final Map<String,FileSnapshot> newSnapshots=new HashMap<String,FileSnapshot>(target.snapshots);
      diff(snapshots,other.snapshots,new ChangeListener<Map.Entry<String,FileSnapshot>>(){
        public void added(        Map.Entry<String,FileSnapshot> element){
          DefaultMerge merge=new DefaultMerge();
          listener.added(merge);
          if (!merge.ignore) {
            newSnapshots.put(element.getKey(),element.getValue());
          }
        }
        public void removed(        Map.Entry<String,FileSnapshot> element){
          DefaultMerge merge=new DefaultMerge();
          listener.removed(merge);
          if (!merge.ignore) {
            newSnapshots.remove(element.getKey());
          }
        }
        public void changed(        Map.Entry<String,FileSnapshot> element){
          DefaultMerge merge=new DefaultMerge();
          listener.changed(merge);
          if (!merge.ignore) {
            newSnapshots.put(element.getKey(),element.getValue());
          }
        }
      }
);
      return new FileCollectionSnapshotImpl(newSnapshots);
    }
  }
;
}
