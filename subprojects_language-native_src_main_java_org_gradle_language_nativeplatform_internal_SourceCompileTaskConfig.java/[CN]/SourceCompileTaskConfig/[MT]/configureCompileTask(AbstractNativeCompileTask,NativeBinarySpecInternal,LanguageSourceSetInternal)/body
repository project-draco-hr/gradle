{
  AbstractNativeSourceCompileTask task=(AbstractNativeSourceCompileTask)abstractTask;
  task.setDescription(String.format("Compiles the %s of %s",sourceSet,binary));
  task.source(sourceSet.getSource());
  final Project project=task.getProject();
  task.setObjectFileDir(project.file(String.valueOf(project.getBuildDir()) + "/objs/" + binary.getNamingScheme().getOutputDirectoryBase()+ "/"+ sourceSet.getFullName()));
  if (sourceSet instanceof DependentSourceSetInternal && ((DependentSourceSetInternal)sourceSet).getPreCompiledHeader() != null) {
    final DependentSourceSetInternal dependentSourceSet=(DependentSourceSetInternal)sourceSet;
    task.setPrefixHeaderFile(dependentSourceSet.getPrefixHeaderFile());
    task.setPreCompiledHeader(dependentSourceSet.getPreCompiledHeader());
    task.preCompiledHeaderInclude(binary.getPrefixFileToPCH().get(dependentSourceSet.getPrefixHeaderFile()));
  }
  binary.binaryInputs(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include("**/*.obj","**/*.o")));
}
