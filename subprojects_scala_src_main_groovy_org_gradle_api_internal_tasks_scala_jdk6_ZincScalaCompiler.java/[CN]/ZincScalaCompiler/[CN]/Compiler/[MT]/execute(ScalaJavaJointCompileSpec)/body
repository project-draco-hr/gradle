{
  LOGGER.info("Compiling with Zinc Scala compiler.");
  xsbti.Logger logger=new SbtLoggerAdapter();
  com.typesafe.zinc.Compiler compiler=createCompiler(spec.getScalaClasspath(),spec.getZincClasspath(),logger);
  List<String> scalacOptions=new ScalaCompilerArgumentsGenerator().generate(spec);
  List<String> javacOptions=new JavaCompilerArgumentsBuilder(spec).includeClasspath(false).build();
  Inputs inputs=Inputs.create(ImmutableList.copyOf(spec.getClasspath()),ImmutableList.copyOf(spec.getSource()),spec.getDestinationDir(),scalacOptions,javacOptions,spec.getScalaCompileOptions().getCompilerCacheFile(),spec.getCompilerCacheMap(),"mixed");
  if (LOGGER.isDebugEnabled()) {
    Inputs.debug(inputs,logger);
  }
  try {
    compiler.compile(inputs,logger);
  }
 catch (  xsbti.CompileFailed e) {
    throw new CompilationFailedException(e);
  }
  return new SimpleWorkResult(true);
}
