{
  IdeaModule module=ideaModule.getModule();
  module.setScopes(buildScopes(configurations));
  ConventionMapping conventionMapping=conventionMappingFor(module);
  conventionMapping.map("sourceDirs",new Callable<Set<File>>(){
    @Override public Set<File> call() throws Exception {
      Set<File> sourceDirs=Sets.newHashSet(playApplicationBinarySpec.getAssets().getAssetDirs());
      return CollectionUtils.inject(sourceDirs,playApplicationBinarySpec.getInputs(),new Action<CollectionUtils.InjectionStep<Set<File>,LanguageSourceSet>>(){
        @Override public void execute(        CollectionUtils.InjectionStep<Set<File>,LanguageSourceSet> step){
          step.getTarget().addAll(step.getItem().getSource().getSrcDirs());
        }
      }
);
    }
  }
);
  conventionMapping.map("testSourceDirs",new Callable<Set<File>>(){
    @Override public Set<File> call() throws Exception {
      return Collections.singleton(fileResolver.resolve("test"));
    }
  }
);
  conventionMapping.map("singleEntryLibraries",new Callable<Map<String,Iterable<File>>>(){
    @Override public Map<String,Iterable<File>> call() throws Exception {
      return ImmutableMap.<String,Iterable<File>>builder().put("COMPILE",Collections.singleton(playApplicationBinarySpec.getClasses().getClassesDir())).put("RUNTIME",playApplicationBinarySpec.getClasses().getResourceDirs()).put("TEST",Collections.singleton(new File(buildDir,"playBinary/testClasses"))).build();
    }
  }
);
  module.setScalaPlatform(playApplicationBinarySpec.getTargetPlatform().getScalaPlatform());
  conventionMapping.map("targetBytecodeVersion",new Callable<JavaVersion>(){
    @Override public JavaVersion call() throws Exception {
      return getTargetJavaVersion(playApplicationBinarySpec);
    }
  }
);
  conventionMapping.map("languageLevel",new Callable<IdeaLanguageLevel>(){
    @Override public IdeaLanguageLevel call() throws Exception {
      return new IdeaLanguageLevel(getTargetJavaVersion(playApplicationBinarySpec));
    }
  }
);
  ideaModule.dependsOn(playApplicationBinarySpec.getInputs());
}
