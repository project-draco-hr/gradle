{
  Project dependencyProject=dependency.getDependencyProject();
  ((ProjectInternal)dependencyProject).evaluate();
  PublishingExtension publishing=dependencyProject.getExtensions().findByType(PublishingExtension.class);
  if (publishing == null || publishing.getPublications().withType(PublicationInternal.class).isEmpty()) {
    return DefaultModuleVersionIdentifier.of(dependency.getGroup(),dependencyProject.getName(),dependency.getVersion());
  }
  Set<? extends PublicationInternal> publications=publishing.getPublications().withType(PublicationInternal.class);
  Iterator<? extends PublicationInternal> iterator=publications.iterator();
  ModuleVersionIdentifier candidate=iterator.next().getCoordinates();
  while (iterator.hasNext()) {
    ModuleVersionIdentifier alternative=iterator.next().getCoordinates();
    if (!candidate.equals(alternative)) {
      throw new UnsupportedOperationException("Publishing is not yet able to resolve a dependency on a project with multiple different publications.");
    }
  }
  return candidate;
}
