{
  ModelType<R> type=extractionContext.getType();
  if (!isTarget(type)) {
    return null;
  }
  validateTypeHierarchy(extractionContext,type);
  List<ModelPropertyExtractionResult<?>> propertyExtractionResults=extractPropertySchemas(extractionContext,ModelSchemaUtils.getCandidateMethods(type.getRawClass()));
  List<ModelSchemaAspect> aspects=aspectExtractor.extract(extractionContext,propertyExtractionResults);
  ModelSchema<R> schema=createSchema(extractionContext,propertyExtractionResults,aspects,store);
  Iterable<ModelSchemaExtractionContext<?>> propertyDependencies=Iterables.transform(propertyExtractionResults,new Function<ModelPropertyExtractionResult<?>,ModelSchemaExtractionContext<?>>(){
    public ModelSchemaExtractionContext<?> apply(    ModelPropertyExtractionResult<?> propertyResult){
      return toPropertyExtractionContext(extractionContext,propertyResult,store);
    }
  }
);
  return new ModelSchemaExtractionResult<R>(schema,propertyDependencies);
}
