{
  Method mostSpecificGetter=getterContext.getMostSpecificDeclaration();
  if (mostSpecificGetter.getParameterTypes().length != 0) {
    handleInvalidGetter(extractionContext,mostSpecificGetter,"getter methods cannot take parameters");
    return null;
  }
  if (mostSpecificGetter.getReturnType() != boolean.class && getterPrefixLen == 2) {
    handleInvalidGetter(extractionContext,mostSpecificGetter,"getter method name must start with 'get'");
    return null;
  }
  ModelProperty.StateManagementType stateManagementType=determineStateManagementType(extractionContext,getterContext);
  final ModelType<R> returnType=ModelType.returnType(mostSpecificGetter);
  WeaklyTypeReferencingMethod<?,Void> setterRef;
  if (setterContext != null) {
    validateSetter(extractionContext,returnType,getterContext,setterContext);
    Method mostSpecificDeclaration=setterContext.getMostSpecificDeclaration();
    setterRef=WeaklyTypeReferencingMethod.of(ModelType.of(mostSpecificDeclaration.getDeclaringClass()),ModelType.of(void.class),mostSpecificDeclaration);
  }
 else {
    setterRef=null;
  }
  ImmutableSet<ModelType<?>> declaringClasses=ImmutableSet.copyOf(Iterables.transform(getterContext.getDeclaringMethods(),new Function<Method,ModelType<?>>(){
    public ModelType<?> apply(    Method input){
      return ModelType.of(input.getDeclaringClass());
    }
  }
));
  List<WeaklyTypeReferencingMethod<?,R>> getterRefs=Lists.newArrayList(Iterables.transform(getterContext.getGetters(),new Function<Method,WeaklyTypeReferencingMethod<?,R>>(){
    @Override public WeaklyTypeReferencingMethod<?,R> apply(    Method getter){
      return WeaklyTypeReferencingMethod.of(ModelType.of(getter.getDeclaringClass()),returnType,getter);
    }
  }
));
  boolean declaredAsHavingUnmanagedType=getterContext.getAnnotation(Unmanaged.class) != null;
  return new ModelPropertyExtractionResult<R>(new ModelProperty<R>(returnType,propertyName,stateManagementType,declaringClasses,getterRefs,setterRef,declaredAsHavingUnmanagedType),getterContext,setterContext);
}
