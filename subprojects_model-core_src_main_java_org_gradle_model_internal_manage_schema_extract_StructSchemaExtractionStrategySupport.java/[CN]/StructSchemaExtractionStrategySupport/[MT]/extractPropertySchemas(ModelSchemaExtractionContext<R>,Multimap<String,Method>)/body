{
  List<ModelPropertyExtractionResult<?>> results=Lists.newArrayList();
  Set<Method> handledMethods=Sets.newHashSet();
  List<String> methodNames=Lists.newArrayList(methodsByName.keySet());
  Collections.sort(methodNames);
  for (  String methodName : methodNames) {
    Collection<Method> methods=methodsByName.get(methodName);
    List<Method> overloadedMethods=getOverloadedMethods(methods);
    if (overloadedMethods != null) {
      handleOverloadedMethods(extractionContext,overloadedMethods);
      continue;
    }
    int getterPrefixLen=getterPrefixLength(methodName);
    if (getterPrefixLen >= 0) {
      PropertyAccessorExtractionContext getterContext=new PropertyAccessorExtractionContext(methods);
      Character getterPropertyNameFirstChar=methodName.charAt(getterPrefixLen);
      if (!Character.isUpperCase(getterPropertyNameFirstChar)) {
        handleInvalidGetter(extractionContext,getterContext,String.format("the %s character of the getter method name must be an uppercase character",getterPrefixLen == 2 ? "3rd" : "4th"));
        continue;
      }
      String propertyNameCapitalized=methodName.substring(getterPrefixLen);
      String propertyName=StringUtils.uncapitalize(propertyNameCapitalized);
      String setterName="set" + propertyNameCapitalized;
      Collection<Method> setterMethods=methodsByName.get(setterName);
      PropertyAccessorExtractionContext setterContext=!setterMethods.isEmpty() ? new PropertyAccessorExtractionContext(setterMethods) : null;
      ModelPropertyExtractionResult<?> result=extractPropertySchema(extractionContext,propertyName,getterContext,setterContext,getterPrefixLen);
      if (result != null) {
        results.add(result);
        handledMethods.addAll(getterContext.getDeclaringMethods());
        if (setterContext != null) {
          handledMethods.addAll(setterContext.getDeclaringMethods());
        }
      }
    }
  }
  validateAllNecessaryMethodsHandled(extractionContext,methodsByName.values(),handledMethods);
  return results;
}
