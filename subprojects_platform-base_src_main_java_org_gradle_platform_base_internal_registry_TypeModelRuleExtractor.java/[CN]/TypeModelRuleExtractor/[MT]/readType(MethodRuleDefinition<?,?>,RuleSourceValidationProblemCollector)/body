{
  validateIsVoidMethod(ruleDefinition,problems);
  if (ruleDefinition.getReferences().size() != 1) {
    problems.add(ruleDefinition,String.format("A method %s must have a single parameter of type %s.",getDescription(),TypeBuilder.class.getName()));
    return null;
  }
  ModelReference<?> subjectReference=ruleDefinition.getSubjectReference();
  ModelType<?> subjectType=subjectReference.getType();
  Class<?> rawSubjectType=subjectType.getRawClass();
  if (!rawSubjectType.equals(TypeBuilder.class)) {
    problems.add(ruleDefinition,String.format("A method %s must have a single parameter of type %s.",getDescription(),TypeBuilder.class.getName()));
    return null;
  }
  List<ModelType<?>> typeVariables=subjectType.getTypeVariables();
  if (typeVariables.size() != 1) {
    problems.add(ruleDefinition,String.format("Parameter of type %s must declare a type parameter.",rawSubjectType.getName()));
    return null;
  }
  ModelType<?> builtType=typeVariables.get(0);
  if (builtType.isWildcard()) {
    problems.add(ruleDefinition,String.format("%s type '%s' cannot be a wildcard type (i.e. cannot use ? super, ? extends etc.).",StringUtils.capitalize(modelName),builtType.toString()));
    return null;
  }
  if (!baseInterface.isAssignableFrom(builtType)) {
    problems.add(ruleDefinition,String.format("%s type '%s' is not a subtype of '%s'.",StringUtils.capitalize(modelName),builtType.toString(),baseInterface.toString()));
    return null;
  }
  return builtType.asSubtype(baseInterface);
}
