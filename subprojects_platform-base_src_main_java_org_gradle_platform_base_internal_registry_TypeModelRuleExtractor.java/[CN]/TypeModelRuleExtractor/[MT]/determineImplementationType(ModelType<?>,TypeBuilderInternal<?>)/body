{
  for (  Class<?> internalView : builder.getInternalViews()) {
    if (!internalView.isInterface()) {
      throw new InvalidModelException(String.format("Internal view %s must be an interface.",internalView.getName()));
    }
  }
  Class<?> implementation=builder.getDefaultImplementation();
  if (implementation == null) {
    return null;
  }
  ModelType<?> implementationType=ModelType.of(implementation);
  if (!baseImplementation.isAssignableFrom(implementationType)) {
    throw new InvalidModelException(String.format("%s implementation %s must extend %s.",StringUtils.capitalize(modelName),implementationType,baseImplementation));
  }
  ModelType<? extends BASEIMPL> asSubclass=implementationType.asSubtype(baseImplementation);
  if (!type.isAssignableFrom(asSubclass)) {
    throw new InvalidModelException(String.format("%s implementation %s must implement %s.",StringUtils.capitalize(modelName),asSubclass,type));
  }
  for (  Class<?> internalView : builder.getInternalViews()) {
    if (!internalView.isAssignableFrom(implementation)) {
      throw new InvalidModelException(String.format("%s implementation %s must implement internal view %s.",StringUtils.capitalize(modelName),asSubclass,internalView.getName()));
    }
  }
  try {
    asSubclass.getRawClass().getConstructor();
  }
 catch (  NoSuchMethodException nsmException) {
    throw new InvalidModelException(String.format("%s implementation %s must have public default constructor.",StringUtils.capitalize(modelName),asSubclass));
  }
  return asSubclass;
}
