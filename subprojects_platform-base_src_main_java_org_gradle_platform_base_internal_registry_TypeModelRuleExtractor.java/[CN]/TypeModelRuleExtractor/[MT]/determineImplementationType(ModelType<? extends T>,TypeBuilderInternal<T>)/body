{
  for (  Class<?> internalView : builder.getInternalViews()) {
    if (!internalView.isInterface()) {
      throw new InvalidModelException(String.format("Internal view '%s' must be an interface.",internalView.getName()));
    }
    ModelType<?> internalViewType=ModelType.of(internalView);
    ModelType<? extends T> asSubclass=baseInterface.asSubclass(internalViewType);
    if (asSubclass == null) {
      throw new InvalidModelException(String.format("Internal view '%s' must extend '%s'.",internalView.getName(),baseInterface));
    }
  }
  Class<? extends T> implementation=builder.getDefaultImplementation();
  if (implementation == null) {
    return null;
  }
  ModelType<? extends T> implementationType=ModelType.of(implementation);
  ModelType<? extends U> asSubclass=baseImplementation.asSubclass(implementationType);
  if (asSubclass == null) {
    throw new InvalidModelException(String.format("%s implementation '%s' must extend '%s'.",StringUtils.capitalize(modelName),implementationType,baseImplementation));
  }
  if (!type.isAssignableFrom(asSubclass)) {
    throw new InvalidModelException(String.format("%s implementation '%s' must implement '%s'.",StringUtils.capitalize(modelName),asSubclass,type));
  }
  for (  Class<?> internalView : builder.getInternalViews()) {
    if (!internalView.isAssignableFrom(implementation)) {
      throw new InvalidModelException(String.format("%s implementation '%s' must implement internal view '%s'.",StringUtils.capitalize(modelName),asSubclass,internalView.getName()));
    }
  }
  try {
    asSubclass.getRawClass().getConstructor();
  }
 catch (  NoSuchMethodException nsmException) {
    throw new InvalidModelException(String.format("%s implementation '%s' must have public default constructor.",StringUtils.capitalize(modelName),asSubclass));
  }
  return asSubclass;
}
