{
  final Comparator<String> stringComparator=GUtil.caseInsensitive();
  Comparator<String> keyComparator=GUtil.last(GUtil.last(stringComparator,OTHER_GROUP),TaskReportModel.DEFAULT_GROUP);
  Comparator<TaskDetails> taskComparator=new Comparator<TaskDetails>(){
    public int compare(    TaskDetails task1,    TaskDetails task2){
      int diff=stringComparator.compare(task1.getName(),task2.getName());
      if (diff != 0) {
        return diff;
      }
      return stringComparator.compare(task1.getPath(),task2.getPath());
    }
  }
;
  groups=TreeMultimap.create(keyComparator,taskComparator);
  for (  String group : model.getGroups()) {
    groups.putAll(group,model.getTasksForGroup(group));
  }
  String otherGroupName=findOtherGroup(groups.keySet());
  if (otherGroupName != null && groups.keySet().contains(TaskReportModel.DEFAULT_GROUP)) {
    groups.putAll(otherGroupName,groups.removeAll(TaskReportModel.DEFAULT_GROUP));
  }
  if (groups.keySet().contains(TaskReportModel.DEFAULT_GROUP) && groups.keySet().size() > 1) {
    groups.putAll(OTHER_GROUP,groups.removeAll(TaskReportModel.DEFAULT_GROUP));
  }
}
