{
  final Project child1=context.mock(Project.class,"child1");
  final Project child2=context.mock(Project.class,"child2");
  context.checking(new Expectations(){
{
      one(project).getAllprojects();
      will(returnValue(toLinkedSet(child1,project,child2)));
      allowing(project).getProperties();
      will(returnValue(Collections.emptyMap()));
      allowing(child1).getProperties();
      will(returnValue(Collections.emptyMap()));
      allowing(child2).getProperties();
      will(returnValue(Collections.emptyMap()));
      allowing(project).compareTo(child1);
      will(returnValue(-1));
      allowing(child2).compareTo(child1);
      will(returnValue(1));
      Sequence sequence=context.sequence("seq");
      one(formatter).startProject(project);
      inSequence(sequence);
      one(formatter).completeProject(project);
      inSequence(sequence);
      one(formatter).startProject(child1);
      inSequence(sequence);
      one(formatter).completeProject(child1);
      inSequence(sequence);
      one(formatter).startProject(child2);
      inSequence(sequence);
      one(formatter).completeProject(child2);
      inSequence(sequence);
      one(formatter).complete();
      inSequence(sequence);
    }
  }
);
  task.execute();
}
