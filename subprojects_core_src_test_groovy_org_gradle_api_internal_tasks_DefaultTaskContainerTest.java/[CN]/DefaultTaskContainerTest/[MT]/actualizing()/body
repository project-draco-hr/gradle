{
  final Task task=addTask("a");
  context.checking(new Expectations(){
{
      allowing(task).dependsOn("b");
      allowing(task).getTaskDependencies();
      TaskDependency aTaskDependency=context.mock(TaskDependency.class);
      will(returnValue(aTaskDependency));
      final Task b=task("b");
      one(taskFactory).createTask(singletonMap(Task.TASK_NAME,"b"));
      will(returnValue(b));
      TaskDependency bTaskDependency=context.mock(TaskDependency.class,"bTaskDependency");
      allowing(b).getTaskDependencies();
      will(returnValue(bTaskDependency));
      allowing(bTaskDependency).getDependencies(b);
      will(returnValue(Collections.emptySet()));
      allowing(aTaskDependency).getDependencies(task);
      will(new CustomAction("create task b"){
        public Object invoke(        Invocation invocation) throws Throwable {
          container.add("b");
          return Collections.singleton(b);
        }
      }
);
    }
  }
);
  task.dependsOn("b");
  assertEquals(1,container.size());
  container.actualize();
  assertEquals(2,container.size());
}
