{
  final Task task=context.mock(Task.class);
  context.checking(new Expectations(){
{
      allowing(task).getName();
      will(returnValue(name));
      allowing(task).getPath();
      will(returnValue(':' + name));
      allowing(task).getProject();
      will(returnValue(project));
      allowing(project).relativeProjectPath(':' + name);
      will(returnValue(name));
      allowing(task).getGroup();
      will(returnValue(taskGroup));
      allowing(task).compareTo(with(Matchers.notNullValue(Task.class)));
      will(new Action(){
        public Object invoke(        Invocation invocation) throws Throwable {
          Task other=(Task)invocation.getParameter(0);
          return name.compareTo(other.getName());
        }
        public void describeTo(        Description description){
          description.appendText("compare to");
        }
      }
);
      TaskDependency dependency=context.mock(TaskDependency.class);
      allowing(task).getTaskDependencies();
      will(returnValue(dependency));
      allowing(dependency).getDependencies(task);
      will(returnValue(toSet(dependencies)));
    }
  }
);
  return task;
}
