{
  return new BiFunction<ModelCreators.Builder,ModelPath,ModelType<? extends T>>(){
    @Override public ModelCreators.Builder apply(    final ModelPath path,    final ModelType<? extends T> modelType){
      return ModelCreators.of(ModelReference.of(path,modelType),new BiAction<MutableModelNode,List<ModelView<?>>>(){
        @Override public void execute(        MutableModelNode modelNode,        List<ModelView<?>> modelViews){
          doExecute(modelNode,modelType);
        }
        public <S extends T>void doExecute(        MutableModelNode modelNode,        ModelType<S> subType){
          S item=entityInstantiator.create(path.getName(),subType.getConcreteClass());
          modelNode.setPrivateData(subType,item);
        }
      }
);
    }
  }
;
}
