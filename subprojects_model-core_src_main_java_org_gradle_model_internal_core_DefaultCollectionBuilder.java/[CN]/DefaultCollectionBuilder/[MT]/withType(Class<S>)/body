{
  if (type.equals(elementType.getConcreteClass())) {
    return uncheckedCast(this);
  }
  if (elementType.getConcreteClass().isAssignableFrom(type)) {
    NamedEntityInstantiator<? super S> castInstantiator=uncheckedCast(instantiator);
    Collection<? super S> castTarget=uncheckedCast(target);
    return new DefaultCollectionBuilder<S>(ModelType.of(type),castInstantiator,castTarget,sourceDescriptor,modelNode);
  }
  return new DefaultCollectionBuilder<S>(ModelType.of(type),new NamedEntityInstantiator<S>(){
    @Override public <U extends S>U create(    String name,    Class<U> type){
      throw new IllegalArgumentException(String.format("Cannot create an item of type %s as this is not a subtype of %s.",type.getName(),elementType.toString()));
    }
  }
,ImmutableList.<S>of(),sourceDescriptor,modelNode);
}
