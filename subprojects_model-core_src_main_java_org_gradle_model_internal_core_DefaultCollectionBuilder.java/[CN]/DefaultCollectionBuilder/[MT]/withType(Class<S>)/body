{
  if (type.equals(elementType.getConcreteClass())) {
    return uncheckedCast(this);
  }
  if (elementType.getConcreteClass().isAssignableFrom(type)) {
    Class<? extends T> castType=uncheckedCast(type);
    CollectionBuilder<? extends T> subType=toSubType(castType);
    return uncheckedCast(subType);
  }
  return new DefaultCollectionBuilder<S>(ModelType.of(type),sourceDescriptor,modelNode,new BiFunction<ModelCreators.Builder,ModelPath,ModelType<? extends S>>(){
    @Override public ModelCreators.Builder apply(    ModelPath s,    ModelType<? extends S> modelType){
      throw new IllegalArgumentException(String.format("Cannot create an item of type %s as this is not a subtype of %s.",modelType,elementType.toString()));
    }
  }
);
}
