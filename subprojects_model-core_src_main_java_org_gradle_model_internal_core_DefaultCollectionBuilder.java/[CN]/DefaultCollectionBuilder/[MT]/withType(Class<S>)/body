{
  if (type.equals(elementType.getConcreteClass())) {
    @SuppressWarnings("unchecked") CollectionBuilder<S> result=(CollectionBuilder<S>)this;
    return result;
  }
  if (elementType.getConcreteClass().isAssignableFrom(type)) {
    @SuppressWarnings("unchecked") CollectionBuilder<S> result=new DefaultCollectionBuilder<S>(ModelType.of(type),(NamedEntityInstantiator<? super S>)instantiator,(Collection<? super S>)target,sourceDescriptor,modelNode);
    return result;
  }
  return new DefaultCollectionBuilder<S>(ModelType.of(type),new NamedEntityInstantiator<S>(){
    @Override public <U extends S>U create(    String name,    Class<U> type){
      throw new IllegalArgumentException(String.format("Cannot create an item of type %s as this is not a subtype of %s.",type.getName(),elementType.toString()));
    }
  }
,ImmutableList.<S>builder().build(),sourceDescriptor,modelNode);
}
