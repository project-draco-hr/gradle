{
  final ProjectInternal project=context.mock(ProjectInternal.class,"[project]_" + name + '_'+ uniqueNameCounter++);
  final ServiceRegistry services=ServiceRegistryBuilder.builder().provider(new Object(){
    ProjectTaskLister createTaskLister(){
      return new DefaultProjectTaskLister();
    }
  }
).build();
  final ModelRegistry modelRegistry=context.mock(ModelRegistry.class,name + " model registry");
  context.checking(new Expectations(){
{
      allowing(project).getName();
      will(returnValue(name));
      allowing(project).getDescription();
      will(returnValue(null));
      allowing(project).getBuildFile();
      will(returnValue(new File(buildFilePath)));
      allowing(project).getDepth();
      will(returnValue(depth));
      allowing(project).getServices();
      will(returnValue(services));
      allowing(project).getModelRegistry();
      will(returnValue(modelRegistry));
      allowing(modelRegistry).atState(ModelPath.path("tasks"),ModelNode.State.GraphClosed);
    }
  }
);
  attachSubProjects(context,project,subProjectArray);
  attachTasks(context,project,tasks);
  assignDefaultTasks(context,project,defaultTasks);
  return project;
}
