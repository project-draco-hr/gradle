{
  final CopyAction effectiveVisitor=new DuplicateHandlingCopyActionDecorator(new NormalizingCopyActionDecorator(action));
  return effectiveVisitor.execute(new Action<Action<? super FileCopyDetailsInternal>>(){
    public void execute(    final Action<? super FileCopyDetailsInternal> action){
      spec.walk(new Action<CopySpecInternal>(){
        public void execute(        final CopySpecInternal spec){
          FileTree source=spec.getSource();
          source.visit(new FileVisitor(){
            public void visitDir(            FileVisitDetails dirDetails){
              visit(dirDetails);
            }
            public void visitFile(            FileVisitDetails fileDetails){
              visit(fileDetails);
            }
            private void visit(            FileVisitDetails visitDetails){
              DefaultFileCopyDetails details=instantiator.newInstance(DefaultFileCopyDetails.class,visitDetails,spec,fileSystem);
              for (              Action<? super FileCopyDetails> action : spec.getAllCopyActions()) {
                action.execute(details);
                if (details.isExcluded()) {
                  return;
                }
              }
              action.execute(details);
            }
          }
);
        }
      }
);
    }
  }
);
}
