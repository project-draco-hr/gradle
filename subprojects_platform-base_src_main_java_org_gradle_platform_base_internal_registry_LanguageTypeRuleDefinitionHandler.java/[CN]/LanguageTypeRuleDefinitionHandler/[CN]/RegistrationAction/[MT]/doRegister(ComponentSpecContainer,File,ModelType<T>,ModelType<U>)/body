{
  NamedDomainObjectSet<ComponentSpecInternal> componentSpecsInternals=componentSpecs.withType(ComponentSpecInternal.class);
  final BaseDirFileResolver fileResolver=new BaseDirFileResolver(FileSystems.getDefault(),projectDir);
  componentSpecsInternals.all(new Action<ComponentSpecInternal>(){
    @Override public void execute(    ComponentSpecInternal componentSpecInternal){
      final FunctionalSourceSet functionalSourceSet=componentSpecInternal.getSources();
      functionalSourceSet.registerFactory(type.getConcreteClass(),new NamedDomainObjectFactory<T>(){
        public T create(        String name){
          @SuppressWarnings("unchecked") T created=(T)BaseLanguageSourceSet.create(implementation.getConcreteClass(),name,functionalSourceSet.getName(),fileResolver,instantiator);
          return created;
        }
      }
);
    }
  }
);
}
