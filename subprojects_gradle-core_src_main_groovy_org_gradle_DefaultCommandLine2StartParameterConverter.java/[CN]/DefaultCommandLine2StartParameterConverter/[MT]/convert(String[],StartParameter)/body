{
  OptionSet options;
  try {
    options=parser.parse(args);
  }
 catch (  OptionException e) {
    throw new CommandLineArgumentException(e.getMessage());
  }
  if (options.has(HELP)) {
    startParameter.setShowHelp(true);
    return;
  }
  if (options.has(VERSION)) {
    startParameter.setShowVersion(true);
    return;
  }
  if (options.has(NO_DEFAULT_IMPORTS)) {
    startParameter.setDefaultImportsFile(null);
  }
 else   if (options.has(DEFAULT_IMPORT_FILE)) {
    startParameter.setDefaultImportsFile(new File(options.argumentOf(DEFAULT_IMPORT_FILE)));
  }
  if (options.has(SYSTEM_PROP)) {
    List<String> props=options.argumentsOf(SYSTEM_PROP);
    for (    String keyValueExpression : props) {
      String[] elements=keyValueExpression.split("=");
      startParameter.getSystemPropertiesArgs().put(elements[0],elements.length == 1 ? "" : elements[1]);
    }
  }
  if (options.has(PROJECT_PROP)) {
    List<String> props=options.argumentsOf(PROJECT_PROP);
    for (    String keyValueExpression : props) {
      String[] elements=keyValueExpression.split("=");
      startParameter.getProjectProperties().put(elements[0],elements.length == 1 ? "" : elements[1]);
    }
  }
  if (options.has(NO_SEARCH_UPWARDS)) {
    startParameter.setSearchUpwards(false);
  }
  if (options.has(PROJECT_DIR)) {
    startParameter.setProjectDir(new File(options.argumentOf(PROJECT_DIR)));
  }
  if (options.hasArgument(GRADLE_USER_HOME)) {
    startParameter.setGradleUserHomeDir(new File(options.argumentOf(GRADLE_USER_HOME)));
  }
  if (options.hasArgument(BUILD_FILE)) {
    startParameter.setBuildFile(new File(options.argumentOf(BUILD_FILE)));
  }
  if (options.hasArgument(SETTINGS_FILE)) {
    startParameter.setSettingsFile(new File(options.argumentOf(SETTINGS_FILE)));
  }
  for (  String script : (List<String>)options.argumentsOf(INIT_SCRIPT)) {
    startParameter.addInitScript(new File(script));
  }
  if (options.hasArgument(PLUGIN_PROPERTIES_FILE)) {
    startParameter.setPluginPropertiesFile(new File(options.argumentOf(PLUGIN_PROPERTIES_FILE)));
  }
  if (options.has(CACHE)) {
    try {
      startParameter.setCacheUsage(CacheUsage.fromString(options.valueOf(CACHE).toString()));
    }
 catch (    InvalidUserDataException e) {
      throw new CommandLineArgumentException(e.getMessage());
    }
  }
  if (options.has(EMBEDDED_SCRIPT)) {
    if (options.has(BUILD_FILE) || options.has(NO_SEARCH_UPWARDS) || options.has(SETTINGS_FILE)) {
      System.err.println(String.format("Error: The -%s option can't be used together with the -%s, -%s or -%s options.",EMBEDDED_SCRIPT,BUILD_FILE,SETTINGS_FILE,NO_SEARCH_UPWARDS));
      throw new CommandLineArgumentException(String.format("Error: The -%s option can't be used together with the -%s, -%s or -%s options.",EMBEDDED_SCRIPT,BUILD_FILE,SETTINGS_FILE,NO_SEARCH_UPWARDS));
    }
    startParameter.useEmbeddedBuildFile(options.argumentOf(EMBEDDED_SCRIPT));
  }
  if (options.has(FULL_STACKTRACE)) {
    if (options.has(STACKTRACE)) {
      throw new CommandLineArgumentException(String.format("Error: The -%s option can't be used together with the -%s option.",FULL_STACKTRACE,STACKTRACE));
    }
    startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS_FULL);
  }
 else   if (options.has(STACKTRACE)) {
    startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS);
  }
  if (options.has(TASKS) && options.has(PROPERTIES)) {
    throw new CommandLineArgumentException(String.format("Error: The -%s and -%s options cannot be used together.",TASKS,PROPERTIES));
  }
  if (options.has(PROJECT_DEPENDENCY_TASK_NAMES) && options.has(NO_PROJECT_DEPENDENCY_REBUILD)) {
    throw new CommandLineArgumentException(String.format("Error: The -%s and -%s options cannot be used together.",PROJECT_DEPENDENCY_TASK_NAMES,NO_PROJECT_DEPENDENCY_REBUILD));
  }
 else   if (options.has(NO_PROJECT_DEPENDENCY_REBUILD)) {
    startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(null));
  }
 else   if (options.has(PROJECT_DEPENDENCY_TASK_NAMES)) {
    List<String> normalizedTaskNames=new ArrayList<String>();
    for (    Object o : options.valuesOf(PROJECT_DEPENDENCY_TASK_NAMES)) {
      String taskName=(String)o;
      normalizedTaskNames.add(taskName.trim());
    }
    startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(normalizedTaskNames));
  }
  if (options.has(TASKS)) {
    startParameter.setBuildExecuter(new BuiltInTasksBuildExecuter(BuiltInTasksBuildExecuter.Options.TASKS));
  }
 else   if (options.has(PROPERTIES)) {
    startParameter.setBuildExecuter(new BuiltInTasksBuildExecuter(BuiltInTasksBuildExecuter.Options.PROPERTIES));
  }
 else   if (options.has(DEPENDENCIES)) {
    startParameter.setBuildExecuter(new BuiltInTasksBuildExecuter(BuiltInTasksBuildExecuter.Options.DEPENDENCIES));
  }
 else   if (!options.nonOptionArguments().isEmpty()) {
    startParameter.setTaskNames(options.nonOptionArguments());
  }
  if (options.has(DRY_RUN)) {
    startParameter.setDryRun(true);
  }
  if (options.has(NO_OPT)) {
    startParameter.setNoOpt(true);
  }
  if (options.has(EXCLUDE_TASK)) {
    startParameter.setExcludedTaskNames(options.valuesOf(EXCLUDE_TASK));
  }
  startParameter.setLogLevel(getLogLevel(options));
}
