{
  final File descriptorDestination=new File("somePath");
  upload.setUploadDescriptor(true);
  upload.setDescriptorDestination(descriptorDestination);
  upload.setConfiguration(configurationMock);
  upload.setArtifactPublisher(artifactPublisherMock);
  upload.setModuleDescriptorConverter(moduleDescriptorConverterMock);
  upload.setIvyModuleDescriptorWriter(ivyModuleDescriptorWriterMock);
  final ModuleDescriptor moduleDescriptorMock=context.mock(ModuleDescriptor.class);
  context.checking(new Expectations(){
{
      allowing(configurationMock).getExtendsFrom();
      will(returnValue(Collections.emptySet()));
      one(configurationMock).getModule();
      will(returnValue(moduleMock));
      Set<ConfigurationInternal> singletonConfiguration=Collections.singleton(configurationMock);
      one(configurationMock).getHierarchy();
      will(returnValue(singletonConfiguration));
      one(configurationMock).getAll();
      will(returnValue(singletonConfiguration));
      one(moduleDescriptorConverterMock).convert(singletonConfiguration,moduleMock);
      will(returnValue(moduleDescriptorMock));
      one(ivyModuleDescriptorWriterMock).write(moduleDescriptorMock,upload.getDescriptorDestination());
      one(artifactPublisherMock).publish(moduleMock,singletonConfiguration,descriptorDestination);
    }
  }
);
  upload.upload();
}
