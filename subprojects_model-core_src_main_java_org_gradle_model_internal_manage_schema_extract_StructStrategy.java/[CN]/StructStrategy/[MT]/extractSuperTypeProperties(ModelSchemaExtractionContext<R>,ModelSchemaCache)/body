{
  Iterable<ModelSchema<? super R>> superTypeSchemas=extractSuperTypeSchemas(extractionContext,extractionContext.getType().getSuperTypes(),cache);
  Optional<ModelSchema<? super R>> unmanagedSuperTypeSchema=Iterables.tryFind(superTypeSchemas,new Predicate<ModelSchema<? super R>>(){
    public boolean apply(    ModelSchema<? super R> superTypeSchema){
      return superTypeSchema.getKind() != ModelSchema.Kind.STRUCT;
    }
  }
);
  if (unmanagedSuperTypeSchema.isPresent()) {
    String message=String.format("extends %s but extending unmanaged types is not supported",unmanagedSuperTypeSchema.get().getType());
    throw new InvalidManagedModelElementTypeException(extractionContext,message);
  }
  return Iterables.concat(Iterables.transform(superTypeSchemas,new Function<ModelSchema<? super R>,Iterable<ModelProperty<?>>>(){
    public Iterable<ModelProperty<?>> apply(    ModelSchema<? super R> superTypeSchema){
      return superTypeSchema.getProperties().values();
    }
  }
));
}
