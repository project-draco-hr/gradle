{
  return parentContext.child(property.getType(),propertyDescription(parentContext,property),new Action<ModelSchemaExtractionContext<P>>(){
    public void execute(    ModelSchemaExtractionContext<P> propertyExtractionContext){
      ModelSchema<P> propertySchema=modelSchemaCache.get(property.getType());
      if (propertySchema.getKind().isAllowedPropertyTypeOfManagedType() && property.isUnmanaged()) {
        throw new InvalidManagedModelElementTypeException(parentContext,String.format("property '%s' is marked as @Unmanaged, but is of @Managed type '%s'. Please remove the @Managed annotation.%n%s",property.getName(),property.getType(),supportedTypeDescriptions.create()));
      }
      if (!propertySchema.getKind().isAllowedPropertyTypeOfManagedType() && !property.isUnmanaged()) {
        throw new InvalidManagedModelElementTypeException(parentContext,String.format("type %s cannot be used for property '%s' as it is an unmanaged type (please annotate the getter with @org.gradle.model.Unmanaged if you want this property to be unmanaged).%n%s",property.getType(),property.getName(),supportedTypeDescriptions.create()));
      }
      if (!property.isWritable()) {
        if (property.isUnmanaged()) {
          throw new InvalidManagedModelElementTypeException(parentContext,String.format("unmanaged property '%s' cannot be read only, unmanaged properties must have setters",property.getName()));
        }
        if (!propertySchema.getKind().isManaged()) {
          throw new InvalidManagedModelElementTypeException(parentContext,String.format("read only property '%s' has non managed type %s, only managed types can be used",property.getName(),property.getType()));
        }
      }
    }
  }
);
}
