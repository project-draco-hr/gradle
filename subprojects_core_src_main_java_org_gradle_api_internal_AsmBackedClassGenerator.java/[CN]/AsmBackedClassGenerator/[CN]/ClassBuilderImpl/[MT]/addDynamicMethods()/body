{
  addGetter(GroovyObject.class.getDeclaredMethod("getProperty",String.class),new MethodCodeBody(){
    public void add(    MethodVisitor methodVisitor) throws Exception {
      methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
      String getAsDynamicObjectDesc=Type.getMethodDescriptor(DynamicObjectAware.class.getDeclaredMethod("getAsDynamicObject"));
      methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getAsDynamicObject",getAsDynamicObjectDesc,false);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
      String getPropertyDesc=Type.getMethodDescriptor(DynamicObject.class.getDeclaredMethod("getProperty",String.class));
      methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,DYNAMIC_OBJECT_TYPE.getInternalName(),"getProperty",getPropertyDesc,true);
    }
  }
);
  String methodDescriptor=Type.getMethodDescriptor(BOOLEAN_TYPE,STRING_TYPE);
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,"hasProperty",methodDescriptor,null,EMPTY_STRINGS);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  String getAsDynamicObjectDesc=Type.getMethodDescriptor(DynamicObjectAware.class.getDeclaredMethod("getAsDynamicObject"));
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getAsDynamicObject",getAsDynamicObjectDesc,false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
  String getPropertyDesc=Type.getMethodDescriptor(DynamicObject.class.getDeclaredMethod("hasProperty",String.class));
  methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,DYNAMIC_OBJECT_TYPE.getInternalName(),"hasProperty",getPropertyDesc,true);
  methodVisitor.visitInsn(Opcodes.IRETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
  addSetter(GroovyObject.class.getDeclaredMethod("setProperty",String.class,Object.class),new MethodCodeBody(){
    public void add(    MethodVisitor methodVisitor) throws Exception {
      methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
      String getAsDynamicObjectDesc=Type.getMethodDescriptor(DynamicObjectAware.class.getDeclaredMethod("getAsDynamicObject"));
      methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getAsDynamicObject",getAsDynamicObjectDesc,false);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
      String setPropertyDesc=Type.getMethodDescriptor(DynamicObject.class.getDeclaredMethod("setProperty",String.class,Object.class));
      methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,DYNAMIC_OBJECT_TYPE.getInternalName(),"setProperty",setPropertyDesc,true);
    }
  }
);
  addGetter(GroovyObject.class.getDeclaredMethod("invokeMethod",String.class,Object.class),new MethodCodeBody(){
    public void add(    MethodVisitor methodVisitor) throws Exception {
      String invokeMethodDesc=Type.getMethodDescriptor(OBJECT_TYPE,STRING_TYPE,OBJECT_ARRAY_TYPE);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
      String getAsDynamicObjectDesc=Type.getMethodDescriptor(DynamicObjectAware.class.getDeclaredMethod("getAsDynamicObject"));
      methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getAsDynamicObject",getAsDynamicObjectDesc,false);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
      methodVisitor.visitTypeInsn(Opcodes.INSTANCEOF,OBJECT_ARRAY_TYPE.getDescriptor());
      Label end=new Label();
      Label notArray=new Label();
      methodVisitor.visitJumpInsn(Opcodes.IFEQ,notArray);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
      methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,OBJECT_ARRAY_TYPE.getDescriptor());
      methodVisitor.visitJumpInsn(Opcodes.GOTO,end);
      methodVisitor.visitLabel(notArray);
      methodVisitor.visitInsn(Opcodes.ICONST_1);
      methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,OBJECT_TYPE.getInternalName());
      methodVisitor.visitInsn(Opcodes.DUP);
      methodVisitor.visitInsn(Opcodes.ICONST_0);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
      methodVisitor.visitInsn(Opcodes.AASTORE);
      methodVisitor.visitLabel(end);
      methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,DYNAMIC_OBJECT_TYPE.getInternalName(),"invokeMethod",invokeMethodDesc,true);
    }
  }
);
}
