{
  String getterName=getter.getName();
  Type returnType=Type.getType(getter.getReturnType());
  String methodDescriptor=Type.getMethodDescriptor(returnType);
  Type serviceType=Type.getType(property.getType());
  String propFieldName=propFieldName(property);
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,getterName,methodDescriptor,signature(getter),EMPTY_STRINGS);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitFieldInsn(Opcodes.GETFIELD,generatedType.getInternalName(),propFieldName,serviceType.getDescriptor());
  Label alreadyLoaded=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFNONNULL,alreadyLoaded);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getServices",Type.getMethodDescriptor(SERVICE_REGISTRY_TYPE),false);
  java.lang.reflect.Type genericReturnType=getter.getGenericReturnType();
  if (genericReturnType instanceof Class) {
    methodVisitor.visitLdcInsn(Type.getType((Class)genericReturnType));
  }
 else {
    String constantFieldName=getConstantNameForGenericReturnType(genericReturnType,getterName);
    methodVisitor.visitFieldInsn(GETSTATIC,generatedType.getInternalName(),constantFieldName,JAVA_REFLECT_TYPE_DESCRIPTOR);
  }
  methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,SERVICE_REGISTRY_TYPE.getInternalName(),"get",GET_METHOD_DESCRIPTOR,true);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,serviceType.getInternalName());
  methodVisitor.visitFieldInsn(Opcodes.PUTFIELD,generatedType.getInternalName(),propFieldName,serviceType.getDescriptor());
  methodVisitor.visitLabel(alreadyLoaded);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitFieldInsn(Opcodes.GETFIELD,generatedType.getInternalName(),propFieldName,serviceType.getDescriptor());
  methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN));
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
}
