{
  Type returnType=Type.getType(method.getReturnType());
  Type[] originalParameterTypes=CollectionUtils.collectArray(method.getParameterTypes(),Type.class,new Transformer<Type,Class>(){
    public Type transform(    Class clazz){
      return Type.getType(clazz);
    }
  }
);
  int numParams=originalParameterTypes.length;
  Type[] closurisedParameterTypes=new Type[numParams];
  System.arraycopy(originalParameterTypes,0,closurisedParameterTypes,0,numParams);
  closurisedParameterTypes[numParams - 1]=CLOSURE_TYPE;
  String methodDescriptor=Type.getMethodDescriptor(returnType,closurisedParameterTypes);
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,method.getName(),methodDescriptor,null,new String[0]);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  for (int stackVar=1; stackVar < numParams; ++stackVar) {
    methodVisitor.visitVarInsn(closurisedParameterTypes[stackVar - 1].getOpcode(Opcodes.ILOAD),stackVar);
  }
  methodVisitor.visitVarInsn(Opcodes.ALOAD,numParams);
  methodDescriptor=Type.getMethodDescriptor(Type.getType(Action.class),CLOSURE_TYPE);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,CONFIGURE_UTIL_TYPE.getInternalName(),"configureUsing",methodDescriptor);
  methodDescriptor=Type.getMethodDescriptor(Type.getType(method.getReturnType()),originalParameterTypes);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),method.getName(),methodDescriptor);
  methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN));
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
}
