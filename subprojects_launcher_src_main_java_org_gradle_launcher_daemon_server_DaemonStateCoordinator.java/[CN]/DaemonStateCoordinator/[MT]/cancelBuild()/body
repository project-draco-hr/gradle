{
  long waitUntil=System.currentTimeMillis() + cancelTimeoutMs;
  Date expiry=new Date(waitUntil);
  LOGGER.debug("Cancel requested: will wait for daemon to become idle.");
  try {
    cancellationToken.doCancel();
  }
 catch (  Exception ex) {
    LOGGER.error("Cancel processing failed. Will continue.",ex);
  }
  lock.lock();
  try {
    while (System.currentTimeMillis() < waitUntil) {
      try {
switch (state) {
case Running:
          if (isIdle()) {
            LOGGER.debug("Cancel: daemon is idle now.");
            return;
          }
case StopRequested:
        LOGGER.debug("Cancel: daemon is busy, sleeping until state changes.");
      condition.awaitUntil(expiry);
    break;
case Broken:
  throw new IllegalStateException("This daemon is in a broken state.");
case Stopped:
LOGGER.debug("Cancel: daemon has stopped.");
return;
}
}
 catch (InterruptedException e) {
throw UncheckedException.throwAsUncheckedException(e);
}
}
LOGGER.debug("Cancel: daemon is still busy after grace period. Will force stop.");
stopNow("cancel requested");
}
  finally {
lock.unlock();
}
}
