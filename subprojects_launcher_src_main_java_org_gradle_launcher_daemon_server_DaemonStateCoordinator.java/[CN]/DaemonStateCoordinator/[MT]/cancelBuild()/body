{
  lock.lock();
  try {
    long waitUntil=System.currentTimeMillis() + cancelTimeoutMs;
    LOGGER.debug("Cancel requested: will wait for daemon to become idle.");
    cancellationToken.doCancel();
    while (System.currentTimeMillis() < waitUntil) {
      try {
switch (state) {
case Running:
          if (isIdle()) {
            LOGGER.debug("Cancel processed: daemon is idle now.");
            return;
          }
case Broken:
case StopRequested:
        LOGGER.debug("Cancel processing: daemon is busy, sleeping until state changes.");
      condition.await(500,TimeUnit.MILLISECONDS);
    break;
case Stopped:
  LOGGER.info("Cancel processing: daemon has stopped.");
return;
}
}
 catch (InterruptedException e) {
throw UncheckedException.throwAsUncheckedException(e);
}
}
requestForcefulStop();
}
  finally {
lock.unlock();
}
}
