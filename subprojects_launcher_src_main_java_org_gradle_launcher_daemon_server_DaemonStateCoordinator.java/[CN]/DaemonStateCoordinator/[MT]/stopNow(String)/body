{
  lock.lock();
  try {
switch (state) {
case Idle:
case Busy:
case Canceled:
case Broken:
case StopRequested:
      LOGGER.debug("Marking daemon stopped due to {}. The daemon is running a build: {}",reason,state == State.Busy);
    stopReason=reason;
  setState(State.Stopped);
break;
case Stopped:
break;
default :
throw new IllegalStateException("Daemon is in unexpected state: " + state);
}
}
  finally {
lock.unlock();
}
}
