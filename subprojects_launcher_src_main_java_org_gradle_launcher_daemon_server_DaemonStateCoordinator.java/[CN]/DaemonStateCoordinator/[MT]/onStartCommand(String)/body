{
  lock.lock();
  try {
switch (state) {
case Broken:
      throw new DaemonUnavailableException("This daemon is in a broken state and will stop.");
case StopRequested:
    throw new DaemonUnavailableException("This daemon is currently stopping.");
case Stopped:
  throw new DaemonUnavailableException("This daemon has stopped.");
case Busy:
throw new DaemonUnavailableException(String.format("This daemon is currently executing: %s",currentCommandExecution));
}
LOGGER.error("Command execution: started {} after {} minutes of idle",commandDisplayName,getIdleMinutes());
try {
setState(State.Busy);
onStartCommand.run();
currentCommandExecution=commandDisplayName;
result=null;
updateActivityTimestamp();
updateCancellationToken();
condition.signalAll();
}
 catch (Throwable throwable) {
setState(State.Broken);
throw UncheckedException.throwAsUncheckedException(throwable);
}
}
  finally {
lock.unlock();
}
}
