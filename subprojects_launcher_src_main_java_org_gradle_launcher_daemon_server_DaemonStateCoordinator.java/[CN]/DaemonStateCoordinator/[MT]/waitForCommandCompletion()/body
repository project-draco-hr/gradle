{
  lock.lock();
  try {
    while ((state == State.Running || state == State.StopRequested) && result == null) {
      try {
        condition.await();
      }
 catch (      InterruptedException e) {
        throw UncheckedException.throwAsUncheckedException(e);
      }
    }
    LOGGER.debug("Command execution: finished waiting for {}. Result {} with state {}",currentCommandExecution,result,state);
    if (result instanceof Throwable) {
      throw UncheckedException.throwAsUncheckedException((Throwable)result);
    }
    if (result != null) {
      return;
    }
switch (state) {
case Stopped:
      throw new DaemonStoppedException(stopReason);
case Broken:
    throw new DaemonUnavailableException("This daemon is broken and will stop.");
default :
  throw new IllegalStateException("Daemon is in unexpected state: " + state);
}
}
  finally {
lock.unlock();
}
}
