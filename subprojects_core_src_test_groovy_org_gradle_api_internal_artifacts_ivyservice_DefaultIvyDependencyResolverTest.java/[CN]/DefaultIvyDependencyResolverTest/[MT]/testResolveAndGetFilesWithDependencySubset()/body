{
  prepareResolveReport();
  final ModuleDependency moduleDependencyDummy1=context.mock(ModuleDependency.class,"dep1");
  final ModuleDependency moduleDependencyDummy2=context.mock(ModuleDependency.class,"dep2");
  final SelfResolvingDependency selfResolvingDependencyDummy=context.mock(SelfResolvingDependency.class);
  final ResolvedDependency root=context.mock(ResolvedDependency.class,"root");
  final ResolvedDependency resolvedDependency1=context.mock(ResolvedDependency.class,"resolved1");
  final ResolvedDependency resolvedDependency2=context.mock(ResolvedDependency.class,"resolved2");
  ResolvedDependency resolvedDependency3=context.mock(ResolvedDependency.class,"resolved3");
  final IvyConversionResult conversionResultStub=context.mock(IvyConversionResult.class);
  final Map<Dependency,Set<ResolvedDependency>> firstLevelResolvedDependencies=GUtil.map(moduleDependencyDummy1,toSet(resolvedDependency1,resolvedDependency2),moduleDependencyDummy2,toSet(resolvedDependency3));
  context.checking(new Expectations(){
{
      allowing(resolvedDependency1).getParentArtifacts(root);
      will(returnValue(toSet(DefaultResolvedArtifactTest.createResolvedArtifact(context,"dep1parent","someType","someExtension",new File("dep1parent")))));
      allowing(resolvedDependency1).getModuleArtifacts();
      will(returnValue(toSet(DefaultResolvedArtifactTest.createResolvedArtifact(context,"dep1","someType","someExtension",new File("dep1")))));
      allowing(resolvedDependency1).getChildren();
      will(returnValue(toSet()));
      allowing(resolvedDependency2).getParentArtifacts(root);
      will(returnValue(toSet()));
      allowing(resolvedDependency2).getModuleArtifacts();
      will(returnValue(toSet(DefaultResolvedArtifactTest.createResolvedArtifact(context,"dep2","someType","someExtension",new File("dep2")))));
      allowing(resolvedDependency2).getChildren();
      will(returnValue(toSet()));
      allowing(configurationStub).getAllDependencies();
      will(returnValue(toSet(moduleDependencyDummy1,moduleDependencyDummy2,selfResolvingDependencyDummy)));
      allowing(configurationStub).getAllDependencies(ModuleDependency.class);
      will(returnValue(toSet(moduleDependencyDummy1,moduleDependencyDummy2)));
      allowing(ivyReportConverterStub).convertReport(resolveReportMock,configurationStub);
      will(returnValue(conversionResultStub));
      allowing(conversionResultStub).getFirstLevelResolvedDependencies();
      will(returnValue(firstLevelResolvedDependencies));
      allowing(conversionResultStub).getRoot();
      will(returnValue(root));
    }
  }
);
  ModuleDescriptor moduleDescriptor=createAnonymousModuleDescriptor();
  prepareTestsThatRetrieveDependencies(moduleDescriptor);
  Set<File> actualFiles=ivyDependencyResolver.resolve(configurationStub,ivyStub,moduleDescriptor).getFiles(new Spec<Dependency>(){
    public boolean isSatisfiedBy(    Dependency element){
      return element == moduleDependencyDummy1 || element == selfResolvingDependencyDummy;
    }
  }
);
  assertThat(actualFiles,equalTo(toSet(new File("dep1"),new File("dep2"),new File("dep1parent"))));
}
