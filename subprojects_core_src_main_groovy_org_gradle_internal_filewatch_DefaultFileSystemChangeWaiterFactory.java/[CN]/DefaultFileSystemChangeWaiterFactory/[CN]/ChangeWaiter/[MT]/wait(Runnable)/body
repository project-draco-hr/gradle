{
  Runnable cancellationHandler=new Runnable(){
    @Override public void run(){
      signal(lock,condition);
    }
  }
;
  try {
    if (cancellationToken.isCancellationRequested()) {
      return Collections.emptyList();
    }
    cancellationToken.addCallback(cancellationHandler);
    notifier.run();
    lock.lock();
    try {
      long lastChangeAtValue=lastChangeAt.get();
      while (!cancellationToken.isCancellationRequested() && error.get() == null && (lastChangeAtValue == 0 || monotonicClockMillis() - lastChangeAtValue < quietPeriodMillis)) {
        condition.await(quietPeriodMillis,TimeUnit.MILLISECONDS);
        lastChangeAtValue=lastChangeAt.get();
      }
    }
  finally {
      lock.unlock();
    }
    Throwable throwable=error.get();
    if (throwable != null) {
      throw throwable;
    }
  }
 catch (  Throwable e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
 finally {
    cancellationToken.removeCallback(cancellationHandler);
    watcher.stop();
  }
  return ImmutableList.copyOf(receivedEvents);
}
