{
  if (!compileOptions.isIncremental()) {
    return false;
  }
  List<File> sourceDirs=getSourceDirs();
  if (sourceDirs.isEmpty()) {
    LOG.lifecycle("{} cannot run incrementally because Gradle cannot infer the source directories.",getPath());
    return false;
  }
  if (!inputs.isIncremental()) {
    LOG.lifecycle("{} is not incremental (e.g. outputs have changed, no previous execution, etc). Using regular compile.",getPath());
    return false;
  }
  SingleMessageLogger.incubatingFeatureUsed("Incremental java compilation");
  SelectiveJavaCompiler compiler=new SelectiveJavaCompiler(javaCompiler);
  SelectiveCompilation selectiveCompilation=new SelectiveCompilation(inputs,getSource(),getClasspath(),getDestinationDir(),getDependencyInfoSerializer(),getJarSnapshotCache(),compiler,sourceDirs);
  if (!selectiveCompilation.getCompilationNeeded()) {
    LOG.lifecycle("{} does not require recompilation. Skipping the compiler.",getPath());
    return true;
  }
  Clock clock=new Clock();
  FileCollection sourceToCompile=selectiveCompilation.getSource();
  try {
    performCompilation(sourceToCompile,selectiveCompilation.getClasspath(),compiler);
    selectiveCompilation.compilationComplete(true);
  }
 catch (  Throwable t) {
    selectiveCompilation.compilationComplete(false);
  }
 finally {
    LOG.lifecycle("{} - incremental compilation took {}",getPath(),clock.getTime());
  }
  return true;
}
