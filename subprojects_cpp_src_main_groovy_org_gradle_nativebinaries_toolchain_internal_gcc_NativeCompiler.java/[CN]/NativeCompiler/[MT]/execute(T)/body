{
  boolean windowsPathLimitation=OperatingSystem.current().isWindows();
  MutableCommandLineToolInvocation invocation=baseInvocation.copy();
  invocation.setWorkDirectory(spec.getObjectFileDir());
  if (useCommandFile) {
    invocation.addPostArgsAction(new GccOptionsFileArgTransformer(spec.getTempDir()));
  }
  Transformer<List<String>,File> outputFileArgTransformer=new Transformer<List<String>,File>(){
    public List<String> transform(    File outputFile){
      return Arrays.asList("-o",outputFile.getAbsolutePath());
    }
  }
;
  for (  File sourceFile : spec.getSourceFiles()) {
    SingleSourceCompileArgTransformer<T> argTransformer=new SingleSourceCompileArgTransformer<T>(sourceFile,objectFileSuffix,new ShortCircuitArgsTransformer<T>(argsTransfomer),windowsPathLimitation,outputFileArgTransformer);
    invocation.setArgs(argTransformer.transform(spec));
    commandLineTool.execute(invocation);
  }
  return new SimpleWorkResult(!spec.getSourceFiles().isEmpty());
}
