{
  Type actionImplType=Type.getType(ClosureBackedAction.class);
  Type closureType=Type.getType(Closure.class);
  Type[] originalParameterTypes=CollectionUtils.collectArray(method.getNativeParameterTypes(),Type.class,new Transformer<Type,Class>(){
    public Type transform(    Class clazz){
      return Type.getType(clazz);
    }
  }
);
  int numParams=originalParameterTypes.length;
  Type[] closurisedParameterTypes=new Type[numParams];
  System.arraycopy(originalParameterTypes,0,closurisedParameterTypes,0,numParams);
  closurisedParameterTypes[numParams - 1]=closureType;
  String methodDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,closurisedParameterTypes);
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,method.getName(),methodDescriptor,null,new String[0]);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  for (int stackVar=1; stackVar < numParams; ++stackVar) {
    methodVisitor.visitVarInsn(closurisedParameterTypes[stackVar - 1].getOpcode(Opcodes.ILOAD),stackVar);
  }
  methodVisitor.visitTypeInsn(Opcodes.NEW,actionImplType.getInternalName());
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,numParams);
  String constuctorDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{closureType});
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,actionImplType.getInternalName(),"<init>",constuctorDescriptor);
  methodDescriptor=Type.getMethodDescriptor(Type.getType(method.getReturnType()),originalParameterTypes);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),method.getName(),methodDescriptor);
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
}
