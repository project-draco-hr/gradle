{
  if (type instanceof Class) {
    Class<?> cl=(Class<?>)type;
    if (cl.isPrimitive()) {
      builder.append(Type.getType(cl).getDescriptor());
    }
 else {
      if (cl.isArray()) {
        builder.append(cl.getName().replace('.','/'));
      }
 else {
        builder.append('L');
        builder.append(cl.getName().replace('.','/'));
        builder.append(';');
      }
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    visitNested(parameterizedType.getRawType(),builder);
    builder.append('<');
    for (    java.lang.reflect.Type param : parameterizedType.getActualTypeArguments()) {
      visitType(param,builder);
    }
    builder.append(">;");
  }
 else   if (type instanceof WildcardType) {
    WildcardType wildcardType=(WildcardType)type;
    if (wildcardType.getUpperBounds().length == 1 && wildcardType.getUpperBounds()[0].equals(Object.class)) {
      if (wildcardType.getLowerBounds().length == 0) {
        builder.append('*');
        return;
      }
    }
 else {
      for (      java.lang.reflect.Type upperType : wildcardType.getUpperBounds()) {
        builder.append('+');
        visitType(upperType,builder);
      }
    }
    for (    java.lang.reflect.Type lowerType : wildcardType.getLowerBounds()) {
      builder.append('-');
      visitType(lowerType,builder);
    }
  }
 else   if (type instanceof TypeVariable) {
    TypeVariable<?> typeVar=(TypeVariable)type;
    builder.append('T');
    builder.append(typeVar.getName());
    builder.append(';');
  }
 else   if (type instanceof GenericArrayType) {
    GenericArrayType arrayType=(GenericArrayType)type;
    builder.append('[');
    visitType(arrayType.getGenericComponentType(),builder);
  }
 else {
    throw new IllegalArgumentException(String.format("Cannot generate signature for %s.",type));
  }
}
