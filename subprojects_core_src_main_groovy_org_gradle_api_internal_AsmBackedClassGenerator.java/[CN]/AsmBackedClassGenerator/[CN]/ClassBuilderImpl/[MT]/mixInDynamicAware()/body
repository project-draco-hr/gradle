{
  Class<?> extensibleObjectFieldType=extensible ? MixInExtensibleDynamicObject.class : BeanDynamicObject.class;
  final String fieldSignature=Type.getDescriptor(extensibleObjectFieldType);
  visitor.visitField(Opcodes.ACC_PRIVATE,"dynamicObjectHelper",fieldSignature,null,null);
  initDynamicObjectHelper=new MethodCodeBody(){
    public void add(    MethodVisitor visitor) throws Exception {
      generateCreateDynamicObject(visitor);
      visitor.visitFieldInsn(Opcodes.PUTFIELD,generatedType.getInternalName(),"dynamicObjectHelper",fieldSignature);
    }
  }
;
  if (extensible) {
    addGetter(HasConvention.class.getDeclaredMethod("getConvention"),new MethodCodeBody(){
      public void add(      MethodVisitor visitor) throws Exception {
        visitor.visitVarInsn(Opcodes.ALOAD,0);
        visitor.visitFieldInsn(Opcodes.GETFIELD,generatedType.getInternalName(),"dynamicObjectHelper",fieldSignature);
        String getterDescriptor=Type.getMethodDescriptor(ExtensibleDynamicObject.class.getDeclaredMethod("getConvention"));
        visitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,extensibleDynamicObjectHelperType.getInternalName(),"getConvention",getterDescriptor);
      }
    }
);
    addGetter(ExtensionAware.class.getDeclaredMethod("getExtensions"),new MethodCodeBody(){
      public void add(      MethodVisitor visitor) throws Exception {
        visitor.visitVarInsn(Opcodes.ALOAD,0);
        String getterDescriptor=Type.getMethodDescriptor(ExtensibleDynamicObject.class.getDeclaredMethod("getConvention"));
        visitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,generatedType.getInternalName(),"getConvention",getterDescriptor);
      }
    }
);
  }
  addGetter(DynamicObjectAware.class.getDeclaredMethod("getAsDynamicObject"),new MethodCodeBody(){
    public void add(    MethodVisitor visitor){
      visitor.visitVarInsn(Opcodes.ALOAD,0);
      visitor.visitFieldInsn(Opcodes.GETFIELD,generatedType.getInternalName(),"dynamicObjectHelper",fieldSignature);
      visitor.visitInsn(Opcodes.DUP);
      Label nullBranch=new Label();
      visitor.visitJumpInsn(Opcodes.IFNULL,nullBranch);
      visitor.visitInsn(Opcodes.ARETURN);
      visitor.visitLabel(nullBranch);
      visitor.visitVarInsn(Opcodes.ALOAD,0);
      generateCreateDynamicObject(visitor);
      visitor.visitInsn(Opcodes.ARETURN);
    }
  }
);
}
