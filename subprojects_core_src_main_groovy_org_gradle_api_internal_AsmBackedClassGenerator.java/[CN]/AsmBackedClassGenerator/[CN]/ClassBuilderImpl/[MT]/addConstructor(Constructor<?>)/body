{
  List<Type> paramTypes=new ArrayList<Type>();
  for (  Class<?> paramType : constructor.getParameterTypes()) {
    paramTypes.add(Type.getType(paramType));
  }
  String methodDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,paramTypes.toArray(new Type[paramTypes.size()]));
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,"<init>",methodDescriptor,signature(constructor),new String[0]);
  for (  Annotation annotation : constructor.getDeclaredAnnotations()) {
    if (annotation.annotationType().getAnnotation(Inherited.class) != null) {
      continue;
    }
    Retention retention=annotation.annotationType().getAnnotation(Retention.class);
    AnnotationVisitor annotationVisitor=methodVisitor.visitAnnotation(Type.getType(annotation.annotationType()).getDescriptor(),retention != null && retention.value() == RetentionPolicy.RUNTIME);
    annotationVisitor.visitEnd();
  }
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  for (int i=0; i < constructor.getParameterTypes().length; i++) {
    methodVisitor.visitVarInsn(Type.getType(constructor.getParameterTypes()[i]).getOpcode(Opcodes.ILOAD),i + 1);
  }
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,superclassType.getInternalName(),"<init>",methodDescriptor,false);
  if (initDynamicObjectHelper != null) {
    initDynamicObjectHelper.add(methodVisitor);
  }
  if (initConventionAwareHelper != null) {
    initConventionAwareHelper.add(methodVisitor);
  }
  if (initMetaClass != null) {
    initMetaClass.add(methodVisitor);
  }
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
}
