{
  final Method method=methodInfo.method;
  if (method.getAnnotation(annotationType) == null) {
    return;
  }
  if (!isGetter(method)) {
    throw new GradleException(String.format("Cannot attach @%s to non-getter method %s().",annotationType.getSimpleName(),method.getName()));
  }
  final String propertyName=StringUtils.uncapitalize(method.getName().substring(3));
  Annotation optional=method.getAnnotation(Optional.class);
  if (optional == null) {
    methodInfo.notNullActions.add(new Action<Task>(){
      public void execute(      Task task){
        Object value=ReflectionUtil.invoke(task,method.getName(),new Object[0]);
        if (value == null) {
          throw new InvalidUserDataException(String.format("No value has been specified for property '%s'.",propertyName));
        }
      }
    }
);
  }
  if (skipAction != null) {
    methodInfo.skipActions.add(new Action<Task>(){
      public void execute(      Task task){
        Object value=ReflectionUtil.invoke(task,method.getName(),new Object[0]);
        skipAction.validate(propertyName,value);
      }
    }
);
  }
  if (validationAction != null) {
    methodInfo.validationActions.add(new Action<Task>(){
      public void execute(      Task task){
        Object value=ReflectionUtil.invoke(task,method.getName(),new Object[0]);
        if (value != null) {
          validationAction.validate(propertyName,value);
        }
      }
    }
);
  }
}
