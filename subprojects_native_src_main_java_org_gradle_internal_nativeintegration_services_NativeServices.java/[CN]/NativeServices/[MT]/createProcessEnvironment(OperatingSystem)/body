{
  if (useNativePlatform) {
    try {
      net.rubygrapefruit.platform.Process process=net.rubygrapefruit.platform.Native.get(Process.class);
      return new NativePlatformBackedProcessEnvironment(process);
    }
 catch (    NativeIntegrationUnavailableException ex) {
      LOGGER.debug("Native-platform process integration is not available. Continuing with fallback.");
    }
  }
  Long pid=null;
  try {
    String vmName=ManagementFactory.getRuntimeMXBean().getName();
    pid=Long.parseLong(vmName.substring(0,vmName.indexOf("@")));
  }
 catch (  RuntimeException e) {
    LOGGER.debug("Native-platform process: failed to parse PID from Java VM name - " + e.getMessage());
  }
  return new UnsupportedEnvironment(pid);
}
