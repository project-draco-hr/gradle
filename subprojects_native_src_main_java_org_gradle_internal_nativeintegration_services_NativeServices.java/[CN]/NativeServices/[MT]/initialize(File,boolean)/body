{
  if (!initialized) {
    String overrideProperty=System.getProperty(NATIVE_DIR_OVERRIDE);
    File nativeDir;
    if (overrideProperty == null) {
      nativeDir=new File(userHomeDir,"native");
    }
 else {
      nativeDir=new File(overrideProperty);
    }
    if (useNativePlatform) {
      try {
        net.rubygrapefruit.platform.Native.init(nativeDir);
      }
 catch (      NativeIntegrationUnavailableException ex) {
        LOGGER.debug("Native-platform is not available.");
        useNativePlatform=false;
      }
catch (      NativeException ex) {
        if (ex.getCause() instanceof UnsatisfiedLinkError && ex.getCause().getMessage().toLowerCase().contains("already loaded in another classloader")) {
          LOGGER.debug("Unable to initialize native-platform. Failure: {}",format(ex));
          useNativePlatform=false;
        }
 else {
          Platform platform=Platform.current();
          try {
            File lib=new NativeLibraryLocator(nativeDir).find(new LibraryDef(platform.getLibraryName(),platform.getId()));
            HashValue libHash=HashUtil.createHash(lib,"md5");
            File copy=new NativeLibraryLocator(null).find(new LibraryDef(platform.getLibraryName(),platform.getId()));
            HashValue copyHash=HashUtil.createHash(copy,"md5");
            throw new RuntimeException(String.format("Could not load native integration.%nlib: %s (%s)%ncopy: %s (%s)",lib,libHash.asHexString(),copy,copyHash.asHexString()),ex);
          }
 catch (          IOException e) {
            throw UncheckedException.throwAsUncheckedException(e);
          }
        }
      }
    }
    if (OperatingSystem.current().isWindows() && initializeJNA) {
      new JnaBootPathConfigurer().configure(nativeDir);
    }
    initialized=true;
  }
}
