{
  ModelType<R> ruleSourceType=ModelType.typeOf(ruleSourceInstance);
  List<Method> mutateMethods=JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(),new Spec<Method>(){
    public boolean isSatisfiedBy(    Method element){
      return element.isAnnotationPresent(Mutate.class);
    }
  }
);
  List<String> reasons=Lists.newArrayList();
  if (mutateMethods.size() == 0) {
    reasons.add("must have at exactly one method annotated with @org.gradle.model.Mutate");
  }
 else {
    if (mutateMethods.size() > 1) {
      reasons.add("more than one method is annotated with @org.gradle.model.Mutate");
    }
    for (    Method ruleMethod : mutateMethods) {
      if (ruleMethod.getReturnType() != Void.TYPE) {
        reasons.add(String.format("rule method '%s' must return void",ruleMethod.getName()));
      }
      Type[] parameterTypes=ruleMethod.getGenericParameterTypes();
      if (parameterTypes.length == 0 || !subjectType.isAssignableFrom(ModelType.of(parameterTypes[0]))) {
        reasons.add(String.format("first parameter of rule method '%s' must be of type %s",ruleMethod.getName(),subjectType));
      }
    }
  }
  if (reasons.size() > 0) {
    throw invalid(ruleSourceType,reasons);
  }
  return new RuleSourceBackedRuleAction<R,T>(ruleSourceInstance,new JavaMethod<R,T>(ruleSourceType.getConcreteClass(),subjectType.getConcreteClass(),mutateMethods.get(0)));
}
