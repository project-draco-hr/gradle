{
  ModelType<R> ruleSourceType=ModelType.typeOf(ruleSourceInstance);
  List<Method> mutateMethods=JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(),new Spec<Method>(){
    public boolean isSatisfiedBy(    Method element){
      return element.isAnnotationPresent(Mutate.class);
    }
  }
);
  ValidationProblemCollector problems=new ValidationProblemCollector(ruleSourceType);
  if (mutateMethods.size() == 0) {
    problems.add("Must have at exactly one method annotated with @" + Mutate.class.getName());
  }
 else {
    if (mutateMethods.size() > 1) {
      problems.add("More than one method is annotated with @" + Mutate.class.getName());
    }
    for (    Method ruleMethod : mutateMethods) {
      if (ruleMethod.getReturnType() != Void.TYPE) {
        problems.add(ruleMethod,"A rule method must return void");
      }
      Type[] parameterTypes=ruleMethod.getGenericParameterTypes();
      if (parameterTypes.length == 0 || !subjectType.isAssignableFrom(ModelType.of(parameterTypes[0]))) {
        problems.add(ruleMethod,String.format("First parameter of a rule method must be of type %s",subjectType));
      }
    }
  }
  if (problems.hasProblems()) {
    throw new RuleActionValidationException(problems.format());
  }
  return new RuleSourceBackedRuleAction<R,T>(ruleSourceInstance,new JavaMethod<R,T>(ruleSourceType.getConcreteClass(),subjectType.getConcreteClass(),mutateMethods.get(0)));
}
