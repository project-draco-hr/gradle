{
  final ImmutableListMultimap.Builder<String,Method> methodsByNameBuilder=ImmutableListMultimap.builder();
  ModelSchemaUtils.walkTypeHierarchy(clazz,new ModelSchemaUtils.TypeVisitor<T>(){
    @Override public void visitType(    Class<? super T> type){
      for (      Method method : type.getDeclaredMethods()) {
        if (ModelSchemaUtils.isIgnoredMethod(method)) {
          continue;
        }
        methodsByNameBuilder.put(method.getName(),method);
      }
    }
  }
);
  ImmutableListMultimap<String,Method> methodsByName=methodsByNameBuilder.build();
  ImmutableMap.Builder<String,Map<Equivalence.Wrapper<Method>,Collection<Method>>> candidatesBuilder=ImmutableMap.builder();
  for (  String methodName : methodsByName.keySet()) {
    ImmutableList<Method> methodsWithSameName=methodsByName.get(methodName);
    ListMultimap<Equivalence.Wrapper<Method>,Method> equivalenceIndex=Multimaps.index(methodsWithSameName,new Function<Method,Equivalence.Wrapper<Method>>(){
      @Override public Equivalence.Wrapper<Method> apply(      Method method){
        return METHOD_EQUIVALENCE.wrap(method);
      }
    }
);
    candidatesBuilder.put(methodName,equivalenceIndex.asMap());
  }
  return new CandidateMethods(candidatesBuilder.build());
}
