{
  Set<Class<?>> seenInterfaces=Sets.newHashSet();
  Queue<Class<? super T>> queue=new ArrayDeque<Class<? super T>>();
  queue.add(clazz);
  Class<? super T> type;
  while ((type=queue.poll()) != null) {
    if (type.equals(Object.class) || type.equals(GroovyObject.class)) {
      continue;
    }
    visitor.visitType(type);
    Class<? super T> superclass=type.getSuperclass();
    if (superclass != null) {
      queue.add(superclass);
    }
    for (    Class<?> iface : type.getInterfaces()) {
      if (seenInterfaces.add(iface)) {
        queue.add(Cast.<Class<? super T>>uncheckedCast(iface));
      }
    }
  }
}
