{
  ProgressLoggerFactory progressLoggerFactory=getServices().get(ProgressLoggerFactory.class);
  ProgressLogger progressLogger=progressLoggerFactory.newOperation(AbstractJettyRunTask.class).start("Start Jetty server","Starting Jetty");
  try {
    setServer(createServer());
    applyJettyXml();
    JettyPluginServer plugin=getServer();
    Object[] configuredConnectors=getConnectors();
    plugin.setConnectors(configuredConnectors);
    Object[] connectors=plugin.getConnectors();
    if (connectors == null || connectors.length == 0) {
      configuredConnectors=new Object[]{plugin.createDefaultConnector(getHttpPort())};
      plugin.setConnectors(configuredConnectors);
    }
    if (getRequestLog() != null) {
      getServer().setRequestLog(getRequestLog());
    }
    getServer().configureHandlers();
    configureWebApplication();
    getServer().addWebApplication(webAppConfig);
    Object[] configuredRealms=getUserRealms();
    for (int i=0; (configuredRealms != null) && i < configuredRealms.length; i++) {
      LOGGER.debug(configuredRealms[i].getClass().getName() + ": " + configuredRealms[i].toString());
    }
    plugin.setUserRealms(configuredRealms);
    finishConfigurationBeforeStart();
    server.start();
    if (daemon) {
      return;
    }
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
      Monitor monitor=new Monitor(getStopPort(),getStopKey(),(Server)server.getProxiedObject());
      monitor.start();
    }
    configureScanner();
    startScanner();
    startConsoleScanner();
  }
 catch (  Exception e) {
    throw new GradleException("Could not start the Jetty server.",e);
  }
 finally {
    progressLogger.completed();
  }
  progressLogger=progressLoggerFactory.newOperation(AbstractJettyRunTask.class).start(String.format("Run Jetty at http://localhost:%d/%s",getHttpPort(),getContextPath()),String.format("Running at http://localhost:%d/%s",getHttpPort(),getContextPath()));
  try {
    server.join();
  }
 catch (  Exception e) {
    throw new GradleException("Failed to wait for the Jetty server to stop.",e);
  }
 finally {
    progressLogger.completed();
  }
}
