{
  super(ComponentSpec.class);
  this.projectIdentifier=projectIdentifier;
  registerFactory(DefaultComponentSpec.class,new ImplementationFactory<ComponentSpec,DefaultComponentSpec>(){
    @Override public <T extends DefaultComponentSpec>T create(    ModelType<? extends ComponentSpec> publicType,    ModelType<T> implementationType,    String name,    MutableModelNode componentNode){
      ComponentSpecIdentifier id=new DefaultComponentSpecIdentifier(projectIdentifier.getPath(),name);
      return DefaultComponentSpec.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),id,componentNode);
    }
  }
);
  registerFactory(BaseBinarySpec.class,new ImplementationFactory<BinarySpec,BaseBinarySpec>(){
    @Override public <T extends BaseBinarySpec>T create(    ModelType<? extends BinarySpec> publicType,    ModelType<T> implementationType,    String name,    MutableModelNode binaryNode){
      MutableModelNode componentBinariesNode=binaryNode.getParent();
      MutableModelNode componentNode=componentBinariesNode.getParent();
      return BaseBinarySpec.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),new DefaultComponentSpecIdentifier(projectIdentifier.getPath(),name),binaryNode,componentNode,instantiator,taskFactory);
    }
  }
);
  registerFactory(BaseLanguageSourceSet.class,new ImplementationFactory<LanguageSourceSet,BaseLanguageSourceSet>(){
    @Override public <T extends BaseLanguageSourceSet>T create(    ModelType<? extends LanguageSourceSet> publicType,    ModelType<T> implementationType,    String sourceSetName,    MutableModelNode node){
      ComponentSpecIdentifier id=getId(node,sourceSetName);
      return Cast.uncheckedCast(BaseLanguageSourceSet.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),id,sourceDirectorySetFactory));
    }
  }
);
}
