{
  final PomModuleDescriptorWriter moduleDescriptorWriterMock=context.mock(PomModuleDescriptorWriter.class);
  final Conf2ScopeMappingContainer conf2ScopeMappingContainerMock=context.mock(Conf2ScopeMappingContainer.class);
  final ModuleDescriptor testMd=DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance("org","name","revision"));
  final String expectedPomText="somePomXml";
  final String testLicenseText="licenseText";
  final String testPackaging="packaging";
  context.checking(new Expectations(){
{
      one(moduleDescriptorWriterMock).convert(with(same(testMd)),with(equal(testPackaging)),with(equal(testLicenseText)),with(same(conf2ScopeMappingContainerMock)),with(any(PrintWriter.class)));
      will(new WriteAction(expectedPomText));
    }
  }
);
  new DefaultPomModuleDescriptorFileWriter(moduleDescriptorWriterMock).write(testMd,testPackaging,testLicenseText,conf2ScopeMappingContainerMock,_dest);
  assertTrue(_dest.exists());
  String wrote=FileUtil.readEntirely(new BufferedReader(new FileReader(_dest)));
  assertEquals(expectedPomText + System.getProperty("line.separator"),wrote);
}
