{
  TestFile testDir=dist.getTestDir();
  testDir.file("src/test/java/SomeTest.java").writelns("public class SomeTest extends junit.framework.TestCase {","public void testPass() { }","public void testFail() { junit.framework.Assert.fail(\"message\"); }","public void testError() { throw new RuntimeException(\"message\"); }","}");
  testDir.file("build.gradle").writelns("usePlugin 'java'","repositories { mavenCentral() } ","dependencies { testCompile 'junit:junit:3.8' }","def listener = new TestListenerImpl()","test.addTestListener(listener)","test.ignoreFailures = true","class TestListenerImpl implements TestListener {","void beforeSuite(TestSuite suite) { println 'START SUITE ' + suite.name }","void afterSuite(TestSuite suite) { println 'FINISH SUITE ' + suite.name }","void beforeTest(Test test) { println 'START TEST ' + test.name }","void afterTest(Test test, TestResult result) { println 'FINISH TEST ' + test.name + ' error: ' + result.error }","}");
  ExecutionResult result=executer.withTasks("test").run();
  assertThat(result.getOutput(),containsLine("START SUITE SomeTest"));
  assertThat(result.getOutput(),containsLine("FINISH SUITE SomeTest"));
  assertThat(result.getOutput(),containsLine("START TEST testPass(SomeTest)"));
  assertThat(result.getOutput(),containsLine("FINISH TEST testPass(SomeTest) error: null"));
  assertThat(result.getOutput(),containsLine("START TEST testFail(SomeTest)"));
  assertThat(result.getOutput(),containsLine("FINISH TEST testFail(SomeTest) error: junit.framework.AssertionFailedError: message"));
  assertThat(result.getOutput(),containsLine("START TEST testError(SomeTest)"));
  assertThat(result.getOutput(),containsLine("FINISH TEST testError(SomeTest) error: java.lang.RuntimeException: message"));
}
