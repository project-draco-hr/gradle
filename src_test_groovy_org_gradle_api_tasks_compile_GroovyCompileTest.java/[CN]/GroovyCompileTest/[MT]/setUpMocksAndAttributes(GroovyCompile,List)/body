{
  super.setUpMocksAndAttributes(compile);
  final FileCollection groovyClasspathCollection=context.mock(FileCollection.class);
  context.checking(new Expectations(){
{
      allowing(groovyClasspathCollection).getFiles();
      will(returnValue(new LinkedHashSet(groovyClasspath)));
    }
  }
);
  compile.setGroovyClasspath(groovyClasspathCollection);
  compile.setGroovySourceDirs(WrapUtil.toList(new File("groovySourceDir1"),new File("groovySourceDir2")));
  compile.existentDirsFilter=getGroovyCompileExistingDirsFilterMock();
  context.checking(new Expectations(){
{
      one(antJavacCompileMock).execute(testObj.getSrcDirs(),testObj.getIncludes(),testObj.getExcludes(),testObj.getDestinationDir(),TEST_DEPENDENCY_MANAGER_CLASSPATH,testObj.getSourceCompatibility(),testObj.getTargetCompatibility(),testObj.getOptions(),testObj.getProject().getAnt());
    }
  }
);
}
