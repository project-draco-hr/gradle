{
  final TestControlServer server=serverFactory.createTestControlServer(pipelineDispatcher);
  QueueingPipeline pipeline=forkInfo.getPipeline();
  NativeTest testTask=pipeline.getTestTask();
  int pipelineId=pipeline.getId();
  Project project=testTask.getProject();
  TestFrameworkInstance testFramework=testTask.getTestFramework();
  ForkConfigWriter forkConfigWriter=new ForkConfigWriter(testTask,pipelineId,forkInfo.getId(),server.getLocalAddress());
  File forkConfigFile=forkConfigWriter.writeConfigFile();
  ExecHandleBuilder forkHandleBuilder=new ExecHandleBuilder(false).execDirectory(project.getRootDir()).execCommand("java").errorOutputHandle(new DummyExecOutputHandle()).standardOutputHandle(new DummyExecOutputHandle());
  testFramework.applyForkJvmArguments(forkHandleBuilder);
  forkHandleBuilder.arguments("-cp",System.getProperty("gradle.fork.launcher.cp"),"org.gradle.api.testing.execution.fork.ForkLaunchMain",forkConfigFile.getAbsolutePath(),"org.gradle.api.testing.execution.control.client.TestForkExecuter");
  testFramework.applyForkArguments(forkHandleBuilder);
  ExecHandle forkHandle=forkHandleBuilder.getExecHandle();
  forkHandle.addListeners(new ForkControlListener(forkControl,forkInfo.getPipeline().getId(),forkInfo.getId()));
  forkHandle.addListeners(new ExecHandleListener(){
    public void executionStarted(    ExecHandle execHandle){
    }
    public void executionFinished(    ExecHandle execHandle){
      server.stop();
    }
  }
);
  forkHandle.start();
}
