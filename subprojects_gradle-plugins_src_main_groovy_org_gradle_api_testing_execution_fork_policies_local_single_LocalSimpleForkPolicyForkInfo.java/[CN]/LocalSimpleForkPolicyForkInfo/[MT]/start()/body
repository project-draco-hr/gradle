{
  final TestControlServer server=serverFactory.createTestControlServer(pipelineDispatcher);
  QueueingPipeline pipeline=forkInfo.getPipeline();
  NativeTest testTask=pipeline.getTestTask();
  int pipelineId=pipeline.getId();
  Project project=testTask.getProject();
  TestFrameworkInstance testFramework=testTask.getTestFramework();
  ForkConfigWriter forkConfigWriter=new ForkConfigWriter(testTask,pipelineId,forkInfo.getId(),server.getLocalAddress());
  byte[] forkConfigFile=forkConfigWriter.writeConfigFile();
  JavaExecHandleBuilder forkHandleBuilder=new JavaExecHandleBuilder().execDirectory(project.getProjectDir());
  forkHandleBuilder.mainClass(ForkLaunchMain.class.getName());
  forkHandleBuilder.jvmArguments("-cp",System.getProperty("gradle.fork.launcher.cp"));
  forkHandleBuilder.arguments(TestForkExecuter.class.getName());
  forkHandleBuilder.getCommand().standardInput(new ByteArrayInputStream(forkConfigFile));
  testFramework.applyForkArguments(forkHandleBuilder);
  ExecHandle forkHandle=forkHandleBuilder.build();
  forkHandle.addListener(new ForkControlListener(forkControl,forkInfo.getPipeline().getId(),forkInfo.getId()));
  forkHandle.addListener(new ExecHandleListener(){
    public void executionStarted(    ExecHandle execHandle){
    }
    public void executionFinished(    ExecHandle execHandle){
      server.stop();
    }
  }
);
  forkHandle.start();
}
