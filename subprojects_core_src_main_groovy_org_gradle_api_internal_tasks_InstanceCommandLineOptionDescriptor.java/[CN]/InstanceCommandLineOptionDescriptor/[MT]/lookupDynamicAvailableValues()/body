{
  for (Class<?> type=object.getClass(); type != Object.class && type != null; type=type.getSuperclass()) {
    for (    Method method : type.getDeclaredMethods()) {
      if (Collection.class.isAssignableFrom(method.getReturnType()) && method.getParameterTypes().length == 0) {
        OptionValues optionValues=method.getAnnotation(OptionValues.class);
        if (optionValues != null && optionValues.value()[0].equals(getName())) {
          final JavaMethod<Object,Object> methodToInvoke=JavaReflectionUtil.method(Object.class,Object.class,method);
          List values=(List)methodToInvoke.invoke(object);
          return CollectionUtils.stringize(values);
        }
      }
    }
  }
  return Collections.emptyList();
}
