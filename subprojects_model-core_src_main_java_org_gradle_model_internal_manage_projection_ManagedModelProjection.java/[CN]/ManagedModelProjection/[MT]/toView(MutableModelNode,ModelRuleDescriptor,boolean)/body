{
  return new ModelView<M>(){
    private boolean closed;
    private final Map<String,Object> propertyViews=new HashMap<String,Object>();
    @Override public ModelPath getPath(){
      return modelNode.getPath();
    }
    public ModelType<M> getType(){
      return ManagedModelProjection.this.getType();
    }
    public M getInstance(){
      return proxyFactory.createProxy(new State(),schema,bindings,typeConverter);
    }
    public void close(){
      closed=true;
    }
class State implements ModelElementState {
      @Override public MutableModelNode getBackingNode(){
        return modelNode;
      }
      @Override public String getDisplayName(){
        return String.format("%s '%s'",getType(),modelNode.getPath().toString());
      }
      @Override public boolean equals(      Object obj){
        if (obj == this) {
          return true;
        }
        if (obj == null || obj.getClass() != getClass()) {
          return false;
        }
        State other=Cast.uncheckedCast(obj);
        return modelNode == other.getBackingNode();
      }
      @Override public int hashCode(){
        return modelNode.hashCode();
      }
      public Object get(      String name){
        if (propertyViews.containsKey(name)) {
          return propertyViews.get(name);
        }
        ModelProperty<?> property=schema.getProperty(name);
        Object value=doGet(property,name);
        propertyViews.put(name,value);
        return value;
      }
      private <T>T doGet(      ModelProperty<T> property,      String propertyName){
        ModelType<T> propertyType=property.getType();
        MutableModelNode propertyNode=modelNode.getLink(propertyName);
        propertyNode.ensureUsable();
        ModelView<? extends T> modelView;
        ModelSchema<T> propertySchema=property.getSchema();
        if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) {
          Collection<?> instance=ScalarCollectionSchema.get(propertyNode);
          if (instance == null) {
            return null;
          }
        }
        if (writable) {
          modelView=propertyNode.asMutable(propertyType,ruleDescriptor);
          if (closed) {
            modelView.close();
          }
        }
 else {
          modelView=propertyNode.asImmutable(propertyType,ruleDescriptor);
        }
        return modelView.getInstance();
      }
      @Override public void apply(      String name,      Closure<?> action){
        ClosureBackedAction.execute(get(name),action);
      }
      public void set(      String name,      Object value){
        if (!writable || closed) {
          throw new ModelViewClosedException(getType(),ruleDescriptor);
        }
        ModelProperty<?> property=schema.getProperty(name);
        value=doSet(name,value,property);
        propertyViews.put(name,value);
      }
      private <T>Object doSet(      String name,      Object value,      ModelProperty<T> property){
        ModelSchema<T> propertySchema=property.getSchema();
        MutableModelNode propertyNode=modelNode.getLink(name);
        propertyNode.ensureUsable();
        if (propertySchema instanceof ManagedImplSchema) {
          if (value == null) {
            if (propertySchema instanceof ScalarCollectionSchema) {
              ScalarCollectionSchema.clear(propertyNode);
            }
 else {
              propertyNode.setTarget(null);
            }
          }
 else           if (ManagedInstance.class.isInstance(value)) {
            ManagedInstance managedInstance=(ManagedInstance)value;
            MutableModelNode targetNode=managedInstance.getBackingNode();
            propertyNode.setTarget(targetNode);
          }
 else           if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) {
            ModelView<? extends Collection<?>> modelView=propertyNode.asMutable(COLLECTION_MODEL_TYPE,ruleDescriptor);
            Collection<Object> instance=Cast.uncheckedCast(modelView.getInstance());
            Collection<Object> values=Cast.uncheckedCast(value);
            instance.clear();
            instance.addAll(values);
            return instance;
          }
 else {
            throw new IllegalArgumentException(String.format("Only managed model instances can be set as property '%s' of class '%s'",name,getType()));
          }
        }
 else {
          T castValue=Cast.uncheckedCast(value);
          propertyNode.setPrivateData(property.getType(),castValue);
        }
        return value;
      }
    }
  }
;
}
