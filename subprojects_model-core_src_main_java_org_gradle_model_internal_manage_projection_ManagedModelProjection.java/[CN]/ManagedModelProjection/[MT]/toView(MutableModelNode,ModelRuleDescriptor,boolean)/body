{
  return new ModelView<M>(){
    private boolean closed;
    private final Map<String,Object> propertyViews=new HashMap<String,Object>();
    @Override public ModelPath getPath(){
      return modelNode.getPath();
    }
    public ModelType<M> getType(){
      return ManagedModelProjection.this.getType();
    }
    public M getInstance(){
      return proxyFactory.createProxy(new State(),schema);
    }
    public void close(){
      closed=true;
    }
class State implements ModelElementState {
      @Override public MutableModelNode getBackingNode(){
        return modelNode;
      }
      @Override public String getDisplayName(){
        return String.format("%s '%s'",getType(),modelNode.getPath().toString());
      }
      public Object get(      String name){
        if (propertyViews.containsKey(name)) {
          return propertyViews.get(name);
        }
        ModelProperty<?> property=schema.getProperty(name);
        Object value=doGet(property,name);
        propertyViews.put(name,value);
        return value;
      }
      private <T>T doGet(      ModelProperty<T> property,      String propertyName){
        ModelType<T> propertyType=property.getType();
        MutableModelNode propertyNode=modelNode.getLink(propertyName);
        propertyNode.ensureUsable();
        if (writable) {
          ModelView<? extends T> modelView=propertyNode.asWritable(propertyType,ruleDescriptor,null);
          if (closed) {
            modelView.close();
          }
          return modelView.getInstance();
        }
 else {
          return propertyNode.asReadOnly(propertyType,ruleDescriptor).getInstance();
        }
      }
      public void set(      String name,      Object value){
        if (!writable || closed) {
          throw new ModelViewClosedException(getType(),ruleDescriptor);
        }
        ModelProperty<?> property=schema.getProperty(name);
        ModelType<?> propertyType=property.getType();
        doSet(name,value,propertyType);
        propertyViews.put(name,value);
      }
      private <T>void doSet(      String name,      Object value,      ModelType<T> propertyType){
        ModelSchema<T> propertySchema=schemaStore.getSchema(propertyType);
        MutableModelNode propertyNode=modelNode.getLink(name);
        propertyNode.ensureUsable();
        if (propertySchema.getKind().isManaged()) {
          if (value == null) {
            propertyNode.setTarget(null);
          }
 else           if (ManagedInstance.class.isInstance(value)) {
            ManagedInstance managedInstance=(ManagedInstance)value;
            MutableModelNode targetNode=managedInstance.getBackingNode();
            propertyNode.setTarget(targetNode);
          }
 else {
            throw new IllegalArgumentException(String.format("Only managed model instances can be set as property '%s' of class '%s'",name,getType()));
          }
        }
 else {
          T castValue=Cast.uncheckedCast(value);
          propertyNode.setPrivateData(propertyType,castValue);
        }
      }
    }
  }
;
}
