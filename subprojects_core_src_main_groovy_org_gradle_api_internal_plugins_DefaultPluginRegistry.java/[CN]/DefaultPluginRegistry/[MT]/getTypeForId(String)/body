{
  if (parent != null) {
    try {
      return parent.getTypeForId(pluginId);
    }
 catch (    UnknownPluginException e) {
    }
  }
  Class<? extends Plugin> implClass=idMappings.get(pluginId);
  if (implClass != null) {
    return implClass;
  }
  ClassLoader classLoader=this.classLoaderFactory.create();
  URL resource=classLoader.getResource(String.format("META-INF/gradle-plugins/%s.properties",pluginId));
  if (resource == null) {
    throw new UnknownPluginException("Plugin with id '" + pluginId + "' not found.");
  }
  Properties properties=GUtil.loadProperties(resource);
  String implClassName=properties.getProperty("implementation-class");
  if (!GUtil.isTrue(implClassName)) {
    throw new PluginInstantiationException(String.format("No implementation class specified for plugin '%s' in %s.",pluginId,resource));
  }
  try {
    Class<?> rawClass=classLoader.loadClass(implClassName);
    if (!Plugin.class.isAssignableFrom(rawClass)) {
      throw new PluginInstantiationException(String.format("Implementation class '%s' specified for plugin '%s' does not implement the Plugin interface. Specified in %s.",implClassName,pluginId,resource));
    }
    implClass=rawClass.asSubclass(Plugin.class);
  }
 catch (  ClassNotFoundException e) {
    throw new PluginInstantiationException(String.format("Could not find implementation class '%s' for plugin '%s' specified in %s.",implClassName,pluginId,resource),e);
  }
  idMappings.put(pluginId,implClass);
  return implClass;
}
