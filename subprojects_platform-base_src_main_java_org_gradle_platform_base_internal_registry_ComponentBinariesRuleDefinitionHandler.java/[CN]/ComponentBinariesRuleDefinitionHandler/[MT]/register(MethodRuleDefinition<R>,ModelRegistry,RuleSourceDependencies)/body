{
  try {
    verifyMethodSignature(ruleDefinition);
    final Class<? extends BinarySpec> binaryType=(Class<? extends BinarySpec>)ruleDefinition.getReferences().get(0).getType().getTypeVariables().get(0).getConcreteClass();
    final Class<? extends ComponentSpec> componentType=getComponentType(binaryType,ruleDefinition);
    dependencies.add(ComponentModelBasePlugin.class);
    final ModelReference<CollectionBuilder<? extends BinarySpec>> subject=ModelReference.of(ModelPath.path("binaries"),new ModelType<CollectionBuilder<? extends BinarySpec>>(){
    }
);
    if (componentType != null) {
      modelRegistry.mutate(new ComponentBinariesRule(subject,componentType,binaryType,ruleDefinition,modelRegistry));
    }
  }
 catch (  InvalidComponentModelException e) {
    invalidModelRule(ruleDefinition,e);
  }
}
