{
  try {
    RuleMethodDataCollector dataCollector=new RuleMethodDataCollector();
    visitAndVerifyMethodSignature(dataCollector,ruleDefinition);
    final Class<? extends BinarySpec> binaryType=dataCollector.getParameterType(BinarySpec.class);
    final Class<? extends ComponentSpec> componentType=dataCollector.getParameterType(ComponentSpec.class);
    validateComponentType(binaryType,componentType);
    dependencies.add(ComponentModelBasePlugin.class);
    final ModelReference<CollectionBuilder<? extends BinarySpec>> subject=ModelReference.of(ModelPath.path("binaries"),new ModelType<CollectionBuilder<? extends BinarySpec>>(){
    }
);
    modelRegistry.mutate(new ComponentBinariesRule(subject,componentType,binaryType,ruleDefinition,modelRegistry));
  }
 catch (  InvalidComponentModelException e) {
    invalidModelRule(ruleDefinition,e);
  }
}
