{
  try {
    RuleMethodDataCollector dataCollector=new RuleMethodDataCollector();
    visitAndVerifyMethodSignature(dataCollector,ruleDefinition);
    final Class<S> binaryType=dataCollector.getParameterType(BinarySpec.class);
    final Class<? extends ComponentSpec<S>> componentType=dataCollector.getParameterType(ComponentSpec.class);
    validateComponentType(binaryType,componentType);
    dependencies.add(ComponentModelBasePlugin.class);
    final ModelReference<BinaryContainer> subject=ModelReference.of(ModelPath.path("binaries"),new ModelType<BinaryContainer>(){
    }
);
    configureMutationRule(modelRegistry,subject,componentType,binaryType,ruleDefinition);
  }
 catch (  InvalidComponentModelException e) {
    invalidModelRule(ruleDefinition,e);
  }
}
