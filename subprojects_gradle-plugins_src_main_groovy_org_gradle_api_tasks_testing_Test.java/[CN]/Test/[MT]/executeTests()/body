{
  overwriteIncludesIfSinglePropertyIsSet();
  final WorkerProcessFactory workerFactory=getServices().get(WorkerProcessFactory.class);
  final TestFrameworkInstance testFrameworkInstance=getTestFramework();
  final WorkerTestClassProcessorFactory testInstanceFactory=testFrameworkInstance.getProcessorFactory();
  final TestClassProcessorFactory forkingProcessorFactory=new TestClassProcessorFactory(){
    public TestClassProcessor create(){
      return new ForkingTestClassProcessor(workerFactory,testInstanceFactory,options,getClasspath(),testFrameworkInstance.getWorkerConfigurationAction());
    }
  }
;
  TestClassProcessorFactory reforkingProcessorFactory=new TestClassProcessorFactory(){
    public TestClassProcessor create(){
      return new RestartEveryNTestClassProcessor(forkingProcessorFactory,getForkEvery());
    }
  }
;
  TestClassProcessor processor=new MaxNParallelTestClassProcessor(getMaxParallelForks(),reforkingProcessorFactory,getServices().get(ActorFactory.class));
  TestSummaryListener listener=new TestSummaryListener(LoggerFactory.getLogger(Test.class));
  addTestListener(listener);
  addTestListener(new TestLogger(getServices().get(ProgressLoggerFactory.class)));
  TestResultProcessor resultProcessor=new TestListenerAdapter(getTestListenerBroadcaster().getSource());
  Runnable testClassScanner=testClassScannerFactory.createTestClassScanner(this,processor,resultProcessor);
  testClassScanner.run();
  testFrameworkInstance.report();
  if (!isIgnoreFailures() && listener.hadFailures()) {
    throw new GradleException("There were failing tests. See the report at " + getTestReportDir() + ".");
  }
}
