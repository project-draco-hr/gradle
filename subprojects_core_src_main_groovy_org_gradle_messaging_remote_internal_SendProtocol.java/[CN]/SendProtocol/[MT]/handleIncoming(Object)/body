{
  if (message instanceof ConsumerAvailable) {
    LOGGER.debug("Consumer available: {}",message);
    ConsumerAvailable consumerAvailable=(ConsumerAvailable)message;
    pending.put(consumerAvailable.getId(),consumerAvailable);
    consumers.add(consumerAvailable.getId());
    context.dispatchOutgoing(new ProducerReady(id,consumerAvailable.getId(),displayName));
  }
 else   if (message instanceof ConsumerReady) {
    LOGGER.debug("Consumer ready: {}",message);
    ConsumerReady consumerReady=(ConsumerReady)message;
    context.dispatchIncoming(pending.remove(consumerReady.getConsumerId()));
  }
 else   if (message instanceof ConsumerStopping) {
    LOGGER.debug("Consumer stopping: {}",message);
    ConsumerStopping consumerStopping=(ConsumerStopping)message;
    context.dispatchIncoming(new ConsumerUnavailable(consumerStopping.getConsumerId()));
    context.dispatchOutgoing(new ProducerStopped(id,consumerStopping.getConsumerId()));
  }
 else   if (message instanceof ConsumerStopped) {
    LOGGER.debug("Consumer stopped: {}",message);
    ConsumerStopped consumerStopped=(ConsumerStopped)message;
    consumers.remove(consumerStopped.getConsumerId());
    if (consumers.isEmpty() && stopping) {
      LOGGER.debug("All consumers stopped. Stopping.");
      context.stopped();
    }
  }
 else   if (message instanceof ConsumerUnavailable) {
    LOGGER.debug("Consumer unavailable: {}",message);
    ConsumerUnavailable consumerUnavailable=(ConsumerUnavailable)message;
    consumers.remove(consumerUnavailable.getId());
    if (pending.remove(consumerUnavailable.getId()) == null) {
      context.dispatchIncoming(new ConsumerUnavailable(consumerUnavailable.getId()));
    }
    if (consumers.isEmpty() && stopping) {
      LOGGER.debug("All consumers stopped. Stopping.");
      context.stopped();
    }
  }
 else {
    throw new IllegalArgumentException(String.format("Unexpected incoming message received: %s",message));
  }
}
