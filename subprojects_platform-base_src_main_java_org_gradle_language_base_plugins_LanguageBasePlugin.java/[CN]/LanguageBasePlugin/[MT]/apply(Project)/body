{
  target.getPluginManager().apply(LifecycleBasePlugin.class);
  target.getExtensions().create("sources",DefaultProjectSourceSet.class);
  DefaultBinaryContainer binaries=target.getExtensions().create("binaries",DefaultBinaryContainer.class,instantiator);
  String descriptor=getClass().getName() + ".apply()";
  final ModelRuleDescriptor ruleDescriptor=new SimpleModelRuleDescriptor(descriptor);
  final ModelPath binariesPath=ModelPath.path("binaries");
  BridgedCollections.dynamicTypes(modelRegistry,binariesPath,descriptor,ModelType.of(DefaultBinaryContainer.class),ModelType.of(DefaultBinaryContainer.class),ModelType.of(BinarySpec.class),binaries,Named.Namer.INSTANCE,BridgedCollections.itemDescriptor(descriptor));
  final ModelAction<?> eachBinaryAction=BiActionBackedModelAction.single(ModelReference.of(BinarySpec.class),ruleDescriptor,ModelReference.of(ITaskFactory.class),new BiAction<BinarySpec,ITaskFactory>(){
    @Override public void execute(    BinarySpec binary,    ITaskFactory taskFactory){
      if (!((BinarySpecInternal)binary).isLegacyBinary()) {
        TaskInternal binaryLifecycleTask=taskFactory.create(binary.getName(),DefaultTask.class);
        binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
        binaryLifecycleTask.setDescription(String.format("Assembles %s.",binary));
        binary.setBuildTask(binaryLifecycleTask);
      }
    }
  }
);
  ModelReference<BinaryContainer> binaryContainerReference=ModelReference.of(binariesPath,BinaryContainer.class);
  modelRegistry.configure(ModelActionRole.Defaults,DirectNodeModelAction.of(binaryContainerReference,ruleDescriptor,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode binariesNode){
      binariesNode.applyToAllLinks(ModelActionRole.Finalize,eachBinaryAction);
    }
  }
));
  SimpleModelRuleDescriptor copyTasksDescriptor=new SimpleModelRuleDescriptor("LanguageBasePlugin.apply().copyTasks");
  modelRegistry.configure(ModelActionRole.Mutate,DirectNodeModelAction.of(TaskContainerInternal.MODEL_PATH,copyTasksDescriptor,binaryContainerReference,new BiAction<MutableModelNode,BinaryContainer>(){
    @Override public void execute(    MutableModelNode modelNode,    BinaryContainer binaryContainer){
      for (      BinarySpec binarySpec : binaryContainer) {
        if (((BinarySpecInternal)binarySpec).isLegacyBinary()) {
          continue;
        }
        for (        Task task : binarySpec.getTasks()) {
          addTaskNode(modelNode,binariesPath,binarySpec.getName(),task.getName(),getTaskType(task));
        }
        Task buildTask=binarySpec.getBuildTask();
        if (buildTask != null) {
          addBuildTaskNode(modelNode,binariesPath,binarySpec.getName(),buildTask.getName(),getTaskType(buildTask));
        }
      }
    }
    public ModelType<? extends Task> getTaskType(    Task buildTask){
      return Cast.uncheckedCast(ModelType.of(buildTask.getClass().getSuperclass()));
    }
    public <T extends Task>void addTaskNode(    MutableModelNode modelNode,    ModelPath binariesPath,    String binaryName,    final String taskName,    final ModelType<T> type){
      ModelPath path=TaskContainerInternal.MODEL_PATH.child(taskName);
      ModelReference<T> reference=ModelReference.of(path,type);
      ModelCreator creator=ModelCreators.of(reference,new BiAction<MutableModelNode,List<ModelView<?>>>(){
        @Override public void execute(        MutableModelNode modelNode,        List<ModelView<?>> modelViews){
          BinarySpec binary=ModelViews.getInstance(modelViews.get(0),BinarySpec.class);
          modelNode.setPrivateData(type,type.cast(binary.getTasks().get(taskName)));
        }
      }
).descriptor("LanguageBasePlugin.apply().addTaskNode." + taskName).withProjection(new UnmanagedModelProjection<T>(type)).inputs(ModelReference.of(binariesPath.child(binaryName),BinarySpec.class)).build();
      modelNode.addLink(creator);
    }
    public <T extends Task>void addBuildTaskNode(    MutableModelNode modelNode,    ModelPath binariesPath,    String binaryName,    String taskName,    final ModelType<T> type){
      ModelPath path=TaskContainerInternal.MODEL_PATH.child(taskName);
      ModelReference<T> reference=ModelReference.of(path,type);
      ModelCreator creator=ModelCreators.of(reference,new BiAction<MutableModelNode,List<ModelView<?>>>(){
        @Override public void execute(        MutableModelNode modelNode,        List<ModelView<?>> modelViews){
          BinarySpec binary=ModelViews.getInstance(modelViews.get(0),BinarySpec.class);
          T buildTask=type.cast(binary.getBuildTask());
          modelNode.setPrivateData(type,buildTask);
        }
      }
).descriptor("LanguageBasePlugin.apply().addBuildTaskNode." + taskName).inputs(ModelReference.of(binariesPath.child(binaryName),BinarySpec.class)).withProjection(new UnmanagedModelProjection<T>(type)).build();
      modelNode.addLink(creator);
    }
  }
));
}
