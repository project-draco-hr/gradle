{
  target.getPluginManager().apply(LifecycleBasePlugin.class);
  target.getExtensions().create("sources",DefaultProjectSourceSet.class);
  DefaultBinaryContainer binaries=target.getExtensions().create("binaries",DefaultBinaryContainer.class,instantiator);
  String descriptor=getClass().getName() + ".apply()";
  final ModelRuleDescriptor ruleDescriptor=new SimpleModelRuleDescriptor(descriptor);
  ModelPath binariesPath=ModelPath.path("binaries");
  modelRegistry.create(BridgedCollections.dynamicTypes(ModelType.of(DefaultBinaryContainer.class),ModelType.of(DefaultBinaryContainer.class),ModelType.of(BinarySpec.class),binariesPath,binaries,Named.Namer.INSTANCE,descriptor,BridgedCollections.itemDescriptor(descriptor)));
  modelRegistry.apply(ModelPath.ROOT,ModelActionRole.Defaults,DirectNodeModelAction.of(ModelReference.of(binariesPath),ruleDescriptor,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode binariesNode){
      binariesNode.applyToAllLinks(ModelActionRole.Finalize,ActionBackedModelAction.of(ModelReference.of(BinarySpec.class),ruleDescriptor,new Action<BinarySpec>(){
        @Override public void execute(        BinarySpec binary){
          if (!((BinarySpecInternal)binary).isLegacyBinary()) {
            TaskInternal binaryLifecycleTask=taskFactory.create(binary.getName(),DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format("Assembles %s.",binary));
            binary.setBuildTask(binaryLifecycleTask);
          }
        }
      }
));
    }
  }
));
}
