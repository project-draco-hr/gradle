{
  final String descriptor=LanguageBasePlugin.class.getSimpleName() + ".apply()";
  final ModelRuleDescriptor ruleDescriptor=new SimpleModelRuleDescriptor(descriptor);
  ModelPath binariesPath=ModelPath.path("binaries");
  SpecializedMapSchema<BinaryContainer> schema=(SpecializedMapSchema<BinaryContainer>)schemaStore.getSchema(ModelType.of(BinaryContainer.class));
  modelRegistry.createOrReplace(ModelMapCreators.specialized(binariesPath,BinarySpec.class,BinaryContainer.class,schema.getImplementationType().asSubclass(BinaryContainer.class),ruleDescriptor));
  modelRegistry.configure(ModelActionRole.Defaults,DirectNodeNoInputsModelAction.of(ModelReference.of(binariesPath),ruleDescriptor,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode binariesNode){
      binariesNode.applyToAllLinks(ModelActionRole.Finalize,InputUsingModelAction.single(ModelReference.of(BinarySpec.class),ruleDescriptor,ModelReference.of(ITaskFactory.class),new BiAction<BinarySpec,ITaskFactory>(){
        @Override public void execute(        BinarySpec binary,        ITaskFactory taskFactory){
          BinarySpecInternal binarySpecInternal=(BinarySpecInternal)binary;
          if (!binarySpecInternal.isLegacyBinary()) {
            TaskInternal binaryLifecycleTask=taskFactory.create(binarySpecInternal.getProjectScopedName(),DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format("Assembles %s.",binary));
            binary.setBuildTask(binaryLifecycleTask);
          }
        }
      }
));
    }
  }
));
  modelRegistry.getRoot().applyToAllLinksTransitive(ModelActionRole.Defaults,DirectNodeNoInputsModelAction.of(ModelReference.of(BinarySpec.class),new SimpleModelRuleDescriptor(descriptor),ComponentSpecInitializer.binaryAction()));
}
