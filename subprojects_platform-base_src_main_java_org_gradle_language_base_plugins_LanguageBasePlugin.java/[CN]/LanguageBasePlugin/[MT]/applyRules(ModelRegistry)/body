{
  DefaultBinaryContainer binaries=instantiator.newInstance(DefaultBinaryContainer.class,instantiator);
  final String descriptor=LanguageBasePlugin.class.getSimpleName() + ".apply()";
  final ModelRuleDescriptor ruleDescriptor=new SimpleModelRuleDescriptor(descriptor);
  ModelPath binariesPath=ModelPath.path("binaries");
  ModelType<BinarySpec> binarySpecModelType=ModelType.of(BinarySpec.class);
  modelRegistry.createOrReplace(BridgedCollections.creator(ModelReference.of(binariesPath,DefaultBinaryContainer.class),Transformers.constant(binaries),Named.Namer.INSTANCE,descriptor,BridgedCollections.itemDescriptor(descriptor)).descriptor(descriptor).ephemeral(true).withProjection(PolymorphicModelMapProjection.of(binarySpecModelType,ChildNodeInitializerStrategyAccessors.of(NodeBackedModelMap.createUsingParentNode(binarySpecModelType)))).withProjection(UnmanagedModelProjection.of(DefaultBinaryContainer.class)).build());
  modelRegistry.configure(ModelActionRole.Defaults,DirectNodeNoInputsModelAction.of(ModelReference.of(binariesPath),ruleDescriptor,new Action<MutableModelNode>(){
    @Override public void execute(    MutableModelNode binariesNode){
      binariesNode.applyToAllLinks(ModelActionRole.Finalize,InputUsingModelAction.single(ModelReference.of(BinarySpec.class),ruleDescriptor,ModelReference.of(ITaskFactory.class),new BiAction<BinarySpec,ITaskFactory>(){
        @Override public void execute(        BinarySpec binary,        ITaskFactory taskFactory){
          BinarySpecInternal binarySpecInternal=(BinarySpecInternal)binary;
          if (!binarySpecInternal.isLegacyBinary()) {
            TaskInternal binaryLifecycleTask=taskFactory.create(binarySpecInternal.getProjectScopedName(),DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format("Assembles %s.",binary));
            binary.setBuildTask(binaryLifecycleTask);
          }
        }
      }
));
    }
  }
));
  modelRegistry.getRoot().applyToAllLinksTransitive(ModelActionRole.Defaults,DirectNodeNoInputsModelAction.of(ModelReference.of(BinarySpec.class),new SimpleModelRuleDescriptor(descriptor),ComponentSpecInitializer.binaryAction()));
}
