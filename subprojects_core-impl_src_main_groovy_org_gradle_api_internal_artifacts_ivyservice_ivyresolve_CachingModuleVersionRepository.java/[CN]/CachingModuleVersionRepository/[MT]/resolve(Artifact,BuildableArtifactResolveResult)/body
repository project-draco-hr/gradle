{
  ArtifactAtRepositoryKey resolutionCacheIndexKey=new ArtifactAtRepositoryKey(delegate,artifact.getId());
  CachedArtifact cached=artifactAtRepositoryCachedResolutionIndex.lookup(resolutionCacheIndexKey);
  final ModuleDescriptorCache.CachedModuleDescriptor cachedModuleDescriptor=moduleDescriptorCache.getCachedModuleDescriptor(delegate,artifact.getModuleRevisionId());
  final BigInteger descriptorHash=cachedModuleDescriptor == null ? BigInteger.valueOf(-1) : cachedModuleDescriptor.getDescriptorHash();
  if (cached != null) {
    ArtifactIdentifier artifactIdentifier=createArtifactIdentifier(artifact);
    long age=timeProvider.getCurrentTime() - cached.getCachedAt();
    if (cached.isMissing()) {
      if (!cachePolicy.mustRefreshArtifact(artifactIdentifier,null,age,descriptorHash == cached.getDescriptorHash())) {
        LOGGER.debug("Detected non-existence of artifact '{}' in resolver cache",artifact.getId());
        result.notFound(artifact);
        return;
      }
    }
 else {
      File cachedArtifactFile=cached.getCachedFile();
      if (!cachePolicy.mustRefreshArtifact(artifactIdentifier,cachedArtifactFile,age,descriptorHash == cached.getDescriptorHash())) {
        LOGGER.debug("Found artifact '{}' in resolver cache: {}",artifact.getId(),cachedArtifactFile);
        result.resolved(cachedArtifactFile,null);
        return;
      }
    }
  }
  delegate.resolve(artifact,result);
  LOGGER.debug("Downloaded artifact '{}' from resolver: {}",artifact.getId(),delegate);
  if (result.getFailure() instanceof ArtifactNotFoundException) {
    artifactAtRepositoryCachedResolutionIndex.storeMissing(resolutionCacheIndexKey,descriptorHash);
  }
 else {
    artifactAtRepositoryCachedResolutionIndex.store(resolutionCacheIndexKey,result.getFile(),descriptorHash);
  }
}
