{
  DependencyMetaData forced=dependency.withChanging();
  delegate.getDependency(forced,result);
switch (result.getState()) {
case Missing:
    ModuleRevisionId dependencyRevisionId=dependency.getDescriptor().getDependencyRevisionId();
  ModuleVersionIdentifier moduleVersionIdentifier=DefaultModuleVersionIdentifier.newId(dependencyRevisionId);
moduleMetaDataCache.cacheMissing(delegate,moduleVersionIdentifier,dependency.isChanging());
break;
case Resolved:
MutableModuleVersionMetaData metaData=result.getMetaData();
if (dependency.isChanging()) {
metaData.setChanging(true);
}
moduleResolutionCache.cacheModuleResolution(delegate,dependency.getRequested(),metaData.getId());
ModuleSource moduleSource=result.getModuleSource();
ModuleMetaDataCache.CachedMetaData cachedMetaData=moduleMetaDataCache.cacheMetaData(delegate,metaData,moduleSource);
result.setModuleSource(new CachingModuleSource(cachedMetaData.getDescriptorHash(),cachedMetaData.isChangingModule(),moduleSource));
break;
case Failed:
break;
default :
throw new IllegalStateException("Unexpected resolve state: " + result.getState());
}
}
