{
  DependencyMetaData forced=dependency.withChanging();
  delegate.getDependency(forced,result);
switch (result.getState()) {
case Missing:
    final ModuleRevisionId dependencyRevisionId=dependency.getDescriptor().getDependencyRevisionId();
  final ModuleVersionIdentifier moduleVersionIdentifier=DefaultModuleVersionIdentifier.newId(dependencyRevisionId);
moduleDescriptorCache.cacheModuleDescriptor(delegate,moduleVersionIdentifier,null,null,dependency.isChanging());
break;
case Resolved:
ModuleVersionMetaData metaData=result.getMetaData();
moduleResolutionCache.cacheModuleResolution(delegate,dependency.getRequested(),metaData.getId());
final ModuleSource moduleSource=result.getModuleSource();
final ModuleDescriptorCache.CachedModuleDescriptor cachedModuleDescriptor=moduleDescriptorCache.cacheModuleDescriptor(delegate,metaData.getId(),metaData.getDescriptor(),moduleSource,isChangingDependency(dependency,metaData));
result.setModuleSource(new CachingModuleSource(cachedModuleDescriptor.getDescriptorHash(),cachedModuleDescriptor.isChangingModule(),moduleSource));
break;
case Failed:
break;
default :
throw new IllegalStateException("Unexpected resolve state: " + result.getState());
}
}
