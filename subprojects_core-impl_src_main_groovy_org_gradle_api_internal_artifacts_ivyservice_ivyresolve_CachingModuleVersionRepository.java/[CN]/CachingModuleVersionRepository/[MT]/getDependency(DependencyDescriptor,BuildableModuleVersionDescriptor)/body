{
  delegate.getDependency(ForceChangeDependencyDescriptor.forceChangingFlag(dependencyDescriptor,true),result);
switch (result.getState()) {
case Missing:
    final ModuleRevisionId dependencyRevisionId=dependencyDescriptor.getDependencyRevisionId();
  final DefaultModuleVersionIdentifier moduleVersionIdentifier=new DefaultModuleVersionIdentifier(dependencyRevisionId.getOrganisation(),dependencyRevisionId.getName(),dependencyRevisionId.getRevision());
moduleDescriptorCache.cacheModuleDescriptor(delegate,moduleVersionIdentifier,null,null,dependencyDescriptor.isChanging());
break;
case Resolved:
moduleResolutionCache.cacheModuleResolution(delegate,dependencyDescriptor.getDependencyRevisionId(),result.getId());
final ModuleSource moduleSource=result.getModuleSource();
final ModuleDescriptorCache.CachedModuleDescriptor cachedModuleDescriptor=moduleDescriptorCache.cacheModuleDescriptor(delegate,result.getId(),result.getDescriptor(),moduleSource,isChangingDependency(dependencyDescriptor,result));
result.resolved(result.getDescriptor(),result.isChanging(),new CachingModuleSource(cachedModuleDescriptor.getDescriptorHash(),cachedModuleDescriptor.isChangingModule(),moduleSource));
break;
case Failed:
break;
default :
throw new IllegalStateException("Unexpected resolve state: " + result.getState());
}
}
