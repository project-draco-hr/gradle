{
  project=HelperUtil.createRootProject(new File("root"));
  dependencyProjectModuleRevisionId=new ModuleRevisionId(new ModuleId("org","otherproject"),"1.0");
  dependencyProjectArtifactProductionTaskName="somename";
  mockDependencyManager=context.mock(DependencyManager.class);
  context.checking(new Expectations(){
{
      allowing(mockDependencyManager).createModuleRevisionId();
      will(returnValue(dependencyProjectModuleRevisionId));
      allowing(mockDependencyManager).getArtifactProductionTaskName();
      will(returnValue(dependencyProjectArtifactProductionTaskName));
    }
  }
);
  dependencyProject=HelperUtil.createRootProject(new File("dependency"));
  ((AbstractProject)dependencyProject).setDependencies(mockDependencyManager);
  dependencyProject.createTask(dependencyProjectArtifactProductionTaskName);
  projectDependency=new DefaultProjectDependency(TEST_CONF_MAPPING,dependencyProject,project);
  super.setUp();
  dependencyDescriptorFactoryMock=context.mock(DependencyDescriptorFactory.class);
  projectDependency.setDependencyDescriptorFactory(dependencyDescriptorFactoryMock);
}
