{
  DefaultLocalComponentMetaData compositeComponentMetadata=new DefaultLocalComponentMetaData(originalComponentMetadata.getId(),componentIdentifier,originalComponentMetadata.getStatus());
  for (  String configurationName : originalComponentMetadata.getConfigurationNames()) {
    LocalConfigurationMetaData originalConfiguration=originalComponentMetadata.getConfiguration(configurationName);
    TaskDependency configurationTaskDependency=createTaskDependency(componentIdentifier.getProjectPath(),originalConfiguration);
    compositeComponentMetadata.addConfiguration(configurationName,originalConfiguration.getDescription(),originalConfiguration.getExtendsFrom(),originalConfiguration.getHierarchy(),originalConfiguration.isVisible(),originalConfiguration.isTransitive(),configurationTaskDependency);
    Set<ComponentArtifactMetaData> artifacts=originalConfiguration.getArtifacts();
    Set<PublishArtifact> detachedArtifacts=CollectionUtils.collect(artifacts,new Transformer<PublishArtifact,ComponentArtifactMetaData>(){
      @Override public PublishArtifact transform(      ComponentArtifactMetaData componentArtifactMetaData){
        return new DetachedPublishArtifact(componentArtifactMetaData.getName(),((LocalComponentArtifactIdentifier)componentArtifactMetaData).getFile());
      }
    }
);
    compositeComponentMetadata.addArtifacts(configurationName,detachedArtifacts);
  }
  for (  DependencyMetaData dependency : originalComponentMetadata.getDependencies()) {
    compositeComponentMetadata.addDependency(dependency);
  }
  for (  ExcludeRule excludeRule : originalComponentMetadata.getExcludeRules()) {
    compositeComponentMetadata.addExcludeRule(excludeRule);
  }
  return compositeComponentMetadata;
}
