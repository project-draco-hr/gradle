{
  if (isPublicAPI(access)) {
    final String fieldDescriptor=prettifyFieldDescriptor(access,name,desc);
    Set<String> invalidReferencedTypes=invalidReferencedTypes(signature);
    if (!invalidReferencedTypes.isEmpty()) {
      if (invalidReferencedTypes.size() == 1) {
        throw new InvalidPublicAPIException(String.format("Field '%s' references disallowed API type '%s'",fieldDescriptor,invalidReferencedTypes.iterator().next()));
      }
 else {
        StringBuilder sb=new StringBuilder("The following types are referenced in ");
        sb.append(fieldDescriptor);
        sb.append(" but their package is not one of the allowed packages:\n");
        for (        String invalidReferencedType : invalidReferencedTypes) {
          sb.append("   - ").append(invalidReferencedType).append("\n");
        }
        throw new InvalidPublicAPIException(sb.toString());
      }
    }
    return new FieldVisitor(Opcodes.ASM5,cv.visitField(access,name,desc,signature,value)){
      @Override public AnnotationVisitor visitAnnotation(      String annotationDesc,      boolean visible){
        checkAnnotation(fieldDescriptor,annotationDesc);
        return super.visitAnnotation(annotationDesc,visible);
      }
    }
;
  }
  return null;
}
