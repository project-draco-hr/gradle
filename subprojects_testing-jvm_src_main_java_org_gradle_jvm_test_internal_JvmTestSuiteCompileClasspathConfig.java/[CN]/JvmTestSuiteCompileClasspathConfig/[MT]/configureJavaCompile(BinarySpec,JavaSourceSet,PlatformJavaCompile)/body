{
  if (spec instanceof JvmTestSuiteBinarySpec) {
    JvmTestSuiteBinarySpec testSuiteBinary=(JvmTestSuiteBinarySpec)spec;
    JvmBinarySpec testedBinary=testSuiteBinary.getTestedBinary();
    if (testedBinary instanceof JarBinarySpecInternal) {
      FileCollection classpath=javaCompile.getClasspath();
      JvmAssembly assembly=((WithJvmAssembly)testedBinary).getAssembly();
      ArtifactDependencyResolver dependencyResolver=serviceRegistry.get(ArtifactDependencyResolver.class);
      RepositoryHandler repositories=serviceRegistry.get(RepositoryHandler.class);
      List<ResolutionAwareRepository> resolutionAwareRepositories=CollectionUtils.collect(repositories,Transformers.cast(ResolutionAwareRepository.class));
      JvmComponentSpec testedComponent=JvmTestSuites.getTestedComponent(serviceRegistry,testSuiteBinary.getTestSuite().getTestedComponent());
      BaseDependencyResolvingClasspath transitiveCompileClasspath=new BaseDependencyResolvingClasspath((BinarySpecInternal)testedBinary,"test suite",dependencyResolver,resolutionAwareRepositories,new LocalComponentResolveContext(((BinarySpecInternal)testedBinary).getId(),DefaultVariantsMetaData.extractFrom(testedBinary,schemaStore),collectDependencies(testedBinary,testedComponent,((JarBinarySpecInternal)testedBinary).getApiDependencies()),UsageKind.API,testedBinary.getDisplayName()));
      FileCollection fullClasspath=new UnionFileCollection(classpath,transitiveCompileClasspath,new SimpleFileCollection(assembly.getClassDirectories()));
      javaCompile.setClasspath(fullClasspath);
      javaCompile.dependsOn(((WithJvmAssembly)testedBinary).getAssembly());
    }
  }
}
