{
  final String configName=configuration.getName();
  final String taskName="testit";
  final Task tdTask=context.mock(Task.class,"tdTask");
  final Project taskProject=context.mock(Project.class,"taskProject");
  final Project rootProject=context.mock(Project.class,"rootProject");
  final Project dependentProject=context.mock(Project.class,"dependentProject");
  final Task desiredTask=context.mock(Task.class,"desiredTask");
  final Set<Task> taskSet=toSet(desiredTask);
  final ConfigurationContainer configurationContainer=context.mock(ConfigurationContainer.class);
  context.checking(new Expectations(){
{
      allowing(tdTask).getProject();
      will(returnValue(taskProject));
      allowing(taskProject).getRootProject();
      will(returnValue(rootProject));
      allowing(rootProject).getTasksByName(taskName,true);
      will(returnValue(taskSet));
      allowing(desiredTask).getProject();
      will(returnValue(dependentProject));
      allowing(dependentProject).getConfigurations();
      will(returnValue(configurationContainer));
      allowing(configurationContainer).findByName(configName);
      will(returnValue(null));
    }
  }
);
  TaskDependency td=configuration.getTaskDependencyFromProjectDependency(false,taskName);
  assertThat(td.getDependencies(tdTask),equalTo(Collections.EMPTY_SET));
}
