{
  DefaultServiceRegistry services=new DefaultServiceRegistry();
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(ScriptHandlerFactory.class,scriptHandlerFactory);
  services.add(LoggingManagerInternal.class,loggingManagerFactory.create());
  services.add(Instantiator.class,instantiator);
  services.add(ScriptHandlerInternal.class,scriptHandler);
  ScriptAware scriptAware=null;
  if (target instanceof ScriptAware) {
    scriptAware=(ScriptAware)target;
    scriptAware.beforeCompile(this);
  }
  ScriptClassLoaderProvider classLoaderProvider=scriptHandler;
  ScriptSource withImports=importsReader.withImports(scriptSource);
  List<PluginRequest> pluginRequests=new LinkedList<PluginRequest>();
  if (target instanceof PluginAware) {
    services.add(PluginHandler.class,new DefaultPluginHandler(pluginRequests));
  }
 else {
    services.add(PluginHandler.class,new NonPluggableTargetPluginHandler(target));
  }
  ScriptCompiler compiler=scriptCompilerFactory.createCompiler(withImports);
  compiler.setClassloader(classLoaderProvider.getBaseCompilationClassLoader());
  PluginsAndBuildscriptTransformer scriptBlockTransformer=new PluginsAndBuildscriptTransformer(classpathClosureName);
  StatementExtractingScriptTransformer classpathScriptTransformer=new StatementExtractingScriptTransformer(classpathClosureName,scriptBlockTransformer);
  compiler.setTransformer(classpathScriptTransformer);
  ScriptRunner<? extends BasicScript> classPathScriptRunner=compiler.compile(scriptType);
  classPathScriptRunner.getScript().init(target,services);
  classPathScriptRunner.run();
  classLoaderProvider.updateClassPath();
  ClassLoader scriptCompileClassLoader=classLoaderProvider.getScriptCompileClassLoader();
  if (!pluginRequests.isEmpty()) {
    PluginResolver pluginResolver=pluginResolverFactory.createPluginResolver(scriptCompileClassLoader);
    MultiParentClassLoader pluginsClassLoader=new MultiParentClassLoader(scriptCompileClassLoader);
    @SuppressWarnings("ConstantConditions") PluginResolutionApplicator resolutionApplicator=new PluginResolutionApplicator((PluginAware)target,pluginParentClassLoader,pluginsClassLoader);
    PluginRequestApplicator requestApplicator=new PluginRequestApplicator(pluginResolver,resolutionApplicator);
    requestApplicator.applyPlugin(pluginRequests);
    scriptCompileClassLoader=pluginsClassLoader;
  }
  compiler.setClassloader(scriptCompileClassLoader);
  compiler.setTransformer(new BuildScriptTransformer("no_" + classpathScriptTransformer.getId(),classpathScriptTransformer.invert()));
  ScriptRunner<? extends BasicScript> runner=compiler.compile(scriptType);
  BasicScript script=runner.getScript();
  script.init(target,services);
  if (scriptAware != null) {
    scriptAware.afterCompile(this,script);
  }
  runner.run();
}
