{
  DefaultServiceRegistry services=new DefaultServiceRegistry();
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(ScriptHandlerFactory.class,scriptHandlerFactory);
  services.add(ClassLoaderScope.class,classLoaderScope.getBase());
  services.add(LoggingManagerInternal.class,loggingManagerFactory.create());
  services.add(Instantiator.class,instantiator);
  services.add(ScriptHandler.class,scriptHandler);
  services.add(FileLookup.class,fileLookup);
  ScriptSource withImports=importsReader.withImports(scriptSource);
  PluginDependenciesService pluginDependenciesService=new PluginDependenciesService();
  if (target instanceof PluginAware) {
    services.add(PluginDependenciesSpec.class,pluginDependenciesService.createSpec());
  }
 else {
    services.add(PluginDependenciesSpec.class,new UnsupportedPluginDependenciesSpec());
  }
  ScriptCompiler compiler=scriptCompilerFactory.createCompiler(withImports);
  compiler.setClassloader(classLoaderScope.getBase().getChildClassLoader());
  PluginsAndBuildscriptTransformer scriptBlockTransformer=new PluginsAndBuildscriptTransformer(classpathClosureName);
  StatementExtractingScriptTransformer classpathScriptTransformer=new StatementExtractingScriptTransformer(classpathClosureName,scriptBlockTransformer);
  compiler.setTransformer(classpathScriptTransformer);
  ScriptRunner<? extends BasicScript> classPathScriptRunner=compiler.compile(scriptType);
  classPathScriptRunner.getScript().init(target,services);
  classPathScriptRunner.run();
  Configuration classpathConfiguration=scriptHandler.getConfigurations().getByName(ScriptHandler.CLASSPATH_CONFIGURATION);
  Set<File> files=classpathConfiguration.getFiles();
  ClassPath classPath=new DefaultClassPath(files);
  ClassLoader exportedClassLoader=classLoaderScope.export(classPath);
  List<PluginRequest> pluginRequests=pluginDependenciesService.getRequests();
  if (!pluginRequests.isEmpty()) {
  }
  classLoaderScope.lock();
  compiler.setClassloader(classLoaderScope.getScopeClassLoader());
  compiler.setTransformer(new BuildScriptTransformer("no_" + classpathScriptTransformer.getId(),classpathScriptTransformer.invert()));
  ScriptRunner<? extends BasicScript> runner=compiler.compile(scriptType);
  BasicScript script=runner.getScript();
  script.init(target,services);
  if (target instanceof ScriptAware) {
    ((ScriptAware)target).setScript(script);
  }
  runner.run();
}
