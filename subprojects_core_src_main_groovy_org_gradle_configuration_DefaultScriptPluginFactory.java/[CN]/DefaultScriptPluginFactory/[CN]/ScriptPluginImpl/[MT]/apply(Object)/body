{
  final DefaultServiceRegistry services=new DefaultServiceRegistry();
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(ScriptHandlerFactory.class,scriptHandlerFactory);
  services.add(ClassLoaderScope.class,targetScope);
  services.add(LoggingManagerInternal.class,loggingManagerFactory.create());
  services.add(Instantiator.class,instantiator);
  services.add(ScriptHandler.class,scriptHandler);
  services.add(FileLookup.class,fileLookup);
  services.add(ModelRuleSourceDetector.class,modelRuleSourceDetector);
  ScriptSource withImports=importsReader.withImports(scriptSource);
  final ScriptCompiler compiler=scriptCompilerFactory.createCompiler(withImports);
  compiler.setClassloader(baseScope.getExportClassLoader());
  boolean supportsPluginsBlock=ProjectScript.class.isAssignableFrom(scriptType);
  String onPluginBlockError=supportsPluginsBlock ? null : "Only Project build scripts can contain plugins {} blocks";
  PluginsAndBuildscriptTransformer scriptBlockTransformer=new PluginsAndBuildscriptTransformer(classpathClosureName,onPluginBlockError,scriptSource,documentationRegistry);
  StatementFilteringScriptTransformer classpathScriptTransformer=new StatementFilteringScriptTransformer(classpathClosureName,scriptBlockTransformer);
  compiler.setClasspathClosureName(classpathClosureName);
  PluginsAndBuildscriptMetadataExtractingTransformer extractingTransformer=new PluginsAndBuildscriptMetadataExtractingTransformer(scriptBlockTransformer,classpathScriptTransformer);
  ScriptRunner<? extends BasicScript,PluginRequests> classPathScriptRunner=compiler.compile(scriptType,extractingTransformer);
  classPathScriptRunner.getScript().init(target,services);
  classPathScriptRunner.run();
  PluginRequests pluginRequests=classPathScriptRunner.getCompiledScript().getMetadata();
  PluginManagerInternal pluginManager=target instanceof PluginAwareInternal ? ((PluginAwareInternal)target).getPluginManager() : null;
  pluginRequestApplicator.applyPlugins(pluginRequests,scriptHandler,pluginManager,targetScope);
  compiler.setClassloader(targetScope.getLocalClassLoader());
  BuildScriptTransformer transformer=new BuildScriptTransformer("no_" + classpathScriptTransformer.getId(),classpathScriptTransformer.invert(),scriptSource);
  compiler.setVerifier(new ClosureCreationInterceptingVerifier());
  final ScriptRunner<? extends BasicScript,Void> runner=compiler.compile(scriptType,new TransformationOnlyMetadataExtractingTransformer(transformer));
  Runnable buildScriptRunner=new Runnable(){
    public void run(){
      BasicScript script=runner.getScript();
      script.init(target,services);
      if (ownerScript && target instanceof ScriptAware) {
        ((ScriptAware)target).setScript(script);
      }
      runner.run();
    }
  }
;
  if (!runner.getCompiledScript().hasImperativeStatements() && target instanceof ProjectInternal) {
    ((ProjectInternal)target).setModelRulesBlockRunner(buildScriptRunner);
  }
 else {
    buildScriptRunner.run();
  }
}
