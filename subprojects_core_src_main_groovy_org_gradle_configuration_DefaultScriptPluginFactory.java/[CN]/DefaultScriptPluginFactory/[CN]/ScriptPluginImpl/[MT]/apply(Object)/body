{
  final DefaultServiceRegistry services=new DefaultServiceRegistry();
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(ScriptHandlerFactory.class,scriptHandlerFactory);
  services.add(ClassLoaderScope.class,targetScope);
  services.add(LoggingManagerInternal.class,loggingManagerFactory.create());
  services.add(Instantiator.class,instantiator);
  services.add(ScriptHandler.class,scriptHandler);
  services.add(FileLookup.class,fileLookup);
  services.add(ModelRuleSourceDetector.class,modelRuleSourceDetector);
  final ScriptTarget scriptTarget=wrap(target);
  final ScriptCompiler compiler=scriptCompilerFactory.createCompiler(scriptSource);
  Class<? extends BasicScript> scriptType=scriptTarget.getScriptClass();
  boolean supportsPluginsBlock=scriptTarget.getSupportsPluginsBlock();
  String onPluginBlockError=supportsPluginsBlock ? null : "Only Project build scripts can contain plugins {} blocks";
  String classpathClosureName=scriptTarget.getClasspathBlockName();
  InitialPassStatementTransformer initialPassStatementTransformer=new InitialPassStatementTransformer(classpathClosureName,onPluginBlockError,scriptSource,documentationRegistry);
  SubsetScriptTransformer initialTransformer=new SubsetScriptTransformer(initialPassStatementTransformer);
  CompileOperation<PluginRequests> initialOperation=new FactoryBackedCompileOperation<PluginRequests>("cp_" + scriptTarget.getId(),initialTransformer,initialPassStatementTransformer,PluginRequestsSerializer.INSTANCE);
  ScriptRunner<? extends BasicScript,PluginRequests> initialRunner=compiler.compile(scriptType,initialOperation,baseScope.getExportClassLoader(),Actions.doNothing());
  initialRunner.getScript().init(target,services);
  initialRunner.run();
  PluginRequests pluginRequests=initialRunner.getCompiledScript().getData();
  PluginManagerInternal pluginManager=scriptTarget.getPluginManager();
  pluginRequestApplicator.applyPlugins(pluginRequests,scriptHandler,pluginManager,targetScope);
  BuildScriptTransformer buildScriptTransformer=new BuildScriptTransformer(classpathClosureName,scriptSource);
  String operationId=scriptTarget.getId();
  if (ModelBlockTransformer.isEnabled()) {
    operationId="m_".concat(operationId);
  }
  CompileOperation<Boolean> operation=new FactoryBackedCompileOperation<Boolean>(operationId,buildScriptTransformer,buildScriptTransformer,BaseSerializerFactory.BOOLEAN_SERIALIZER);
  final ScriptRunner<? extends BasicScript,Boolean> runner=compiler.compile(scriptType,operation,targetScope.getLocalClassLoader(),ClosureCreationInterceptingVerifier.INSTANCE);
  Runnable buildScriptRunner=new Runnable(){
    public void run(){
      BasicScript script=runner.getScript();
      script.init(target,services);
      scriptTarget.attachScript(script);
      runner.run();
    }
  }
;
  Boolean hasImperativeStatements=runner.getCompiledScript().getData();
  scriptTarget.addConfiguration(buildScriptRunner,!hasImperativeStatements);
}
