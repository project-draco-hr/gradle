{
  ModuleVersionSelector requested=dependency.getRequested();
  final ModuleIdentifier moduleId=getCacheKey(requested);
  ModuleVersionsCache.CachedModuleVersionList cachedModuleVersionList=moduleVersionsCache.getCachedModuleResolution(delegate,moduleId);
  if (cachedModuleVersionList != null) {
    Set<String> versionList=cachedModuleVersionList.getModuleVersions();
    Set<ModuleVersionIdentifier> versions=CollectionUtils.collect(versionList,new Transformer<ModuleVersionIdentifier,String>(){
      public ModuleVersionIdentifier transform(      String original){
        return new DefaultModuleVersionIdentifier(moduleId,original);
      }
    }
);
    if (cachePolicy.mustRefreshVersionList(moduleId,versions,cachedModuleVersionList.getAgeMillis())) {
      LOGGER.debug("Version listing in dynamic revision cache is expired: will perform fresh resolve of '{}' in '{}'",requested,delegate.getName());
    }
 else {
      result.listed(versionList);
      result.setAuthoritative(cachedModuleVersionList.getAgeMillis() == 0);
    }
  }
}
