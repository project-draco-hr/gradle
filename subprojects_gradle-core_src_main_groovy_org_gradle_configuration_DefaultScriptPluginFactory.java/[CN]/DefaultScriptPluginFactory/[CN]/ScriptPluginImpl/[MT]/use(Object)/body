{
  DefaultServiceRegistry services=new DefaultServiceRegistry();
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(StandardOutputRedirector.class,new DefaultStandardOutputRedirector());
  ScriptAware scriptAware=null;
  if (target instanceof ScriptAware) {
    scriptAware=(ScriptAware)target;
    scriptAware.beforeCompile(this);
  }
  ScriptClassLoaderProvider classLoaderProvider=this.classLoaderProvider;
  if (classLoaderProvider == null) {
    ScriptHandlerInternal defaultScriptHandler=scriptHandlerFactory.create(classLoader);
    services.add(ScriptHandlerInternal.class,defaultScriptHandler);
    classLoaderProvider=defaultScriptHandler;
  }
  ScriptSource withImports=new ImportsScriptSource(scriptSource,importsReader,null);
  ScriptCompiler compiler=scriptCompilerFactory.createCompiler(withImports);
  compiler.setClassloader(classLoaderProvider.getClassLoader());
  BuildScriptClasspathScriptTransformer classpathScriptTransformer=new BuildScriptClasspathScriptTransformer(classpathClosureName);
  compiler.setTransformer(classpathScriptTransformer);
  ScriptRunner<? extends BasicScript> classPathScript=compiler.compile(scriptType);
  setDelegate(classPathScript,target,services);
  classPathScript.run();
  classLoaderProvider.updateClassPath();
  compiler.setTransformer(new BuildScriptTransformer(classpathScriptTransformer));
  ScriptRunner<? extends BasicScript> runner=compiler.compile(scriptType);
  setDelegate(runner,target,services);
  if (scriptAware != null) {
    scriptAware.afterCompile(this,runner.getScript());
  }
  runner.run();
}
