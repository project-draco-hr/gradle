{
  Set<DefaultNativePlatform> platforms=new LinkedHashSet<DefaultNativePlatform>();
  OperatingSystemInternal windows=new DefaultOperatingSystem(OS_WINDOWS);
  OperatingSystemInternal linux=new DefaultOperatingSystem(OS_LINUX);
  OperatingSystemInternal osx=new DefaultOperatingSystem(OS_OSX);
  OperatingSystemInternal unix=new DefaultOperatingSystem(OS_UNIX);
  OperatingSystemInternal freebsd=new DefaultOperatingSystem("freebsd");
  OperatingSystemInternal solaris=new DefaultOperatingSystem("solaris");
  ArchitectureInternal x86=Architectures.forInput(ARCH_X86);
  ArchitectureInternal x64=Architectures.forInput("x86_64");
  ArchitectureInternal ia64=Architectures.forInput("ia64");
  ArchitectureInternal armv7=Architectures.forInput("armv7");
  ArchitectureInternal armv8=Architectures.forInput("armv8");
  ArchitectureInternal sparc=Architectures.forInput("sparc");
  ArchitectureInternal ultrasparc=Architectures.forInput("ultrasparc");
  ArchitectureInternal ppc=Architectures.forInput("ppc");
  ArchitectureInternal ppc64=Architectures.forInput("ppc64");
  platforms.add(createPlatform(windows,x86));
  platforms.add(createPlatform(windows,x64));
  platforms.add(createPlatform(windows,armv7));
  platforms.add(createPlatform(windows,ia64));
  platforms.add(createPlatform(freebsd,x86));
  platforms.add(createPlatform(freebsd,x64));
  platforms.add(createPlatform(freebsd,armv7));
  platforms.add(createPlatform(freebsd,armv8));
  platforms.add(createPlatform(freebsd,ppc));
  platforms.add(createPlatform(freebsd,ppc64));
  platforms.add(createPlatform(unix,x86));
  platforms.add(createPlatform(unix,x64));
  platforms.add(createPlatform(unix,armv7));
  platforms.add(createPlatform(unix,armv8));
  platforms.add(createPlatform(unix,ppc));
  platforms.add(createPlatform(unix,ppc64));
  platforms.add(createPlatform(linux,x64));
  platforms.add(createPlatform(linux,x86));
  platforms.add(createPlatform(linux,armv7));
  platforms.add(createPlatform(linux,armv8));
  platforms.add(createPlatform(osx,x86));
  platforms.add(createPlatform(osx,x64));
  platforms.add(createPlatform(solaris,x64));
  platforms.add(createPlatform(solaris,x86));
  platforms.add(createPlatform(solaris,sparc));
  platforms.add(createPlatform(solaris,ultrasparc));
  return platforms;
}
