{
  return new ModelView<M>(){
    private boolean closed;
    @Override public ModelType<M> getType(){
      return ManagedSetModelProjection.this.getType();
    }
    @Override public M getInstance(){
      ModelType<?> elementType=getType().getTypeVariables().get(0);
      return Cast.uncheckedCast(getManagedSetInstance(elementType));
    }
    private <E>ManagedSet<E> getManagedSetInstance(    ModelType<E> elementType){
      return new DelegatingManagedSet<E>(elementType);
    }
    @Override public void close(){
      closed=true;
    }
class DelegatingManagedSet<E> implements ManagedSet<E>, ManagedInstance {
      private final ManagedSet<E> delegate;
      public DelegatingManagedSet(      ModelType<E> elementType){
        delegate=Cast.uncheckedCast(modelNode.getPrivateData(getType()));
      }
      @Override public void create(      Action<? super E> action){
        if (!writable || closed) {
          throw new ModelViewClosedException(getType(),ruleDescriptor);
        }
        delegate.create(action);
      }
      private void ensureReadable(){
        if (writable && !closed) {
          throw new IllegalStateException(String.format("Cannot read contents of element '%s' of type '%s' while it's mutable",modelNode.getPath(),getType(),ruleDescriptor));
        }
      }
      @Override public int size(){
        ensureReadable();
        return delegate.size();
      }
      @Override public boolean isEmpty(){
        ensureReadable();
        return delegate.isEmpty();
      }
      @Override public boolean contains(      Object o){
        ensureReadable();
        return delegate.contains(o);
      }
      @Override public Iterator<E> iterator(){
        ensureReadable();
        return delegate.iterator();
      }
      @Override public Object[] toArray(){
        ensureReadable();
        return delegate.toArray();
      }
      @Override public <T>T[] toArray(      T[] a){
        ensureReadable();
        return delegate.toArray(a);
      }
      @Override public boolean add(      E e){
        return delegate.add(e);
      }
      @Override public boolean remove(      Object o){
        return delegate.remove(o);
      }
      @Override public boolean containsAll(      Collection<?> c){
        ensureReadable();
        return delegate.containsAll(c);
      }
      @Override public boolean addAll(      Collection<? extends E> c){
        return delegate.addAll(c);
      }
      @Override public boolean retainAll(      Collection<?> c){
        return delegate.retainAll(c);
      }
      @Override public boolean removeAll(      Collection<?> c){
        return delegate.removeAll(c);
      }
      @Override public void clear(){
        delegate.clear();
      }
    }
  }
;
}
