{
  return new ModelView<ManagedSet<I>>(){
    private boolean closed;
    @Override public ModelType<ManagedSet<I>> getType(){
      return ManagedSetModelProjection.this.getType();
    }
    @Override public ManagedSet<I> getInstance(){
      return new DelegatingManagedSet();
    }
    @Override public void close(){
      closed=true;
    }
class DelegatingManagedSet implements ManagedSet<I>, ManagedInstance {
      private final ManagedSet<I> delegate;
      public DelegatingManagedSet(){
        delegate=Cast.uncheckedCast(modelNode.getPrivateData(getType()));
      }
      @Override public void create(      Action<? super I> action){
        if (!writable || closed) {
          throw new ModelViewClosedException(getType(),ruleDescriptor);
        }
        delegate.create(action);
      }
      private void ensureReadable(){
        if (writable && !closed) {
          throw new WriteOnlyModelViewException(getType(),ruleDescriptor);
        }
      }
      @Override public int size(){
        ensureReadable();
        return delegate.size();
      }
      @Override public boolean isEmpty(){
        ensureReadable();
        return delegate.isEmpty();
      }
      @Override public boolean contains(      Object o){
        ensureReadable();
        return delegate.contains(o);
      }
      @Override public Iterator<I> iterator(){
        ensureReadable();
        return delegate.iterator();
      }
      @Override public Object[] toArray(){
        ensureReadable();
        return delegate.toArray();
      }
      @Override public <T>T[] toArray(      T[] a){
        ensureReadable();
        return delegate.toArray(a);
      }
      @Override public boolean add(      I e){
        return delegate.add(e);
      }
      @Override public boolean remove(      Object o){
        return delegate.remove(o);
      }
      @Override public boolean containsAll(      Collection<?> c){
        ensureReadable();
        return delegate.containsAll(c);
      }
      @Override public boolean addAll(      Collection<? extends I> c){
        return delegate.addAll(c);
      }
      @Override public boolean retainAll(      Collection<?> c){
        return delegate.retainAll(c);
      }
      @Override public boolean removeAll(      Collection<?> c){
        return delegate.removeAll(c);
      }
      @Override public void clear(){
        delegate.clear();
      }
    }
  }
;
}
