{
  final DependencyManagerFactory dependencyManagerFactoryMock=context.mock(DependencyManagerFactory.class);
  final DependencyManager dependencyManagerMock=context.mock(DependencyManager.class);
  final File expectedSettingsDir=new File("settingsDir");
  Map<String,String> expectedGradleProperties=WrapUtil.toMap("key","myvalue");
  context.checking(new Expectations(){
{
      allowing(dependencyManagerFactoryMock).createDependencyManager(with(any(Project.class)));
      will(returnValue(dependencyManagerMock));
      allowing(dependencyManagerMock).addConfiguration(with(any(String.class)));
    }
  }
);
  BuildSourceBuilder expectedBuildSourceBuilder=new BuildSourceBuilder(new EmbeddedBuildExecuter());
  IProjectDescriptorRegistry expectedProjectDescriptorRegistry=new DefaultProjectDescriptorRegistry();
  StartParameter expectedStartParameter=HelperUtil.dummyStartParameter();
  SettingsFactory settingsFactory=new SettingsFactory(expectedProjectDescriptorRegistry);
  DefaultSettings settings=(DefaultSettings)settingsFactory.createSettings(dependencyManagerFactoryMock,expectedBuildSourceBuilder,expectedSettingsDir,expectedGradleProperties,expectedStartParameter);
  assertSame(expectedProjectDescriptorRegistry,settings.getProjectDescriptorRegistry());
  assertSame(dependencyManagerMock,settings.getDependencyManager());
  assertSame(expectedBuildSourceBuilder,settings.getBuildSourceBuilder());
  assertSame(expectedGradleProperties,settings.getGradleProperties());
  assertSame(expectedSettingsDir,settings.getSettingsDir());
  assertSame(expectedStartParameter,settings.getStartParameter());
}
