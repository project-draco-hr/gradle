{
  final ProjectInternal rootProject=context.mock(ProjectInternal.class,"rootProject");
  final Set<Project> allProjects=WrapUtil.toSet(context.mock(Project.class,"someProject"));
  context.checking(new Expectations(){
{
      allowing(gradle).getRootProject();
      will(returnValue(rootProject));
      allowing(rootProject).getAllprojects();
      will(returnValue(allProjects));
    }
  }
);
  BuiltInTasksBuildExecuter executer=new BuiltInTasksBuildExecuter(BuiltInTasksBuildExecuter.Options.TASKS,BuiltInTasksBuildExecuter.ALL_PROJECTS_WILDCARD);
  executer.setOptions(BuiltInTasksBuildExecuter.Options.DEPENDENCIES);
  executer.select(gradle);
  assertThat(((DependencyReportTask)executer.getTask()).getProjects(),equalTo(allProjects));
}
