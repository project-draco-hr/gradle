{
  ResolutionResult result=getIncomingResolutionResult(configuration);
  final Set<ResolvedComponentResult> resolvedRepoFileComponents=CollectionUtils.filter(result.getAllComponents(),new Spec<ResolvedComponentResult>(){
    @Override public boolean isSatisfiedBy(    ResolvedComponentResult element){
      return element.getId() instanceof ModuleComponentIdentifier;
    }
  }
);
  Set<ModuleVersionIdentifier> mappedResolvedDependencies=mapResolvedDependencies(resolvedRepoFileComponents);
  Set<ResolvedArtifact> artifacts=getExternalArtifacts(configuration);
  List<IdeExtendedRepoFileDependency> externalDependencies=new ArrayList<IdeExtendedRepoFileDependency>();
  for (  ResolvedArtifact artifact : artifacts) {
    if (mappedResolvedDependencies.contains(artifact.getModuleVersion().getId())) {
      IdeExtendedRepoFileDependency ideRepoFileDependency=new IdeExtendedRepoFileDependency(configuration,artifact.getFile());
      ideRepoFileDependency.setId(artifact.getModuleVersion().getId());
      externalDependencies.add(ideRepoFileDependency);
    }
  }
  return externalDependencies;
}
