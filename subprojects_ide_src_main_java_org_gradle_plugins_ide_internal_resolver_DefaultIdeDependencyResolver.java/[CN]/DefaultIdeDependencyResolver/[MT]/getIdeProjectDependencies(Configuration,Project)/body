{
  ResolutionResult result=getIncomingResolutionResult(configuration);
  final Set<ResolvedComponentResult> projectComponents=CollectionUtils.filter(result.getAllComponents(),new Spec<ResolvedComponentResult>(){
    @Override public boolean isSatisfiedBy(    ResolvedComponentResult element){
      return element.getId() instanceof ProjectComponentIdentifier;
    }
  }
);
  List<IdeProjectDependency> ideProjectDependencies=new ArrayList<IdeProjectDependency>();
  ProjectComponentIdentifier thisProjectId=DefaultProjectComponentIdentifier.newProjectId(project);
  for (  ResolvedComponentResult projectComponent : projectComponents) {
    ProjectComponentIdentifier projectId=(ProjectComponentIdentifier)projectComponent.getId();
    if (thisProjectId.equals(projectId)) {
      continue;
    }
    Project resolvedProject=project.findProject(projectId.getProjectPath());
    if (resolvedProject == null) {
      ideProjectDependencies.add(new IdeProjectDependency(projectId));
    }
 else {
      ideProjectDependencies.add(new IdeProjectDependency(projectId,resolvedProject.getName()));
    }
  }
  return ideProjectDependencies;
}
