{
  ModuleRevisionId idWithoutRevision=ModuleRevisionId.newInstance(moduleRevisionId,IvyPatternHelper.getTokenString(IvyPatternHelper.REVISION_KEY));
  String partiallyResolvedPattern=IvyPatternHelper.substitute(pattern,idWithoutRevision,artifact);
  LOGGER.debug("Listing all in {}",partiallyResolvedPattern);
  String[] revisions=ResolverHelper.listTokenValues(repository,partiallyResolvedPattern,IvyPatternHelper.REVISION_KEY);
  if (revisions != null) {
    LOGGER.debug("Found revisions: {}",Arrays.asList(revisions));
    List<ResolvedResource> resources=new ArrayList<ResolvedResource>(revisions.length);
    for (    String revision : revisions) {
      String resourcePath=IvyPatternHelper.substituteToken(partiallyResolvedPattern,IvyPatternHelper.REVISION_KEY,revision);
      try {
        Resource resource=getResource(resourcePath,artifact);
        if (resource != null) {
          resources.add(new ResolvedResource(resource,revision));
        }
      }
 catch (      IOException e) {
        LOGGER.warn("Could not get resource listed by repository:" + resourcePath,e);
      }
    }
    if (revisions.length != resources.size()) {
      LOGGER.debug("Found resolved resources: {}",resources);
    }
    return resources.toArray(new ResolvedResource[resources.size()]);
  }
  return null;
}
