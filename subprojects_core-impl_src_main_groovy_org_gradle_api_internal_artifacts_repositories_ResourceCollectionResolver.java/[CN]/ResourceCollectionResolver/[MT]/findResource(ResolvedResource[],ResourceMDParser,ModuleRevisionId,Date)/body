{
  String name=getName();
  VersionMatcher versionMatcher=getSettings().getVersionMatcher();
  ResolvedResource found=null;
  List sorted=getLatestStrategy().sort(rress);
  List rejected=new ArrayList();
  List foundBlacklisted=new ArrayList();
  IvyContext context=IvyContext.getContext();
  for (ListIterator iter=sorted.listIterator(sorted.size()); iter.hasPrevious(); ) {
    ResolvedResource rres=(ResolvedResource)iter.previous();
    if (filterNames(new ArrayList(Collections.singleton(rres.getRevision()))).isEmpty()) {
      Message.debug("\t" + name + ": filtered by name: "+ rres);
      continue;
    }
    ModuleRevisionId foundMrid=ModuleRevisionId.newInstance(mrid,rres.getRevision());
    ResolveData data=context.getResolveData();
    if (data != null && data.getReport() != null && data.isBlacklisted(data.getReport().getConfiguration(),foundMrid)) {
      Message.debug("\t" + name + ": blacklisted: "+ rres);
      rejected.add(rres.getRevision() + " (blacklisted)");
      foundBlacklisted.add(foundMrid);
      continue;
    }
    if (!versionMatcher.accept(mrid,foundMrid)) {
      Message.debug("\t" + name + ": rejected by version matcher: "+ rres);
      rejected.add(rres.getRevision());
      continue;
    }
    if (!rres.getResource().exists()) {
      Message.debug("\t" + name + ": unreachable: "+ rres+ "; res="+ rres.getResource());
      rejected.add(rres.getRevision() + " (unreachable)");
      continue;
    }
    if ((date != null && rres.getLastModified() > date.getTime())) {
      Message.verbose("\t" + name + ": too young: "+ rres);
      rejected.add(rres.getRevision() + " (" + rres.getLastModified()+ ")");
      continue;
    }
    if (versionMatcher.needModuleDescriptor(mrid,foundMrid)) {
      ResolvedResource r=rmdparser.parse(rres.getResource(),rres.getRevision());
      if (r == null) {
        Message.debug("\t" + name + ": impossible to get module descriptor resource: "+ rres);
        rejected.add(rres.getRevision() + " (no or bad MD)");
        continue;
      }
      ModuleDescriptor md=((MDResolvedResource)r).getResolvedModuleRevision().getDescriptor();
      if (md.isDefault()) {
        Message.debug("\t" + name + ": default md rejected by version matcher"+ "requiring module descriptor: "+ rres);
        rejected.add(rres.getRevision() + " (MD)");
        continue;
      }
 else       if (!versionMatcher.accept(mrid,md)) {
        Message.debug("\t" + name + ": md rejected by version matcher: "+ rres);
        rejected.add(rres.getRevision() + " (MD)");
        continue;
      }
 else {
        found=r;
      }
    }
 else {
      found=rres;
    }
    if (found != null) {
      break;
    }
  }
  if (found == null && !rejected.isEmpty()) {
    logAttempt(rejected.toString());
  }
  if (found == null && !foundBlacklisted.isEmpty()) {
    DependencyDescriptor dd=context.getDependencyDescriptor();
    IvyNode parentNode=context.getResolveData().getNode(dd.getParentRevisionId());
    ConflictManager cm=parentNode.getConflictManager(mrid.getModuleId());
    cm.handleAllBlacklistedRevisions(dd,foundBlacklisted);
  }
  return found;
}
