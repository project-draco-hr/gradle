{
  String name=getName();
  VersionMatcher versionMatcher=getSettings().getVersionMatcher();
  ResolvedResource found=null;
  List<String> sorted=sortVersionsLatestFirst(versions);
  List<String> rejected=new ArrayList<String>();
  for (  String version : sorted) {
    ModuleRevisionId foundMrid=ModuleRevisionId.newInstance(mrid,version);
    if (!versionMatcher.accept(mrid,foundMrid)) {
      Message.debug("\t" + name + ": rejected by version matcher: "+ version);
      rejected.add(version);
      continue;
    }
    String resourcePath=IvyPatternHelper.substitute(pattern,foundMrid,artifact);
    Resource resource=getResource(resourcePath,artifact);
    String description=version + " [" + resource+ "]";
    if (!resource.exists()) {
      Message.debug("\t" + name + ": unreachable: "+ description);
      rejected.add(version + " (unreachable)");
      discardResource(resource);
      continue;
    }
    if ((date != null && resource.getLastModified() > date.getTime())) {
      Message.verbose("\t" + name + ": too young: "+ description);
      rejected.add(version + " (" + resource.getLastModified()+ ")");
      discardResource(resource);
      continue;
    }
    if (versionMatcher.needModuleDescriptor(mrid,foundMrid)) {
      MDResolvedResource parsedResource=rmdparser.parse(resource,version);
      if (parsedResource == null) {
        Message.debug("\t" + name + ": impossible to get module descriptor resource: "+ description);
        rejected.add(version + " (no or bad MD)");
        discardResource(resource);
        continue;
      }
      ModuleDescriptor md=parsedResource.getResolvedModuleRevision().getDescriptor();
      if (md.isDefault()) {
        Message.debug("\t" + name + ": default md rejected by version matcher requiring module descriptor: "+ description);
        rejected.add(version + " (MD)");
        discardResource(resource);
        continue;
      }
 else       if (!versionMatcher.accept(mrid,md)) {
        Message.debug("\t" + name + ": md rejected by version matcher: "+ description);
        rejected.add(version + " (MD)");
        discardResource(resource);
        continue;
      }
      found=parsedResource;
      break;
    }
    found=new ResolvedResource(resource,version);
    break;
  }
  if (found == null && !rejected.isEmpty()) {
    logAttempt(rejected.toString());
  }
  return found;
}
