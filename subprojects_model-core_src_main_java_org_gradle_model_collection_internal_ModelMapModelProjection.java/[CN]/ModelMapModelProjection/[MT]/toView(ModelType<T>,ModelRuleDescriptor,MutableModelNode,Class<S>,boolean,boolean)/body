{
  ModelType<S> itemType=ModelType.of(itemClass);
  ModelMap<I> builder=new NodeBackedModelMap<I>(baseItemModelType,sourceDescriptor,node,creatorStrategy);
  ModelMap<S> subBuilder=builder.withType(itemClass);
  ModelType<ModelMap<S>> viewType=ModelTypes.modelMap(itemType);
  final DefaultModelViewState state=new DefaultModelViewState(targetType,sourceDescriptor,mutable,canReadChildren);
  return new InstanceModelView<ModelMap<S>>(node.getPath(),viewType,new ModelMapGroovyDecorator<S>(subBuilder,state),new Action<ModelMap<S>>(){
    @Override public void execute(    ModelMap<S> sModelMap){
      state.close();
    }
  }
);
}
