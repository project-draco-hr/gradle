{
  InstanceFactory.TypeRegistrationBuilder<S> registration=register(publicType,descriptor);
  if (implementationType != null) {
    registration.withImplementation(Cast.<ModelType<? extends S>>uncheckedCast(implementationType),new InstanceFactory.ImplementationFactory<S>(){
      @Override public S create(      ModelType<? extends S> publicType,      String name,      MutableModelNode binaryNode){
        MutableModelNode componentBinariesNode=binaryNode.getParent();
        MutableModelNode componentNode=componentBinariesNode.getParent();
        return Cast.uncheckedCast(BaseBinarySpec.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),name,binaryNode,componentNode,instantiator,taskFactory));
      }
    }
);
  }
  for (  Class<?> internalView : internalViews) {
    registration.withInternalView(ModelType.of(internalView));
  }
}
