{
  InstanceFactory.TypeRegistrationBuilder<S> registration=register(publicType,descriptor);
  if (implementationType != null) {
    registration.withImplementation(Cast.<ModelType<? extends S>>uncheckedCast(implementationType),new InstanceFactory.ImplementationFactory<S>(){
      @Override public S create(      ModelType<? extends S> publicType,      String name,      MutableModelNode binaryNode){
        MutableModelNode parentNode=binaryNode.getParent().getParent();
        ComponentSpecInternal owner=parentNode.canBeViewedAs(ModelType.of(ComponentSpecInternal.class)) ? parentNode.asImmutable(ModelType.of(ComponentSpecInternal.class),descriptor).getInstance() : null;
        return Cast.uncheckedCast(BaseBinarySpec.create(publicType.getConcreteClass(),implementationType.getConcreteClass(),name,binaryNode,owner,instantiator,taskFactory));
      }
    }
);
  }
  for (  Class<?> internalView : internalViews) {
    registration.withInternalView(ModelType.of(internalView));
  }
}
