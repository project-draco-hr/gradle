{
  DefaultGradleLauncher launcher=(DefaultGradleLauncher)buildController.getLauncher();
  final AtomicReference<SerializedPayload> model=new AtomicReference<SerializedPayload>();
  final AtomicReference<RuntimeException> failure=new AtomicReference<RuntimeException>();
  final Action<GradleInternal> action=new Action<GradleInternal>(){
    public void execute(    GradleInternal gradle){
      ToolingModelBuilderRegistry builderRegistry=getToolingModelBuilderRegistry(gradle);
      ToolingModelBuilder builder;
      try {
        builder=builderRegistry.getBuilder(modelName);
      }
 catch (      UnknownModelException e) {
        failure.set((InternalUnsupportedModelException)(new InternalUnsupportedModelException().initCause(e)));
        return;
      }
      Object result=builder.buildAll(modelName,gradle.getDefaultProject());
      model.set(getPayloadSerializer(gradle).serialize(result));
    }
  }
;
  if (runTasks) {
    launcher.addListener(new TasksCompletionListener(){
      public void onTasksFinished(      GradleInternal gradle){
        action.execute(gradle);
      }
    }
);
    buildController.run();
  }
 else {
    launcher.addListener(new ModelConfigurationListener(){
      public void onConfigure(      GradleInternal gradle){
        ensureAllProjectsEvaluated(gradle);
        action.execute(gradle);
      }
    }
);
    buildController.configure();
  }
  if (failure.get() != null) {
    throw failure.get();
  }
  return new BuildActionResult(model.get(),null);
}
