{
  TypeBuilder builder=createBuilder();
  ruleDefinition.getRuleInvoker().invoke(builder);
  Class<?> implementation=builder.getImplementation();
  if (implementation != null) {
    if (!baseImplementationClass.isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("%s implementation '%s' must extend '%s'.",StringUtils.capitalize(modelName),implementation.getSimpleName(),baseImplementationClass.getSimpleName()));
    }
    if (!type.isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("%s implementation '%s' must implement '%s'.",StringUtils.capitalize(modelName),implementation.getSimpleName(),type.getSimpleName()));
    }
    try {
      implementation.getConstructor();
    }
 catch (    NoSuchMethodException nsmException) {
      throw new InvalidComponentModelException(String.format("%s implementation '%s' must have public default constructor.",StringUtils.capitalize(modelName),implementation.getSimpleName()));
    }
  }
  return (Class<? extends U>)implementation;
}
