{
  final WorkerProcess workerProcess=workerProcessBuilder.build();
  return workerType.cast(Proxy.newProxyInstance(workerType.getClassLoader(),new Class[]{workerType},new InvocationHandler(){
    private Receiver receiver=new Receiver(getBaseName());
    private RequestProtocol requestProtocol;
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (method.equals(START_METHOD)) {
        try {
          workerProcess.start();
        }
 catch (        Exception e) {
          throw WorkerProcessException.runFailed(getBaseName(),e);
        }
        workerProcess.getConnection().addIncoming(ResponseProtocol.class,receiver);
        workerProcess.getConnection().useJavaSerializationForParameters(workerImplementation.getClassLoader());
        requestProtocol=workerProcess.getConnection().addOutgoing(RequestProtocol.class);
        workerProcess.getConnection().connect();
        return null;
      }
      if (method.equals(STOP_METHOD)) {
        if (requestProtocol != null) {
          requestProtocol.stop();
        }
        try {
          return workerProcess.waitForStop();
        }
  finally {
          requestProtocol=null;
        }
      }
      requestProtocol.run(method.getName(),method.getParameterTypes(),args);
      boolean hasResult=receiver.awaitNextResult();
      if (!hasResult) {
        try {
          requestProtocol=null;
          workerProcess.waitForStop();
          throw new IllegalStateException(String.format("No response was received from %s but the worker process has finished.",getBaseName()));
        }
 catch (        Exception e) {
          throw WorkerProcessException.runFailed(getBaseName(),e);
        }
      }
      return receiver.getNextResult();
    }
  }
));
}
