{
  final Map<String,OverlayedIdProxyingTestClassResult> aggregatedTestResults=new LinkedHashMap<String,OverlayedIdProxyingTestClassResult>();
  classOutputProviders=ArrayListMultimap.create();
  final AtomicLong newIdCounter=new AtomicLong(0L);
  for (  final TestResultsProvider provider : providers) {
    provider.visitClasses(new Action<TestClassResult>(){
      public void execute(      final TestClassResult classResult){
        OverlayedIdProxyingTestClassResult newTestResult=aggregatedTestResults.get(classResult.getClassName());
        if (newTestResult != null) {
          newTestResult.addTestClassResult(classResult);
          classOutputProviders.put(newTestResult.getId(),new DelegateProvider(classResult.getId(),provider));
        }
 else {
          long newId=newIdCounter.incrementAndGet();
          classOutputProviders.put(newId,new DelegateProvider(classResult.getId(),provider));
          aggregatedTestResults.put(classResult.getClassName(),new OverlayedIdProxyingTestClassResult(newId,classResult));
        }
      }
    }
);
  }
  for (  OverlayedIdProxyingTestClassResult classResult : aggregatedTestResults.values()) {
    visitor.execute(classResult);
  }
}
