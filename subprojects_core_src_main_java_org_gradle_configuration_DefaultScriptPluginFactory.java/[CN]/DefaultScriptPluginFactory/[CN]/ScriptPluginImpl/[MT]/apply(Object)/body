{
  PluginRequestCollector pluginRequestCollector=getPluginRequestCollector(target);
  final DefaultServiceRegistry services=new DefaultServiceRegistry(){
    Factory<PatternSet> createPatternSetFactory(){
      return PatternSets.getNonCachingPatternSetFactory();
    }
  }
;
  services.add(ScriptPluginFactory.class,DefaultScriptPluginFactory.this);
  services.add(ScriptHandlerFactory.class,scriptHandlerFactory);
  services.add(ClassLoaderScope.class,targetScope);
  services.add(LoggingManagerInternal.class,loggingManagerFactory.create());
  services.add(Instantiator.class,instantiator);
  services.add(ScriptHandler.class,scriptHandler);
  services.add(FileLookup.class,fileLookup);
  services.add(DirectoryFileTreeFactory.class,directoryFileTreeFactory);
  services.add(ModelRuleSourceDetector.class,modelRuleSourceDetector);
  services.add(PluginRepositoryRegistry.class,pluginRepositoryRegistry);
  services.add(PluginRepositoryFactory.class,pluginRepositoryFactory);
  services.add(PluginDependenciesSpec.class,pluginRequestCollector);
  final ScriptTarget initialPassScriptTarget=initialPassTarget(target);
  ScriptCompiler compiler=scriptCompilerFactory.createCompiler(scriptSource);
  Class<? extends BasicScript> scriptType=initialPassScriptTarget.getScriptClass();
  InitialPassStatementTransformer initialPassStatementTransformer=new InitialPassStatementTransformer(scriptSource,initialPassScriptTarget,documentationRegistry);
  final SubsetScriptTransformer initialTransformer=new SubsetScriptTransformer(initialPassStatementTransformer);
  final String id=INTERNER.intern("cp_" + initialPassScriptTarget.getId());
  CompileOperation<Void> initialOperation=new VoidCompileOperation(id,initialTransformer);
  ScriptRunner<? extends BasicScript,Void> initialRunner=compiler.compile(scriptType,initialOperation,baseScope.getExportClassLoader(),Actions.doNothing());
  initialRunner.run(target,services);
  List<TargetedPluginRequest> pluginRequests=pluginRequestCollector.getRequests();
  pluginRequestApplicator.applyPlugins(pluginRequests,scriptHandler,targetScope);
  final ScriptTarget scriptTarget=secondPassTarget(target);
  scriptType=scriptTarget.getScriptClass();
  BuildScriptTransformer buildScriptTransformer=new BuildScriptTransformer(scriptSource,scriptTarget);
  String operationId=scriptTarget.getId();
  CompileOperation<BuildScriptData> operation=new FactoryBackedCompileOperation<BuildScriptData>(operationId,buildScriptTransformer,buildScriptTransformer,buildScriptDataSerializer);
  final ScriptRunner<? extends BasicScript,BuildScriptData> runner=compiler.compile(scriptType,operation,targetScope.getLocalClassLoader(),ClosureCreationInterceptingVerifier.INSTANCE);
  if (scriptTarget.getSupportsMethodInheritance() && runner.getHasMethods()) {
    scriptTarget.attachScript(runner.getScript());
  }
  if (!runner.getRunDoesSomething()) {
    return;
  }
  Runnable buildScriptRunner=new Runnable(){
    public void run(){
      runner.run(target,services);
    }
  }
;
  boolean hasImperativeStatements=runner.getData().getHasImperativeStatements();
  scriptTarget.addConfiguration(buildScriptRunner,!hasImperativeStatements);
}
