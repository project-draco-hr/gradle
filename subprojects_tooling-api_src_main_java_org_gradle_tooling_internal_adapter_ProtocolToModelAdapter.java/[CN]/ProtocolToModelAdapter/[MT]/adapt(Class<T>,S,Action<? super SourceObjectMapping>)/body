{
  if (sourceObject == null) {
    return null;
  }
  Class<? extends T> wrapperType=targetTypeProvider.getTargetType(targetType,sourceObject);
  DefaultSourceObjectMapping mapping=new DefaultSourceObjectMapping(sourceObject,targetType,wrapperType);
  mapper.execute(mapping);
  wrapperType=mapping.wrapperType.asSubclass(targetType);
  if (wrapperType.isInstance(sourceObject)) {
    return wrapperType.cast(sourceObject);
  }
  if (targetType.isEnum()) {
    return adaptToEnum(targetType,sourceObject);
  }
  MixInMethodInvoker mixInMethodInvoker=null;
  if (mapping.mixInType != null) {
    mixInMethodInvoker=new MixInMethodInvoker(mapping.mixInType,new AdaptingMethodInvoker(mapper,new ReflectionMethodInvoker()));
  }
  MethodInvoker overrideInvoker=chainInvokers(mixInMethodInvoker,mapping.overrideInvoker);
  Object proxy=Proxy.newProxyInstance(wrapperType.getClassLoader(),new Class<?>[]{wrapperType},new InvocationHandlerImpl(sourceObject,overrideInvoker,mapper));
  if (mixInMethodInvoker != null) {
    mixInMethodInvoker.setProxy(proxy);
  }
  return wrapperType.cast(proxy);
}
