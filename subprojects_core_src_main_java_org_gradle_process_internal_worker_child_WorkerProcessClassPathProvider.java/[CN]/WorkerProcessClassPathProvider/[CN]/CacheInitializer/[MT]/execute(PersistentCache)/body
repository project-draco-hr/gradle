{
  try {
    File jarFile=jarFile(cache);
    LOGGER.debug("Generating worker process classes to {}.",jarFile);
    List<Class<?>> classes=Arrays.asList(GradleWorkerMain.class,BootstrapSecurityManager.class,EncodedStream.EncodedInput.class,ClassLoaderUtils.class,FilteringClassLoader.class,FilteringClassLoader.Spec.class,ClassLoaderHierarchy.class,ClassLoaderVisitor.class,ClassLoaderSpec.class,SystemClassLoaderSpec.class,JavaReflectionUtil.class,JavaMethod.class,GradleException.class,NoSuchPropertyException.class,NoSuchMethodException.class,UncheckedException.class,PropertyAccessor.class,PropertyMutator.class,Factory.class,Spec.class);
    ZipOutputStream outputStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarFile)));
    try {
      for (      Class<?> classToMap : classes) {
        remapClass(classToMap,outputStream);
      }
    }
  finally {
      outputStream.close();
    }
  }
 catch (  Exception e) {
    throw new GradleException("Could not generate worker process bootstrap classes.",e);
  }
}
