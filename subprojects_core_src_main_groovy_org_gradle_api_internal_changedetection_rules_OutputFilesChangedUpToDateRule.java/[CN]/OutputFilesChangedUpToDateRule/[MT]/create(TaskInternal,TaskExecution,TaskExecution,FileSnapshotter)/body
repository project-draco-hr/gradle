{
  final FileCollectionSnapshot outputFilesBefore=outputFilesSnapshotter.snapshot(task.getOutputs().getFiles());
  return new CachingUpToDateState(){
    @Override protected void doFindChanges(    final Action<TaskUpToDateStateChange> action){
      if (previousExecution.getOutputFilesSnapshot() == null) {
        action.execute(new DescriptiveChange("Output file history is not available for %s.",task));
        return;
      }
      outputFilesBefore.changesSince(previousExecution.getOutputFilesSnapshot(),new ChangeListener<File>(){
        public void added(        File element){
          action.execute(new OutputFileChange(element,ChangeType.ADDED));
        }
        public void removed(        File element){
          action.execute(new OutputFileChange(element,ChangeType.REMOVED));
        }
        public void changed(        File element){
          action.execute(new OutputFileChange(element,ChangeType.MODIFIED));
        }
      }
);
    }
    public void snapshotAfterTask(){
      FileCollectionSnapshot lastExecutionOutputFiles;
      if (previousExecution == null || previousExecution.getOutputFilesSnapshot() == null) {
        lastExecutionOutputFiles=outputFilesSnapshotter.emptySnapshot();
      }
 else {
        lastExecutionOutputFiles=previousExecution.getOutputFilesSnapshot();
      }
      FileCollectionSnapshot newOutputFiles=outputFilesBefore.changesSince(lastExecutionOutputFiles).applyTo(lastExecutionOutputFiles,new ChangeListener<FileCollectionSnapshot.Merge>(){
        public void added(        FileCollectionSnapshot.Merge element){
          element.ignore();
        }
        public void removed(        FileCollectionSnapshot.Merge element){
        }
        public void changed(        FileCollectionSnapshot.Merge element){
        }
      }
);
      FileCollectionSnapshot outputFilesAfter=outputFilesSnapshotter.snapshot(task.getOutputs().getFiles());
      currentExecution.setOutputFilesSnapshot(outputFilesAfter.changesSince(outputFilesBefore).applyTo(newOutputFiles));
    }
  }
;
}
