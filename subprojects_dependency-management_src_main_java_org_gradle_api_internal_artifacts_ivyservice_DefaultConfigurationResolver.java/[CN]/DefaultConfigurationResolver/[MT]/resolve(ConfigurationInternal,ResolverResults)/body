{
  List<ResolutionAwareRepository> resolutionAwareRepositories=CollectionUtils.collect(repositories,Transformers.cast(ResolutionAwareRepository.class));
  StoreSet stores=storeFactory.createStoreSet();
  BinaryStore oldModelStore=stores.nextBinaryStore();
  Store<TransientConfigurationResults> oldModelCache=stores.oldModelCache();
  TransientConfigurationResultsBuilder oldTransientModelBuilder=new TransientConfigurationResultsBuilder(oldModelStore,oldModelCache);
  DefaultResolvedConfigurationBuilder oldModelBuilder=new DefaultResolvedConfigurationBuilder(oldTransientModelBuilder);
  ResolvedConfigurationDependencyGraphVisitor oldModelVisitor=new ResolvedConfigurationDependencyGraphVisitor(oldModelBuilder);
  BinaryStore newModelStore=stores.nextBinaryStore();
  Store<ResolvedComponentResult> newModelCache=stores.newModelCache();
  StreamingResolutionResultBuilder newModelBuilder=new StreamingResolutionResultBuilder(newModelStore,newModelCache);
  ResolvedLocalComponentsResultBuilder localComponentsResultBuilder=new DefaultResolvedLocalComponentsResultBuilder(buildProjectDependencies);
  DependencyGraphVisitor projectModelVisitor=new ResolvedLocalComponentsResultGraphVisitor(localComponentsResultBuilder);
  ResolvedArtifactsBuilder artifactsBuilder=new DefaultResolvedArtifactsBuilder();
  DependencyGraphVisitor graphVisitor=new CompositeDependencyGraphVisitor(oldModelVisitor,newModelBuilder,projectModelVisitor);
  DependencyArtifactsVisitor artifactsVisitor=new CompositeDependencyArtifactsVisitor(oldModelVisitor,artifactsBuilder);
  resolver.resolve(configuration,resolutionAwareRepositories,metadataHandler,graphVisitor,artifactsVisitor);
  DefaultResolverResults defaultResolverResults=(DefaultResolverResults)results;
  defaultResolverResults.resolved(newModelBuilder.complete(),localComponentsResultBuilder.complete());
  ResolvedGraphResults graphResults=oldModelBuilder.complete();
  defaultResolverResults.retainState(graphResults,artifactsBuilder,oldTransientModelBuilder);
}
