{
  FileCollectionSnapshotter fileCollectionSnapshotter=new DefaultFileCollectionSnapshotter(fileSnapshotter,cacheAccess,stringInterner,fileResolver,new TreeSnapshotter());
  FileCollectionSnapshotter discoveredFileCollectionSnapshotter=new MinimalFileSetSnapshotter(fileSnapshotter,cacheAccess,stringInterner,fileResolver,fileSystem);
  FileCollectionSnapshotter outputFilesSnapshotter=new OutputFilesCollectionSnapshotter(fileCollectionSnapshotter,stringInterner);
  SerializerRegistry<FileCollectionSnapshot> serializerRegistry=new DefaultSerializerRegistry<FileCollectionSnapshot>();
  fileCollectionSnapshotter.registerSerializers(serializerRegistry);
  outputFilesSnapshotter.registerSerializers(serializerRegistry);
  discoveredFileCollectionSnapshotter.registerSerializers(serializerRegistry);
  TaskHistoryRepository taskHistoryRepository=new CacheBackedTaskHistoryRepository(cacheAccess,new CacheBackedFileSnapshotRepository(cacheAccess,serializerRegistry.build(),new RandomLongIdGenerator()),stringInterner);
  return new ShortCircuitTaskArtifactStateRepository(startParameter,instantiator,new DefaultTaskArtifactStateRepository(taskHistoryRepository,instantiator,outputFilesSnapshotter,fileCollectionSnapshotter,discoveredFileCollectionSnapshotter,fileCollectionFactory));
}
