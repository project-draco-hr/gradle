{
  BuildComparator buildComparator=new DefaultBuildComparator(buildOutcomeComparatorFactory);
  BuildComparisonResult result=buildComparator.compareBuilds(buildComparisonSpec);
  Logger logger=getLogger();
  if (!result.getUncomparedFrom().isEmpty()) {
    logger.lifecycle("Uncompared outcomes on FROM side:");
    for (    BuildOutcome outcome : result.getUncomparedFrom()) {
      logger.lifecycle(" > {}",outcome);
    }
  }
  if (!result.getUncomparedTo().isEmpty()) {
    logger.lifecycle("Uncompared outcomes on TO side:");
    for (    BuildOutcome outcome : result.getUncomparedTo()) {
      logger.lifecycle(" > {}",outcome);
    }
  }
  if (!result.getComparisons().isEmpty()) {
    logger.lifecycle("Compared outcomes:");
    for (    BuildOutcomeComparisonResult comparisonResult : result.getComparisons()) {
      logger.lifecycle(" > {}",comparisonResult);
    }
  }
}
