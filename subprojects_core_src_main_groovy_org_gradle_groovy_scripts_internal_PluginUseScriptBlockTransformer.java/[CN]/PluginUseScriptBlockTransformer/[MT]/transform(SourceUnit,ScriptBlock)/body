{
  ClosureExpression closureArg=scriptBlock.getClosureExpression();
  PropertyExpression servicesProperty=new PropertyExpression(VariableExpression.THIS_EXPRESSION,servicesFieldName);
  final MethodCallExpression getServiceMethodCall=new MethodCallExpression(servicesProperty,"get",new ArgumentListExpression(new ClassExpression(new ClassNode(serviceClass))));
  Expression hydrateMethodCall=new MethodCallExpression(closureArg,"rehydrate",new ArgumentListExpression(getServiceMethodCall,ConstantExpression.NULL,ConstantExpression.NULL));
  Expression closureCall=new MethodCallExpression(hydrateMethodCall,"call",ArgumentListExpression.EMPTY_ARGUMENTS);
  closureArg.getCode().visit(new RestrictiveCodeVisitor(sourceUnit,BASE_MESSAGE){
    @Override public void visitBlockStatement(    BlockStatement block){
      for (      Statement statement : block.getStatements()) {
        statement.visit(this);
      }
    }
    @Override public void visitMethodCallExpression(    MethodCallExpression call){
      if (!call.isImplicitThis()) {
        Expression target=call.getObjectExpression();
        if (!(target instanceof MethodCallExpression)) {
          restrict(target,BASE_MESSAGE);
          return;
        }
        visitMethodCallExpression((MethodCallExpression)target);
      }
      if (call.getMethod() instanceof ConstantExpression) {
        ConstantExpression methodName=(ConstantExpression)call.getMethod();
        if (isString(methodName)) {
          String methodNameText=methodName.getText();
          if (methodNameText.equals("id") || methodNameText.equals("version")) {
            hasSingleConstantStringArg(call);
            if (methodName.getText().equals("id")) {
              if (call.isImplicitThis()) {
                call.setObjectExpression(new MethodCallExpression(new VariableExpression("this"),"createSpec",new ConstantExpression(call.getLineNumber(),true)));
                call.setImplicitThis(false);
              }
 else {
                restrict(call,BASE_MESSAGE);
              }
            }
            if (methodName.getText().equals("version")) {
              Expression objectExpression=call.getObjectExpression();
              if (!(objectExpression instanceof MethodCallExpression)) {
                restrict(call,BASE_MESSAGE);
              }
            }
          }
 else {
            if (!call.isImplicitThis()) {
              restrict(methodName,VERSION_MESSAGE);
            }
 else {
              restrict(methodName,BASE_MESSAGE);
            }
          }
        }
 else {
          restrict(methodName,NOT_LITERAL_ID_METHOD_NAME);
        }
      }
 else {
        restrict(call);
      }
    }
    private void hasSingleConstantStringArg(    MethodCallExpression call){
      ArgumentListExpression argumentList=(ArgumentListExpression)call.getArguments();
      if (argumentList.getExpressions().size() == 1) {
        Expression argumentExpression=argumentList.getExpressions().get(0);
        if (argumentExpression instanceof ConstantExpression) {
          ConstantExpression constantArgumentExpression=(ConstantExpression)argumentExpression;
          if (!isString(constantArgumentExpression)) {
            restrict(constantArgumentExpression,INVALID_ARGUMENT_LIST);
          }
        }
 else {
          restrict(argumentExpression,INVALID_ARGUMENT_LIST);
        }
      }
 else {
        restrict(argumentList,INVALID_ARGUMENT_LIST);
      }
    }
    private boolean isString(    ConstantExpression constantExpression){
      return constantExpression.getType().getName().equals(String.class.getName());
    }
    @Override public void visitExpressionStatement(    ExpressionStatement statement){
      statement.getExpression().visit(this);
    }
  }
);
  return new ExpressionStatement(closureCall);
}
