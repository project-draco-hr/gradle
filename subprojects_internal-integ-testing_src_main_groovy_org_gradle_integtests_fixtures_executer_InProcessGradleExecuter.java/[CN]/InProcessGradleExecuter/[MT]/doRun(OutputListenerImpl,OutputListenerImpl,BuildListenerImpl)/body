{
  InputStream originalStdIn=System.in;
  Properties originalSysProperties=new Properties();
  originalSysProperties.putAll(System.getProperties());
  File originalUserDir=new File(originalSysProperties.getProperty("user.dir"));
  Map<String,String> originalEnv=System.getenv();
  System.setIn(getStdin());
  processEnvironment.maybeSetProcessDir(getWorkingDir());
  for (  Map.Entry<String,String> entry : getEnvironmentVars().entrySet()) {
    processEnvironment.maybeSetEnvironmentVariable(entry.getKey(),entry.getValue());
  }
  Map<String,String> implicitJvmSystemProperties=getImplicitJvmSystemProperties();
  System.getProperties().putAll(implicitJvmSystemProperties);
  StartParameter parameter=new StartParameter();
  parameter.setLogLevel(LogLevel.INFO);
  parameter.setSearchUpwards(true);
  parameter.setCurrentDir(getWorkingDir());
  CommandLineParser parser=new CommandLineParser();
  DefaultCommandLineConverter converter=new DefaultCommandLineConverter();
  converter.configure(parser);
  converter.convert(parser.parse(getAllArgs()),parameter);
  GradleProperties gradleProperties=new GradleProperties();
  gradleProperties.configureFromBuildDir(getWorkingDir(),parameter.isSearchUpwards());
  gradleProperties.updateStartParameter(parameter);
  DefaultGradleLauncherFactory factory=(DefaultGradleLauncherFactory)GradleLauncher.getFactory();
  factory.addListener(listener);
  GradleLauncher gradleLauncher=GradleLauncher.newInstance(parameter);
  gradleLauncher.addStandardOutputListener(outputListener);
  gradleLauncher.addStandardErrorListener(errorListener);
  try {
    return gradleLauncher.run();
  }
  finally {
    System.setProperties(originalSysProperties);
    processEnvironment.maybeSetProcessDir(originalUserDir);
    for (    Map.Entry<String,String> entry : originalEnv.entrySet()) {
      String oldValue=entry.getValue();
      if (oldValue != null) {
        processEnvironment.maybeSetEnvironmentVariable(entry.getKey(),oldValue);
      }
 else {
        processEnvironment.maybeRemoveEnvironmentVariable(entry.getKey());
      }
    }
    factory.removeListener(listener);
    System.setIn(originalStdIn);
  }
}
