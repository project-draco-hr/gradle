{
  InputStream originalStdIn=System.in;
  Properties originalSysProperties=new Properties();
  originalSysProperties.putAll(System.getProperties());
  File originalUserDir=new File(originalSysProperties.getProperty("user.dir"));
  Map<String,String> originalEnv=new HashMap<String,String>(System.getenv());
  System.setIn(getStdin());
  processEnvironment.maybeSetProcessDir(getWorkingDir());
  for (  Map.Entry<String,String> entry : getEnvironmentVars().entrySet()) {
    processEnvironment.maybeSetEnvironmentVariable(entry.getKey(),entry.getValue());
  }
  Map<String,String> implicitJvmSystemProperties=getImplicitJvmSystemProperties();
  System.getProperties().putAll(implicitJvmSystemProperties);
  StartParameter parameter=new StartParameter();
  parameter.setCurrentDir(getWorkingDir());
  parameter.setShowStacktrace(ShowStacktrace.ALWAYS);
  CommandLineParser parser=new CommandLineParser();
  DefaultCommandLineConverter converter=new DefaultCommandLineConverter();
  converter.configure(parser);
  ParsedCommandLine parsedCommandLine=parser.parse(getAllArgs());
  BuildLayoutParameters layout=converter.getLayoutConverter().convert(parsedCommandLine,new BuildLayoutParameters());
  Map<String,String> properties=new HashMap<String,String>();
  new LayoutToPropertiesConverter().convert(layout,properties);
  converter.getSystemPropertiesConverter().convert(parsedCommandLine,properties);
  new PropertiesToStartParameterConverter().convert(properties,parameter);
  converter.convert(parsedCommandLine,parameter);
  DefaultGradleLauncherFactory factory=GLOBAL_SERVICES.get(DefaultGradleLauncherFactory.class);
  factory.addListener(listener);
  try {
    GradleLauncher gradleLauncher=factory.newInstance(parameter,new DefaultBuildCancellationToken());
    try {
      gradleLauncher.addStandardOutputListener(outputListener);
      gradleLauncher.addStandardErrorListener(errorListener);
      return gradleLauncher.run();
    }
  finally {
      gradleLauncher.stop();
    }
  }
  finally {
    System.setProperties(originalSysProperties);
    processEnvironment.maybeSetProcessDir(originalUserDir);
    for (    String envVar : getEnvironmentVars().keySet()) {
      String oldValue=originalEnv.get(envVar);
      if (oldValue != null) {
        processEnvironment.maybeSetEnvironmentVariable(envVar,oldValue);
      }
 else {
        processEnvironment.maybeRemoveEnvironmentVariable(envVar);
      }
    }
    factory.removeListener(listener);
    System.setIn(originalStdIn);
  }
}
