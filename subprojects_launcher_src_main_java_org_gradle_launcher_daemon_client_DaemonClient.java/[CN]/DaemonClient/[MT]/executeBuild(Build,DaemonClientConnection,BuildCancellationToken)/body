{
  Object result;
  try {
    LOGGER.info("Connected to daemon {}. Dispatching request {}.",connection.getDaemon(),build);
    connection.dispatch(build);
    result=connection.receive();
  }
 catch (  StaleDaemonAddressException e) {
    LOGGER.debug("Connected to a stale daemon address.",e);
    throw new DaemonInitialConnectException("Connected to a stale daemon address.",e);
  }
  if (result == null) {
    throw new DaemonInitialConnectException("The first result from the daemon was empty. Most likely the process died immediately after connection.");
  }
  if (result instanceof BuildStarted) {
    DaemonDiagnostics diagnostics=((BuildStarted)result).getDiagnostics();
    result=monitorBuild(build,diagnostics,connection,cancellationToken);
  }
  LOGGER.info("Received result {} from daemon {}.",result,connection.getDaemon());
  connection.dispatch(new Finished());
  if (result instanceof Failure) {
    Throwable failure=((Failure)result).getValue();
    if (failure instanceof DaemonStoppedException && cancellationToken.isCancellationRequested()) {
      LOGGER.error("Daemon was stopped to handle build cancel request.");
      throw new BuildCancelledException();
    }
    throw UncheckedException.throwAsUncheckedException(failure);
  }
 else   if (result instanceof DaemonUnavailable) {
    throw new DaemonInitialConnectException("The daemon we connected to was unavailable: " + ((DaemonUnavailable)result).getReason());
  }
 else   if (result instanceof Result) {
    return ((Result)result).getValue();
  }
 else {
    throw invalidResponse(result,build);
  }
}
