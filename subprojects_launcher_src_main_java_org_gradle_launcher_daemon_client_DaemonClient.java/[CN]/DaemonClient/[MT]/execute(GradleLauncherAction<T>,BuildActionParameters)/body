{
  LOGGER.warn("Note: the Gradle build daemon is an experimental feature.");
  LOGGER.warn("As such, you may experience unexpected build failures. You may need to occasionally stop the daemon.");
  while (true) {
    DaemonConnection daemonConnection=connector.connect(compatibilitySpec);
    Connection<Object> connection=daemonConnection.getConnection();
    Build build=new Build(action,parameters);
    Object firstResult;
    try {
      LOGGER.info("Connected to the daemon. Dispatching {} request.",build);
      connection.dispatch(build);
      firstResult=connection.receive();
    }
 catch (    Exception e) {
      LOGGER.info("Exception when attempted to send and receive first result from the daemon. I will try a different daemon... The exception was:",e);
      continue;
    }
    if (firstResult instanceof BuildStarted) {
      return (T)monitorBuild(build,connection).getValue();
    }
 else     if (firstResult instanceof DaemonBusy) {
      LOGGER.info("The daemon we connected to was busy. Trying a different daemon...");
    }
 else     if (firstResult instanceof Failure) {
      throw ((Failure)firstResult).getValue();
    }
 else     if (firstResult == null) {
      LOGGER.info("The first result from the daemon was empty. Most likely the daemon has died. Trying a different daemon...");
    }
 else {
      throw new IllegalStateException(String.format("The first result from the Daemon: %s is a Result of a type we don't have a strategy to handle." + "Earlier, %s request was sent to the daemon.",firstResult,build));
    }
  }
}
