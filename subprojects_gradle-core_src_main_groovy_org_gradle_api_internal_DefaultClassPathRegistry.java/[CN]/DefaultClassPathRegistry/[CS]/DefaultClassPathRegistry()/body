{
  URI location;
  try {
    location=DefaultClassPathRegistry.class.getProtectionDomain().getCodeSource().getLocation().toURI();
  }
 catch (  URISyntaxException e) {
    throw new UncheckedIOException(e);
  }
  if (!location.getScheme().equals("file")) {
    throw new GradleException(String.format("Cannot determine Gradle home using codebase '%s'.",location));
  }
  File codeSource=new File(location.getPath());
  if (codeSource.isFile()) {
    File gradleHome=codeSource.getParentFile().getParentFile();
    runtimeLibDir=new DirScanner(new File(gradleHome + "/lib"));
    pluginLibDir=new DirScanner(new File(gradleHome + "/lib/plugins"));
  }
 else {
    runtimeLibDir=new ClassPathScanner(codeSource);
    pluginLibDir=new ClassPathScanner(codeSource);
  }
  List<Pattern> groovyPatterns=toPatterns("groovy-all");
  classPaths.put("LOCAL_GROOVY",groovyPatterns);
  List<Pattern> gradleApiPatterns=toPatterns("gradle-\\w+","ivy");
  gradleApiPatterns.addAll(groovyPatterns);
  classPaths.put("GRADLE_API",gradleApiPatterns);
  classPaths.put("GRADLE_CORE",toPatterns("gradle-core"));
  classPaths.put("ANT",toPatterns("ant","ant-launcher"));
  classPaths.put("ANT_JUNIT",toPatterns("ant","ant-launcher","ant-junit"));
  classPaths.put("TEST_LISTENER",toPatterns("gradle-core","gradle-plugins"));
  classPaths.put("COMMONS_CLI",toPatterns("commons-cli"));
}
