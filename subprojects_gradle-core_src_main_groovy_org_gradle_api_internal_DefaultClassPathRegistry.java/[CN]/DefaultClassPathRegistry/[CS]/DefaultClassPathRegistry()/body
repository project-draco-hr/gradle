{
  File codeSource=findThisClass();
  if (codeSource.isFile()) {
    File gradleHome=codeSource.getParentFile().getParentFile();
    runtimeLibs=new DirScanner(new File(gradleHome + "/lib"));
    pluginLibs=new DirScanner(new File(gradleHome + "/lib/plugins"));
  }
 else {
    runtimeLibs=new ClassPathScanner(codeSource);
    pluginLibs=runtimeLibs;
  }
  List<Pattern> groovyPatterns=toPatterns("groovy-all");
  classPaths.put("LOCAL_GROOVY",groovyPatterns);
  List<Pattern> gradleApiPatterns=toPatterns("gradle-\\w+","ivy","slf4j","ant");
  gradleApiPatterns.addAll(groovyPatterns);
  classPaths.put("GRADLE_API",gradleApiPatterns);
  classPaths.put("GRADLE_CORE",toPatterns("gradle-core"));
  classPaths.put("ANT",toPatterns("ant","ant-launcher"));
  classPaths.put("ANT_JUNIT",toPatterns("ant","ant-launcher","ant-junit"));
  classPaths.put("COMMONS_CLI",toPatterns("commons-cli"));
  classPaths.put("WORKER_PROCESS",toPatterns("gradle-core","slf4j-api","logback-classic","logback-core","jul-to-slf4j","jansi","jna","jna-posix"));
  classPaths.put("WORKER_MAIN",toPatterns("gradle-core-worker"));
}
