{
  ModelType<RuleAwareNamedDomainObjectFactoryRegistry<T>> factoryRegistryType=new ModelType.Builder<RuleAwareNamedDomainObjectFactoryRegistry<T>>(){
  }
.where(new ModelType.Parameter<T>(){
  }
,ModelType.of(typeClass)).build();
  ModelReference<CollectionBuilder<T>> containerReference=ModelReference.of(name,DefaultCollectionBuilder.typeOf(typeClass));
  return ModelCreators.of(containerReference,new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode mutableModelNode,    List<ModelView<?>> modelViews){
      final DefaultPolymorphicNamedEntityInstantiator<T> namedEntityInstantiator=new DefaultPolymorphicNamedEntityInstantiator<T>(typeClass,"this collection");
      ModelType<RuleAwarePolymorphicNamedEntityInstantiator<T>> instantiatorType=new ModelType.Builder<RuleAwarePolymorphicNamedEntityInstantiator<T>>(){
      }
.where(new ModelType.Parameter<T>(){
      }
,ModelType.of(typeClass)).build();
      mutableModelNode.setPrivateData(instantiatorType,new DefaultRuleAwarePolymorphicNamedEntityInstantiator<T>(namedEntityInstantiator));
    }
  }
).descriptor(descriptor).ephemeral(true).withProjection(new PolymorphicCollectionBuilderProjection<T>(ModelType.of(typeClass),initializeAction)).withProjection(new SpecializedCollectionBuilderProjection<C,T>(ModelType.of(containerClass),collectionBuilderFactory)).withProjection(new UnmanagedModelProjection<RuleAwareNamedDomainObjectFactoryRegistry<T>>(factoryRegistryType)).build();
}
