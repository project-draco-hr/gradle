{
  try {
    return FluentIterable.from(cache.get(container)).transform(new Function<Reference<Class<?>>,Class<?>>(){
      @Override public Class<?> apply(      Reference<Class<?>> input){
        return input.get();
      }
    }
).filter(Predicates.notNull());
  }
 catch (  ExecutionException e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
