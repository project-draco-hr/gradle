{
  RepositoryHandler repositories=publicationServices.createRepositoryHandler();
  PublicationContainer publications=instantiator.newInstance(DefaultPublicationContainer.class,instantiator);
  PublishingExtension extension=project.getExtensions().create(PublishingExtension.NAME,DefaultPublishingExtension.class,repositories,publications);
  extension.getPublications().whenObjectAdded(new Action<Publication>(){
    public void execute(    Publication publication){
      PublicationInternal internalPublication=(PublicationInternal)publication;
      publicationRegistry.registerPublication(project.getPath(),new DefaultProjectPublication(internalPublication.getCoordinates()));
    }
  }
);
  ModelPath extensionModelPath=ModelPath.path(PublishingExtension.NAME);
  modelRules.register(extensionModelPath.toString(),extension);
  modelRules.rule(new ModelRule(){
    public void triggerDeferredConfigurables(    PublishingExtension publishingExtension){
      project.getExtensions().getByType(DefaultPublishingExtension.class);
    }
  }
);
  Task publishLifecycleTask=project.getTasks().create(PUBLISH_LIFECYCLE_TASK_NAME);
  publishLifecycleTask.setDescription("Publishes all publications produced by this project.");
  publishLifecycleTask.setGroup(PUBLISH_TASK_GROUP);
}
