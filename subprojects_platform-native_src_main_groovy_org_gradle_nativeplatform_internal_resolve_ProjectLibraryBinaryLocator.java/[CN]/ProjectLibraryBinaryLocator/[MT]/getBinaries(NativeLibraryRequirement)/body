{
  ProjectInternal project=findProject(requirement);
  ModelRegistry modelRegistry=project.getModelRegistry();
  ComponentSpecContainer components=modelRegistry.find(ModelPath.path("components"),ModelType.of(ComponentSpecContainer.class));
  if (components == null) {
    throw new LibraryResolveException(String.format("Project does not have a libraries container: '%s'",project.getPath()));
  }
  String libraryName=requirement.getLibraryName();
  NativeLibrarySpec library=components.withType(NativeLibrarySpec.class).get(libraryName);
  if (library == null) {
    throw new UnknownDomainObjectException(String.format("%s with name '%s' not found.",NativeLibrarySpec.class.getSimpleName(),libraryName));
  }
  NamedDomainObjectCollection<NativeBinarySpec> projectBinaries=library.getBinaries().withType(NativeBinarySpec.class);
  DomainObjectSet<NativeLibraryBinary> binaries=new DefaultDomainObjectSet<NativeLibraryBinary>(NativeLibraryBinary.class);
  for (  NativeBinarySpec nativeBinarySpec : projectBinaries) {
    binaries.add((NativeLibraryBinary)nativeBinarySpec);
  }
  return binaries;
}
