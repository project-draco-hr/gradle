{
  final ListMultimap<NormalizedFileSnapshot,IncrementalFileSnapshotWithAbsolutePath> unaccountedForPreviousSnapshots=MultimapBuilder.treeKeys().linkedListValues().build();
  for (  Entry<String,NormalizedFileSnapshot> entry : previous.entrySet()) {
    String absolutePath=entry.getKey();
    NormalizedFileSnapshot previousSnapshot=entry.getValue();
    unaccountedForPreviousSnapshots.put(previousSnapshot,new IncrementalFileSnapshotWithAbsolutePath(absolutePath,previousSnapshot.getSnapshot()));
  }
  final Iterator<Entry<String,NormalizedFileSnapshot>> currentEntries=current.entrySet().iterator();
  return new AbstractIterator<TaskStateChange>(){
    private Iterator<Entry<NormalizedFileSnapshot,IncrementalFileSnapshotWithAbsolutePath>> unaccountedForPreviousSnapshotsIterator;
    private final ListMultimap<String,IncrementalFileSnapshotWithAbsolutePath> addedFiles=MultimapBuilder.hashKeys().linkedListValues().build();
    private Iterator<IncrementalFileSnapshotWithAbsolutePath> addedFilesIterator;
    @Override protected TaskStateChange computeNext(){
      while (currentEntries.hasNext()) {
        Entry<String,NormalizedFileSnapshot> entry=currentEntries.next();
        String currentAbsolutePath=entry.getKey();
        NormalizedFileSnapshot currentNormalizedSnapshot=entry.getValue();
        IncrementalFileSnapshot currentSnapshot=currentNormalizedSnapshot.getSnapshot();
        List<IncrementalFileSnapshotWithAbsolutePath> previousSnapshotsForNormalizedPath=unaccountedForPreviousSnapshots.get(currentNormalizedSnapshot);
        if (previousSnapshotsForNormalizedPath.isEmpty()) {
          IncrementalFileSnapshotWithAbsolutePath currentSnapshotWithAbsolutePath=new IncrementalFileSnapshotWithAbsolutePath(currentAbsolutePath,currentSnapshot);
          addedFiles.put(currentNormalizedSnapshot.getNormalizedPath(),currentSnapshotWithAbsolutePath);
        }
 else {
          IncrementalFileSnapshotWithAbsolutePath previousSnapshotWithAbsolutePath=previousSnapshotsForNormalizedPath.remove(0);
          IncrementalFileSnapshot previousSnapshot=previousSnapshotWithAbsolutePath.getSnapshot();
          if (!currentSnapshot.isContentUpToDate(previousSnapshot)) {
            return new FileChange(currentAbsolutePath,ChangeType.MODIFIED,fileType);
          }
        }
      }
      if (unaccountedForPreviousSnapshotsIterator == null) {
        unaccountedForPreviousSnapshotsIterator=unaccountedForPreviousSnapshots.entries().iterator();
      }
      if (unaccountedForPreviousSnapshotsIterator.hasNext()) {
        Entry<NormalizedFileSnapshot,IncrementalFileSnapshotWithAbsolutePath> unaccountedForPreviousSnapshotEntry=unaccountedForPreviousSnapshotsIterator.next();
        String normalizedPath=unaccountedForPreviousSnapshotEntry.getKey().getNormalizedPath();
        List<IncrementalFileSnapshotWithAbsolutePath> addedFilesForNormalizedPath=addedFiles.get(normalizedPath);
        if (!addedFilesForNormalizedPath.isEmpty()) {
          IncrementalFileSnapshotWithAbsolutePath modifiedSnapshot=addedFilesForNormalizedPath.remove(0);
          return new FileChange(modifiedSnapshot.getAbsolutePath(),ChangeType.MODIFIED,fileType);
        }
 else {
          IncrementalFileSnapshotWithAbsolutePath removedSnapshot=unaccountedForPreviousSnapshotEntry.getValue();
          return new FileChange(removedSnapshot.getAbsolutePath(),ChangeType.REMOVED,fileType);
        }
      }
      if (includeAdded) {
        if (addedFilesIterator == null) {
          addedFilesIterator=addedFiles.values().iterator();
        }
        if (addedFilesIterator.hasNext()) {
          IncrementalFileSnapshotWithAbsolutePath addedFile=addedFilesIterator.next();
          return new FileChange(addedFile.getAbsolutePath(),ChangeType.ADDED,fileType);
        }
      }
      return endOfData();
    }
  }
;
}
