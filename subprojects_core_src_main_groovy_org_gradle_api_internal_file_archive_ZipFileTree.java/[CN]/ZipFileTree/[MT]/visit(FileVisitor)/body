{
  if (!zipFile.exists()) {
    return this;
  }
  if (!zipFile.isFile()) {
    throw new InvalidUserDataException(String.format("Cannot expand %s as it is not a file.",this));
  }
  AtomicBoolean stopFlag=new AtomicBoolean();
  try {
    ZipFile zip=new ZipFile(zipFile);
    try {
      Map<String,ZipEntry> entriesByName=new TreeMap<String,ZipEntry>();
      Enumeration entries=zip.getEntries();
      while (entries.hasMoreElements()) {
        ZipEntry entry=(ZipEntry)entries.nextElement();
        entriesByName.put(entry.getName(),entry);
      }
      Iterator<ZipEntry> sortedEntries=entriesByName.values().iterator();
      while (!stopFlag.get() && sortedEntries.hasNext()) {
        ZipEntry entry=sortedEntries.next();
        if (entry.isDirectory()) {
          visitor.visitDir(new DetailsImpl(entry,zip,stopFlag));
        }
 else {
          visitor.visitFile(new DetailsImpl(entry,zip,stopFlag));
        }
      }
    }
  finally {
      zip.close();
    }
  }
 catch (  Exception e) {
    throw new GradleException(String.format("Could not expand %s.",this),e);
  }
  return this;
}
