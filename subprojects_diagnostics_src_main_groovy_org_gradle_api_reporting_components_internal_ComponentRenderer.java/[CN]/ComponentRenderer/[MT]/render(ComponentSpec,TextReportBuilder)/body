{
  builder.subheading(StringUtils.capitalize(component.getDisplayName()));
  builder.getOutput().println();
  builder.collection("Source sets",CollectionUtils.sort(component.getSource().values(),new Comparator<LanguageSourceSet>(){
    @Override public int compare(    LanguageSourceSet o1,    LanguageSourceSet o2){
      return o1.getDisplayName().compareToIgnoreCase(o2.getDisplayName());
    }
  }
),sourceSetRenderer,"source sets");
  builder.getOutput().println();
  builder.collection("Binaries",CollectionUtils.sort(component.getBinaries().values(),new Comparator<BinarySpec>(){
    public int compare(    BinarySpec binary1,    BinarySpec binary2){
      return binary1.getName().compareTo(binary2.getName());
    }
  }
),binaryRenderer,"binaries");
}
