{
  return new DiscoveredTaskStateChanges(){
    private final Collection<File> discoveredFiles=Sets.newHashSet();
    public Iterator<TaskStateChange> iterator(){
      if (previousExecution.getDiscoveredInputFilesSnapshot() == null) {
        return Collections.<TaskStateChange>singleton(new DescriptiveChange("Discovered input file history is not available.")).iterator();
      }
      Iterables.addAll(discoveredFiles,previousExecution.getDiscoveredInputFilesSnapshot().getAllFiles());
      final FileCollectionSnapshot discoveredFileSnapshot=inputFilesSnapshotter.snapshot(new SimpleFileCollection(discoveredFiles));
      return new AbstractIterator<TaskStateChange>(){
        final FileCollectionSnapshot.ChangeIterator<String> changeIterator=discoveredFileSnapshot.iterateChangesSince(previousExecution.getDiscoveredInputFilesSnapshot());
        final ChangeListenerAdapter listenerAdapter=new ChangeListenerAdapter();
        @Override protected TaskStateChange computeNext(){
          if (changeIterator.next(listenerAdapter)) {
            return listenerAdapter.lastChange;
          }
          return endOfData();
        }
      }
;
    }
    @Override public void newInputs(    Set<File> files){
      discoveredFiles.clear();
      discoveredFiles.addAll(files);
    }
    public void snapshotAfterTask(){
      currentExecution.setDiscoveredInputFilesSnapshot(inputFilesSnapshotter.snapshot(new SimpleFileCollection(discoveredFiles)));
    }
  }
;
}
