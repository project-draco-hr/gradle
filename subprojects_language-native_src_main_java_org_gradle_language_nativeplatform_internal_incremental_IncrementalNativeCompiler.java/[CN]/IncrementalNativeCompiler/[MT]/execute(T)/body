{
  final PersistentStateCache<CompilationState> compileStateCache=compilationStateCacheFactory.create(task.getPath());
  final IncrementalCompilation compilation=cacheAccess.useCache("process source files",new Factory<IncrementalCompilation>(){
    public IncrementalCompilation create(){
      DefaultSourceIncludesParser sourceIncludesParser=new DefaultSourceIncludesParser(sourceParser,importsAreIncludes);
      IncrementalCompileProcessor processor=createProcessor(compileStateCache,sourceIncludesParser,spec.getIncludeRoots());
      IncrementalCompilation incrementalCompilation=processor.processSourceFiles(spec.getSourceFiles());
      spec.setSourceFileIncludes(incrementalCompilation.getSourceFileIncludes());
      return incrementalCompilation;
    }
  }
);
  WorkResult workResult;
  if (spec.isIncrementalCompile()) {
    workResult=doIncrementalCompile(compilation,spec);
  }
 else {
    workResult=doCleanIncrementalCompile(spec);
  }
  cacheAccess.useCache("update compilation state",new Factory<Void>(){
    public Void create(){
      compileStateCache.set(compilation.getFinalState());
      return null;
    }
  }
);
  return workResult;
}
