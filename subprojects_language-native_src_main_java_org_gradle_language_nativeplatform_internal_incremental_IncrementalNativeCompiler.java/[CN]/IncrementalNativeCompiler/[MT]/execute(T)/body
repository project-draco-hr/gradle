{
  PersistentStateCache<CompilationState> compileStateCache=compilationStateCacheFactory.create(task.getPath());
  DefaultSourceIncludesParser sourceIncludesParser=new DefaultSourceIncludesParser(sourceParser,importsAreIncludes);
  IncrementalCompileProcessor processor=createProcessor(compileStateCache,sourceIncludesParser,spec.getIncludeRoots());
  IncrementalCompilation compilation=processor.processSourceFiles(spec.getSourceFiles());
  spec.setSourceFileIncludeDirectives(mapIncludes(spec.getSourceFiles(),compilation.getFinalState()));
  handleDiscoveredInputs(spec,compilation,spec.getDiscoveredInputRecorder());
  WorkResult workResult;
  if (spec.isIncrementalCompile()) {
    workResult=doIncrementalCompile(compilation,spec);
  }
 else {
    workResult=doCleanIncrementalCompile(spec);
  }
  compileStateCache.set(compilation.getFinalState());
  return workResult;
}
