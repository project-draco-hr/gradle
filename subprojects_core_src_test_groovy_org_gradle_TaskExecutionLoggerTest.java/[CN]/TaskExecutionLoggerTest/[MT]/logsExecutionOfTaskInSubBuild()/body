{
  context.checking(new Expectations(){
{
      Project rootProject=context.mock(Project.class,"rootProject");
      allowing(gradle).getParent();
      will(returnValue(context.mock(Gradle.class,"rootBuild")));
      allowing(gradle).getRootProject();
      will(returnValue(rootProject));
      allowing(rootProject).getName();
      will(returnValue("build"));
      one(progressLoggerFactory).newOperation(TaskExecutionLogger.class);
      will(returnValue(progressLogger));
      one(progressLogger).setDescription("Execute :build:path");
      one(progressLogger).setShortDescription(":build:path");
      one(progressLogger).setLoggingHeader(":build:path");
      one(progressLogger).started();
    }
  }
);
  executionLogger.beforeExecute(task);
  context.checking(new Expectations(){
{
      allowing(state).getSkipMessage();
      will(returnValue(null));
      one(progressLogger).completed(null);
    }
  }
);
  executionLogger.afterExecute(task,state);
}
