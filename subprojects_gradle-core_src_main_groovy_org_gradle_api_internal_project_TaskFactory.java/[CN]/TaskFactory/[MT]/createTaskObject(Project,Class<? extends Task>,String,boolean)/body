{
  if (!Task.class.isAssignableFrom(type)) {
    throw new GradleException(String.format("Cannot create task of type '%s' as it does not implement the Task interface.",type.getSimpleName()));
  }
  Class<? extends Task> generatedType=type;
  if (generateGetters && ConventionTask.class.isAssignableFrom(type)) {
    generatedType=generator.generate(type);
  }
  Constructor<? extends Task> constructor=null;
  Object[] params=null;
  try {
    constructor=generatedType.getDeclaredConstructor();
    params=new Object[0];
  }
 catch (  NoSuchMethodException e) {
  }
  try {
    constructor=generatedType.getDeclaredConstructor(Project.class,String.class);
    params=new Object[]{project,name};
  }
 catch (  NoSuchMethodException e) {
  }
  if (constructor == null) {
    throw new GradleException(String.format("Cannot create task of type '%s' as it does not have an appropriate public constructor.",type.getSimpleName()));
  }
  AbstractTask.injectIntoNextInstance(project,name);
  try {
    return constructor.newInstance(params);
  }
 catch (  InvocationTargetException e) {
    throw new GradleException(String.format("Could not create task of type '%s'.",type.getSimpleName()),e.getCause());
  }
catch (  Exception e) {
    throw new GradleException(String.format("Could not create task of type '%s'.",type.getSimpleName()),e);
  }
 finally {
    AbstractTask.injectIntoNextInstance(null,null);
  }
}
