{
  if (!Task.class.isAssignableFrom(type)) {
    throw new GradleException(String.format("Cannot create task of type '%s' as it does not implement the Task interface.",type.getSimpleName()));
  }
  Constructor<? extends Task> constructor;
  try {
    constructor=type.getDeclaredConstructor(Project.class,String.class);
  }
 catch (  NoSuchMethodException e) {
    throw new GradleException(String.format("Cannot create task of type '%s' as it does not have an appropriate public constructor.",type.getSimpleName()));
  }
  if (generateGetters && ConventionTask.class.isAssignableFrom(type)) {
    Class<? extends Task> generatedType=generator.generate(type);
    try {
      constructor=generatedType.getDeclaredConstructor(Project.class,String.class);
    }
 catch (    NoSuchMethodException e) {
      throw new GradleException(e);
    }
  }
  try {
    return constructor.newInstance(project,name);
  }
 catch (  InvocationTargetException e) {
    throw new GradleException(String.format("Could not create task of type '%s'.",type.getSimpleName()),e.getCause());
  }
catch (  Exception e) {
    throw new GradleException(String.format("Could not create task of type '%s'.",type.getSimpleName()),e);
  }
}
