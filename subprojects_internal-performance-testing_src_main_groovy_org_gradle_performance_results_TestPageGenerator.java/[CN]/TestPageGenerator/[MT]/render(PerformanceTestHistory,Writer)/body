{
  new MetricsHtml(writer){
{
      html();
      head();
      headSection(this);
      title().text(String.format("Performance test %s",testHistory.getDisplayName())).end();
      end();
      body();
      div().id("content");
      h2().text(String.format("Test: %s",testHistory.getDisplayName())).end();
      text(getReproductionInstructions(testHistory));
      h3().text("Average total time").end();
      div().id("totalTimeChart").classAttr("chart");
      p().text("Loading...").end();
      script();
      text("performanceTests.createPerformanceGraph('" + testHistory.getId() + ".json', function(data) { return data.totalTime }, 'total time', 's', 'totalTimeChart');");
      end();
      end();
      h3().text("Average configuration time").end();
      div().id("configurationTimeChart").classAttr("chart");
      p().text("Loading...").end();
      script();
      text("performanceTests.createPerformanceGraph('" + testHistory.getId() + ".json', function(data) { return data.configurationTime }, 'configuration time', 's', 'configurationTimeChart');");
      end();
      end();
      h3().text("Average execution time").end();
      div().id("executionTimeChart").classAttr("chart");
      p().text("Loading...").end();
      script();
      text("performanceTests.createPerformanceGraph('" + testHistory.getId() + ".json', function(data) { return data.executionTime }, 'execution time', 's', 'executionTimeChart');");
      end();
      end();
      h3().text("Average setup/teardown time").end();
      div().id("miscTimeChart").classAttr("chart");
      p().text("Loading...").end();
      script();
      text("performanceTests.createPerformanceGraph('" + testHistory.getId() + ".json', function(data) { return data.miscTime }, 'setup/teardown time', 's', 'miscTimeChart');");
      end();
      end();
      h3().text("Average heap usage").end();
      div().id("heapUsageChart").classAttr("chart");
      p().text("Loading...").end();
      script();
      text("performanceTests.createPerformanceGraph('" + testHistory.getId() + ".json', function(data) { return data.heapUsage }, 'heap usage', 'mb', 'heapUsageChart');");
      end();
      end();
      div().id("tooltip").end();
      div().id("controls").end();
      h3().text("Test details").end();
      table().classAttr("test-details");
      tr();
      th().text("Scenario").end();
      th().text("Test project").end();
      th().text("Tasks").end();
      th().text("Gradle args").end();
      th().text("Gradle JVM args").end();
      th().text("Daemon").end();
      end();
      for (      ScenarioDefinition scenario : testHistory.getScenarios()) {
        tr();
        textCell(scenario.getDisplayName());
        textCell(scenario.getTestProject());
        textCell(scenario.getTasks());
        textCell(scenario.getArgs());
        textCell(scenario.getGradleOpts());
        textCell(scenario.getDaemon());
        end();
      }
      end();
      h3().text("Test history").end();
      table().classAttr("history");
      tr().classAttr("control-groups");
      th().colspan("3").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average build time").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average configuration time").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average execution time").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average heap usage (old measurement)").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average total heap usage").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average max heap usage").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average max uncollected heap").end();
      th().colspan(String.valueOf(testHistory.getScenarioCount() * getColumnsForSamples())).text("Average max committed heap").end();
      th().colspan("8").text("Details").end();
      end();
      tr();
      th().text("Date").end();
      th().text("Branch").end();
      th().text("Git commit").end();
      for (int i=0; i < 8; i++) {
        for (        String label : testHistory.getScenarioLabels()) {
          renderHeaderForSamples(label);
        }
      }
      th().text("Test version").end();
      th().text("Operating System").end();
      th().text("JVM").end();
      th().text("Test project").end();
      th().text("Tasks").end();
      th().text("Gradle args").end();
      th().text("Gradle JVM opts").end();
      th().text("Daemon").end();
      end();
      for (      PerformanceTestExecution results : testHistory.getExecutions()) {
        tr();
        textCell(format.timestamp(new Date(results.getStartTime())));
        textCell(results.getVcsBranch());
        td();
        List<Link> vcsCommits=urlify(results.getVcsCommits());
        for (int i=0; i < vcsCommits.size(); i++) {
          Link vcsCommit=vcsCommits.get(i);
          a().href(vcsCommit.getValue()).text(vcsCommit.getLabel()).end();
          if (i != vcsCommits.size() - 1) {
            text(" | ");
          }
        }
        end();
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getTotalTime();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getConfigurationTime();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<Duration>,MeasuredOperationList>(){
          public DataSeries<Duration> transform(          MeasuredOperationList original){
            return original.getExecutionTime();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getTotalMemoryUsed();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getTotalHeapUsage();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxHeapUsage();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxUncollectedHeap();
          }
        }
);
        renderSamplesForExperiment(results.getScenarios(),new Transformer<DataSeries<DataAmount>,MeasuredOperationList>(){
          public DataSeries<DataAmount> transform(          MeasuredOperationList original){
            return original.getMaxCommittedHeap();
          }
        }
);
        textCell(results.getVersionUnderTest());
        textCell(results.getOperatingSystem());
        textCell(results.getJvm());
        textCell(results.getTestProject());
        textCell(results.getTasks());
        textCell(results.getArgs());
        textCell(results.getGradleOpts());
        textCell(results.getDaemon());
        end();
      }
      end();
      end();
      footer(this);
      endAll();
    }
  }
;
}
