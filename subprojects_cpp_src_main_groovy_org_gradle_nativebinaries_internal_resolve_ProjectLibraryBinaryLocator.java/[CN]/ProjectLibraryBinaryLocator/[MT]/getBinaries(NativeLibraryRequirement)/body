{
  Project project=findProject(requirement);
  ProjectComponentContainer projectComponentContainer=project.getExtensions().findByType(ProjectComponentContainer.class);
  if (projectComponentContainer == null) {
    throw new LibraryResolveException(String.format("Project does not have a libraries container: '%s'",project.getPath()));
  }
  DomainObjectSet<ProjectNativeBinary> projectBinaries=projectComponentContainer.withType(NativeLibrarySpec.class).getByName(requirement.getLibraryName()).getBinaries();
  DomainObjectSet<NativeLibraryBinary> binaries=new DefaultDomainObjectSet<NativeLibraryBinary>(NativeLibraryBinary.class);
  for (  ProjectNativeBinary projectNativeBinary : projectBinaries) {
    binaries.add((NativeLibraryBinary)projectNativeBinary);
  }
  return binaries;
}
