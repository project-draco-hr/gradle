{
  project.getPlugins().apply(BasePlugin.class);
  project.getPlugins().apply(LanguageBasePlugin.class);
  final BinaryContainer binaries=project.getExtensions().getByType(BinaryContainer.class);
  final ToolChainRegistry toolChains=project.getExtensions().create("toolChains",DefaultToolChainRegistry.class,instantiator);
  final NamedDomainObjectSet<Executable> executables=project.getExtensions().create("executables",DefaultExecutableContainer.class,instantiator);
  final NamedDomainObjectSet<Library> libraries=project.getExtensions().create("libraries",DefaultLibraryContainer.class,instantiator,fileResolver);
  configurationActions.add(new Action<ProjectInternal>(){
    public void execute(    ProjectInternal projectInternal){
      ToolChain defaultToolChain=toolChains.getDefaultToolChain();
      for (      Library library : libraries) {
        for (        Flavor flavor : library.getFlavors()) {
          register(setupDefaults(project,instantiator.newInstance(DefaultSharedLibraryBinary.class,library,flavor,defaultToolChain)),library,binaries);
          register(setupDefaults(project,instantiator.newInstance(DefaultStaticLibraryBinary.class,library,flavor,defaultToolChain)),library,binaries);
        }
      }
      for (      Executable executable : executables) {
        for (        Flavor flavor : executable.getFlavors()) {
          register(setupDefaults(project,instantiator.newInstance(DefaultExecutableBinary.class,executable,flavor,defaultToolChain)),executable,binaries);
        }
      }
    }
  }
);
}
