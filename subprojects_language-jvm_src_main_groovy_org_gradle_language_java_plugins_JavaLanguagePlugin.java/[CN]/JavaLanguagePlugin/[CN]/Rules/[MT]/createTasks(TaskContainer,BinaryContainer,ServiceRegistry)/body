{
  FileLookup fileLookup=serviceRegistry.get(FileLookup.class);
  for (  ProjectJarBinaryInternal binary : binaries.withType(ProjectJarBinaryInternal.class)) {
    for (    JavaSourceSet javaSourceSet : binary.getSource().withType(JavaSourceSet.class)) {
      String compileTaskName=binary.getNamingScheme().getTaskName("compile",((LanguageSourceSetInternal)javaSourceSet).getFullName());
      JavaCompile compile=tasks.create(compileTaskName,JavaCompile.class);
      compile.setDescription(String.format("Compiles %s.",javaSourceSet));
      compile.setDestinationDir(binary.getClassesDir());
      compile.setToolChain(binary.getToolChain());
      compile.setSource(javaSourceSet.getSource());
      compile.setClasspath(javaSourceSet.getCompileClasspath().getFiles());
      compile.setSourceCompatibility(JavaVersion.current().toString());
      compile.setTargetCompatibility(JavaVersion.current().toString());
      compile.setDependencyCacheDir(fileLookup.getFileResolver(compile.getProject().getBuildDir()).resolve("jvm-dep-cache"));
      compile.dependsOn(javaSourceSet);
      binary.getTasks().add(compile);
      binary.getTasks().getJar().dependsOn(compile);
    }
  }
}
