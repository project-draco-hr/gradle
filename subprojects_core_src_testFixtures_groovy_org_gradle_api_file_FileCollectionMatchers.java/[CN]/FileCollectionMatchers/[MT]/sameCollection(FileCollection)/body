{
  return new BaseMatcher<T>(){
    public boolean matches(    Object o){
      FileCollection actual=(FileCollection)o;
      List<? extends FileCollection> actualCollections=unpack(actual);
      List<? extends FileCollection> expectedCollections=unpack(expected);
      boolean equals=actualCollections.equals(expectedCollections);
      if (!equals) {
        System.out.println("expected: " + expectedCollections);
        System.out.println("actual: " + actualCollections);
      }
      return equals;
    }
    private List<? extends FileCollection> unpack(    FileCollection expected){
      if (expected instanceof UnionFileCollection) {
        UnionFileCollection collection=(UnionFileCollection)expected;
        return new ArrayList<FileCollection>(collection.getSources());
      }
      if (expected instanceof DefaultConfigurableFileCollection) {
        DefaultConfigurableFileCollection collection=(DefaultConfigurableFileCollection)expected;
        return new ArrayList<FileCollection>((Set)collection.getFrom());
      }
      if (expected instanceof CompositeFileCollection) {
        CompositeFileCollection collection=(CompositeFileCollection)expected;
        DefaultFileCollectionResolveContext context=new DefaultFileCollectionResolveContext();
        collection.visitContents(context);
        return context.resolveAsFileCollections();
      }
      throw new RuntimeException("Cannot get children of " + expected);
    }
    public void describeTo(    Description description){
      description.appendText("same file collection as ").appendValue(expected);
    }
  }
;
}
