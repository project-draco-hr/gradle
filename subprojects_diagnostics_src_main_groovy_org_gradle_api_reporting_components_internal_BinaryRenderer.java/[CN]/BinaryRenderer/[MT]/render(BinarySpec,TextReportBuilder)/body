{
  StyledTextOutput textOutput=builder.getOutput();
  textOutput.append(StringUtils.capitalize(binary.getDisplayName()));
  if (!binary.isBuildable()) {
    textOutput.append(" (not buildable)");
  }
  textOutput.println();
  textOutput.formatln("    build using task: %s",binary.getBuildTask().getPath());
  if (binary instanceof NativeBinarySpec) {
    NativeBinarySpec nativeBinary=(NativeBinarySpec)binary;
    textOutput.formatln("    platform: %s",nativeBinary.getTargetPlatform().getName());
    textOutput.formatln("    build type: %s",nativeBinary.getBuildType().getName());
    textOutput.formatln("    flavor: %s",nativeBinary.getFlavor().getName());
    textOutput.formatln("    tool chain: %s",nativeBinary.getToolChain().getDisplayName());
    if (binary instanceof NativeExecutableBinarySpec) {
      NativeExecutableBinarySpec executableBinary=(NativeExecutableBinarySpec)binary;
      textOutput.formatln("    executable file: %s",fileResolver.resolveAsRelativePath(executableBinary.getExecutableFile()));
    }
    if (binary instanceof NativeTestSuiteBinarySpec) {
      NativeTestSuiteBinarySpec executableBinary=(NativeTestSuiteBinarySpec)binary;
      textOutput.formatln("    executable file: %s",fileResolver.resolveAsRelativePath(executableBinary.getExecutableFile()));
    }
    if (binary instanceof SharedLibraryBinarySpec) {
      SharedLibraryBinarySpec libraryBinary=(SharedLibraryBinarySpec)binary;
      textOutput.formatln("    shared library file: %s",fileResolver.resolveAsRelativePath(libraryBinary.getSharedLibraryFile()));
    }
    if (binary instanceof StaticLibraryBinarySpec) {
      StaticLibraryBinarySpec libraryBinary=(StaticLibraryBinarySpec)binary;
      textOutput.formatln("    static library file: %s",fileResolver.resolveAsRelativePath(libraryBinary.getStaticLibraryFile()));
    }
  }
  if (binary instanceof JvmLibraryBinarySpec) {
    JvmLibraryBinarySpec libraryBinary=(JvmLibraryBinarySpec)binary;
    if (libraryBinary.getTargetPlatform() != null) {
      textOutput.formatln("    platform: %s",libraryBinary.getTargetPlatform().getName());
    }
    textOutput.formatln("    tool chain: %s",libraryBinary.getToolChain().toString());
    if (binary instanceof JarBinarySpec) {
      JarBinarySpec jarBinary=(JarBinarySpec)binary;
      textOutput.formatln("    Jar file: %s",fileResolver.resolveAsRelativePath(jarBinary.getJarFile()));
    }
    if (binary instanceof ClassDirectoryBinarySpec) {
      ClassDirectoryBinarySpec classDirectoryBinary=(ClassDirectoryBinarySpec)binary;
      textOutput.formatln("    classes dir: %s",fileResolver.resolveAsRelativePath(classDirectoryBinary.getClassesDir()));
      textOutput.formatln("    resources dir: %s",fileResolver.resolveAsRelativePath(classDirectoryBinary.getResourcesDir()));
    }
  }
}
