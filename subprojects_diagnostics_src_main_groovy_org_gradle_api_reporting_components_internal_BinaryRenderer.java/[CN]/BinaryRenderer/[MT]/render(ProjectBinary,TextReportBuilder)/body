{
  StyledTextOutput textOutput=builder.getOutput();
  textOutput.append(StringUtils.capitalize(binary.getDisplayName()));
  if (!binary.isBuildable()) {
    textOutput.append(" (not buildable)");
  }
  textOutput.println();
  if (binary instanceof ProjectNativeBinary) {
    ProjectNativeBinary nativeBinary=(ProjectNativeBinary)binary;
    textOutput.formatln("    platform: %s",nativeBinary.getTargetPlatform().getName());
    textOutput.formatln("    build type: %s",nativeBinary.getBuildType().getName());
    textOutput.formatln("    flavor: %s",nativeBinary.getFlavor().getName());
    textOutput.formatln("    tool chain: %s",nativeBinary.getToolChain().getDisplayName());
    if (binary instanceof ProjectNativeExecutableBinary) {
      ProjectNativeExecutableBinary executableBinary=(ProjectNativeExecutableBinary)binary;
      textOutput.formatln("    executable file: %s",fileResolver.resolveAsRelativePath(executableBinary.getExecutableFile()));
    }
    if (binary instanceof ProjectSharedLibraryBinary) {
      ProjectSharedLibraryBinary libraryBinary=(ProjectSharedLibraryBinary)binary;
      textOutput.formatln("    shared library file: %s",fileResolver.resolveAsRelativePath(libraryBinary.getSharedLibraryFile()));
    }
    if (binary instanceof ProjectStaticLibraryBinary) {
      ProjectStaticLibraryBinary libraryBinary=(ProjectStaticLibraryBinary)binary;
      textOutput.formatln("    static library file: %s",fileResolver.resolveAsRelativePath(libraryBinary.getStaticLibraryFile()));
    }
  }
  if (binary instanceof ProjectJvmLibraryBinary) {
    ProjectJvmLibraryBinary libraryBinary=(ProjectJvmLibraryBinary)binary;
    textOutput.formatln("    tool chain: %s",libraryBinary.getToolChain().toString());
    if (binary instanceof ProjectJarBinary) {
      ProjectJarBinary jarBinary=(ProjectJarBinary)binary;
      textOutput.formatln("    Jar file: %s",fileResolver.resolveAsRelativePath(jarBinary.getJarFile()));
    }
  }
  textOutput.formatln("    build task: %s",binary.getBuildTask().getPath());
}
