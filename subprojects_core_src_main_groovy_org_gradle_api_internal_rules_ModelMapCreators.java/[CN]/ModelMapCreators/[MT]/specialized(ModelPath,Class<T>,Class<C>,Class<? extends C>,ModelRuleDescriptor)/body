{
  ModelType<C> containerType=ModelType.of(containerClass);
  final ModelType<T> modelType=ModelType.of(typeClass);
  ChildNodeInitializerStrategyAccessor<T> strategyAccessor=ChildNodeInitializerStrategyAccessors.fromPrivateData();
  return ModelCreators.of(path,DefaultNodeInitializerRegistry.DEFAULT_REFERENCE,new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode node,    List<ModelView<?>> modelViews){
      NodeInitializerRegistry nodeInitializerRegistry=(NodeInitializerRegistry)modelViews.get(0).getInstance();
      ChildNodeInitializerStrategy<T> childFactory=NodeBackedModelMap.createUsingRegistry(modelType,nodeInitializerRegistry);
      node.setPrivateData(ModelType.of(ChildNodeInitializerStrategy.class),childFactory);
    }
  }
).descriptor(descriptor).withProjection(new SpecializedModelMapProjection<C,T>(containerType,modelType,viewClass,strategyAccessor)).withProjection(PolymorphicModelMapProjection.of(modelType,strategyAccessor)).build();
}
