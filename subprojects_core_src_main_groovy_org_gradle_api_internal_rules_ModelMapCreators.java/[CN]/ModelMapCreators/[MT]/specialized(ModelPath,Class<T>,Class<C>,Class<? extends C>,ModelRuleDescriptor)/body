{
  final ModelType<RuleAwarePolymorphicNamedEntityInstantiator<T>> instantiatorType=instantiatorType(typeClass);
  ModelType<C> containerType=ModelType.of(containerClass);
  ModelType<T> modelType=ModelType.of(typeClass);
  return ModelCreators.of(ModelReference.of(path,instantiatorType),new Factory<RuleAwarePolymorphicNamedEntityInstantiator<T>>(){
    @Override public RuleAwarePolymorphicNamedEntityInstantiator<T> create(){
      return new DefaultRuleAwarePolymorphicNamedEntityInstantiator<T>(new DefaultPolymorphicNamedEntityInstantiator<T>(typeClass,"this collection"));
    }
  }
).descriptor(descriptor).withProjection(new SpecializedModelMapProjection<C,T>(containerType,modelType,viewClass)).withProjection(PolymorphicModelMapProjection.of(modelType,instantiatorType,DefaultModelMap.createUsingParentNode(modelType))).withProjection(UnmanagedModelProjection.of(instantiatorType)).build();
}
