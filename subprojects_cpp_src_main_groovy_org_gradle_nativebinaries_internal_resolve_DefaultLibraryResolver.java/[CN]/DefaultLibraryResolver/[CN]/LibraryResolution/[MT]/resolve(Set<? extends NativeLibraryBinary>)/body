{
  for (  NativeLibraryBinary candidate : candidates) {
    if (flavor != null && !flavor.getName().equals(candidate.getFlavor().getName())) {
      continue;
    }
    if (platform != null && !platform.getName().equals(candidate.getTargetPlatform().getName())) {
      continue;
    }
    if (buildType != null && !buildType.getName().equals(candidate.getBuildType().getName())) {
      continue;
    }
    return (NativeLibraryBinaryInternal)candidate;
  }
  String typeName=GUtil.elvis(requirement.getLinkage(),"shared");
  throw new LibraryResolveException(String.format("No %s library binary available for library '%s' with [flavor: '%s', platform: '%s', buildType: '%s']",typeName,requirement.getLibraryName(),flavor.getName(),platform.getName(),buildType.getName()));
}
