{
  loggingConfigurer.configure(startParameter.getLogLevel());
  ImportsReader importsReader=new ImportsReader(startParameter.getDefaultImportsFile());
  IScriptProcessor scriptProcessor=new DefaultScriptProcessor(new DefaultScriptHandler(),startParameter.getCacheUsage());
  ISettingsFinder settingsFinder=startParameter.getSettingsScriptSource() == null ? new DefaultSettingsFinder(WrapUtil.<ISettingsFileSearchStrategy>toList(new MasterDirSettingsFinderStrategy(),new ParentDirSettingsFinderStrategy())) : new EmbeddedScriptSettingsFinder();
  DependencyManagerFactory dependencyManagerFactory=new DefaultDependencyManagerFactory(settingsFinder,startParameter.getCacheUsage());
  Gradle gradle=new Gradle(startParameter,settingsFinder,new DefaultGradlePropertiesLoader(),new ScriptLocatingSettingsProcessor(new ScriptEvaluatingSettingsProcessor(new DefaultSettingsScriptMetaData(),scriptProcessor,importsReader,new SettingsFactory(new DefaultProjectDescriptorRegistry(),dependencyManagerFactory,new BuildSourceBuilder(new DefaultGradleFactory(new LoggingConfigurer(){
    public void configure(    LogLevel logLevel){
    }
  }
),new DefaultCacheInvalidationStrategy())))),new BuildLoader(new ProjectFactory(new TaskFactory(),dependencyManagerFactory,new BuildScriptProcessor(scriptProcessor,new DefaultProjectScriptMetaData(),importsReader),new PluginRegistry(startParameter.getPluginPropertiesFile()),startParameter,startParameter.getBuildScriptSource(),new DefaultAntBuilderFactory(new AntLoggingAdapter()))),new BuildConfigurer(new ProjectDependencies2TaskResolver()));
  return gradle;
}
