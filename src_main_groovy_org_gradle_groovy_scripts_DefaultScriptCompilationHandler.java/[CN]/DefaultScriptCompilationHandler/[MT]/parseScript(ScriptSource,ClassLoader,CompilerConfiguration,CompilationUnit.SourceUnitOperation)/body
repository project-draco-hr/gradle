{
  GroovyClassLoader groovyClassLoader=new GroovyClassLoader(classLoader,configuration,false){
    @Override protected CompilationUnit createCompilationUnit(    CompilerConfiguration config,    CodeSource source){
      CompilationUnit compilationUnit=super.createCompilationUnit(config,source);
      if (transformer != null) {
        compilationUnit.addPhaseOperation(transformer,Phases.CANONICALIZATION);
      }
      return compilationUnit;
    }
  }
;
  String scriptText=source.getText();
  String scriptName=source.getClassName();
  Class scriptClass;
  try {
    scriptClass=groovyClassLoader.parseClass(scriptText == null ? "" : scriptText,scriptName);
  }
 catch (  MultipleCompilationErrorsException e) {
    throw new GradleScriptException(String.format("Could not compile %s.",source.getDisplayName()),e,source,e.getErrorCollector().getSyntaxError(0).getLine());
  }
catch (  CompilationFailedException e) {
    throw new GradleException(String.format("Could not compile %s.",source.getDisplayName()),e);
  }
  if (scriptClass == null) {
    String emptySource=String.format("class %s extends %s { public Object run() { return null } }",source.getClassName(),configuration.getScriptBaseClass().replaceAll("\\$","."));
    scriptClass=groovyClassLoader.parseClass(emptySource,scriptName);
  }
  return scriptClass;
}
