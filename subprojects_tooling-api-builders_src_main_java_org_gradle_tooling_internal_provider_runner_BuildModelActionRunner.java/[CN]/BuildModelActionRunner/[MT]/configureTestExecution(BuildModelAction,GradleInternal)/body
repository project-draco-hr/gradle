{
  final TestConfiguration testConfiguration=buildModelAction.getTestConfiguration();
  final String taskName="toolingTestExecution" + generator.generateId();
  if (testConfiguration != null) {
    gradle.addProjectEvaluationListener(new ProjectEvaluationListener(){
      @Override public void beforeEvaluate(      Project project){
      }
      @Override public void afterEvaluate(      Project project,      ProjectState state){
        Task toolingTestExecution=project.task(taskName);
        TaskCollection<Test> testTaskCollection=project.getTasks().withType(Test.class);
        String[] includePatterns=testConfiguration.getIncludePatterns();
        for (        Test test : testTaskCollection) {
          toolingTestExecution.dependsOn(test);
          test.getFilter().setIncludePatterns(includePatterns);
        }
      }
    }
);
    buildModelAction.getStartParameter().setTaskNames(Arrays.asList(taskName));
  }
}
