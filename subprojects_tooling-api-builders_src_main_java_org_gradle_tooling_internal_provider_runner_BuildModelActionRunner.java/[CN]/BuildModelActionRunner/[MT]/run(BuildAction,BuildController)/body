{
  if (!(action instanceof BuildModelAction)) {
    return;
  }
  BuildModelAction buildModelAction=(BuildModelAction)action;
  GradleInternal gradle=buildController.getGradle();
  boolean isModelRequest=!buildModelAction.getModelName().equals(ModelIdentifier.NULL_MODEL);
  gradle.getServices().get(MutableBuildTypeAttributes.class).markToolingApiBuild(isModelRequest);
  if (buildModelAction.isRunTasks()) {
    buildController.run();
  }
 else {
    buildController.configure();
    gradle.getServices().get(ProjectConfigurer.class).configureHierarchy(gradle.getRootProject());
    for (    Project project : gradle.getRootProject().getAllprojects()) {
      ProjectInternal projectInternal=(ProjectInternal)project;
      projectInternal.getTasks().discoverTasks();
      projectInternal.bindAllModelRules();
    }
  }
  String modelName=buildModelAction.getModelName();
  ToolingModelBuilderRegistry builderRegistry=getToolingModelBuilderRegistry(gradle);
  ToolingModelBuilder builder;
  try {
    builder=builderRegistry.getBuilder(modelName);
  }
 catch (  UnknownModelException e) {
    throw (InternalUnsupportedModelException)new InternalUnsupportedModelException().initCause(e);
  }
  Object modelResult=createModelResult(gradle,modelName,builder);
  buildController.setResult(modelResult);
}
