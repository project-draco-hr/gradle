{
  this.subject=subject;
  this.binaryType=binaryType;
  this.ruleDefinition=ruleDefinition;
  this.modelRegistry=modelRegistry;
  final List<ModelReference<?>> references=ruleDefinition.getReferences().subList(1,ruleDefinition.getReferences().size());
  final List<ModelReference<?>> filteredReferences=CollectionUtils.filter(references,new Spec<ModelReference<?>>(){
    public boolean isSatisfiedBy(    ModelReference<?> element){
      if (element.getType().equals(ModelType.of(binaryType))) {
        binaryParameterIndex=references.indexOf(element) + 1;
        return false;
      }
      return true;
    }
  }
);
  ImmutableList.Builder<ModelReference<?>> allInputs=ImmutableList.builder();
  allInputs.add(ModelReference.of("binaries",BinaryContainer.class));
  allInputs.addAll(filteredReferences);
  this.inputs=allInputs.build();
}
