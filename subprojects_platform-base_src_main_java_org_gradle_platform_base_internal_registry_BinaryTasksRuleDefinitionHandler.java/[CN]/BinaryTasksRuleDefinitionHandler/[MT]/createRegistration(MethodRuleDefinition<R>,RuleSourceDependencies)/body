{
  try {
    RuleMethodDataCollector dataCollector=new RuleMethodDataCollector();
    verifyMethodSignature(dataCollector,ruleDefinition);
    Class<S> binaryType=dataCollector.getParameterType(BinarySpec.class);
    dependencies.add(ComponentModelBasePlugin.class);
    ModelReference<TaskContainer> tasks=ModelReference.of(ModelPath.path("tasks"),ModelType.of(TaskContainer.class));
    BinaryTaskRule<R,S> binaryTaskRule=new BinaryTaskRule<R,S>(tasks,binaryType,ruleDefinition);
    return new ModelMutatorRegistration(ModelActionRole.Mutate,binaryTaskRule);
  }
 catch (  InvalidModelException e) {
    throw invalidModelRule(ruleDefinition,e);
  }
}
