{
  project.getTasks().withType(AbstractCompile.class).all(new Action<AbstractCompile>(){
    public void execute(    final AbstractCompile compile){
      ConventionMapping conventionMapping=compile.getConventionMapping();
      conventionMapping.map("sourceCompatibility",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return javaConvention.getSourceCompatibility().toString();
        }
      }
);
      conventionMapping.map("targetCompatibility",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return javaConvention.getTargetCompatibility().toString();
        }
      }
);
    }
  }
);
  project.getTasks().withType(Compile.class).all(new Action<Compile>(){
    public void execute(    final Compile compile){
      ConventionMapping conventionMapping=compile.getConventionMapping();
      conventionMapping.map("dependencyCacheDir",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return javaConvention.getDependencyCacheDir();
        }
      }
);
    }
  }
);
}
