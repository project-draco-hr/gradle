{
  final Project project=pluginConvention.getProject();
  final ProjectSourceSet projectSourceSet=project.getExtensions().getByType(ProjectSourceSet.class);
  pluginConvention.getSourceSets().all(new Action<SourceSet>(){
    public void execute(    final SourceSet sourceSet){
      ConventionMapping outputConventionMapping=((IConventionAware)sourceSet.getOutput()).getConventionMapping();
      ConfigurationContainer configurations=project.getConfigurations();
      defineConfigurationsForSourceSet(sourceSet,configurations);
      definePathsForSourceSet(sourceSet,outputConventionMapping,project);
      sourceSet.compiledBy(sourceSet.getClassesTaskName());
      Classpath compileClasspath=new SourceSetCompileClasspath(sourceSet);
      DefaultJavaSourceSet javaSourceSet=instantiator.newInstance(DefaultJavaSourceSet.class,"java",sourceSet.getName(),sourceSet.getJava(),compileClasspath);
      projectSourceSet.add(javaSourceSet);
      JvmResourceSet resourceSet=instantiator.newInstance(DefaultJvmResourceSet.class,"resources",sourceSet.getName(),sourceSet.getResources());
      projectSourceSet.add(resourceSet);
      BinaryContainer binaryContainer=project.getExtensions().getByType(BinaryContainer.class);
      ClassDirectoryBinarySpecInternal binary=(ClassDirectoryBinarySpecInternal)binaryContainer.create(String.format("%sClasses",sourceSet.getName()),ClassDirectoryBinarySpec.class);
      ConventionMapping conventionMapping=new DslObject(binary).getConventionMapping();
      conventionMapping.map("classesDir",new Callable<File>(){
        public File call() throws Exception {
          return sourceSet.getOutput().getClassesDir();
        }
      }
);
      conventionMapping.map("resourcesDir",new Callable<File>(){
        public File call() throws Exception {
          return sourceSet.getOutput().getResourcesDir();
        }
      }
);
      binary.addSourceSet(javaSourceSet);
      binary.addSourceSet(resourceSet);
      binary.builtBy(sourceSet.getOutput().getDirs());
    }
  }
);
}
