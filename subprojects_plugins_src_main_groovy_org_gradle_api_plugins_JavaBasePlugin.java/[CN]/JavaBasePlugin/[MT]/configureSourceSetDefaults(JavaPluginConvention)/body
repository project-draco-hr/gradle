{
  final Project project=pluginConvention.getProject();
  final ProjectSourceSet projectSourceSet=project.getExtensions().getByType(ProjectSourceSet.class);
  pluginConvention.getSourceSets().all(new Action<SourceSet>(){
    public void execute(    final SourceSet sourceSet){
      ConventionMapping outputConventionMapping=((IConventionAware)sourceSet.getOutput()).getConventionMapping();
      ConfigurationContainer configurations=project.getConfigurations();
      defineConfigurationsForSourceSet(sourceSet,configurations);
      definePathsForSourceSet(sourceSet,outputConventionMapping,project);
      createProcessResourcesTaskForBinary(sourceSet,sourceSet.getResources(),project);
      createCompileJavaTaskForBinary(sourceSet,sourceSet.getJava(),project);
      createBinaryLifecycleTask(sourceSet,project);
      ClassDirectoryBinarySpecInternal binary=instantiator.newInstance(DefaultClassDirectoryBinarySpec.class,String.format("%sClasses",sourceSet.getName()),sourceSet,javaToolChain,DefaultJavaPlatform.current(),instantiator,taskFactory);
      Classpath compileClasspath=new SourceSetCompileClasspath(sourceSet);
      DefaultJavaSourceSet javaSourceSet=instantiator.newInstance(DefaultJavaSourceSet.class,"java",sourceSet.getName(),sourceSet.getJava(),compileClasspath);
      projectSourceSet.add(javaSourceSet);
      JvmResourceSet resourceSet=instantiator.newInstance(DefaultJvmResourceSet.class,"resources",sourceSet.getName(),sourceSet.getResources());
      projectSourceSet.add(resourceSet);
      binary.addSourceSet(javaSourceSet);
      binary.addSourceSet(resourceSet);
      BinaryContainer binaryContainer=project.getExtensions().getByType(BinaryContainer.class);
      binaryContainer.add(binary);
      attachTasksToBinary(binary,sourceSet,project);
    }
  }
);
}
