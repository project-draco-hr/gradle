{
  Action<TargetedPlatformToolChain> action=new Action<TargetedPlatformToolChain>(){
    public void execute(    TargetedPlatformToolChain configurableToolChain){
      Action<List<String>> m64args=new Action<List<String>>(){
        public void execute(        List<String> args){
          args.add("-m64");
        }
      }
;
      CommandLineToolConfiguration cppCompiler=(CommandLineToolConfiguration)configurableToolChain.getByName("cppCompiler");
      cppCompiler.withArguments(m64args);
      CommandLineToolConfiguration cCompiler=(CommandLineToolConfiguration)configurableToolChain.getByName("cCompiler");
      cCompiler.withArguments(m64args);
      CommandLineToolConfiguration objcCompiler=(CommandLineToolConfiguration)configurableToolChain.getByName("objcCompiler");
      objcCompiler.withArguments(m64args);
      CommandLineToolConfiguration objcppCompiler=(CommandLineToolConfiguration)configurableToolChain.getByName("objcppCompiler");
      objcppCompiler.withArguments(m64args);
      CommandLineToolConfiguration linker=(CommandLineToolConfiguration)configurableToolChain.getByName("linker");
      linker.withArguments(m64args);
      CommandLineToolConfiguration assembler=(CommandLineToolConfiguration)configurableToolChain.getByName("assembler");
      assembler.withArguments(new Action<List<String>>(){
        public void execute(        List<String> args){
          if (OperatingSystem.current().isMacOsX()) {
            args.addAll(asList("-arch","x86_64"));
          }
 else {
            args.add("--64");
          }
        }
      }
);
    }
  }
;
  action.execute(targetedPlatformToolChain);
  return targetedPlatformToolChain;
}
