{
  Map<ComponentResult,List<ComponentIdentifier>> shortestPaths=new LinkedHashMap<ComponentResult,List<ComponentIdentifier>>();
  List<ComponentIdentifier> rootPath=new ArrayList<ComponentIdentifier>();
  rootPath.add(toNode.getOwner().getComponentId());
  shortestPaths.put(toNode.getOwner(),rootPath);
  Set<DependencyGraphComponent> directDependees=new LinkedHashSet<DependencyGraphComponent>();
  for (  DependencyGraphNode node : fromNodes) {
    directDependees.add(node.getOwner());
  }
  Set<DependencyGraphComponent> seen=new HashSet<DependencyGraphComponent>();
  LinkedList<DependencyGraphComponent> queue=new LinkedList<DependencyGraphComponent>();
  queue.addAll(directDependees);
  while (!queue.isEmpty()) {
    DependencyGraphComponent version=queue.getFirst();
    if (version == toNode.getOwner()) {
      queue.removeFirst();
    }
 else     if (seen.add(version)) {
      for (      DependencyGraphComponent incomingVersion : version.getDependents()) {
        queue.add(0,incomingVersion);
      }
    }
 else {
      queue.remove();
      List<ComponentIdentifier> shortest=null;
      for (      DependencyGraphComponent incomingVersion : version.getDependents()) {
        List<ComponentIdentifier> candidate=shortestPaths.get(incomingVersion);
        if (candidate == null) {
          continue;
        }
        if (shortest == null) {
          shortest=candidate;
        }
 else         if (shortest.size() > candidate.size()) {
          shortest=candidate;
        }
      }
      if (shortest == null) {
        continue;
      }
      List<ComponentIdentifier> path=new ArrayList<ComponentIdentifier>();
      path.addAll(shortest);
      path.add(version.getComponentId());
      shortestPaths.put(version,path);
    }
  }
  List<List<ComponentIdentifier>> paths=new ArrayList<List<ComponentIdentifier>>();
  for (  DependencyGraphComponent version : directDependees) {
    List<ComponentIdentifier> path=shortestPaths.get(version);
    paths.add(path);
  }
  return paths;
}
