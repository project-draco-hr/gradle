{
  ResolverProvider resolverProviderDummy=context.mock(ResolverProvider.class);
  final DependencyMetaDataProvider dependencyMetaDataProviderStub=context.mock(DependencyMetaDataProvider.class);
  HashMap clientModuleRegistry=new HashMap();
  SettingsConverter settingsConverter=context.mock(SettingsConverter.class);
  ModuleDescriptorConverter resolveModuleDescriptorConverter=context.mock(ModuleDescriptorConverter.class,"resolve");
  ModuleDescriptorConverter publishModuleDescriptorConverter=context.mock(ModuleDescriptorConverter.class,"publish");
  IvyFileConverter ivyFileConverter=context.mock(IvyFileConverter.class);
  IvyFactory ivyFactory=context.mock(IvyFactory.class);
  IvyDependencyResolver ivyDependencyResolver=context.mock(IvyDependencyResolver.class);
  IvyDependencyPublisher ivyDependencyPublisher=context.mock(IvyDependencyPublisher.class);
  ClassGenerator classGenerator=context.mock(ClassGenerator.class);
  DefaultConfigurationContainer configurationContainer=(DefaultConfigurationContainer)new DefaultConfigurationContainerFactory(clientModuleRegistry,settingsConverter,resolveModuleDescriptorConverter,publishModuleDescriptorConverter,ivyFileConverter,ivyFactory,ivyDependencyResolver,ivyDependencyPublisher,classGenerator).createConfigurationContainer(resolverProviderDummy,dependencyMetaDataProviderStub,context.mock(DomainObjectContext.class));
  assertThat(configurationContainer.getIvyService(),instanceOf(ErrorHandlingIvyService.class));
  ErrorHandlingIvyService errorHandlingService=(ErrorHandlingIvyService)configurationContainer.getIvyService();
  assertThat(errorHandlingService.getIvyService(),instanceOf(ShortcircuitEmptyConfigsIvyService.class));
  ShortcircuitEmptyConfigsIvyService service=(ShortcircuitEmptyConfigsIvyService)errorHandlingService.getIvyService();
  assertThat(service.getIvyService(),instanceOf(DefaultIvyService.class));
  DefaultIvyService defaultIvyService=(DefaultIvyService)service.getIvyService();
  assertThat(defaultIvyService.getMetaDataProvider(),sameInstance(dependencyMetaDataProviderStub));
  assertThat(defaultIvyService.getResolverProvider(),sameInstance(resolverProviderDummy));
  assertThat((HashMap)defaultIvyService.getClientModuleRegistry(),sameInstance(clientModuleRegistry));
  assertThat(defaultIvyService.getSettingsConverter(),sameInstance(settingsConverter));
  assertThat(defaultIvyService.getResolveModuleDescriptorConverter(),sameInstance(resolveModuleDescriptorConverter));
  assertThat(defaultIvyService.getPublishModuleDescriptorConverter(),sameInstance(publishModuleDescriptorConverter));
  assertThat(defaultIvyService.getIvyFileConverter(),sameInstance(ivyFileConverter));
  assertThat(defaultIvyService.getIvyFactory(),sameInstance(ivyFactory));
  assertThat(defaultIvyService.getDependencyResolver(),sameInstance(ivyDependencyResolver));
  assertThat(defaultIvyService.getDependencyPublisher(),sameInstance(ivyDependencyPublisher));
}
