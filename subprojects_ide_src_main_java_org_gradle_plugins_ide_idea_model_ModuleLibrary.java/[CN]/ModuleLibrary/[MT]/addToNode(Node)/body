{
  Map<String,Object> orderEntryAttributes=Maps.newHashMap(ImmutableMap.<String,Object>builder().put("type","module-library").putAll(getAttributeMapForScopeAndExported()).build());
  Node libraryNode=parentNode.appendNode("orderEntry",orderEntryAttributes).appendNode("library");
  Node classesNode=libraryNode.appendNode("CLASSES");
  Node javadocNode=libraryNode.appendNode("JAVADOC");
  Node sourcesNode=libraryNode.appendNode("SOURCES");
  for (  Path path : classes) {
    Map<String,Object> attributes=Maps.newHashMapWithExpectedSize(1);
    attributes.put("url",path.getUrl());
    classesNode.appendNode("root",attributes);
  }
  for (  Path path : javadoc) {
    Map<String,Object> attributes=Maps.newHashMapWithExpectedSize(1);
    attributes.put("url",path.getUrl());
    javadocNode.appendNode("root",attributes);
  }
  for (  Path path : sources) {
    Map<String,Object> attributes=Maps.newHashMapWithExpectedSize(1);
    attributes.put("url",path.getUrl());
    sourcesNode.appendNode("root",attributes);
  }
  for (  JarDirectory jarDirectory : jarDirectories) {
    Map<String,Object> attributes=Maps.newHashMapWithExpectedSize(2);
    attributes.put("url",jarDirectory.getPath().getUrl());
    attributes.put("recursive",String.valueOf(jarDirectory.isRecursive()));
    libraryNode.appendNode("jarDirectory",attributes);
  }
}
