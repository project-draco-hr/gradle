{
  Map<DependencyGraphBuilder.ModuleVersionResolveState,List<ModuleVersionIdentifier>> shortestPaths=new LinkedHashMap<DependencyGraphBuilder.ModuleVersionResolveState,List<ModuleVersionIdentifier>>();
  List<ModuleVersionIdentifier> rootPath=new ArrayList<ModuleVersionIdentifier>();
  rootPath.add(root.toId());
  shortestPaths.put(root.moduleRevision,rootPath);
  Set<DependencyGraphBuilder.ModuleVersionResolveState> directDependees=new LinkedHashSet<DependencyGraphBuilder.ModuleVersionResolveState>();
  for (  DependencyGraphBuilder.ConfigurationNode node : brokenDependency.requiredBy) {
    directDependees.add(node.moduleRevision);
  }
  Set<DependencyGraphBuilder.ModuleVersionResolveState> seen=new HashSet<DependencyGraphBuilder.ModuleVersionResolveState>();
  LinkedList<DependencyGraphBuilder.ModuleVersionResolveState> queue=new LinkedList<DependencyGraphBuilder.ModuleVersionResolveState>();
  queue.addAll(directDependees);
  while (!queue.isEmpty()) {
    DependencyGraphBuilder.ModuleVersionResolveState version=queue.getFirst();
    if (version == root.moduleRevision) {
      queue.removeFirst();
    }
 else     if (seen.add(version)) {
      for (      DependencyGraphBuilder.ModuleVersionResolveState incomingVersion : version.getIncoming()) {
        queue.add(0,incomingVersion);
      }
    }
 else {
      queue.remove();
      List<ModuleVersionIdentifier> shortest=null;
      for (      DependencyGraphBuilder.ModuleVersionResolveState incomingVersion : version.getIncoming()) {
        List<ModuleVersionIdentifier> candidate=shortestPaths.get(incomingVersion);
        if (candidate == null) {
          continue;
        }
        if (shortest == null) {
          shortest=candidate;
        }
 else         if (shortest.size() > candidate.size()) {
          shortest=candidate;
        }
      }
      if (shortest == null) {
        continue;
      }
      List<ModuleVersionIdentifier> path=new ArrayList<ModuleVersionIdentifier>();
      path.addAll(shortest);
      path.add(version.id);
      shortestPaths.put(version,path);
    }
  }
  List<List<ModuleVersionIdentifier>> paths=new ArrayList<List<ModuleVersionIdentifier>>();
  for (  DependencyGraphBuilder.ModuleVersionResolveState version : directDependees) {
    List<ModuleVersionIdentifier> path=shortestPaths.get(version);
    paths.add(path);
  }
  return paths;
}
