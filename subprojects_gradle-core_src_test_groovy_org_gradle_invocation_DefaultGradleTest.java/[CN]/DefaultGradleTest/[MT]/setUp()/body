{
  context.checking(new Expectations(){
{
      one(serviceRegistryFactoryMock).createFor(with(any(DefaultGradle.class)));
      will(returnValue(gradleServiceRegistryMock));
      allowing(gradleServiceRegistryMock).get(ScriptHandler.class);
      will(returnValue(scriptHandlerMock));
      allowing(gradleServiceRegistryMock).get(ScriptClassLoaderProvider.class);
      will(returnValue(context.mock(ScriptClassLoaderProvider.class)));
      allowing(gradleServiceRegistryMock).get(StandardOutputRedirector.class);
      will(returnValue(standardOutputRedirectorMock));
      allowing(gradleServiceRegistryMock).get(IProjectRegistry.class);
      will(returnValue(projectRegistry));
      allowing(gradleServiceRegistryMock).get(PluginRegistry.class);
      will(returnValue(pluginRegistry));
      allowing(gradleServiceRegistryMock).get(TaskGraphExecuter.class);
      will(returnValue(taskExecuter));
      allowing(gradleServiceRegistryMock).get(ListenerManager.class);
      will(returnValue(listenerManager));
    }
  }
);
  gradle=new DefaultGradle(parent,parameter,serviceRegistryFactoryMock);
}
