{
  final ProjectInternal projectInternal=(ProjectInternal)project;
  project.getConvention().getPlugin(JavaPluginConvention.class).getSource().allObjects(new Action<SourceSet>(){
    public void execute(    SourceSet sourceSet){
      final DefaultGroovySourceSet groovySourceSet=new DefaultGroovySourceSet(((DefaultSourceSet)sourceSet).getDisplayName(),projectInternal.getFileResolver());
      ((DynamicObjectAware)sourceSet).getConvention().getPlugins().put("groovy",groovySourceSet);
      groovySourceSet.getGroovy().srcDir(String.format("src/%s/groovy",sourceSet.getName()));
      sourceSet.getAllJava().add(groovySourceSet.getGroovy().matching(sourceSet.getJavaSourcePatterns()));
      String compileTaskName=String.format("%sGroovy",sourceSet.getCompileTaskName());
      GroovyCompile compile=project.getTasks().add(compileTaskName,GroovyCompile.class);
      javaPlugin.configureForSourceSet(sourceSet,compile);
      compile.dependsOn(sourceSet.getCompileTaskName());
      compile.setDescription(String.format("Compiles the %s Groovy source.",sourceSet.getName()));
      compile.conventionMapping("srcDirs",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return new ArrayList<File>(groovySourceSet.getGroovy().getSrcDirs());
        }
      }
);
      sourceSet.compiledBy(compileTaskName);
    }
  }
);
}
