{
  List<String> errors=Lists.newArrayList();
  loadCompilerClasses(getClass().getClassLoader());
  JavaMethod<?,Object> fromCodeJavaMethod=JavaReflectionUtil.staticMethod(sourceFileClass,Object.class,"fromCode",String.class,String.class);
  Object extern=fromCodeJavaMethod.invokeStatic("/dev/null","");
  JavaMethod<?,Object> fromFileJavaMethod=JavaReflectionUtil.staticMethod(sourceFileClass,Object.class,"fromFile",File.class);
  Object sourceFile=fromFileJavaMethod.invokeStatic(javascriptFile.getFile());
  Factory<?> compilerOptionsFactory=JavaReflectionUtil.factory(DirectInstantiator.INSTANCE,compilerOptionsClass);
  Object compilerOptions=compilerOptionsFactory.create();
  @SuppressWarnings({"rawtypes","unchecked"}) Enum simpleLevel=Enum.valueOf(compilationLevelClass,"SIMPLE_OPTIMIZATIONS");
  @SuppressWarnings("rawtypes") JavaMethod<Enum,Void> setOptionsForCompilationLevelMethod=JavaReflectionUtil.method(compilationLevelClass,Void.class,"setOptionsForCompilationLevel",compilerOptionsClass);
  setOptionsForCompilationLevelMethod.invoke(simpleLevel,compilerOptions);
  Factory<?> compilerFactory=JavaReflectionUtil.factory(DirectInstantiator.INSTANCE,compilerClass,getDummyPrintStream());
  Object compiler=compilerFactory.create();
  JavaMethod<Object,Object> compileMethod=JavaReflectionUtil.method(compilerClass,Object.class,"compile",sourceFileClass,sourceFileClass,compilerOptionsClass);
  Object result=compileMethod.invoke(compiler,extern,sourceFile,compilerOptions);
  PropertyAccessor<Object,Object[]> jsErrorsField=JavaReflectionUtil.readableField(result,Object[].class,"errors");
  Object[] jsErrors=jsErrorsField.getValue(result);
  if (jsErrors.length == 0) {
    JavaMethod<Object,String> toSourceMethod=JavaReflectionUtil.method(compilerClass,String.class,"toSource");
    String compiledSource=toSourceMethod.invoke(compiler);
    GFileUtils.writeFile(compiledSource,destinationCalculator.transform(javascriptFile));
  }
 else {
    for (    Object error : jsErrors) {
      errors.add(error.toString());
    }
  }
  return errors;
}
