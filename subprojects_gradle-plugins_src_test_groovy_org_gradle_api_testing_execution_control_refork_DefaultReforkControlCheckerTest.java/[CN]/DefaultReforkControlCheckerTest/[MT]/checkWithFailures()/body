{
  final ReforkControl control=context.mock(ReforkControl.class);
  final ReforkContextData reforkContextData=context.mock(ReforkContextData.class);
  final Pipeline pipeline=context.mock(QueueingPipeline.class);
  final int forkId=1;
  final Long dataOne=1L;
  final ReforkReasonDataProcessor dataProcessorOne=context.mock(ReforkReasonDataProcessor.class,"one#dataProcessor");
  final Long dataTwo=2L;
  final ReforkReasonDataProcessor dataProcessorTwo=context.mock(ReforkReasonDataProcessor.class,"two#dataProcessor");
  final List<ReforkReasonKey> reasonKeys=new ArrayList<ReforkReasonKey>();
  reasonKeys.add(TestReforkReasons.TEST_KEY_1);
  reasonKeys.add(TestReforkReasons.TEST_KEY_2);
  context.checking(new Expectations(){
{
      one(reforkContextData).getPipeline();
      will(returnValue(pipeline));
      one(reforkContextData).getForkId();
      will(returnValue(forkId));
      one(control).getReforkReasonKeys();
      will(returnValue(reasonKeys));
      one(reforkContextData).getReasonData(TestReforkReasons.TEST_KEY_1);
      will(returnValue(dataOne));
      one(control).getDataProcessor(TestReforkReasons.TEST_KEY_1);
      will(returnValue(dataProcessorOne));
      one(dataProcessorOne).determineReforkNeeded(pipeline,forkId,dataOne);
      will(throwException(new NullPointerException()));
      one(reforkContextData).getReasonData(TestReforkReasons.TEST_KEY_2);
      will(returnValue(dataTwo));
      one(control).getDataProcessor(TestReforkReasons.TEST_KEY_2);
      will(returnValue(dataProcessorTwo));
      one(dataProcessorTwo).determineReforkNeeded(pipeline,forkId,dataTwo);
      will(returnValue(true));
    }
  }
);
  final boolean reforkNeeded=checker.checkReforkNeeded(control,reforkContextData);
  assertTrue(reforkNeeded);
}
