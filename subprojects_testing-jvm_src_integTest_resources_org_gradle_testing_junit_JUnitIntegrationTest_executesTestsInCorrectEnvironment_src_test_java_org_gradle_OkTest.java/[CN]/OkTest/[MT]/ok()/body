{
  assertEquals("4.12",new org.junit.runner.JUnitCore().getVersion());
  assertTrue(org.apache.tools.ant.Main.getAntVersion().contains("1.6.1"));
  assertEquals(System.getProperty("projectDir"),System.getProperty("user.dir"));
  assertEquals("value",System.getProperty("testSysProperty"));
  assertEquals("value",System.getenv("TEST_ENV_VAR"));
  assertSame(ClassLoader.getSystemClassLoader(),getClass().getClassLoader());
  assertSame(getClass().getClassLoader(),Thread.currentThread().getContextClassLoader());
  boolean isJava9=Boolean.valueOf(System.getProperty("isJava9"));
  String classPathString=System.getProperty("java.class.path");
  String expectedClassPathString=System.getProperty("expectedClassPath");
  if (isJava9) {
    String[] splittedClasspath=splitClasspath(classPathString);
    String workerJar=splittedClasspath[0];
    String[] classpathWithoutWorkerJar=Arrays.copyOfRange(splittedClasspath,1,splittedClasspath.length);
    assertTrue(workerJar + " is the worker jar",workerJar.contains("gradle-worker.jar"));
    assertEquals(splitClasspath(expectedClassPathString),classpathWithoutWorkerJar);
  }
 else {
    assertEquals(expectedClassPathString,classPathString);
    List<URL> expectedClassPath=buildExpectedClassPath(expectedClassPathString);
    List<URL> actualClassPath=buildActualClassPath();
    assertEquals(expectedClassPath,actualClassPath);
  }
  try {
    getClass().getClassLoader().loadClass("org.gradle.api.Project");
    fail();
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    getClass().getClassLoader().loadClass("org.slf4j.Logger");
    fail();
  }
 catch (  ClassNotFoundException e) {
  }
  assertEquals("Test worker",Thread.currentThread().getName());
  assertNull(System.getSecurityManager());
  final PrintStream out=System.out;
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      out.println("stdout from a shutdown hook.");
      Logger.getLogger("test-logger").info("info from a shutdown hook.");
    }
  }
);
}
