{
  char decimalSeparator=(new DecimalFormatSymbols(locale)).getDecimalSeparator();
  GCEventParser eventParser=new GCEventParser(decimalSeparator);
  Pattern memoryPoolPattern=Pattern.compile("([\\w\\s]+) total (\\d+)K, used (\\d+)K \\[.+");
  long totalHeapUsage=0;
  long maxUsage=0;
  long maxUncollectedUsage=0;
  long maxCommittedUsage=0;
  long usageAtPreviousCollection=0;
  int events=0;
  while (true) {
    String line=reader.readLine();
    if (line == null || line.equals("Heap")) {
      break;
    }
    GCEventParser.GCEvent event=eventParser.parseLine(line);
    if (event == GCEventParser.GCEvent.IGNORED) {
      continue;
    }
    events++;
    if (event.start < usageAtPreviousCollection) {
      throw new IllegalArgumentException("Unexpected max heap size found in garbage collection event: " + line);
    }
    totalHeapUsage+=event.start - usageAtPreviousCollection;
    maxUsage=Math.max(maxUsage,event.start);
    maxUncollectedUsage=Math.max(maxUncollectedUsage,event.end);
    maxCommittedUsage=Math.max(maxCommittedUsage,event.committed);
    usageAtPreviousCollection=event.end;
  }
  if (events == 0) {
    throw new IllegalArgumentException("Did not find any garbage collection events in garbage collection log.");
  }
  long finalHeapUsage=0;
  long finalCommittedHeap=0;
  while (true) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    Matcher matcher=memoryPoolPattern.matcher(line);
    if (!matcher.lookingAt()) {
      continue;
    }
    String pool=matcher.group(1).trim();
    if (pool.toLowerCase().contains("perm gen") || pool.toLowerCase().contains("permgen")) {
      continue;
    }
    long committed=Long.parseLong(matcher.group(2));
    long usage=Long.parseLong(matcher.group(3));
    finalHeapUsage+=usage;
    finalCommittedHeap+=committed;
  }
  if (finalHeapUsage == 0) {
    throw new IllegalArgumentException("Did not find any memory pool usage details in garbage collection log.");
  }
  if (finalHeapUsage < usageAtPreviousCollection) {
    throw new IllegalArgumentException("Unexpected max heap size found in memory pool usage.");
  }
  totalHeapUsage+=finalHeapUsage - usageAtPreviousCollection;
  maxUsage=Math.max(maxUsage,finalHeapUsage);
  maxCommittedUsage=Math.max(maxCommittedUsage,finalCommittedHeap);
  operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)));
  operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)));
  operation.setMaxUncollectedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxUncollectedUsage)));
  operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)));
}
