{
  Map<String,Object> properties=getSonarProperties();
  File givenSonarProjectFile=getProject().file("sonar-project.properties");
  if (givenSonarProjectFile.exists()) {
    LOGGER.warn("Gradle Sonar Runner configuration might be ignored, as '%s' file was found in '%s' and Sonar Runner automatically picks up this file as input. Please rename it to avoid possible clashes.",givenSonarProjectFile.getName(),givenSonarProjectFile.getParent());
  }
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info("Executing Sonar Runner with properties:\n[{}]",Joiner.on(", ").withKeyValueSeparator(": ").join(properties));
  }
  JavaExecHandleBuilder javaExec=new JavaExecHandleBuilder(getFileResolver());
  getForkOptions().copyTo(javaExec);
  FileCollection sonarRunnerConfiguration=getProject().getConfigurations().getAt(SonarRunnerExtension.SONAR_RUNNER_CONFIGURATION_NAME);
  Properties propertiesObject=new Properties();
  propertiesObject.putAll(properties);
  File propertyFile=new File(getTemporaryDir(),"sonar-project.properties");
  GUtil.saveProperties(propertiesObject,propertyFile);
  return javaExec.systemProperty("project.settings",propertyFile.getAbsolutePath()).systemProperty("project.home",getProject().getProjectDir().getAbsolutePath()).setClasspath(sonarRunnerConfiguration).setMain(MAIN_CLASS_NAME);
}
