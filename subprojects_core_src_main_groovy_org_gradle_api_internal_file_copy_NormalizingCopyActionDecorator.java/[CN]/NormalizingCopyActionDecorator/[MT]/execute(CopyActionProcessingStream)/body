{
  final Set<RelativePath> visitedDirs=new HashSet<RelativePath>();
  final ListMultimap<RelativePath,FileCopyDetailsInternal> pendingDirs=ArrayListMultimap.create();
  WorkResult result=delegate.execute(new CopyActionProcessingStream(){
    public void process(    final Action<? super FileCopyDetailsInternal> action){
      stream.process(new Action<FileCopyDetailsInternal>(){
        public void execute(        FileCopyDetailsInternal details){
          if (details.isDirectory()) {
            RelativePath path=details.getRelativePath();
            if (!visitedDirs.contains(path)) {
              pendingDirs.put(path,details);
            }
          }
 else {
            maybeVisit(details.getRelativePath().getParent(),details.getCopySpec(),action);
            action.execute(details);
          }
        }
      }
);
      for (      RelativePath path : new LinkedHashSet<RelativePath>(pendingDirs.keySet())) {
        List<FileCopyDetailsInternal> detailsList=new ArrayList<FileCopyDetailsInternal>(pendingDirs.get(path));
        for (        FileCopyDetailsInternal details : detailsList) {
          if (details.getCopySpec().getIncludeEmptyDirs()) {
            maybeVisit(path,details.getCopySpec(),action);
          }
        }
      }
      visitedDirs.clear();
      pendingDirs.clear();
    }
    private void maybeVisit(    RelativePath path,    CopySpecInternal copySpec,    Action<? super FileCopyDetailsInternal> delegateAction){
      if (path == null || path.getParent() == null || !visitedDirs.add(path)) {
        return;
      }
      maybeVisit(path.getParent(),copySpec,delegateAction);
      List<FileCopyDetailsInternal> detailsForPath=pendingDirs.removeAll(path);
      FileCopyDetailsInternal dir;
      if (detailsForPath.isEmpty()) {
        dir=new StubbedFileCopyDetails(path,copySpec);
      }
 else {
        dir=detailsForPath.get(0);
      }
      delegateAction.execute(dir);
    }
  }
);
  return result;
}
