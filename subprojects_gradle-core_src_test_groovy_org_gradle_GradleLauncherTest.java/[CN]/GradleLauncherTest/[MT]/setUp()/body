{
  context.setImposteriser(ClassImposteriser.INSTANCE);
  initscriptHandlerMock=context.mock(InitScriptHandler.class);
  settingsHandlerMock=context.mock(SettingsHandler.class);
  gradlePropertiesLoaderMock=context.mock(IGradlePropertiesLoader.class);
  settingsMock=context.mock(SettingsInternal.class);
  taskExecuterMock=context.mock(TaskGraphExecuter.class);
  buildLoaderMock=context.mock(BuildLoader.class);
  buildConfigurerMock=context.mock(BuildConfigurer.class);
  gradleMock=context.mock(GradleInternal.class);
  buildBroadcaster=context.mock(BuildListener.class);
  testGradleProperties=toMap("prop1","value1");
  boolean expectedSearchUpwards=false;
  File expectedRootDir=new File("rootDir");
  File expectedCurrentDir=new File(expectedRootDir,"currentDir");
  expectedRootProjectDescriptor=new DefaultProjectDescriptor(null,"someName",new File("somedir"),new DefaultProjectDescriptorRegistry());
  expectedRootProject=HelperUtil.createRootProject(expectedRootDir);
  expectedCurrentProject=HelperUtil.createRootProject(expectedCurrentDir);
  expectTasks("a","b");
  expectedStartParams=new StartParameter();
  expectedStartParams.setTaskNames(expectedTaskNames);
  expectedStartParams.setCurrentDir(expectedCurrentDir);
  expectedStartParams.setSearchUpwards(expectedSearchUpwards);
  expectedStartParams.setGradleUserHomeDir(tmpDir.dir("gradleUserHome"));
  gradleLauncher=new GradleLauncher(gradleMock,initscriptHandlerMock,settingsHandlerMock,gradlePropertiesLoaderMock,buildLoaderMock,buildConfigurerMock,loggingConfigurerMock,buildBroadcaster,exceptionAnalyserMock);
  context.checking(new Expectations(){
{
      allowing(gradlePropertiesLoaderMock).getGradleProperties();
      will(returnValue(testGradleProperties));
      allowing(settingsMock).getRootProject();
      will(returnValue(expectedRootProjectDescriptor));
      allowing(gradleMock).getRootProject();
      will(returnValue(expectedRootProject));
      allowing(gradleMock).getDefaultProject();
      will(returnValue(expectedCurrentProject));
      allowing(gradleMock).getTaskGraph();
      will(returnValue(taskExecuterMock));
      allowing(gradleMock).getStartParameter();
      will(returnValue(expectedStartParams));
    }
  }
);
}
