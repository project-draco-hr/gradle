{
  final ModuleRevisionId dependencyRevisionId=dependencyDescriptor.getDependencyRevisionId();
  LOGGER.debug("Attempting to resolve module '{}' using repositories {}",dependencyRevisionId,moduleVersionRepositoryNames);
  List<Throwable> errors=new ArrayList<Throwable>();
  final ModuleResolution latestResolved=findLatestModule(dependencyDescriptor,errors);
  if (latestResolved != null) {
    final ModuleVersionMetaData downloadedModule=latestResolved.module;
    LOGGER.debug("Using module '{}' from repository '{}'",downloadedModule.getId(),latestResolved.repository.getName());
    for (    Throwable error : errors) {
      LOGGER.debug("Discarding resolve failure.",error);
    }
    result.resolved(latestResolved.getId(),latestResolved.getDescriptor(),new ModuleVersionRepositoryArtifactResolverAdapter(latestResolved.repository,latestResolved.moduleSource));
    return;
  }
  if (!errors.isEmpty()) {
    result.failed(new ModuleVersionResolveException(dependencyRevisionId,errors));
  }
 else {
    final DefaultModuleVersionIdentifier moduleVersionIdentifier=new DefaultModuleVersionIdentifier(dependencyRevisionId.getOrganisation(),dependencyRevisionId.getName(),dependencyRevisionId.getRevision());
    result.notFound(moduleVersionIdentifier);
  }
}
