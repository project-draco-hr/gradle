{
  ModuleVersionSelector requested=dependency.getRequested();
  LOGGER.debug("Attempting to resolve module '{}' using repositories {}",requested,moduleVersionRepositoryNames);
  List<Throwable> errors=new ArrayList<Throwable>();
  final ModuleResolution latestResolved=findLatestModule(dependency,errors);
  if (latestResolved != null) {
    LOGGER.debug("Using module '{}' from repository '{}'",latestResolved.module.getId(),latestResolved.repository.getName());
    for (    Throwable error : errors) {
      LOGGER.debug("Discarding resolve failure.",error);
    }
    MutableModuleVersionMetaData module=latestResolved.module;
    module.setSource(new RepositoryChainModuleSource(latestResolved.repository.getId(),latestResolved.moduleSource));
    result.resolved(module,artifactResolver);
    return;
  }
  if (!errors.isEmpty()) {
    result.failed(new ModuleVersionResolveException(requested,errors));
  }
 else {
    result.notFound(requested);
  }
}
