{
  EclipseClasspath eclipseClasspath=project.getTasks().add(ECLIPSE_CP_TASK_NAME,EclipseClasspath.class);
  eclipseClasspath.conventionMapping(GUtil.map("srcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return GUtil.addLists(java(convention).getSrcDirs(),java(convention).getResourceDirs());
    }
  }
,"testSrcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return GUtil.addLists(java(convention).getTestSrcDirs(),java(convention).getTestResourceDirs());
    }
  }
,"outputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getClassesDir();
    }
  }
,"testOutputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return java(convention).getTestClassesDir();
    }
  }
,"classpathLibs",new ConventionValue(){
    public Object getValue(    Convention convention,    final IConventionAware conventionAwareObject){
      ConfigurationContainer configurationContainer=((Task)conventionAwareObject).getProject().getConfigurations();
      return new ArrayList(configurationContainer.getByName(JavaPlugin.TEST_RUNTIME_CONFIGURATION_NAME).copyRecursive(DependencySpecs.type(Type.EXTERNAL)).resolve());
    }
  }
,"projectDependencies",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      return new ArrayList(project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CONFIGURATION_NAME).getAllDependencies(ProjectDependency.class));
    }
  }
));
  eclipseClasspath.setDescription("Generates an Eclipse .classpath file.");
  return eclipseClasspath;
}
