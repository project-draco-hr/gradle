{
  MethodNode method=AstUtils.getGeneratedClosureImplMethod(node);
  Statement closureCode=method.getCode();
  SourceLocation sourceLocation=closureCode.getNodeMetaData(AST_NODE_METADATA_LOCATION_KEY);
  if (sourceLocation != null) {
    AnnotationNode metadataAnnotation=new AnnotationNode(RULE_METADATA);
    metadataAnnotation.addMember("absoluteScriptSourceLocation",new ConstantExpression(sourceLocation.getUri().toString()));
    metadataAnnotation.addMember("lineNumber",new ConstantExpression(sourceLocation.getLineNumber()));
    metadataAnnotation.addMember("columnNumber",new ConstantExpression(sourceLocation.getColumnNumber()));
    InputReferences inputs=closureCode.getNodeMetaData(AST_NODE_METADATA_INPUTS_KEY);
    if (!inputs.isEmpty()) {
      metadataAnnotation.addMember("ownInputPaths",new ListExpression(constants(inputs.getOwnPaths())));
      metadataAnnotation.addMember("ownInputLineNumbers",new ListExpression(constants(inputs.getOwnPathLineNumbers())));
      metadataAnnotation.addMember("nestedInputPaths",new ListExpression(constants(inputs.getNestedPaths())));
      metadataAnnotation.addMember("nestedInputLineNumbers",new ListExpression(constants(inputs.getNestedPathLineNumbers())));
    }
    node.addAnnotation(metadataAnnotation);
    node.addInterface(TRANSFORMED_CLOSURE);
    node.addField(new FieldNode(INPUTS_FIELD_NAME,Modifier.PUBLIC,POTENTIAL_INPUTS,node,null));
    List<Statement> statements=new ArrayList<Statement>();
    statements.add(new ExpressionStatement(new BinaryExpression(new VariableExpression(INPUTS_FIELD_NAME),ASSIGN,new VariableExpression("inputs"))));
    node.addMethod(new MethodNode("applyRuleInputs",Modifier.PUBLIC,ClassHelper.VOID_TYPE,new Parameter[]{new Parameter(POTENTIAL_INPUTS,"inputs")},new ClassNode[0],new BlockStatement(statements,new VariableScope())));
  }
}
