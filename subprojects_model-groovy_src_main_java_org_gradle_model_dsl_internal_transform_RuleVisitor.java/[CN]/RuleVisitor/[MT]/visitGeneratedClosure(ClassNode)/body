{
  MethodNode closureCallMethod=AstUtils.getGeneratedClosureImplMethod(node);
  Statement closureCode=closureCallMethod.getCode();
  InputReferences inputs=closureCode.getNodeMetaData(AST_NODE_METADATA_INPUTS_KEY);
  if (inputs != null) {
    SourceLocation sourceLocation=closureCode.getNodeMetaData(AST_NODE_METADATA_LOCATION_KEY);
    node.addInterface(TRANSFORMED_CLOSURE);
    node.addField(new FieldNode(INPUTS_FIELD_NAME,Modifier.PRIVATE,POTENTIAL_INPUTS,node,null));
    node.addField(new FieldNode(RULE_FACTORY_FIELD_NAME,Modifier.PRIVATE,RULE_FACTORY,node,null));
    List<Statement> statements=new ArrayList<Statement>();
    statements.add(new ExpressionStatement(new BinaryExpression(new VariableExpression(INPUTS_FIELD_NAME),ASSIGN,new VariableExpression("inputs"))));
    statements.add(new ExpressionStatement(new BinaryExpression(new VariableExpression(RULE_FACTORY_FIELD_NAME),ASSIGN,new VariableExpression("ruleFactory"))));
    node.addMethod(new MethodNode("makeRule",Modifier.PUBLIC,ClassHelper.VOID_TYPE,new Parameter[]{new Parameter(POTENTIAL_INPUTS,"inputs"),new Parameter(RULE_FACTORY,"ruleFactory")},new ClassNode[0],new BlockStatement(statements,new VariableScope())));
    VariableExpression inputsVar=new VariableExpression("inputs",INPUT_REFERENCES);
    VariableScope methodVarScope=new VariableScope();
    methodVarScope.putDeclaredVariable(inputsVar);
    statements=new ArrayList<Statement>();
    statements.add(new ExpressionStatement(new DeclarationExpression(inputsVar,ASSIGN,new ConstructorCallExpression(INPUT_REFERENCES,new ArgumentListExpression()))));
    for (    InputReference inputReference : inputs.getOwnReferences()) {
      statements.add(new ExpressionStatement(new MethodCallExpression(inputsVar,"ownReference",new ArgumentListExpression(new ConstantExpression(inputReference.getPath()),new ConstantExpression(inputReference.getLineNumber())))));
    }
    for (    InputReference inputReference : inputs.getNestedReferences()) {
      statements.add(new ExpressionStatement(new MethodCallExpression(inputsVar,"nestedReference",new ArgumentListExpression(new ConstantExpression(inputReference.getPath()),new ConstantExpression(inputReference.getLineNumber())))));
    }
    statements.add(new ReturnStatement(inputsVar));
    node.addMethod(new MethodNode("inputReferences",Modifier.PUBLIC,INPUT_REFERENCES,new Parameter[0],new ClassNode[0],new BlockStatement(statements,methodVarScope)));
    statements=new ArrayList<Statement>();
    statements.add(new ReturnStatement(new ConstructorCallExpression(SOURCE_LOCATION,new ArgumentListExpression(Arrays.<Expression>asList(new ConstantExpression(sourceLocation.getUri().toString()),new ConstantExpression(sourceLocation.toString()),new ConstantExpression(sourceLocation.getExpression()),new ConstantExpression(sourceLocation.getLineNumber()),new ConstantExpression(sourceLocation.getColumnNumber()))))));
    node.addMethod(new MethodNode("sourceLocation",Modifier.PUBLIC,SOURCE_LOCATION,new Parameter[0],new ClassNode[0],new BlockStatement(statements,new VariableScope())));
  }
}
