{
  final ProjectRegistry projectRegistry=context.mock(ProjectRegistry.class);
  final DefaultProjectDescriptor projectDescriptor=context.mock(DefaultProjectDescriptor.class);
  final ServiceRegistry services=context.mock(ServiceRegistry.class);
  final BuildClassLoaderRegistry classLoaderRegistry=context.mock(BuildClassLoaderRegistry.class);
  startParameter.setCurrentDir(settingsLocation.getSettingsDir());
  context.checking(new Expectations(){
{
      allowing(settings).getProjectRegistry();
      will(returnValue(projectRegistry));
      allowing(projectRegistry).getAllProjects();
      will(returnValue(WrapUtil.toSet(projectDescriptor)));
      allowing(projectDescriptor).getProjectDir();
      will(returnValue(settingsLocation.getSettingsDir()));
      allowing(projectDescriptor).getBuildFile();
      will(returnValue(new File(settingsLocation.getSettingsDir(),"build.gradle")));
      allowing(settings).getClassLoader();
      will(returnValue(urlClassLoader));
      allowing(services).get(BuildClassLoaderRegistry.class);
      will(returnValue(classLoaderRegistry));
      allowing(gradle).getStartParameter();
      will(returnValue(startParameter));
      allowing(gradle).getServices();
      will(returnValue(services));
      allowing(settingsFinder).find(startParameter);
      will(returnValue(settingsLocation));
      one(settingsProcessor).process(gradle,settingsLocation,urlClassLoader,startParameter);
      will(returnValue(settings));
      one(classLoaderRegistry).addRootClassLoader(urlClassLoader);
    }
  }
);
}
