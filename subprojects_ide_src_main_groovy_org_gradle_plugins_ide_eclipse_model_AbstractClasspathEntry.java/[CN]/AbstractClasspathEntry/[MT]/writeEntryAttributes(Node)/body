{
  Map<String,Object> effectiveEntryAttrs=Maps.newHashMap();
  for (  String key : entryAttributes.keySet()) {
    Object value=entryAttributes.get(key);
    if ((value != null && !String.valueOf(value).isEmpty()) || COMPONENT_NON_DEPENDENCY_ATTRIBUTE.equals(key)) {
      effectiveEntryAttrs.put(key,value);
    }
  }
  if (effectiveEntryAttrs.isEmpty()) {
    return;
  }
  if (effectiveEntryAttrs.containsKey(COMPONENT_DEPENDENCY_ATTRIBUTE) && effectiveEntryAttrs.containsKey(COMPONENT_NON_DEPENDENCY_ATTRIBUTE)) {
    effectiveEntryAttrs.remove(COMPONENT_NON_DEPENDENCY_ATTRIBUTE);
  }
  Node attributesNode;
  NodeList attributesNodes=(NodeList)node.get("attributes");
  if (attributesNodes.size() == 0) {
    attributesNode=node.appendNode("attributes");
  }
 else {
    attributesNode=(Node)attributesNodes.get(0);
  }
  for (  String key : effectiveEntryAttrs.keySet()) {
    Object value=effectiveEntryAttrs.get(key);
    Map<String,Object> attrs=Maps.newHashMap();
    attrs.put("name",key);
    attrs.put("value",value);
    attributesNode.appendNode("attribute",attrs);
  }
}
