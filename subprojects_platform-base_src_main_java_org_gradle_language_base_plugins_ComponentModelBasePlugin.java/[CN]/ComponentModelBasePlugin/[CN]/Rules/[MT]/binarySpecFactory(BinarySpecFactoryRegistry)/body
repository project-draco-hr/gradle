{
  final BinarySpecFactory binarySpecFactory=new BinarySpecFactory("this collection");
  binaryFactoryRegistry.copyInto(new NamedDomainObjectFactoryRegistry<BinarySpec>(){
    @Override public <U extends BinarySpec>void registerFactory(    Class<U> type,    final NamedDomainObjectFactory<? extends U> factory){
      binarySpecFactory.registerFactory(ModelType.of(type),null,new BiFunction<U,String,MutableModelNode>(){
        @Override public U apply(        String s,        MutableModelNode modelNode){
          final U binarySpec=factory.create(s);
          final Object parentObject=modelNode.getParent().getParent().getPrivateData();
          if (parentObject instanceof ComponentSpec && binarySpec instanceof ComponentSpecAware) {
            ((ComponentSpecAware)binarySpec).setComponent((ComponentSpec)parentObject);
          }
          return binarySpec;
        }
      }
);
    }
  }
);
  for (  Map.Entry<Class<? extends BinarySpec>,ModelType<? extends BinarySpec>> entry : binaryFactoryRegistry.getImplementationTypes().entrySet()) {
    ModelType<BinarySpec> publicType=Cast.uncheckedCast(ModelType.of(entry.getKey()));
    ModelType<BinarySpec> implementationType=Cast.uncheckedCast(entry.getValue());
    binarySpecFactory.registerImplementation(publicType,null,implementationType);
  }
  Map<Class<? extends BinarySpec>,List<ModelType<?>>> internalViews=binaryFactoryRegistry.getInternalViews();
  for (  Map.Entry<Class<? extends BinarySpec>,List<ModelType<?>>> entry : internalViews.entrySet()) {
    ModelType<? extends BinarySpec> publicType=ModelType.of(entry.getKey());
    for (    ModelType<?> internalView : entry.getValue()) {
      binarySpecFactory.registerInternalView(publicType,null,internalView);
    }
  }
  return binarySpecFactory;
}
