{
  EclipseDomainModel eclipseDomainModel=project.getPlugins().getPlugin(EclipsePlugin.class).getEclipseDomainModel();
  Configuration configuration=project.getConfigurations().findByName("testRuntime");
  List<ExternalDependencyVersion1> dependencies=new ExternalDependenciesFactory().create(project,eclipseDomainModel.getClasspath());
  final List<EclipseProjectDependencyVersion2> projectDependencies=new ArrayList<EclipseProjectDependencyVersion2>();
  if (configuration != null) {
    for (    final ProjectDependency projectDependency : configuration.getAllDependencies(ProjectDependency.class)) {
      projectDependencies.add(new EclipseProjectDependencyVersion2(){
        public HierarchicalEclipseProjectVersion1 getTargetProject(){
          return projectMapping.get(projectDependency.getDependencyProject().getPath());
        }
        public String getPath(){
          return projectDependency.getDependencyProject().getName();
        }
      }
);
    }
  }
  List<EclipseSourceDirectoryVersion1> sourceDirectories=new SourceDirectoriesFactory().create(project,eclipseDomainModel.getClasspath());
  List<TaskVersion1> tasks=new TasksFactory().create(project);
  List<DefaultEclipseProject> children=new ArrayList<DefaultEclipseProject>();
  for (  Project child : project.getChildProjects().values()) {
    children.add(build(child));
  }
  org.gradle.plugins.ide.eclipse.model.Project internalProject=eclipseDomainModel.getProject();
  String name=internalProject.getName();
  String description=GUtil.elvis(internalProject.getComment(),null);
  DefaultEclipseProject eclipseProject=new DefaultEclipseProject(name,project.getPath(),description,project.getProjectDir(),children,tasks,sourceDirectories,dependencies,projectDependencies);
  for (  DefaultEclipseProject child : children) {
    child.setParent(eclipseProject);
  }
  addProject(project,eclipseProject);
  return eclipseProject;
}
