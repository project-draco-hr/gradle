{
  pluginConvention.getSource().allObjects(new Action<SourceSet>(){
    public void execute(    final SourceSet sourceSet){
      final Project project=pluginConvention.getProject();
      ConventionMapping conventionMapping=((IConventionAware)sourceSet).getConventionMapping();
      conventionMapping.map("classesDir",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          String classesDirName=String.format("classes/%s",sourceSet.getName());
          return new File(project.getBuildDir(),classesDirName);
        }
      }
);
      sourceSet.getJava().srcDir(String.format("src/%s/java",sourceSet.getName()));
      sourceSet.getResources().srcDir(String.format("src/%s/resources",sourceSet.getName()));
      sourceSet.setCompileClasspath(project.getConfigurations().getByName(COMPILE_CONFIGURATION_NAME));
      sourceSet.setRuntimeClasspath(project.getConfigurations().getByName(RUNTIME_CONFIGURATION_NAME));
      String taskBaseName=sourceSet.getName().equals(MAIN_SOURCE_SET_NAME) ? "" : GUtil.toCamelCase(sourceSet.getName());
      Copy processResources=project.getTasks().add(String.format("process%sResources",taskBaseName),Copy.class);
      processResources.setDescription(String.format("Process and copy the %s resources.",sourceSet.getName()));
      conventionMapping=processResources.getConventionMapping();
      conventionMapping.map("srcDirs",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return sourceSet.getResources().getSrcDirs();
        }
      }
);
      conventionMapping.map("destinationDir",new ConventionValue(){
        public Object getValue(        Convention convention,        IConventionAware conventionAwareObject){
          return sourceSet.getClassesDir();
        }
      }
);
      Compile compile=project.getTasks().add(String.format("compile%s",taskBaseName),Compile.class);
      configureForSourceSet(sourceSet,compile);
    }
  }
);
}
