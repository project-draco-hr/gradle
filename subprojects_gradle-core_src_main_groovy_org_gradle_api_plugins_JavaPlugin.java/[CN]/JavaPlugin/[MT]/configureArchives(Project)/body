{
  project.getTasks().withType(AbstractArchiveTask.class).allTasks(new Action<AbstractArchiveTask>(){
    public void execute(    AbstractArchiveTask task){
      if (task instanceof Jar) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.JAR);
        task.dependsOn(PROCESS_RESOURCES_TASK_NAME);
        task.dependsOn(COMPILE_TASK_NAME);
      }
 else       if (task instanceof Tar) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.TAR);
        task.dependsOn(LIBS_TASK_NAME);
      }
 else       if (task instanceof Zip) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.ZIP);
        task.dependsOn(LIBS_TASK_NAME);
      }
    }
  }
);
  final Spec<Task> isLib=new Spec<Task>(){
    public boolean isSatisfiedBy(    Task element){
      return element instanceof Jar;
    }
  }
;
  Task libsTask=project.getTasks().add(LIBS_TASK_NAME);
  libsTask.setDescription("Builds all Jar and War archives");
  libsTask.dependsOn(new TaskDependency(){
    public Set<? extends Task> getDependencies(    Task task){
      return project.getTasks().findAll(isLib);
    }
  }
);
  final Spec<Task> isDist=new Spec<Task>(){
    public boolean isSatisfiedBy(    Task element){
      return element instanceof Zip && !isLib.isSatisfiedBy(element);
    }
  }
;
  Task distsTask=project.getTasks().add(DISTS_TASK_NAME);
  distsTask.setDescription("Builds all Jar, War, Zip, and Tar archives");
  distsTask.dependsOn(LIBS_TASK_NAME);
  distsTask.dependsOn(new TaskDependency(){
    public Set<? extends Task> getDependencies(    Task task){
      return project.getTasks().findAll(isDist);
    }
  }
);
  Jar jar=project.getTasks().add(JAR_TASK_NAME,Jar.class);
  jar.setDescription("Generates a jar archive with all the compiled classes.");
  jar.conventionMapping("resourceCollections",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      File classesDir=convention.getPlugin(JavaPluginConvention.class).getSource().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClassesDir();
      return Arrays.asList(project.fileTree(classesDir));
    }
  }
);
  project.getConfigurations().getByName(Dependency.ARCHIVES_CONFIGURATION).addArtifact(new ArchivePublishArtifact(jar));
}
