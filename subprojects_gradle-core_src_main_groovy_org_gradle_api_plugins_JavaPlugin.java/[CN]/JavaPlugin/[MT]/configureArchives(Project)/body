{
  project.getTasks().withType(AbstractArchiveTask.class).allTasks(new Action<AbstractArchiveTask>(){
    public void execute(    AbstractArchiveTask task){
      if (task instanceof Jar) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.JAR);
      }
 else       if (task instanceof Tar) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.TAR);
      }
 else       if (task instanceof Zip) {
        task.getConventionMapping().map(DefaultConventionsToPropertiesMapping.ZIP);
      }
    }
  }
);
  Task assembleTask=project.getTasks().add(ASSEMBLE_TASK_NAME);
  assembleTask.setDescription("Builds all Jar, War, Zip, and Tar archives.");
  assembleTask.dependsOn(new TaskDependency(){
    public Set<? extends Task> getDependencies(    Task task){
      return project.getTasks().withType(Zip.class).getAll();
    }
  }
);
  Task checkTask=project.getTasks().add(CHECK_TASK_NAME);
  checkTask.setDescription("Runs all checks.");
  checkTask.dependsOn(TEST_TASK_NAME);
  Jar jar=project.getTasks().add(JAR_TASK_NAME,Jar.class);
  jar.setDescription("Generates a jar archive with all the compiled classes.");
  jar.conventionMapping("resourceCollections",new ConventionValue(){
    public Object getValue(    Convention convention,    IConventionAware conventionAwareObject){
      FileCollection classes=convention.getPlugin(JavaPluginConvention.class).getSource().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClasses();
      return Arrays.asList(classes.getAsFileTree());
    }
  }
);
  project.getConfigurations().getByName(Dependency.ARCHIVES_CONFIGURATION).addArtifact(new ArchivePublishArtifact(jar));
}
