{
  NamedDomainObjectSet<T> allWithType=withType(type);
  if (targets.isEmpty()) {
    if ((allWithType.size() - 1) == defaults.size()) {
      Set<T> matching=CollectionUtils.filter(allWithType,new Spec<T>(){
        public boolean isSatisfiedBy(        T element){
          return !defaults.contains(element);
        }
      }
);
      if (matching.size() == 1) {
        return Lists.newArrayList(matching);
      }
    }
 else     if (allWithType.size() > 1 && defaultPlatform != null) {
      return Collections.singletonList(defaultPlatform);
    }
    throw new GradleException(String.format("No element is registered for type: '%s'",type));
  }
  List<T> matching=Lists.newArrayList();
  final List<String> notFound=Lists.newArrayList(targets);
  CollectionUtils.filter(allWithType,matching,new Spec<T>(){
    public boolean isSatisfiedBy(    T element){
      return notFound.remove(element.getName());
    }
  }
);
  if (notFound.size() == 1) {
    throw new InvalidUserDataException(String.format("Invalid %s: %s",type.getSimpleName(),notFound.get(0)));
  }
 else   if (notFound.size() > 1) {
    throw new InvalidUserDataException(String.format("Invalid %ss: %s",type.getSimpleName(),notFound));
  }
  return matching;
}
