{
  Iterable<Suggestion> suggestions=Iterables.transform(availablePaths,new Function<ModelPath,Suggestion>(){
    public Suggestion apply(    ModelPath available){
      int distance=StringUtils.getLevenshteinDistance(unavailable.toString(),available.toString());
      boolean suggest=distance <= Math.min(3,unavailable.toString().length() / 2);
      if (suggest) {
        return new Suggestion(distance,available);
      }
 else {
        return null;
      }
    }
  }
);
  suggestions=Iterables.filter(suggestions,REMOVE_NULLS);
  List<Suggestion> sortedSuggestions=CollectionUtils.sort(suggestions);
  return CollectionUtils.collect(sortedSuggestions,Suggestion.EXTRACT_PATH);
}
