{
  super.init(target,services);
  this.services=services;
  loggingManager=services.get(LoggingManager.class);
  Instantiator instantiator=services.get(Instantiator.class);
  if (target instanceof FileOperations) {
    fileOperations=(FileOperations)target;
  }
 else   if (getScriptSource().getResource().getFile() != null) {
    fileOperations=new DefaultFileOperations(new BaseDirFileResolver(FileSystems.getDefault(),getScriptSource().getResource().getFile().getParentFile()),null,null,instantiator);
  }
 else {
    fileOperations=new DefaultFileOperations(new IdentityFileResolver(),null,null,instantiator);
  }
  processOperations=(ProcessOperations)fileOperations;
  if (target instanceof PluginAware) {
    pluginHandler=new DefaultPluginHandler((PluginAware)target,instantiator,new Action<PluginResolution>(){
      public void execute(      PluginResolution pluginResolution){
        Set<File> classpathFiles=pluginResolution.resolveClasspath();
        ClassPath classPath=new DefaultClassPath(classpathFiles);
        ClassLoader classLoader=new URLClassLoader(classPath.getAsURLArray(),this.getClass().getClassLoader());
        Class<?> aClass;
        try {
          aClass=classLoader.loadClass(pluginResolution.getClassName());
        }
 catch (        ClassNotFoundException e) {
          throw UncheckedException.throwAsUncheckedException(e);
        }
        ((PluginAware)target).getPlugins().apply((Class<? extends Plugin>)aClass);
      }
    }
);
    pluginHandler.getResolvers().add(new PluginRegistryPluginResolver(services.get(PluginRegistry.class)));
  }
 else {
    pluginHandler=new NonPluggableTargetPluginHandler(target);
  }
}
