{
  return new ModelMutator<T>(){
    private final MethodModelRuleSourceDescriptor methodModelRuleSourceDescriptor=new MethodModelRuleSourceDescriptor(bindingMethod);
    public ModelRuleSourceDescriptor getSourceDescriptor(){
      return methodModelRuleSourceDescriptor;
    }
    public ModelReference<T> getReference(){
      return new ModelReference<T>(first.path,new ModelType<T>(first.type));
    }
    public void mutate(    T object,    Inputs inputs){
      Object[] args=new Object[1 + tail.size()];
      args[0]=object;
      for (int i=0; i < inputs.size(); ++i) {
        args[i + 1]=inputs.get(i,tail.get(i).getType()).getInstance();
      }
      bindingMethod.setAccessible(true);
      try {
        bindingMethod.invoke(modelRule,args);
      }
 catch (      Exception e) {
        Throwable t=e;
        if (t instanceof InvocationTargetException) {
          t=e.getCause();
        }
        throw UncheckedException.throwAsUncheckedException(t);
      }
    }
  }
;
}
