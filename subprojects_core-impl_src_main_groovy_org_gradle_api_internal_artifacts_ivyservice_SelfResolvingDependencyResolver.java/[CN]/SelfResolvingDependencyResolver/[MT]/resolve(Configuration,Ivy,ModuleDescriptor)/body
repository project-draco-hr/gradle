{
  final ResolvedConfiguration resolvedConfiguration=resolver.resolve(configuration,ivy,moduleDescriptor);
  final Set<Dependency> dependencies=configuration.getAllDependencies();
  return new ResolvedConfiguration(){
    private final CachingDependencyResolveContext resolveContext=new CachingDependencyResolveContext(configuration.isTransitive());
    public Set<File> getFiles(    Spec<Dependency> dependencySpec){
      Set<File> files=new LinkedHashSet<File>();
      Set<Dependency> selectedDependencies=Specs.filterIterable(dependencies,dependencySpec);
      for (      Dependency dependency : selectedDependencies) {
        resolveContext.add(dependency);
      }
      files.addAll(resolveContext.resolve().getFiles());
      files.addAll(resolvedConfiguration.getFiles(dependencySpec));
      return files;
    }
    public Set<ResolvedArtifact> getResolvedArtifacts(){
      return resolvedConfiguration.getResolvedArtifacts();
    }
    public Set<ResolvedDependency> getFirstLevelModuleDependencies(){
      return resolvedConfiguration.getFirstLevelModuleDependencies();
    }
    public Set<ResolvedDependency> getFirstLevelModuleDependencies(    Spec<Dependency> dependencySpec) throws ResolveException {
      return resolvedConfiguration.getFirstLevelModuleDependencies(dependencySpec);
    }
    public boolean hasError(){
      return resolvedConfiguration.hasError();
    }
    public LenientConfiguration getLenientConfiguration(){
      return resolvedConfiguration.getLenientConfiguration();
    }
    public void rethrowFailure() throws GradleException {
      resolvedConfiguration.rethrowFailure();
    }
  }
;
}
