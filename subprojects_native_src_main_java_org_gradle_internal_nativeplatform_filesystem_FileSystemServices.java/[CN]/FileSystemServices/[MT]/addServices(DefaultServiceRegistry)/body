{
  if (OperatingSystem.current().isWindows()) {
    serviceRegistry.add(Chmod.class,new EmptyChmod());
    serviceRegistry.add(Stat.class,new FallbackStat());
    serviceRegistry.add(Symlink.class,new FallbackSymlink());
    return;
  }
  serviceRegistry.add(Symlink.class,createSymlink());
  if (JavaVersion.current().isJava7()) {
    String jdkFilePermissionclass="org.gradle.internal.nativeplatform.filesystem.jdk7.PosixJdk7FilePermissionHandler";
    try {
      Object handler=FileSystemServices.class.getClassLoader().loadClass(jdkFilePermissionclass).newInstance();
      serviceRegistry.add(Stat.class,(Stat)handler);
      serviceRegistry.add(Chmod.class,(Chmod)handler);
      return;
    }
 catch (    ClassNotFoundException e) {
      LOGGER.warn(String.format("Unable to load %s. Continuing with fallback.",jdkFilePermissionclass));
    }
catch (    Exception e) {
      throw UncheckedException.throwAsUncheckedException(e);
    }
  }
  serviceRegistry.add(Chmod.class,createChmod());
  serviceRegistry.add(Stat.class,createStat());
}
