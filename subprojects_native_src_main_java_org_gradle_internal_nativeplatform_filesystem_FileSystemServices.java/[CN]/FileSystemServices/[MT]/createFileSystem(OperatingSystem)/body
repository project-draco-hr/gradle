{
  if (operatingSystem.isWindows()) {
    return new GenericFileSystem(new EmptyChmod(),new FallbackStat(),new WindowsSymlink());
  }
  try {
    PosixFiles posixFiles=net.rubygrapefruit.platform.Native.get(PosixFiles.class);
    Symlink symlink=new NativePlatformBackedSymlink(posixFiles);
    FileModeMutator chmod=new NativePlatformBackedChmod(posixFiles);
    FileModeAccessor stat=new NativePlatformBackedStat(posixFiles);
    return new GenericFileSystem(chmod,stat,symlink);
  }
 catch (  NativeIntegrationUnavailableException ex) {
    LOGGER.debug("Native-platform file system integration is not available. Continuing with fallback.");
  }
  LOGGER.debug("Using UnsupportedSymlink implementation.");
  Symlink symlink=new UnsupportedSymlink();
  if (JavaVersion.current().isJava7()) {
    String jdkFilePermissionclass="org.gradle.internal.nativeplatform.filesystem.jdk7.PosixJdk7FilePermissionHandler";
    Class<?> handlerClass=null;
    try {
      handlerClass=FileSystemServices.class.getClassLoader().loadClass(jdkFilePermissionclass);
    }
 catch (    ClassNotFoundException e) {
      LOGGER.warn(String.format("Unable to load %s. Continuing with fallback.",jdkFilePermissionclass));
    }
    if (handlerClass != null) {
      LOGGER.debug("Using JDK 7 file services.");
      Object handler=handlerClass.newInstance();
      return new GenericFileSystem((FileModeMutator)handler,(FileModeAccessor)handler,symlink);
    }
  }
  return new GenericFileSystem(new UnsupportedChmod(),new UnsupportedStat(),symlink);
}
