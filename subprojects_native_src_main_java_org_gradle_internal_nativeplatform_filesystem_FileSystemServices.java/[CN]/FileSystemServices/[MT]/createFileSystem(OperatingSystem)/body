{
  if (operatingSystem.isWindows()) {
    return new GenericFileSystem(new EmptyChmod(),new FallbackStat(),new FallbackSymlink());
  }
  LibC libC=loadLibC();
  Symlink symlink=symlink(libC);
  POSIX posix=PosixUtil.current();
  if ((libC != null && (operatingSystem.isLinux() || operatingSystem.isMacOsX())) && posix instanceof BaseNativePOSIX) {
    FilePathEncoder filePathEncoder=encoder(libC,operatingSystem);
    Chmod chmod=new LibcChmod(libC,filePathEncoder);
    Stat stat=new LibCStat(libC,operatingSystem,(BaseNativePOSIX)posix,filePathEncoder);
    return new GenericFileSystem(chmod,stat,symlink);
  }
  if (JavaVersion.current().isJava7()) {
    String jdkFilePermissionclass="org.gradle.internal.nativeplatform.filesystem.jdk7.PosixJdk7FilePermissionHandler";
    try {
      Object handler=FileSystemServices.class.getClassLoader().loadClass(jdkFilePermissionclass).newInstance();
      return new GenericFileSystem((Chmod)handler,(Stat)handler,symlink);
    }
 catch (    ClassNotFoundException e) {
      LOGGER.warn(String.format("Unable to load %s. Continuing with fallback.",jdkFilePermissionclass));
    }
catch (    Exception e) {
      throw UncheckedException.throwAsUncheckedException(e);
    }
  }
  return new GenericFileSystem(chmod(libC,operatingSystem),stat(),symlink);
}
