{
  super(type,((ProjectInternal)task.getProject()).getServices().get(Instantiator.class));
  task.getInputs().property("reports.enabledReportNames",new Callable<Collection<String>>(){
    @Override public Collection<String> call() throws Exception {
      return CollectionUtils.collect(getEnabled(),new TreeSet<String>(),REPORT_NAME);
    }
  }
);
  task.getOutputs().configure(new Action<TaskOutputs>(){
    @Override public void execute(    TaskOutputs taskOutputs){
      for (      final Report report : getEnabled()) {
        Callable<File> futureFile=new Callable<File>(){
          @Override public File call() throws Exception {
            return report.getDestination();
          }
        }
;
switch (report.getOutputType()) {
case FILE:
          taskOutputs.includeFile(futureFile).withPropertyName("reports." + report.getName());
        break;
case DIRECTORY:
      taskOutputs.includeDir(futureFile).withPropertyName("reports." + report.getName());
    break;
default :
  throw new AssertionError();
}
}
((TaskInternal)task).prependParallelSafeAction(new Action<Task>(){
@Override public void execute(Task task){
for (Report report : getEnabled()) {
switch (report.getOutputType()) {
case FILE:
    ensureParentDirectoryExists(report.getDestination());
  break;
case DIRECTORY:
ensureDirectoryExists(report.getDestination());
break;
default :
throw new AssertionError();
}
}
}
}
);
}
}
);
}
