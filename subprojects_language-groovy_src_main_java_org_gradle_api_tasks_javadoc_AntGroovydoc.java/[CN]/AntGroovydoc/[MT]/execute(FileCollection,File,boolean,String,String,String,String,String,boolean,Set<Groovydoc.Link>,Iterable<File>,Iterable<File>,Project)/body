{
  final File tmpDir=new File(project.getBuildDir(),"tmp/groovydoc");
  FileOperations fileOperations=(ProjectInternal)project;
  fileOperations.delete(tmpDir);
  fileOperations.copy(new Action<CopySpec>(){
    public void execute(    CopySpec copySpec){
      copySpec.from(source).into(tmpDir);
    }
  }
);
  final Map<String,Object> args=Maps.newLinkedHashMap();
  args.put("sourcepath",tmpDir.toString());
  args.put("destdir",destDir);
  args.put("use",use);
  args.put("private",includePrivate);
  putIfNotNull(args,"windowtitle",windowTitle);
  putIfNotNull(args,"doctitle",docTitle);
  putIfNotNull(args,"header",header);
  putIfNotNull(args,"footer",footer);
  putIfNotNull(args,"overview",overview);
  ant.withGroovy(groovyClasspath).withClasspath(classpath).execute(new Closure<Object>(this,this){
    @SuppressWarnings("UnusedDeclaration") public Object doCall(    Object it){
      final GroovyObjectSupport antBuilder=(GroovyObjectSupport)it;
      antBuilder.invokeMethod("taskdef",ImmutableMap.of("name","groovydoc","classname","org.codehaus.groovy.ant.Groovydoc"));
      antBuilder.invokeMethod("groovydoc",new Object[]{args,new Closure<Object>(this,this){
        public Object doCall(        Object ignore){
          for (          Groovydoc.Link link : links) {
            antBuilder.invokeMethod("link",new Object[]{ImmutableMap.of("packages",Joiner.on(",").join(link.getPackages()),"href",link.getUrl())});
          }
          return null;
        }
      }
});
      return null;
    }
  }
);
}
