{
  final TaskInternal task=context.mock(TaskInternal.class);
  context.checking(new Expectations(){
{
      TaskStateInternal state=context.mock(TaskStateInternal.class);
      allowing(task).getProject();
      will(returnValue(root));
      allowing(task).getName();
      will(returnValue(name));
      allowing(task).getPath();
      will(returnValue(":" + name));
      allowing(task).getState();
      will(returnValue(state));
      allowing(task).getMustRunAfter();
      will(returnValue(new DefaultTaskDependency()));
      allowing(task).getFinalisedBy();
      will(returnValue(new DefaultTaskDependency()));
      allowing(task).getDidWork();
      will(returnValue(true));
      allowing(task).compareTo(with(notNullValue(TaskInternal.class)));
      will(new org.jmock.api.Action(){
        public Object invoke(        Invocation invocation) throws Throwable {
          return name.compareTo(((Task)invocation.getParameter(0)).getName());
        }
        public void describeTo(        Description description){
          description.appendText("compare to");
        }
      }
);
    }
  }
);
  return task;
}
