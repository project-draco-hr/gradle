{
  DataInputStream instr=new DataInputStream(new EncodedStream.EncodedInput(System.in));
  int classPathLength=instr.readInt();
  URL[] infrastructureClassPath=new URL[classPathLength];
  for (int i=0; i < classPathLength; i++) {
    String url=instr.readUTF();
    infrastructureClassPath[i]=new URL(url);
  }
  int logLevel=instr.readInt();
  int sharedPackagesCount=instr.readInt();
  List<String> sharedPackages=new ArrayList<String>(sharedPackagesCount);
  for (int i=0; i < sharedPackagesCount; i++) {
    sharedPackages.add(instr.readUTF());
  }
  classPathLength=instr.readInt();
  List<URL> implementationClassPath=new ArrayList<URL>(classPathLength);
  for (int i=0; i < classPathLength; i++) {
    String url=instr.readUTF();
    implementationClassPath.add(new URL(url));
  }
  int serializedWorkerLength=instr.readInt();
  byte[] serializedWorker=new byte[serializedWorkerLength];
  instr.readFully(serializedWorker);
  URLClassLoader classLoader=new URLClassLoader(infrastructureClassPath,ClassLoader.getSystemClassLoader().getParent());
  Class<? extends Callable> workerClass=classLoader.loadClass("org.gradle.process.internal.child.SystemApplicationClassLoaderWorker").asSubclass(Callable.class);
  Callable<Void> main=workerClass.getConstructor(Integer.TYPE,Collection.class,Collection.class,byte[].class).newInstance(logLevel,sharedPackages,implementationClassPath,serializedWorker);
  main.call();
}
