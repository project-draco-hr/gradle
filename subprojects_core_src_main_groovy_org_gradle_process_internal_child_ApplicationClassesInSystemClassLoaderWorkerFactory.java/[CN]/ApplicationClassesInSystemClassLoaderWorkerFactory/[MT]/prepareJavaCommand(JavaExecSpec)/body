{
  execSpec.setMain("jarjar." + GradleWorkerMain.class.getName());
  execSpec.classpath(classPathRegistry.getClassPath("WORKER_MAIN").getAsFiles());
  Object requestedSecurityManager=execSpec.getSystemProperties().get("java.security.manager");
  if (requestedSecurityManager != null) {
    execSpec.systemProperty("org.gradle.security.manager",requestedSecurityManager);
  }
  execSpec.systemProperty("java.security.manager","jarjar." + BootstrapSecurityManager.class.getName());
  Collection<URL> workerClassPath=classPathRegistry.getClassPath("WORKER_PROCESS").getAsURLs();
  ActionExecutionWorker worker=create();
  Collection<File> applicationClasspath=processBuilder.getApplicationClasspath();
  LogLevel logLevel=processBuilder.getLogLevel();
  Set<String> sharedPackages=processBuilder.getSharedPackages();
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  try {
    DataOutputStream outstr=new DataOutputStream(new EncodedStream.EncodedOutput(bytes));
    outstr.writeInt(applicationClasspath.size());
    for (    File file : applicationClasspath) {
      outstr.writeUTF(file.getAbsolutePath());
    }
    outstr.writeInt(workerClassPath.size());
    for (    URL entry : workerClassPath) {
      outstr.writeUTF(entry.toString());
    }
    outstr.writeInt(logLevel.ordinal());
    outstr.writeInt(sharedPackages.size());
    for (    String str : sharedPackages) {
      outstr.writeUTF(str);
    }
    outstr.writeInt(implementationClassPath.size());
    for (    URL entry : implementationClassPath) {
      outstr.writeUTF(entry.toString());
    }
    byte[] serializedWorker=GUtil.serialize(worker);
    outstr.writeInt(serializedWorker.length);
    outstr.write(serializedWorker);
    outstr.flush();
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
  execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()));
}
