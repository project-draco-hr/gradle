{
  FileCollectionSnapshot filesSnapshot;
  Map<String,IncrementalFileSnapshot> afterSnapshots=afterExecution.getSnapshots();
  if (!beforeExecution.getSnapshots().isEmpty() && !afterSnapshots.isEmpty()) {
    Map<String,IncrementalFileSnapshot> beforeSnapshots=beforeExecution.getSnapshots();
    Map<String,IncrementalFileSnapshot> previousSnapshots=afterPreviousExecution != null ? afterPreviousExecution.getSnapshots() : new HashMap<String,IncrementalFileSnapshot>();
    int newEntryCount=0;
    ImmutableMap.Builder<String,IncrementalFileSnapshot> newEntries=ImmutableMap.builder();
    for (    Map.Entry<String,IncrementalFileSnapshot> entry : afterSnapshots.entrySet()) {
      final String path=entry.getKey();
      IncrementalFileSnapshot otherFile=beforeSnapshots.get(path);
      if (otherFile == null || !entry.getValue().isContentAndMetadataUpToDate(otherFile) || previousSnapshots.containsKey(path)) {
        newEntries.put(entry.getKey(),entry.getValue());
        newEntryCount++;
      }
    }
    if (newEntryCount == afterSnapshots.size()) {
      filesSnapshot=afterExecution;
    }
 else {
      filesSnapshot=new FileCollectionSnapshotImpl(newEntries.build(),TaskFilePropertyCompareType.OUTPUT);
    }
  }
 else {
    filesSnapshot=afterExecution;
  }
  if (filesSnapshot instanceof OutputFilesSnapshot) {
    filesSnapshot=((OutputFilesSnapshot)filesSnapshot).filesSnapshot;
  }
  return new OutputFilesSnapshot(getRoots(roots),filesSnapshot);
}
