{
  Map<String,Boolean> added=new HashMap<String,Boolean>(roots);
  added.keySet().removeAll(other.roots.keySet());
  final Iterator<String> addedIterator=added.keySet().iterator();
  Map<String,Boolean> removed=new HashMap<String,Boolean>(other.roots);
  removed.keySet().removeAll(roots.keySet());
  final Iterator<String> removedIterator=removed.keySet().iterator();
  Set<String> changed=new HashSet<String>();
  for (  Map.Entry<String,Boolean> current : roots.entrySet()) {
    Boolean otherValue=other.roots.get(current.getKey());
    if (otherValue != null && otherValue.booleanValue() && !otherValue.equals(current.getValue())) {
      changed.add(current.getKey());
    }
  }
  final Iterator<String> changedIterator=changed.iterator();
  return new AbstractIterator<TaskStateChange>(){
    @Override protected TaskStateChange computeNext(){
      if (addedIterator.hasNext()) {
        return new FileChange(addedIterator.next(),ChangeType.ADDED,fileType);
      }
      if (removedIterator.hasNext()) {
        return new FileChange(removedIterator.next(),ChangeType.REMOVED,fileType);
      }
      if (changedIterator.hasNext()) {
        return new FileChange(changedIterator.next(),ChangeType.MODIFIED,fileType);
      }
      return endOfData();
    }
  }
;
}
