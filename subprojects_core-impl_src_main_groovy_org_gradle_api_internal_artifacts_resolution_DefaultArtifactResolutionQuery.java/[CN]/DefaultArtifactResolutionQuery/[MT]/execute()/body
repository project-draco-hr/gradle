{
  List<ResolutionAwareRepository> repositories=CollectionUtils.collect(repositoryHandler,Transformers.cast(ResolutionAwareRepository.class));
  ConfigurationInternal configuration=configurationContainer.detachedConfiguration();
  final RepositoryChain repositoryChain=ivyFactory.create(configuration,repositories,metadataProcessor);
  return lockingManager.useCache("resolve artifacts",new Factory<ArtifactResolutionQueryResult>(){
    public ArtifactResolutionQueryResult create(){
      Set<JvmLibrary> jvmLibraries=Sets.newHashSet();
      Set<UnresolvedSoftwareComponent> unresolvedComponents=Sets.newHashSet();
      for (      ComponentIdentifier componentId : componentIds) {
        if (!(componentId instanceof ModuleComponentIdentifier)) {
          throw new AssertionError("unknown component identifier type: " + componentId.getClass().getName());
        }
        ModuleComponentIdentifier moduleComponentId=(ModuleComponentIdentifier)componentId;
        BuildableModuleVersionResolveResult moduleResolveResult=new DefaultBuildableModuleVersionResolveResult();
        repositoryChain.getDependencyResolver().resolve(new DefaultDependencyMetaData(new DefaultDependencyDescriptor(toModuleRevisionId(moduleComponentId),true)),moduleResolveResult);
        ArtifactResolver artifactResolver=repositoryChain.getArtifactResolver();
        if (moduleResolveResult.getFailure() != null) {
          unresolvedComponents.add(new DefaultUnresolvedSoftwareComponent(moduleComponentId,moduleResolveResult.getFailure()));
        }
 else {
          List<JvmLibraryArtifact> jvmLibraryArtifacts=Lists.newArrayList();
          for (          Class<? extends SoftwareArtifact> artifactType : artifactTypes) {
            DefaultBuildableMultipleArtifactResolveResult multiResolveResult=new DefaultBuildableMultipleArtifactResolveResult();
            artifactResolver.resolve(moduleResolveResult.getMetaData(),artifactType,multiResolveResult);
            for (            ArtifactResolveResult resolveResult : multiResolveResult.getResults().values()) {
              if (resolveResult.getFailure() != null) {
                int x=0;
              }
 else               if (artifactType == JvmLibraryJavadocArtifact.class) {
                jvmLibraryArtifacts.add(new DefaultJvmLibraryJavadocArtifact(resolveResult.getFile()));
              }
 else               if (artifactType == JvmLibrarySourcesArtifact.class) {
                jvmLibraryArtifacts.add(new DefaultJvmLibrarySourcesArtifact(resolveResult.getFile()));
              }
 else {
                throw new AssertionError("unknown artifact type: " + artifactType.getName());
              }
            }
          }
          jvmLibraries.add(new DefaultJvmLibrary(moduleComponentId,jvmLibraryArtifacts));
        }
      }
      return new DefaultArtifactResolutionQueryResult(jvmLibraries,unresolvedComponents);
    }
  }
);
}
