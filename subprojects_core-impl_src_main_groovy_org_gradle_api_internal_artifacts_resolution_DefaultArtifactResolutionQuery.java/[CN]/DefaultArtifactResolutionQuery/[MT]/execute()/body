{
  List<ResolutionAwareRepository> repositories=CollectionUtils.collect(repositoryHandler,Transformers.cast(ResolutionAwareRepository.class));
  ConfigurationInternal configuration=configurationContainer.detachedConfiguration();
  final DependencyToModuleVersionResolver resolver=ivyFactory.create(configuration,repositories,metadataProcessor);
  return lockingManager.useCache("resolve artifacts",new Factory<ArtifactResolutionQueryResult>(){
    public ArtifactResolutionQueryResult create(){
      Set<JvmLibrary> jvmLibraries=Sets.newHashSet();
      Set<UnresolvedSoftwareComponent> unresolvedComponents=Sets.newHashSet();
      for (      ModuleComponentIdentifier componentId : componentIds) {
        BuildableModuleVersionResolveResult moduleResolveResult=new DefaultBuildableModuleVersionResolveResult();
        resolver.resolve(new DefaultDependencyMetaData(new DefaultDependencyDescriptor(toModuleRevisionId(componentId),true)),moduleResolveResult);
        if (moduleResolveResult.getFailure() != null) {
          unresolvedComponents.add(new DefaultUnresolvedSoftwareComponent(componentId,moduleResolveResult.getFailure()));
        }
 else {
          moduleResolveResult.setArtifactResolver(new ErrorHandlingArtifactResolver(moduleResolveResult.getArtifactResolver()));
          List<JvmLibraryArtifact> jvmLibraryArtifacts=Lists.newArrayList();
          for (          Class<? extends SoftwareArtifact> artifactType : artifactTypes) {
            if (artifactType == JvmLibraryJavadocArtifact.class) {
              Artifact artifact=new DefaultArtifact(toModuleRevisionId(componentId),null,componentId.getModule(),"javadoc","jar",ImmutableMap.of("m:classifier","javadoc"));
              DefaultBuildableArtifactResolveResult artifactResolveResult=new DefaultBuildableArtifactResolveResult();
              moduleResolveResult.getArtifactResolver().resolve(new DefaultModuleVersionArtifactMetaData(moduleResolveResult.getId(),artifact),artifactResolveResult);
              if (artifactResolveResult.getFailure() != null) {
                int x=1;
              }
 else {
                jvmLibraryArtifacts.add(new DefaultJvmLibraryJavadocArtifact(artifactResolveResult.getFile()));
              }
            }
 else             if (artifactType == JvmLibrarySourcesArtifact.class) {
              Artifact artifact=new DefaultArtifact(toModuleRevisionId(componentId),null,componentId.getModule(),"source","jar",ImmutableMap.of("m:classifier","sources"));
              DefaultBuildableArtifactResolveResult artifactResolveResult=new DefaultBuildableArtifactResolveResult();
              moduleResolveResult.getArtifactResolver().resolve(new DefaultModuleVersionArtifactMetaData(moduleResolveResult.getId(),artifact),artifactResolveResult);
              if (artifactResolveResult.getFailure() != null) {
                int x=1;
              }
 else {
                jvmLibraryArtifacts.add(new DefaultJvmLibrarySourcesArtifact(artifactResolveResult.getFile()));
              }
            }
          }
          jvmLibraries.add(new DefaultJvmLibrary(componentId,jvmLibraryArtifacts));
        }
      }
      return new DefaultArtifactResolutionQueryResult(jvmLibraries,unresolvedComponents);
    }
  }
);
}
