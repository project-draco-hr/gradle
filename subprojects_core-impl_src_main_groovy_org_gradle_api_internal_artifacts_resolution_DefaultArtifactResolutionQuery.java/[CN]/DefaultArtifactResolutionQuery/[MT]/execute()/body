{
  final List<Dependency> artifactDependencies=createArtifactDependencies();
  Configuration configuration=configurationContainer.detachedConfiguration(artifactDependencies.toArray(new Dependency[artifactDependencies.size()]));
  LenientConfiguration lenientConfiguration=configuration.getResolvedConfiguration().getLenientConfiguration();
  Set<UnresolvedSoftwareComponent> unresolvedComponents=Sets.newHashSet();
  Set<ModuleComponentIdentifier> unresolvedComponentIds=Sets.newHashSet();
  for (  UnresolvedDependency dependency : lenientConfiguration.getUnresolvedModuleDependencies()) {
    ModuleComponentIdentifier id=toComponentIdentifier(dependency.getSelector());
    unresolvedComponents.add(new DefaultUnresolvedSoftwareComponent(id,dependency.getProblem()));
    unresolvedComponentIds.add(id);
  }
  Multimap<ModuleComponentIdentifier,JvmLibraryArtifact> jvmLibraryArtifacts=ArrayListMultimap.create();
  for (  ResolvedArtifact artifact : lenientConfiguration.getArtifacts(Specs.satisfyAll())) {
    ModuleComponentIdentifier componentId=toComponentIdentifier(artifact.getModuleVersion().getId());
    jvmLibraryArtifacts.put(componentId,toJvmLibraryArtifact(artifact));
  }
  Set<JvmLibrary> jvmLibraries=Sets.newHashSet();
  Set<ModuleComponentIdentifier> resolvedComponentIds=Sets.difference(componentIds,unresolvedComponentIds);
  for (  ModuleComponentIdentifier id : resolvedComponentIds) {
    jvmLibraries.add(new DefaultJvmLibrary(id,ImmutableList.copyOf(jvmLibraryArtifacts.get(id))));
  }
  return new DefaultArtifactResolutionQueryResult(jvmLibraries,unresolvedComponents);
}
