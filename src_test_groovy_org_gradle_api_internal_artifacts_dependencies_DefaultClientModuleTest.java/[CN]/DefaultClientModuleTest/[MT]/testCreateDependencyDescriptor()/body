{
  final DefaultClientModule clientModule=new DefaultClientModule(TEST_CONF_MAPPING,TEST_MODULE_DESCRIPTOR_WITH_CLASSIFIER,dependencyContainerMock);
  final ClientModuleDescriptorFactory clientModuleDescriptorFactoryMock=context.mock(ClientModuleDescriptorFactory.class);
  clientModule.setClientModuleDescriptorFactory(clientModuleDescriptorFactoryMock);
  clientModule.setDependencyDescriptorFactory(dependencyDescriptorFactoryMock);
  final ModuleDescriptor parentModuleDescriptorMock=context.mock(ModuleDescriptor.class,"parent");
  final ModuleDescriptor clientModuleDescriptorMock=context.mock(ModuleDescriptor.class,"clientModule");
  context.checking(new Expectations(){
{
      allowing(dependencyContainerMock).getClientModuleRegistry();
      will(returnValue(testModuleRegistry));
      allowing(dependencyDescriptorFactoryMock).createFromClientModule(parentModuleDescriptorMock,clientModule);
      will(returnValue(expectedDependencyDescriptor));
      allowing(clientModuleDescriptorFactoryMock).createModuleDescriptor(expectedDependencyDescriptor.getDependencyRevisionId(),dependencyContainerMock);
      will(returnValue(clientModuleDescriptorMock));
    }
  }
);
  assertSame(expectedDependencyDescriptor,clientModule.createDependencyDescriptor(parentModuleDescriptorMock));
  assertThat((ModuleDescriptor)testModuleRegistry.get(TEST_MODULE_DESCRIPTOR_WITH_CLASSIFIER),Matchers.sameInstance(clientModuleDescriptorMock));
}
