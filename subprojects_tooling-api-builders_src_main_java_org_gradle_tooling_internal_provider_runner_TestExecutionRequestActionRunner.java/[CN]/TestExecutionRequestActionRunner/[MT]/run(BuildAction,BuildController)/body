{
  if (!(action instanceof TestExecutionRequestAction)) {
    return;
  }
  final GradleInternal gradle=buildController.getGradle();
  final TestExecutionRequestAction testExecutionRequestAction=(TestExecutionRequestAction)action;
  buildController.registerBuildConfigurationAction(new BuildConfigurationAction(){
    @Override public void configure(    BuildExecutionContext context){
      final Set<Task> allTasksToRun=new HashSet<Task>();
      final GradleInternal gradleInternal=context.getGradle();
      allTasksToRun.addAll(configureBuildForTestDescriptors(gradleInternal,testExecutionRequestAction));
      allTasksToRun.addAll(configureBuildForTestClasses(gradleInternal,testExecutionRequestAction));
      gradle.getTaskGraph().addTasks(allTasksToRun);
    }
  }
);
  PayloadSerializer payloadSerializer=gradle.getServices().get(PayloadSerializer.class);
  Throwable failure=null;
  try {
    buildController.run();
  }
 catch (  RuntimeException rex) {
    Throwable throwable=findRootCause(rex);
    if (throwable instanceof InternalTestExecutionException) {
      failure=throwable;
    }
 else     if (throwable instanceof TestExecutionException) {
      failure=new InternalTestExecutionException("Error while running test(s)",throwable);
    }
 else {
      throw rex;
    }
  }
  BuildActionResult buildActionResult;
  if (failure != null) {
    buildActionResult=new BuildActionResult(null,payloadSerializer.serialize(failure));
  }
 else {
    buildActionResult=new BuildActionResult(payloadSerializer.serialize(null),null);
  }
  buildController.setResult(buildActionResult);
}
