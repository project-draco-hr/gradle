{
  if (!(action instanceof TestExecutionRequestAction)) {
    return;
  }
  final GradleInternal gradle=buildController.getGradle();
  TestExecutionRequestAction testExecutionRequestAction=(TestExecutionRequestAction)action;
  final Collection<InternalJvmTestExecutionDescriptor> testDescriptors=testExecutionRequestAction.getTestExecutionDescriptors();
  final List<String> testTaskPaths=org.gradle.util.CollectionUtils.collect(testDescriptors,new Transformer<String,InternalJvmTestExecutionDescriptor>(){
    @Override public String transform(    InternalJvmTestExecutionDescriptor internalJvmTestDescriptor){
      return internalJvmTestDescriptor.getTaskPath();
    }
  }
);
  testExecutionRequestAction.getStartParameter().setTaskNames(testTaskPaths);
  for (  final String testTaskPath : testTaskPaths) {
    gradle.addProjectEvaluationListener(new ProjectEvaluationListener(){
      @Override public void beforeEvaluate(      Project project){
      }
      @Override public void afterEvaluate(      Project project,      ProjectState state){
        final Task task=project.getTasks().findByPath(testTaskPath);
        if (task != null && task instanceof Test) {
          Test testTask=(Test)task;
          for (          InternalJvmTestExecutionDescriptor testDescriptor : testDescriptors) {
            if (testDescriptor.getTaskPath().equals(testTaskPath)) {
              final String className=testDescriptor.getClassName();
              final String methodName=testDescriptor.getMethodName();
              if (className == null && methodName == null) {
                testTask.getFilter().includeTestsMatching("*");
              }
 else {
                testTask.getFilter().includeTest(className,methodName);
              }
            }
          }
        }
      }
    }
);
  }
  PayloadSerializer payloadSerializer=gradle.getServices().get(PayloadSerializer.class);
  Throwable failure=null;
  try {
    buildController.run();
  }
 catch (  RuntimeException rex) {
    Throwable throwable=findRootCause(rex);
    if (throwable instanceof TestExecutionException) {
      failure=new InternalTestExecutionException("Error while running test(s)",throwable);
    }
 else     if (throwable instanceof TaskSelectionException) {
      failure=new InternalTestExecutionException("Error while running test(s)",throwable);
    }
 else {
      throw rex;
    }
  }
  BuildActionResult buildActionResult;
  if (failure != null) {
    buildActionResult=new BuildActionResult(null,payloadSerializer.serialize(failure));
  }
 else {
    buildActionResult=new BuildActionResult(payloadSerializer.serialize(null),null);
  }
  buildController.setResult(buildActionResult);
}
