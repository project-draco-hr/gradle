{
  if (testExecutionRequestAction.getTestExecutionRequest().getTestClassNames().isEmpty()) {
    return;
  }
  final Collection<String> testClassNames=testExecutionRequestAction.getTestExecutionRequest().getTestClassNames();
  final Set<String> testTaskPaths=new HashSet<String>();
  gradle.addBuildListener(new BuildAdapter(){
    @Override public void projectsEvaluated(    Gradle gradle){
      final Set<Project> allprojects=gradle.getRootProject().getAllprojects();
      for (      Project project : allprojects) {
        final TaskCollection<Test> testTasks=project.getTasks().withType(Test.class);
        for (        Test testTask : testTasks) {
          addTestClassFilter(testTask,testClassNames);
        }
        testTaskPaths.addAll(CollectionUtils.collect(testTasks,new Transformer<String,Test>(){
          @Override public String transform(          Test testTask){
            return testTask.getPath();
          }
        }
));
      }
      addTasksToStartParameter(testExecutionRequestAction.getStartParameter(),testTaskPaths);
    }
  }
);
}
