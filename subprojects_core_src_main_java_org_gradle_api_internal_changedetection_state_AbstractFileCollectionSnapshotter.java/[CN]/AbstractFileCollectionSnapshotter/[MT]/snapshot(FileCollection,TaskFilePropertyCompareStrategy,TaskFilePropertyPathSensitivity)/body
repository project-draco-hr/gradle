{
  final List<FileTreeElement> fileTreeElements=Lists.newLinkedList();
  final List<FileTreeElement> missingFiles=Lists.newArrayList();
  visitFiles(input,fileTreeElements,missingFiles);
  if (fileTreeElements.isEmpty() && missingFiles.isEmpty()) {
    return emptySnapshot();
  }
  final Map<String,NormalizedFileSnapshot> snapshots=Maps.newLinkedHashMap();
  cacheAccess.useCache("Create file snapshot",new Runnable(){
    public void run(){
      for (      FileTreeElement fileDetails : fileTreeElements) {
        String absolutePath=getInternedAbsolutePath(fileDetails.getFile());
        if (!snapshots.containsKey(absolutePath)) {
          IncrementalFileSnapshot snapshot;
          if (fileDetails.isDirectory()) {
            snapshot=DirSnapshot.getInstance();
          }
 else {
            snapshot=new FileHashSnapshot(snapshotter.snapshot(fileDetails).getHash(),fileDetails.getLastModified());
          }
          NormalizedFileSnapshot normalizedSnapshot=pathSensitivity.getNormalizedSnapshot(fileDetails,snapshot,stringInterner);
          if (normalizedSnapshot != null) {
            snapshots.put(absolutePath,normalizedSnapshot);
          }
        }
      }
      for (      FileTreeElement missingFileDetails : missingFiles) {
        String absolutePath=getInternedAbsolutePath(missingFileDetails.getFile());
        if (!snapshots.containsKey(absolutePath)) {
          snapshots.put(absolutePath,pathSensitivity.getNormalizedSnapshot(missingFileDetails,MissingFileSnapshot.getInstance(),stringInterner));
        }
      }
    }
  }
);
  return new DefaultFileCollectionSnapshot(snapshots,compareStrategy);
}
