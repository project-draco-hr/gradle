{
  Method mostSpecificMethod=findMostSpecificMethod(nonPropertyMethodsWithEqualSignature);
  if (isMethodDeclaredInManagedType(mostSpecificMethod)) {
    String methodName=mostSpecificMethod.getName();
    if (isGetterName(methodName)) {
      if (!takesNoParameter(mostSpecificMethod)) {
        throw invalidMethods(context,"getter methods cannot take parameters",nonPropertyMethodsWithEqualSignature);
      }
    }
    if (isSetterName(methodName)) {
      if (!hasVoidReturnType(mostSpecificMethod)) {
        throw invalidMethods(context,"setter method must have void return type",nonPropertyMethodsWithEqualSignature);
      }
      if (!takesSingleParameter(mostSpecificMethod)) {
        throw invalidMethods(context,"setter method must have exactly one parameter",nonPropertyMethodsWithEqualSignature);
      }
    }
    if (nonPropertyMethodsWithEqualSignature.size() > 1 && !isMethodDeclaredInManagedType(Iterables.getLast(nonPropertyMethodsWithEqualSignature))) {
      return;
    }
    throw invalidMethods(context,"only paired getter/setter methods are supported",nonPropertyMethodsWithEqualSignature);
  }
}
