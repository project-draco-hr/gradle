{
  Class<?> superClass=typeClass.getSuperclass();
  if (superClass != null && !superClass.equals(Object.class)) {
    Constructor<?> customSuperConstructor=findCustomConstructor(typeClass.getSuperclass());
    if (customSuperConstructor != null) {
      return customSuperConstructor;
    }
  }
  Constructor<?>[] constructors=typeClass.getConstructors();
  if (constructors.length == 0 || (constructors.length == 1 && constructors[0].getParameterTypes().length == 0)) {
    return null;
  }
 else {
    for (    Constructor<?> constructor : constructors) {
      if (constructor.getParameterTypes().length > 0) {
        return constructor;
      }
    }
    throw new RuntimeException(String.format("Expected a constructor taking at least one argument in %s but no such constructors were found",typeClass.getName()));
  }
}
