{
  if (type == null) {
    return NullTypeWrapper.INSTANCE;
  }
 else   if (type instanceof Class) {
    return new ClassTypeWrapper((Class<?>)type);
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    return new ParameterizedTypeWrapper(toWrappers(parameterizedType.getActualTypeArguments()),wrap(parameterizedType.getRawType()),wrap(parameterizedType.getOwnerType()),type.hashCode());
  }
 else   if (type instanceof WildcardType) {
    WildcardType wildcardType=(WildcardType)type;
    return new WildcardTypeWrapper(toWrappers(wildcardType.getUpperBounds()),toWrappers(wildcardType.getLowerBounds()),type.hashCode());
  }
 else   if (type instanceof TypeVariable<?>) {
    TypeVariable<?> typeVariable=Cast.uncheckedCast(type);
    TypeVariableWrapper typeWrapper=null;
    GenericDeclarationImpl genericDeclaration=new GenericDeclarationImpl();
    for (    TypeVariable<?> typeParameter : typeVariable.getGenericDeclaration().getTypeParameters()) {
      TypeVariableWrapper wrapper=new TypeVariableWrapper(typeParameter.getName(),toWrappers(typeParameter.getBounds()),genericDeclaration);
      genericDeclaration.add(wrapper);
      if (typeParameter.equals(typeVariable)) {
        typeWrapper=wrapper;
      }
    }
    return typeWrapper;
  }
 else {
    throw new IllegalArgumentException("cannot wrap type of type " + type.getClass());
  }
}
