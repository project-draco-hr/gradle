{
  final Dependency expectedIntegerDependency=context.mock(Dependency.class,"IntegerDependency");
  final Dependency expectedStringDependency=context.mock(Dependency.class,"StringDependency");
  context.checking(new Expectations(){
{
      allowing(testImplIntegerFactoryMock).createDependency(with(equal(AbstractDependencyTest.TEST_CONF_MAPPING)),with(an(Integer.class)),with(same(project)));
      will(returnValue(expectedIntegerDependency));
      allowing(testImplIntegerFactoryMock).createDependency(with(equal(AbstractDependencyTest.TEST_CONF_MAPPING)),with(not(Integer.class)),with(same(project)));
      will(throwException(new UnknownDependencyNotation()));
      allowing(testImplStringFactoryMock).createDependency(with(equal(AbstractDependencyTest.TEST_CONF_MAPPING)),with(an(String.class)),with(same(project)));
      will(returnValue(expectedStringDependency));
      allowing(testImplStringFactoryMock).createDependency(with(equal(AbstractDependencyTest.TEST_CONF_MAPPING)),with(not(String.class)),with(same(project)));
      will(throwException(new UnknownDependencyNotation()));
    }
  }
);
  assertSame(expectedIntegerDependency,dependencyFactory.createDependency(AbstractDependencyTest.TEST_CONF_MAPPING,new Integer(5),project));
  assertSame(expectedStringDependency,dependencyFactory.createDependency(AbstractDependencyTest.TEST_CONF_MAPPING,"somestring",project));
}
