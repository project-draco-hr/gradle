{
  final Set<File> processClassPath=Collections.singleton(new File("something.jar"));
  context.checking(new Expectations(){
{
      one(classPathRegistry).getClassPathFiles("WORKER_PROCESS");
      will(returnValue(processClassPath));
      ignoring(fileResolver);
    }
  }
);
  WorkerProcessBuilder builder=factory.newProcess();
  assertThat(builder.getJavaCommand().getClasspath(),equalTo(processClassPath));
  assertThat(builder.getJavaCommand().getMainClass(),equalTo(GradleWorkerMain.class.getName()));
  assertThat(builder.getLogLevel(),equalTo(LogLevel.LIFECYCLE));
  builder.worker(new TestAction());
  builder.applicationClasspath(Arrays.asList(new File("app.jar")));
  builder.sharedPackages("package1","package2");
  final ObjectConnection connection=context.mock(ObjectConnection.class);
  final URI serverAddress=new URI("test:something");
  context.checking(new Expectations(){
{
      one(messagingServer).createUnicastConnection();
      will(returnValue(connection));
      one(connection).getLocalAddress();
      will(returnValue(serverAddress));
      one(idGenerator).generateId();
      will(returnValue("<id>"));
    }
  }
);
  WorkerProcess process=builder.build();
  assertThat(process,instanceOf(DefaultWorkerProcess.class));
  ObjectInputStream instr=new ObjectInputStream(builder.getJavaCommand().getStandardInput());
  assertThat(instr.readObject(),equalTo((Object)"<id>"));
  assertThat(instr.readObject(),equalTo((Object)"Gradle Worker <id>"));
  assertThat(instr.readObject(),equalTo((Object)LogLevel.LIFECYCLE));
  assertThat(instr.readObject(),equalTo((Object)builder.getApplicationClasspath()));
  assertThat(instr.readObject(),equalTo((Object)builder.getSharedPackages()));
  assertThat(instr.readObject(),instanceOf(Collection.class));
  assertThat(instr.readObject(),instanceOf(TestAction.class));
  assertThat(instr.readObject(),equalTo((Object)serverAddress));
}
