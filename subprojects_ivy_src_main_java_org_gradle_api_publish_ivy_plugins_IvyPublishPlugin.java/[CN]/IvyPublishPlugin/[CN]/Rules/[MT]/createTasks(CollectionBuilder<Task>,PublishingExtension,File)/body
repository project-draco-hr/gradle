{
  PublicationContainer publications=publishingExtension.getPublications();
  RepositoryHandler repositories=publishingExtension.getRepositories();
  for (  final IvyPublicationInternal publication : publications.withType(IvyPublicationInternal.class)) {
    final String publicationName=publication.getName();
    final String descriptorTaskName=String.format("generateDescriptorFileFor%sPublication",capitalize(publicationName));
    tasks.create(descriptorTaskName,GenerateIvyDescriptor.class,new Action<GenerateIvyDescriptor>(){
      public void execute(      final GenerateIvyDescriptor descriptorTask){
        descriptorTask.setDescription(String.format("Generates the Ivy Module Descriptor XML file for publication '%s'.",publication.getName()));
        descriptorTask.setGroup(PublishingPlugin.PUBLISH_TASK_GROUP);
        descriptorTask.setDescriptor(publication.getDescriptor());
        descriptorTask.setDestination(new File(buildDir,"publications/" + publication.getName() + "/ivy.xml"));
      }
    }
);
    publication.setDescriptorFile(tasks.get(descriptorTaskName).getOutputs().getFiles());
    for (    final IvyArtifactRepository repository : repositories.withType(IvyArtifactRepository.class)) {
      final String repositoryName=repository.getName();
      final String publishTaskName=String.format("publish%sPublicationTo%sRepository",capitalize(publicationName),capitalize(repositoryName));
      tasks.create(publishTaskName,PublishToIvyRepository.class,new Action<PublishToIvyRepository>(){
        public void execute(        PublishToIvyRepository publishTask){
          publishTask.setPublication(publication);
          publishTask.setRepository(repository);
          publishTask.setGroup(PublishingPlugin.PUBLISH_TASK_GROUP);
          publishTask.setDescription(String.format("Publishes Ivy publication '%s' to Ivy repository '%s'.",publicationName,repositoryName));
        }
      }
);
      tasks.get(PublishingPlugin.PUBLISH_LIFECYCLE_TASK_NAME).dependsOn(publishTaskName);
    }
  }
}
