{
  modelRegistry.create(ModelCreators.of(ModelReference.of(modelPath,containerType),new BiAction<MutableModelNode,Inputs>(){
    public void execute(    final MutableModelNode modelNode,    Inputs inputs){
      modelNode.setPrivateData(containerType,container);
      container.all(new Action<I>(){
        public void execute(        final I item){
          final String name=namer.determineName(item);
          if (!modelNode.hasLink(name)) {
            ModelType<I> itemType=ModelType.typeOf(item);
            ModelReference<I> itemReference=ModelReference.of(modelPath.child(name),itemType);
            modelNode.addLink(ModelCreators.bridgedInstance(itemReference,item).simpleDescriptor(itemDescriptorGenerator.transform(name)).build());
          }
        }
      }
);
    }
  }
).simpleDescriptor(descriptor).withProjection(new UnmanagedModelProjection<P>(publicType,true,true)).withProjection(new PolymorphicDomainObjectContainerModelProjection<C,I>(instantiator,container,itemType.getConcreteClass())).build());
  container.whenObjectRemoved(new Action<I>(){
    public void execute(    I item){
      ModelPath path=modelPath.child(namer.determineName(item));
      modelRegistry.remove(path);
    }
  }
);
}
