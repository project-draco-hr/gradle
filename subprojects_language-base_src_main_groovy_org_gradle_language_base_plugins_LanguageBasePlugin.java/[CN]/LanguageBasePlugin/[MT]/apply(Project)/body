{
  target.getPlugins().apply(LifecycleBasePlugin.class);
  LanguageRegistry domainRegistry=target.getExtensions().create("languages",DefaultLanguageRegistry.class);
  ProjectComponentContainer components=target.getExtensions().create("projectComponents",DefaultProjectComponentContainer.class,instantiator);
  ProjectSourceSet sources=target.getExtensions().create("sources",DefaultProjectSourceSet.class,instantiator);
  final BinaryContainer binaries=target.getExtensions().create("binaries",DefaultBinaryContainer.class,instantiator);
  modelRules.register("binaries",BinaryContainer.class,new Factory<BinaryContainer>(){
    public BinaryContainer create(){
      return binaries;
    }
  }
);
  modelRules.rule(new AttachBinariesToLifecycle());
  binaries.withType(ProjectBinaryInternal.class).all(new Action<ProjectBinaryInternal>(){
    public void execute(    ProjectBinaryInternal binary){
      Task binaryLifecycleTask=target.task(binary.getNamingScheme().getLifecycleTaskName());
      binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
      binaryLifecycleTask.setDescription(String.format("Assembles %s.",binary));
      binary.setBuildTask(binaryLifecycleTask);
    }
  }
);
  createProjectSourceSetForEachComponent(sources,components);
  createLanguageSourceSets(target,domainRegistry,sources);
  configurationActions.add(new ApplyDefaultSourceLocations());
}
