{
  if (repositories.isEmpty()) {
    return new NoRepositoriesResolver();
  }
  ResolutionStrategyInternal resolutionStrategy=configuration.getResolutionStrategy();
  ResolutionRules resolutionRules=resolutionStrategy.getResolutionRules();
  CachePolicy cachePolicy=resolutionStrategy.getCachePolicy();
  startParameterResolutionOverride.addResolutionRules(resolutionRules);
  UserResolverChain moduleResolver=new UserResolverChain(versionSelectorScheme,versionComparator,resolutionStrategy.getComponentSelection());
  ParentModuleLookupResolver parentModuleResolver=new ParentModuleLookupResolver(versionSelectorScheme,versionComparator,cacheLockingManager);
  for (  ResolutionAwareRepository repository : repositories) {
    ConfiguredModuleComponentRepository baseRepository=repository.createResolver();
    if (baseRepository instanceof ExternalResourceResolver) {
      ((ExternalResourceResolver)baseRepository).setRepositoryChain(parentModuleResolver);
    }
    ModuleComponentRepository moduleComponentRepository=baseRepository;
    if (baseRepository.isLocal()) {
      moduleComponentRepository=new LocalModuleComponentRepository(baseRepository,metadataProcessor);
    }
 else {
      moduleComponentRepository=new CacheLockReleasingModuleComponentsRepository(moduleComponentRepository,cacheLockingManager);
      moduleComponentRepository=startParameterResolutionOverride.overrideModuleVersionRepository(moduleComponentRepository);
      moduleComponentRepository=new CachingModuleComponentRepository(moduleComponentRepository,moduleVersionsCache,moduleMetaDataCache,moduleArtifactsCache,artifactAtRepositoryCachedResolutionIndex,cachePolicy,timeProvider,metadataProcessor);
    }
    if (baseRepository.isDynamicResolveMode()) {
      moduleComponentRepository=IvyDynamicResolveModuleComponentRepositoryAccess.wrap(moduleComponentRepository);
    }
    moduleComponentRepository=inMemoryCache.cached(moduleComponentRepository);
    moduleResolver.add(moduleComponentRepository);
    parentModuleResolver.add(moduleComponentRepository);
  }
  return moduleResolver;
}
