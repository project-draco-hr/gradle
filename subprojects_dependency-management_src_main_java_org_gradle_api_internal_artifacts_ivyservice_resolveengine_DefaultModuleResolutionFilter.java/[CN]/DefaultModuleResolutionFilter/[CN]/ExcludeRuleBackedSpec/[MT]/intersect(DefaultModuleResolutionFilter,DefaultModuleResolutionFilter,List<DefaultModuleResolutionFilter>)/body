{
  if (spec1 instanceof ExcludeAllModulesSpec) {
    merged.add(spec2);
  }
 else   if (spec2 instanceof ExcludeAllModulesSpec) {
    merged.add(spec1);
  }
 else   if (spec1 instanceof ArtifactExcludeSpec) {
    merged.add(spec1);
  }
 else   if (spec2 instanceof ArtifactExcludeSpec) {
    merged.add(spec2);
  }
 else   if (spec1 instanceof GroupNameExcludeSpec) {
    intersect((GroupNameExcludeSpec)spec1,spec2,merged);
  }
 else   if (spec2 instanceof GroupNameExcludeSpec) {
    intersect((GroupNameExcludeSpec)spec2,spec1,merged);
  }
 else   if (spec1 instanceof ModuleNameExcludeSpec) {
    intersect((ModuleNameExcludeSpec)spec1,spec2,merged);
  }
 else   if (spec2 instanceof ModuleNameExcludeSpec) {
    intersect((ModuleNameExcludeSpec)spec2,spec1,merged);
  }
 else   if ((spec1 instanceof ModuleIdExcludeSpec) && (spec2 instanceof ModuleIdExcludeSpec)) {
    ModuleIdExcludeSpec moduleSpec1=(ModuleIdExcludeSpec)spec1;
    ModuleIdExcludeSpec moduleSpec2=(ModuleIdExcludeSpec)spec2;
    if (moduleSpec1.moduleId.equals(moduleSpec2.moduleId)) {
      merged.add(moduleSpec1);
    }
  }
 else   if (spec1 instanceof UnionSpec || spec2 instanceof UnionSpec) {
    Set<DefaultModuleResolutionFilter> canonical=new LinkedHashSet<DefaultModuleResolutionFilter>(merged);
    if (spec1 instanceof UnionSpec) {
      canonical.addAll(flattenUnion((UnionSpec)spec1));
    }
    if (spec2 instanceof UnionSpec) {
      canonical.addAll(flattenUnion((UnionSpec)spec2));
    }
    merged=new ArrayList<DefaultModuleResolutionFilter>(canonical);
  }
 else {
    throw new UnsupportedOperationException(String.format("Cannot calculate intersection of exclude rules: %s, %s",spec1,spec2));
  }
}
