{
  prepareResolveReport();
  final Dependency dependencyDummy1=context.mock(Dependency.class,"dep1");
  final Dependency dependencyDummy2=context.mock(Dependency.class,"dep2");
  final ResolvedDependency resolvedDependency1=context.mock(ResolvedDependency.class,"resolved1");
  final ResolvedDependency resolvedDependency2=context.mock(ResolvedDependency.class,"resolved2");
  ResolvedDependency resolvedDependency3=context.mock(ResolvedDependency.class,"resolved3");
  final Map<Dependency,Set<ResolvedDependency>> firstLevelResolvedDependencies=GUtil.map(dependencyDummy1,WrapUtil.toSet(resolvedDependency1,resolvedDependency2),dependencyDummy2,WrapUtil.toSet(resolvedDependency3));
  context.checking(new Expectations(){
{
      allowing(resolvedDependency1).getAllFiles();
      will(returnValue(WrapUtil.toSet(new File("file1"))));
      allowing(resolvedDependency2).getAllFiles();
      will(returnValue(WrapUtil.toSet(new File("file2"))));
      allowing(configurationStub).getAllDependencies();
      will(returnValue(WrapUtil.toSet(dependencyDummy1,dependencyDummy2)));
      allowing(ivyReportTranslatorStub).translateReport(resolveReportMock,configurationStub);
      will(returnValue(firstLevelResolvedDependencies));
    }
  }
);
  ModuleDescriptor moduleDescriptor=createAnonymousModuleDescriptor();
  prepareTestsThatRetrieveDependencies(moduleDescriptor);
  Set<File> actualFiles=ivyDependencyResolver.resolve(configurationStub,ivyStub,moduleDescriptor).getFiles(new Spec<Dependency>(){
    public boolean isSatisfiedBy(    Dependency element){
      return element == dependencyDummy1;
    }
  }
);
  assertThat(actualFiles,equalTo(WrapUtil.toSet(new File("file1"),new File("file2"))));
}
