{
  prepareResolveReport();
  final ModuleDependency moduleDependencyDummy1=context.mock(ModuleDependency.class,"dep1");
  final ResolvedDependency resolvedDependency1=context.mock(ResolvedDependency.class,"resolved1");
  final ResolvedDependency resolvedDependency2=context.mock(ResolvedDependency.class,"resolved2");
  final IvyConversionResult conversionResultStub=context.mock(IvyConversionResult.class);
  Set<ResolvedDependency> resolvedDependenciesSet=WrapUtil.toSet(resolvedDependency1,resolvedDependency2);
  final Map<Dependency,Set<ResolvedDependency>> firstLevelResolvedDependencies=GUtil.map(moduleDependencyDummy1,resolvedDependenciesSet);
  context.checking(new Expectations(){
{
      allowing(ivyReportConverterStub).convertReport(resolveReportMock,configurationStub);
      will(returnValue(conversionResultStub));
      allowing(conversionResultStub).getFirstLevelResolvedDependencies();
      will(returnValue(firstLevelResolvedDependencies));
    }
  }
);
  ModuleDescriptor moduleDescriptor=createAnonymousModuleDescriptor();
  prepareTestsThatRetrieveDependencies(moduleDescriptor);
  Set<ResolvedDependency> actualFirstLevelModuleDependencies=ivyDependencyResolver.resolve(configurationStub,ivyStub,moduleDescriptor).getFirstLevelModuleDependencies();
  assertThat(actualFirstLevelModuleDependencies,equalTo(resolvedDependenciesSet));
}
