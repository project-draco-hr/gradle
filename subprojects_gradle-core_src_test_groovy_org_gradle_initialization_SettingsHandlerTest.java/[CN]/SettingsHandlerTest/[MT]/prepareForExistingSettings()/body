{
  final ProjectSpec projectSpec=context.mock(ProjectSpec.class);
  final IProjectRegistry projectRegistry=context.mock(IProjectRegistry.class);
  startParameter.setDefaultProjectSelector(projectSpec);
  context.checking(new Expectations(){
{
      allowing(settings).getProjectRegistry();
      will(returnValue(projectRegistry));
      allowing(settings).getClassLoader();
      will(returnValue(urlClassLoader));
      allowing(gradle).getScriptClassLoader();
      will(returnValue(scriptClassLoader));
      allowing(projectSpec).containsProject(projectRegistry);
      will(returnValue(true));
      allowing(gradle).getStartParameter();
      will(returnValue(startParameter));
      allowing(settingsFinder).find(startParameter);
      will(returnValue(settingsLocation));
      one(settingsProcessor).process(gradle,settingsLocation,urlClassLoader,startParameter,gradlePropertiesLoader);
      will(returnValue(settings));
      one(scriptClassLoader).addParent(urlClassLoader);
    }
  }
);
}
