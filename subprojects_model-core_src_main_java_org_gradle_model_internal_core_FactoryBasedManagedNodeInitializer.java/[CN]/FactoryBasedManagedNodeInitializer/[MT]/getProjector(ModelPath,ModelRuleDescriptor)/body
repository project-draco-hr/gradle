{
  return new AbstractModelAction<Object>(ModelReference.of(path),descriptor,ModelReference.of("schemaStore",ModelSchemaStore.class),ModelReference.of(ManagedProxyFactory.class)){
    @Override public void execute(    MutableModelNode modelNode,    List<ModelView<?>> inputs){
      ModelSchemaStore schemaStore=ModelViews.getInstance(inputs.get(0),ModelSchemaStore.class);
      ManagedProxyFactory proxyFactory=ModelViews.getInstance(inputs.get(1),ManagedProxyFactory.class);
      ModelType<S> managedType=schema.getType();
      InstanceFactory.ManagedSubtypeImplementationInfo<? extends T> implementationInfo=instanceFactory.getManagedSubtypeImplementationInfo(managedType);
      if (implementationInfo == null) {
        throw new IllegalStateException(String.format("No default implementation registered for managed type '%s'",managedType));
      }
      ModelType<? extends T> delegateType=implementationInfo.getDelegateType();
      ModelSchema<? extends T> delegateSchema=schemaStore.getSchema(delegateType);
      if (!(delegateSchema instanceof ModelStructSchema)) {
        throw new IllegalStateException(String.format("Default implementation '%s' registered for managed type '%s' must be a struct",delegateType,managedType));
      }
      ModelStructSchema<? extends T> delegateStructSchema=Cast.uncheckedCast(delegateSchema);
      addManagedProjection(modelNode,managedType,delegateStructSchema,schemaStore,proxyFactory);
      for (      ModelType<?> internalView : instanceFactory.getInternalViews(managedType)) {
        addManagedProjection(modelNode,internalView,delegateStructSchema,schemaStore,proxyFactory);
      }
      for (      ModelType<?> internalView : instanceFactory.getInternalViews(implementationInfo.getPublicType())) {
        modelNode.addProjection(UnmanagedModelProjection.of(internalView));
      }
    }
    private <D>void addManagedProjection(    MutableModelNode modelNode,    ModelType<?> type,    ModelStructSchema<? extends D> delegateSchema,    ModelSchemaStore schemaStore,    ManagedProxyFactory proxyFactory){
      ModelSchema<?> schema=schemaStore.getSchema(type);
      if (!(schema instanceof ModelStructSchema)) {
        throw new IllegalStateException("View type must be a struct: " + type);
      }
      ModelManagedImplStructSchema<D> structSchema=Cast.uncheckedCast(schema);
      modelNode.addProjection(new ManagedModelProjection<D>(structSchema,delegateSchema,schemaStore,proxyFactory));
    }
  }
;
}
