{
  if (!GUtil.isTrue(name)) {
    throw new InvalidUserDataException("The name of the task must be set!");
  }
  checkTaskArgsAndCreateDefaultValues(args);
  if (!Boolean.valueOf(args.get(TASK_OVERWRITE).toString()) && tasks.get(name) != null) {
    throw new InvalidUserDataException("A task with this name already exists!");
  }
  Task task=createTaskObject((Class)args.get(TASK_TYPE),name);
  task.setLateInitalizeClosures((List<Closure>)args.get(TASK_TYPE_LATE_INITIALIZER));
  tasks.put(name,task);
  Object dependsOn=args.get(TASK_DEPENDS_ON);
  if (dependsOn instanceof String || (dependsOn instanceof GString)) {
    String singleDependencyName=(String)dependsOn;
    if (singleDependencyName == null) {
      throw new InvalidUserDataException("A dependency name must not be empty!");
    }
    args.put(TASK_DEPENDS_ON,Collections.singletonList(singleDependencyName));
  }
  Object[] dependsOnTasks;
  Object dependsOnTasksArg=args.get(TASK_DEPENDS_ON);
  if (dependsOnTasksArg instanceof Collection) {
    dependsOnTasks=(Object[])((Collection)dependsOnTasksArg).toArray(new Object[((Collection)dependsOnTasksArg).size()]);
  }
 else {
    dependsOnTasks=new Object[]{dependsOnTasksArg};
  }
  logger.debug("Adding dependencies: " + Arrays.asList(dependsOnTasks));
  task.dependsOn(dependsOnTasks);
  if (action != null) {
    task.doFirst(action);
  }
  return task;
}
