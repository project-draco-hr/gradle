{
  final GradleScriptException exception=new GradleScriptException("<message>",new RuntimeException("<cause>"),context.mock(ScriptSource.class,"script")){
    @Override public String getLocation(){
      return "<location>";
    }
    @Override public List<Throwable> getReportableCauses(){
      return Arrays.asList(new RuntimeException("<outer>"),getCause());
    }
  }
;
  final Matcher<String> errorMessage=allOf(containsString("Build failed with an exception."),containsString("<location>"),containsString("<message>"),containsString("Cause: <outer>"),containsString("<cause>"));
  context.checking(new Expectations(){
{
      one(logger).error(with(errorMessage));
    }
  }
);
  reporter.buildFinished(HelperUtil.createBuildResult(exception));
}
