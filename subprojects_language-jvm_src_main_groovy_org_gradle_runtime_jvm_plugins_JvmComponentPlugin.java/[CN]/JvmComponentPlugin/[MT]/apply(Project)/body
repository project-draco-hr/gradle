{
  project.getPlugins().apply(LifecycleBasePlugin.class);
  project.getPlugins().apply(LanguageBasePlugin.class);
  ProjectComponentContainer projectComponents=project.getExtensions().getByType(ProjectComponentContainer.class);
  projectComponents.registerFactory(JvmLibrary.class,new NamedDomainObjectFactory<JvmLibrary>(){
    public JvmLibrary create(    String name){
      return new DefaultJvmLibrary(name);
    }
  }
);
  NamedDomainObjectContainer<JvmLibrary> jvmLibraries=projectComponents.containerWithType(JvmLibrary.class);
  project.getExtensions().create("jvm",DefaultJvmComponentExtension.class,jvmLibraries);
  modelRules.register("jvm.libraries",jvmLibraries);
  modelRules.rule(new CreateJvmBinaries(new DefaultBinaryNamingSchemeBuilder(),project.getBuildDir()));
  modelRules.rule(new CreateTasksForJarBinaries());
}
