{
  project.getPlugins().apply(LifecycleBasePlugin.class);
  project.getPlugins().apply(LanguageBasePlugin.class);
  ProjectComponentContainer projectComponents=project.getExtensions().getByType(ProjectComponentContainer.class);
  projectComponents.registerFactory(ProjectJvmLibrary.class,new NamedDomainObjectFactory<ProjectJvmLibrary>(){
    public ProjectJvmLibrary create(    String name){
      NamedProjectComponentIdentifier id=new DefaultNamedProjectComponentIdentifier(project.getPath(),name);
      return new DefaultProjectJvmLibrary(id);
    }
  }
);
  NamedDomainObjectContainer<ProjectJvmLibrary> jvmLibraries=projectComponents.containerWithType(ProjectJvmLibrary.class);
  project.getExtensions().create("jvm",DefaultJvmComponentExtension.class,jvmLibraries);
  modelRules.register("jvm.libraries",jvmLibraries);
  modelRules.rule(new CreateJvmBinaries(new DefaultBinaryNamingSchemeBuilder(),project.getBuildDir()));
  modelRules.rule(new CreateTasksForJarBinaries());
}
