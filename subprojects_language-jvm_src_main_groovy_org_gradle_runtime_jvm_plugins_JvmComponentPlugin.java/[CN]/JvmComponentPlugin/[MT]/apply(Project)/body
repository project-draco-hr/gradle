{
  project.getPlugins().apply(ComponentModelBasePlugin.class);
  ProjectComponentContainer projectComponents=project.getExtensions().getByType(ProjectComponentContainer.class);
  projectComponents.registerFactory(ProjectJvmLibrary.class,new NamedDomainObjectFactory<ProjectJvmLibrary>(){
    public ProjectJvmLibrary create(    String name){
      NamedProjectComponentIdentifier id=new DefaultNamedProjectComponentIdentifier(project.getPath(),name);
      return new DefaultProjectJvmLibrary(id);
    }
  }
);
  final NamedDomainObjectContainer<ProjectJvmLibrary> jvmLibraries=projectComponents.containerWithType(ProjectJvmLibrary.class);
  project.getExtensions().create("jvm",DefaultJvmComponentExtension.class,jvmLibraries);
  modelRegistry.create(Collections.<String>emptyList(),new ModelCreator<NamedDomainObjectCollection<ProjectJvmLibrary>>(){
    public ModelReference<NamedDomainObjectCollection<ProjectJvmLibrary>> getReference(){
      return ModelReference.of(new ModelPath("jvm.libraries"),ModelType.of(new TypeToken<NamedDomainObjectCollection<ProjectJvmLibrary>>(){
      }
));
    }
    public NamedDomainObjectCollection<ProjectJvmLibrary> create(    Inputs inputs){
      return jvmLibraries;
    }
    public ModelRuleSourceDescriptor getSourceDescriptor(){
      return new SimpleModelRuleSourceDescriptor(JvmComponentPlugin.class.getName() + ".apply");
    }
  }
);
}
