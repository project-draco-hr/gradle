{
  PluginId pluginId=potentialPlugin.getPluginId();
  String pluginIdStr=pluginId == null ? null : pluginId.toString();
  Class<? extends T> pluginClass=potentialPlugin.asClass();
  try {
    if (potentialPlugin.getType().equals(PotentialPlugin.Type.UNKNOWN)) {
      throw new InvalidPluginException("'" + pluginClass.getName() + "' is neither a plugin or a rule source and cannot be applied.");
    }
 else {
      boolean imperative=potentialPlugin.isImperative();
      if (addPluginInternal(pluginClass)) {
        if (imperative) {
          T instance=findInstance(pluginClass,pluginContainer);
          if (instance == null) {
            instance=instantiatePlugin(pluginClass);
          }
          Plugin<?> cast=Cast.uncheckedCast(instance);
          instances.add(cast);
          if (potentialPlugin.isHasRules()) {
            applicator.applyImperativeRulesHybrid(pluginIdStr,cast);
          }
 else {
            applicator.applyImperative(pluginIdStr,cast);
          }
          pluginContainer.add(cast);
          return instance;
        }
 else {
          applicator.applyRules(pluginIdStr,pluginClass);
        }
      }
 else {
        if (imperative) {
          T instance=findInstance(pluginClass,instances);
          if (instance == null) {
            throw new IllegalStateException("Plugin of type " + pluginClass.getName() + " has been applied, but an instance wasn't found in the plugin container");
          }
 else {
            return instance;
          }
        }
      }
    }
  }
 catch (  PluginApplicationException e) {
    throw e;
  }
catch (  Exception e) {
    throw new PluginApplicationException(pluginId == null ? "class '" + pluginClass.getName() + "'" : "id '" + pluginId + "'",e);
  }
  return null;
}
