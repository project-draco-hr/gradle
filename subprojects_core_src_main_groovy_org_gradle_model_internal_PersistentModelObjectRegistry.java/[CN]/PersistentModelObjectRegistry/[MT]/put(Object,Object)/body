{
  if (modelObject.getClass().getAnnotation(ModelType.class) == null) {
    throw new IllegalArgumentException(String.format("Cannot persist object of class %s, as this class is not marked @%s",modelObject.getClass().getSimpleName(),ModelType.class.getSimpleName()));
  }
  FlattenedObject flattened=new FlattenedObject();
  Class<?> type=modelObject.getClass();
  for (  PropertyAccessor property : JavaReflectionUtil.readableProperties(type).values()) {
    if (property.getName().equals("metaClass") || property.getName().equals("class")) {
      continue;
    }
    Object value;
    try {
      value=property.getValue(modelObject);
    }
 catch (    Exception e) {
      throw new GradleException(String.format("Could not get property %s for model %s (%s)",property.getName(),identifier,modelObject.getClass().getSimpleName()),e);
    }
    if (value != null && value.getClass().getAnnotation(ModelType.class) != null) {
      Object valueId=instanceToId.get(value);
      if (valueId == null) {
        throw new IllegalStateException(String.format("Model %s (%s) references an unknown model object of type %s.",identifier,modelObject.getClass().getSimpleName(),value.getClass().getSimpleName()));
      }
      value=new Reference(value.getClass().getName(),valueId);
    }
    flattened.properties.put(property.getName(),value);
  }
  idToInstance.put(identifier,modelObject);
  instanceToId.put(modelObject,identifier);
  store.put(identifier,flattened);
}
