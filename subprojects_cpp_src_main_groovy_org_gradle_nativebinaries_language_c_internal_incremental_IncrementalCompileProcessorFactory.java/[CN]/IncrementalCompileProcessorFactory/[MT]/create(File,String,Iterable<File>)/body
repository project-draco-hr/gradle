{
  File privateCacheDir=new File(cacheDir,cacheKey);
  PersistentCache cache=cacheFactory.open(privateCacheDir,"cppCompile",CacheUsage.ON,null,Collections.<String,Object>emptyMap(),FileLockManager.LockMode.Exclusive,null);
  PersistentIndexedCache<File,FileState> stateCache=createCache(cache,"state",File.class,new DefaultSerializer<FileState>(FileState.class.getClassLoader()));
  PersistentIndexedCache<String,List<File>> listCache=createCache(cache,"previous",String.class,new DefaultSerializer<List<File>>());
  List<File> includePaths=CollectionUtils.toList(includes);
  return new IncrementalCompileProcessor(cache,stateCache,listCache,new DefaultSourceDependencyParser(includesParser,includePaths));
}
