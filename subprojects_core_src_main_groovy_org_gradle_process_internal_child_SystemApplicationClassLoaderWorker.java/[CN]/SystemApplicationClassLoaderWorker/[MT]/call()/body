{
  if (System.getProperty("org.gradle.worker.test.stuck") != null) {
    Thread.sleep(30000);
  }
  Decoder decoder=new InputStreamBackedDecoder(configInputStream);
  int logLevel=decoder.readSmallInt();
  LoggingManagerInternal loggingManager=createLoggingManager();
  loggingManager.setLevel(LogLevel.values()[logLevel]).start();
  MultiChoiceAddress serverAddress=new MultiChoiceAddressSerializer().read(decoder);
  MessagingServices messagingServices=createClient();
  try {
    final ObjectConnection connection=messagingServices.get(MessagingClient.class).getConnection(serverAddress);
    try {
      byte[] serializedWorker=decoder.readBinary();
      Action<WorkerContext> action;
      try {
        ObjectInputStream instr=new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedWorker),getClass().getClassLoader());
        action=(Action<WorkerContext>)instr.readObject();
      }
 catch (      Exception e) {
        throw UncheckedException.throwAsUncheckedException(e);
      }
      action.execute(new WorkerContext(){
        public ClassLoader getApplicationClassLoader(){
          return ClassLoader.getSystemClassLoader();
        }
        @Override public ObjectConnection getServerConnection(){
          return connection;
        }
      }
);
    }
  finally {
      connection.stop();
    }
  }
  finally {
    messagingServices.close();
  }
  return null;
}
