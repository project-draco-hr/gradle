{
  Map<String,TaskOutputFilePropertySpec> propertySpecs=Maps.uniqueIndex(taskOutputs.getFileProperties(),new Function<TaskFilePropertySpec,String>(){
    @Override public String apply(    TaskFilePropertySpec propertySpec){
      return propertySpec.getPropertyName();
    }
  }
);
  TarInputStream tarInput=new TarInputStream(input);
  TarEntry entry;
  while ((entry=tarInput.getNextEntry()) != null) {
    String name=entry.getName();
    Matcher matcher=PROPERTY_PATH.matcher(name);
    if (!matcher.matches()) {
      continue;
    }
    String propertyName=matcher.group(1);
    CacheableTaskOutputFilePropertySpec propertySpec=(CacheableTaskOutputFilePropertySpec)propertySpecs.get(propertyName);
    if (propertySpec == null) {
      throw new IllegalStateException(String.format("No output property '%s' registered",propertyName));
    }
    String path=matcher.group(2);
    File outputFile;
    if (Strings.isNullOrEmpty(path)) {
      outputFile=propertySpec.getOutputFile();
    }
 else {
      outputFile=new File(propertySpec.getOutputFile(),path);
    }
    if (entry.isDirectory()) {
      if (propertySpec.getOutputType() != OutputType.DIRECTORY) {
        throw new IllegalStateException("Property should be an output directory property: " + propertyName);
      }
      FileUtils.forceMkdir(outputFile);
    }
 else {
      Files.createParentDirs(outputFile);
      Files.asByteSink(outputFile).writeFrom(tarInput);
    }
    fileSystem.chmod(outputFile,entry.getMode() & 0777);
    outputFile.setLastModified(entry.getModTime().getTime());
  }
}
