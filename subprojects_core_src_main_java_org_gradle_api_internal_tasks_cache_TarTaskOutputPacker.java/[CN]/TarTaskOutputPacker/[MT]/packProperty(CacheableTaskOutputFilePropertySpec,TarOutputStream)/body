{
  final String propertyName=propertySpec.getPropertyName();
  File outputFile=propertySpec.getOutputFile();
switch (propertySpec.getOutputType()) {
case DIRECTORY:
    final String propertyRoot="property-" + propertyName + "/";
  outputStream.putNextEntry(new TarEntry(propertyRoot));
FileVisitor visitor=new FileVisitor(){
  @Override public void visitDir(  FileVisitDetails dirDetails){
    String path=dirDetails.getRelativePath().getPathString();
    try {
      TarEntry entry=new TarEntry(propertyRoot + path + "/");
      entry.setModTime(dirDetails.getLastModified());
      entry.setMode(UnixStat.DIR_FLAG | dirDetails.getMode());
      outputStream.putNextEntry(entry);
      outputStream.closeEntry();
    }
 catch (    IOException e) {
      throw Throwables.propagate(e);
    }
  }
  @Override public void visitFile(  FileVisitDetails fileDetails){
    String path=fileDetails.getRelativePath().getPathString();
    storeFileEntry(fileDetails.getFile(),propertyRoot + path,fileDetails.getLastModified(),fileDetails.getSize(),fileDetails.getMode(),outputStream);
  }
}
;
directoryWalkerFactory.create().walkDir(outputFile,RelativePath.EMPTY_PARENT_DIRECTORY,visitor,Specs.satisfyAll(),new AtomicBoolean(),false);
break;
case FILE:
String path="property-" + propertyName;
storeFileEntry(outputFile,path,outputFile.lastModified(),outputFile.length(),fileSystem.getUnixMode(outputFile),outputStream);
break;
default :
throw new AssertionError();
}
}
