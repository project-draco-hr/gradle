{
  Class<?> groovySystem=leakingLoader.loadClass("groovy.lang.GroovySystem");
  try {
    Method getVersion=groovySystem.getDeclaredMethod("getVersion");
    String versionString=(String)getVersion.invoke(null);
    VersionNumber groovyVersion=VersionNumber.parse(versionString);
    isFaultyGroovy=groovyVersion.getMajor() == 2 && groovyVersion.getMinor() == 4;
  }
 catch (  NoSuchMethodException ex) {
    isFaultyGroovy=false;
  }
  if (!isFaultyGroovy) {
    return;
  }
  classInfoClass=leakingLoader.loadClass("org.codehaus.groovy.reflection.ClassInfo");
  Field globalClassValueField=classInfoClass.getDeclaredField("globalClassValue");
  globalClassValueField.setAccessible(true);
  globalClassValue=globalClassValueField.get(null);
  removeFromGlobalClassValue=globalClassValueField.getType().getDeclaredMethod("remove",Class.class);
  removeFromGlobalClassValue.setAccessible(true);
  Field globalClassSetField=classInfoClass.getDeclaredField("globalClassSet");
  globalClassSetField.setAccessible(true);
  Object globalClassSet=globalClassSetField.get(null);
  globalClassSetField=globalClassSet.getClass().getDeclaredField("items");
  globalClassSetField.setAccessible(true);
  globalClassSetItems=globalClassSetField.get(globalClassSet);
  globalClassSetIteratorMethod=globalClassSetItems.getClass().getDeclaredMethod("iterator");
  clazzField=classInfoClass.getDeclaredField("klazz");
  clazzField.setAccessible(true);
  gradleClassInfoClass=ClassInfo.class;
  gradleClassInfoClassLoader=gradleClassInfoClass.getClassLoader();
}
