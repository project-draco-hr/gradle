{
  classInfoClass=leakingLoader.loadClass("org.codehaus.groovy.reflection.ClassInfo");
  Field globalClassValueField=classInfoClass.getDeclaredField("globalClassValue");
  globalClassValueField.setAccessible(true);
  globalClassValue=globalClassValueField.get(null);
  removeFromGlobalClassValue=globalClassValueField.getType().getDeclaredMethod("remove",Class.class);
  removeFromGlobalClassValue.setAccessible(true);
  Field globalClassSetField=classInfoClass.getDeclaredField("globalClassSet");
  globalClassSetField.setAccessible(true);
  Object globalClassSet=globalClassSetField.get(null);
  globalClassSetField=globalClassSet.getClass().getDeclaredField("items");
  globalClassSetField.setAccessible(true);
  globalClassSetItems=globalClassSetField.get(globalClassSet);
  globalClassSetIteratorMethod=globalClassSetItems.getClass().getDeclaredMethod("iterator");
  clazzField=classInfoClass.getDeclaredField("klazz");
  clazzField.setAccessible(true);
  gradleClassInfoClassLoader=ClassInfo.class.getClassLoader();
}
