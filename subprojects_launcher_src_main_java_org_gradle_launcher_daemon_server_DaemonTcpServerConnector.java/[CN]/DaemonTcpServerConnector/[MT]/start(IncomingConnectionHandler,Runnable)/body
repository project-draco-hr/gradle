{
  lifecycleLock.lock();
  try {
    if (stopped) {
      throw new IllegalStateException("server connector cannot be started as it is either stopping or has been stopped");
    }
    if (started) {
      throw new IllegalStateException("server connector cannot be started as it has already been started");
    }
    Action<ConnectCompletion> connectEvent=new Action<ConnectCompletion>(){
      public void execute(      ConnectCompletion completion){
        RemoteConnection<Message> remoteConnection;
        try {
          remoteConnection=completion.create(Serializers.stateful(DaemonMessageSerializer.create()));
        }
 catch (        UncheckedIOException e) {
          connectionErrorHandler.run();
          throw e;
        }
        handler.handle(new SynchronizedDispatchConnection<Message>(remoteConnection));
      }
    }
;
    acceptor=incomingConnector.accept(connectEvent,false);
    started=true;
    return acceptor.getAddress();
  }
  finally {
    lifecycleLock.unlock();
  }
}
