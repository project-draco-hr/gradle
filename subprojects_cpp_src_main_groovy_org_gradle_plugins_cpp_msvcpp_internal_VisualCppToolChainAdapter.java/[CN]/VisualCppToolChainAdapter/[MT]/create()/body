{
  return new ToolChain(){
    public <T extends BinaryCompileSpec>Compiler<T> createCompiler(    Class<T> specType){
      if (CppCompileSpec.class.isAssignableFrom(specType)) {
        return (Compiler<T>)new VisualCppCompiler(compilerExe,execActionFactory);
      }
      throw new IllegalArgumentException(String.format("No suitable compiler available for %s.",specType));
    }
    public <T extends LinkerSpec>Compiler<T> createLinker(    Class<T> specType){
      if (ExecutableLinkerSpec.class.isAssignableFrom(specType) || SharedLibraryLinkerSpec.class.isAssignableFrom(specType)) {
        return (Compiler<T>)new LinkExeLinker(linkerExe,execActionFactory);
      }
      if (StaticLibraryLinkerSpec.class.isAssignableFrom(specType)) {
        return (Compiler<T>)new LibExeLinker(staticLinkerExe,execActionFactory);
      }
      throw new IllegalArgumentException(String.format("No suitable linker available for %s.",specType));
    }
  }
;
}
