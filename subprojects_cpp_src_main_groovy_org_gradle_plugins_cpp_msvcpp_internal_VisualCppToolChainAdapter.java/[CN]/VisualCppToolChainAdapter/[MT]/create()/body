{
  return new ToolChain(){
    public <T extends BinaryCompileSpec>Compiler<T> createCompiler(    Class<T> specType){
      if (!specType.isAssignableFrom(CppCompileSpec.class)) {
        throw new IllegalArgumentException(String.format("No suitable compiler available for %s.",specType));
      }
      return (Compiler<T>)new VisualCppCompiler(compilerExe,execActionFactory);
    }
    public <T extends BinaryCompileSpec>Compiler<T> createLinker(){
      return (Compiler<T>)new VisualCppLinker(linkerExe,execActionFactory);
    }
  }
;
}
