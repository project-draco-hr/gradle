{
  final DefaultGradleLauncher gradleLauncher=(DefaultGradleLauncher)buildController.getLauncher();
  final PayloadSerializer payloadSerializer=gradleLauncher.getGradle().getServices().get(PayloadSerializer.class);
  final InternalBuildAction<?> action=(InternalBuildAction<?>)payloadSerializer.deserialize(this.action);
  final AtomicReference<Object> result=new AtomicReference<Object>();
  final AtomicReference<RuntimeException> failure=new AtomicReference<RuntimeException>();
  gradleLauncher.addListener(new ModelConfigurationListener(){
    public void onConfigure(    final GradleInternal gradle){
      InternalBuildController internalBuildController=new DefaultBuildController(gradle);
      Object model=null;
      try {
        model=action.execute(internalBuildController);
      }
 catch (      RuntimeException e) {
        failure.set(new InternalBuildActionFailureException(e));
      }
      result.set(model);
    }
  }
);
  buildController.configure();
  if (failure.get() != null) {
    return new BuildActionResult(null,payloadSerializer.serialize(failure.get()));
  }
  return new BuildActionResult(payloadSerializer.serialize(result.get()),null);
}
