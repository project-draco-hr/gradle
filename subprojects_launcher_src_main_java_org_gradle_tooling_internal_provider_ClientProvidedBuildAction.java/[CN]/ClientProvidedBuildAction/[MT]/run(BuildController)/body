{
  final DefaultGradleLauncher gradleLauncher=(DefaultGradleLauncher)buildController.getLauncher();
  final PayloadSerializer payloadSerializer=gradleLauncher.getGradle().getServices().get(PayloadSerializer.class);
  final InternalBuildAction<?> action=(InternalBuildAction<?>)payloadSerializer.deserialize(this.action);
  final AtomicReference<SerializedPayload> result=new AtomicReference<SerializedPayload>();
  final AtomicReference<SerializedPayload> failure=new AtomicReference<SerializedPayload>();
  gradleLauncher.addListener(new ModelConfigurationListener(){
    public void onConfigure(    final GradleInternal gradle){
      ToolingModelBuilderRegistry builderRegistry=gradle.getDefaultProject().getServices().get(ToolingModelBuilderRegistry.class);
      InternalBuildController internalBuildController=new DefaultBuildController(gradle,builderRegistry);
      Object model=null;
      try {
        model=action.execute(internalBuildController);
      }
 catch (      RuntimeException e) {
        failure.set(payloadSerializer.serialize(e));
      }
      result.set(payloadSerializer.serialize(model));
    }
  }
);
  buildController.configure();
  return new BuildActionResult(result.get(),failure.get());
}
