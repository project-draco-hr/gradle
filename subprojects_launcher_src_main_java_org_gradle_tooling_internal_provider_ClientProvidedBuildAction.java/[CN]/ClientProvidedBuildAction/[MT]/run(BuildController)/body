{
  final DefaultGradleLauncher gradleLauncher=(DefaultGradleLauncher)buildController.getLauncher();
  PayloadSerializer payloadSerializer=gradleLauncher.getGradle().getServices().get(PayloadSerializer.class);
  final InternalBuildAction<?> action=(InternalBuildAction<?>)payloadSerializer.deserialize(this.action);
  final AtomicReference<Object> result=new AtomicReference<Object>();
  gradleLauncher.addListener(new ModelConfigurationListener(){
    public void onConfigure(    final GradleInternal gradle){
      InternalBuildController internalBuildController=new InternalBuildController(){
        public BuildResult<?> getBuildModel() throws BuildExceptionVersion1 {
          return new ProviderBuildResult<Object>(gradle);
        }
        public BuildResult<?> getModel(        final ModelIdentifier modelIdentifier) throws BuildExceptionVersion1, InternalUnsupportedModelException {
          ToolingModelBuilder builder=gradle.getDefaultProject().getServices().get(ToolingModelBuilderRegistry.class).getBuilder(modelIdentifier.getName());
          Object model=builder.buildAll(modelIdentifier.getName(),gradle.getDefaultProject());
          return new ProviderBuildResult<Object>(model);
        }
      }
;
      result.set(action.execute(internalBuildController));
    }
  }
);
  buildController.configure();
  return payloadSerializer.serialize(result.get());
}
