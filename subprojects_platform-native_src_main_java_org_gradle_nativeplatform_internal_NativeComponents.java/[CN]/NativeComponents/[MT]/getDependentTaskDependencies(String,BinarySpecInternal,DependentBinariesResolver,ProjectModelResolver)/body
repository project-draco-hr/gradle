{
  List<Task> dependencies=Lists.newArrayList();
  DependentBinariesResolvedResult result=dependentsResolver.resolve(binary).getRoot();
  for (  DependentBinariesResolvedResult dependent : result.getChildren()) {
    if (dependent.isBuildable()) {
      ModelRegistry modelRegistry=projectModelResolver.resolveProjectModel(dependent.getId().getProjectPath());
      ModelMap<NativeBinarySpecInternal> projectBinaries=modelRegistry.realize("binaries",ModelTypes.modelMap(NativeBinarySpecInternal.class));
      ModelMap<Task> projectTasks=modelRegistry.realize("tasks",ModelTypes.modelMap(Task.class));
      NativeBinarySpecInternal dependentBinary=projectBinaries.get(dependent.getProjectScopedName());
      dependencies.add(projectTasks.get(dependentBinary.getNamingScheme().getTaskName(dependedOnBinaryTaskName)));
    }
  }
  return dependencies;
}
