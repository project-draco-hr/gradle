{
  final ModelMap<NativeBinarySpecInternal> nativeBinaries=binaries.withType(NativeBinarySpecInternal.class);
  for (  final BinarySpecInternal binary : nativeBinaries) {
    Task assembleDependents=tasks.get(binary.getNamingScheme().getTaskName(ASSEMBLE_DEPENDENTS_TASK_NAME));
    Task buildDependents=tasks.get(binary.getNamingScheme().getTaskName(BUILD_DEPENDENTS_TASK_NAME));
    Task assembleDependentComponents=tasks.get(getAssembleDependentComponentsTaskName(binary.getComponent()));
    if (assembleDependentComponents != null) {
      assembleDependentComponents.dependsOn(assembleDependents);
    }
    Task buildDependentComponents=tasks.get(getBuildDependentComponentsTaskName(binary.getComponent()));
    if (buildDependentComponents != null) {
      buildDependentComponents.dependsOn(buildDependents);
    }
    assembleDependents.dependsOn(new Callable<Iterable<Task>>(){
      @Override public Iterable<Task> call(){
        return getDependentTaskDependencies(ASSEMBLE_DEPENDENTS_TASK_NAME,binary,dependentsResolver,projectModelResolver);
      }
    }
);
    buildDependents.dependsOn(new Callable<Iterable<Task>>(){
      @Override public Iterable<Task> call(){
        return getDependentTaskDependencies(BUILD_DEPENDENTS_TASK_NAME,binary,dependentsResolver,projectModelResolver);
      }
    }
);
  }
}
