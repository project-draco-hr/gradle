{
  if (commandLine.hasOption(HELP)) {
    return new ActionAdapter(new ShowUsageAction(parser));
  }
  if (commandLine.hasOption(VERSION)) {
    return new ActionAdapter(new ShowVersionAction());
  }
  if (commandLine.hasOption(GUI)) {
    return new ActionAdapter(new ShowGuiAction());
  }
  final StartParameter startParameter=new StartParameter();
  startParameterConverter.convert(commandLine,startParameter);
  Map<String,String> mergedSystemProperties=startParameter.getMergedSystemProperties();
  DaemonParameters daemonParameters=new DaemonParameters();
  daemonParameters.configureFromBuildDir(startParameter.getCurrentDir(),startParameter.isSearchUpwards());
  daemonParameters.configureFromGradleUserHome(startParameter.getGradleUserHomeDir());
  daemonParameters.configureFromSystemProperties(mergedSystemProperties);
  if (commandLine.hasOption(FOREGROUND)) {
    return new ActionAdapter(new DaemonMain(daemonParameters,false));
  }
  DaemonClientServices clientServices=new DaemonClientServices(loggingServices,daemonParameters,System.in);
  DaemonClient client=clientServices.get(DaemonClient.class);
  boolean useDaemon=daemonParameters.isEnabled();
  useDaemon=useDaemon || commandLine.hasOption(DAEMON);
  useDaemon=useDaemon && !commandLine.hasOption(NO_DAEMON);
  long startTime=ManagementFactory.getRuntimeMXBean().getStartTime();
  if (commandLine.hasOption(STOP)) {
    return new ActionAdapter(new StopDaemonAction(client));
  }
  if (useDaemon) {
    return new ActionAdapter(new DaemonBuildAction(client,commandLine,new File(System.getProperty("user.dir")),clientMetaData(),startTime,daemonParameters.getEffectiveSystemProperties(),System.getenv()));
  }
  return new RunBuildAction(startParameter,loggingServices,new DefaultBuildRequestMetaData(clientMetaData(),startTime));
}
