{
  abortOpenResources();
  LOGGER.debug("Constructing external resource: {}",source);
  boolean hasLocalCandidates=localCandidates != null && !localCandidates.isNone();
  if (hasLocalCandidates) {
    HashValue remoteChecksum=getChecksumFor(source);
    if (remoteChecksum != null) {
      LocallyAvailableResource local=localCandidates.findByHashValue(remoteChecksum);
      if (local != null) {
        LOGGER.info("Found locally available resource with matching checksum: [{}, {}]",source,local.getOrigin());
        return new LocallyAvailableExternalResource(source,local);
      }
    }
  }
  if (cached != null) {
    if (isUnchanged(source,cached)) {
      LOGGER.info("Cached resource is up-to-date (lastModified: {}). [HTTP: {}]",cached.getExternalLastModified(),source);
      return new CachedExternalResourceAdapter(source,cached,this);
    }
  }
  HttpResponse response=http.performGet(source);
  if (response != null) {
    ExternalResource resource=new HttpResponseResource("GET",source,response){
      @Override public void close() throws IOException {
        super.close();
        HttpResourceAccessor.this.openResources.remove(this);
      }
    }
;
    return recordOpenGetResource(resource);
  }
 else {
    return null;
  }
}
