{
  final Thread callingThread=Thread.currentThread();
  Runnable cancellationHandler=new Runnable(){
    @Override public void run(){
      callingThread.interrupt();
    }
  }
;
  cancellationToken.addCallback(cancellationHandler);
  try {
    return operation.transform(cancellationToken);
  }
 catch (  RuntimeException e) {
    boolean causedByInterruptedException=Iterables.any(Throwables.getCausalChain(e),new Predicate<Throwable>(){
      @Override public boolean apply(      Throwable input){
        return input instanceof InterruptedException;
      }
    }
);
    if (causedByInterruptedException) {
      return null;
    }
 else {
      throw e;
    }
  }
 finally {
    cancellationToken.removeCallback(cancellationHandler);
    Thread.interrupted();
  }
}
