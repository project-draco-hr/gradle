{
  CommandLineParser parser=new CommandLineParser();
  CommandLineConverter<StartParameter> startParameterConverter=createStartParameterConverter();
  startParameterConverter.configure(parser);
  parser.option(HELP,"?","help").hasDescription("Shows this help message");
  parser.option(VERSION,"version").hasDescription("Print version info.");
  parser.option(GUI).hasDescription("Launches a GUI application");
  parser.option(FOREGROUND).hasDescription("Starts the Gradle daemon in the foreground [experimental].");
  parser.option(DAEMON).hasDescription("Uses the Gradle daemon to execute the build. Starts the daemon if not running [experimental].");
  parser.option(STOP).hasDescription("Stops the Gradle daemon if it is running [experimental].");
  LoggingConfiguration loggingConfiguration=new LoggingConfiguration();
  ServiceRegistry loggingServices=createLoggingServices();
  Action<ExecutionListener> action;
  try {
    ParsedCommandLine commandLine=parser.parse(args);
    CommandLineConverter<LoggingConfiguration> loggingConfigurationConverter=loggingServices.get(CommandLineConverter.class);
    loggingConfiguration=loggingConfigurationConverter.convert(commandLine);
    action=createAction(parser,commandLine,startParameterConverter,loggingServices);
  }
 catch (  CommandLineArgumentException e) {
    action=new CommandLineParseFailureAction(parser,e);
  }
  return new WithLoggingAction(loggingConfiguration,loggingServices,action);
}
