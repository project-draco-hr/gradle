{
  Project project=getProject();
  StyledTextOutput textOutput=getTextOutputFactory().create(ComponentReport.class);
  ComponentReportRenderer renderer=new ComponentReportRenderer(getFileResolver());
  renderer.setOutput(textOutput);
  renderer.startProject(project);
  Collection<ProjectComponent> components=new ArrayList<ProjectComponent>();
  ProjectComponentContainer projectComponents=project.getExtensions().findByType(ProjectComponentContainer.class);
  if (projectComponents != null) {
    components.addAll(projectComponents);
  }
  try {
    TestSuiteContainer testSuites=getModelRegistry().get(ModelReference.of("testSuites",TestSuiteContainer.class));
    components.addAll(testSuites);
  }
 catch (  IllegalStateException e) {
  }
  renderer.renderComponents(components);
  ProjectSourceSet sourceSets=project.getExtensions().findByType(ProjectSourceSet.class);
  if (sourceSets != null) {
    renderer.renderSourceSets(sourceSets);
  }
  BinaryContainer binaries=project.getExtensions().findByType(BinaryContainer.class);
  if (binaries != null) {
    renderer.renderBinaries(binaries);
  }
  renderer.completeProject(project);
  renderer.complete();
}
