{
  Project project=getProject();
  StyledTextOutput textOutput=getTextOutputFactory().create(ComponentReport.class);
  ComponentReportRenderer renderer=new ComponentReportRenderer(getFileResolver(),getBinaryRenderer());
  renderer.setOutput(textOutput);
  renderer.startProject(project);
  Collection<ComponentSpec> components=new ArrayList<ComponentSpec>();
  ComponentSpecContainer componentSpecs=getModelRegistry().find(ModelPath.path("components"),ModelType.of(ComponentSpecContainer.class));
  if (componentSpecs != null) {
    Iterables.addAll(components,componentSpecs);
  }
  ComponentSpecContainer testSuites=getModelRegistry().find(ModelPath.path("testSuites"),ModelType.of(ComponentSpecContainer.class));
  if (testSuites != null) {
    Iterables.addAll(components,testSuites);
  }
  renderer.renderComponents(components);
  ProjectSourceSet sourceSets=getModelRegistry().find(ModelPath.path("sources"),ModelType.of(ProjectSourceSet.class));
  if (sourceSets != null) {
    renderer.renderSourceSets(sourceSets);
  }
  BinaryContainer binaries=getModelRegistry().find(ModelPath.path("binaries"),ModelType.of(BinaryContainer.class));
  if (binaries != null) {
    renderer.renderBinaries(binaries);
  }
  renderer.completeProject(project);
  renderer.complete();
}
