{
  final Artifact artifactStub=context.mock(Artifact.class,"artifact" + name);
  context.checking(new Expectations(){
{
      allowing(artifactStub).getName();
      will(returnValue(name));
      allowing(artifactStub).getType();
      will(returnValue(type));
      allowing(artifactStub).getExt();
      will(returnValue(extension));
      allowing(artifactStub).getExtraAttributes();
      will(returnValue(Collections.emptyMap()));
      allowing(artifactStub).getExtraAttribute(with(org.hamcrest.Matchers.notNullValue(String.class)));
      will(returnValue(null));
    }
  }
);
  final ResolveEngine resolveEngineMock=context.mock(ResolveEngine.class,"engine" + name);
  final ArtifactDownloadReport artifactDownloadReport=new ArtifactDownloadReport(artifactStub);
  artifactDownloadReport.setLocalFile(file);
  context.checking(new Expectations(){
{
      one(resolveEngineMock).download(with(equal(artifactStub)),with(any(DownloadOptions.class)));
      will(returnValue(artifactDownloadReport));
    }
  }
);
  return new DefaultResolvedArtifact(context.mock(ResolvedDependency.class),artifactStub,resolveEngineMock);
}
