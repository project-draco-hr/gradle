{
  final ModelReference<?> targetReference=ruleDefinition.getReferences().get(1);
  List<ModelReference<?>> inputs=ruleDefinition.getReferences().subList(2,ruleDefinition.getReferences().size());
  modelRegistry.configure(ModelActionRole.Defaults,DirectNodeInputUsingModelAction.of(targetReference,ruleDefinition.getDescriptor(),inputs,new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode subjectNode,    List<ModelView<?>> modelViews){
      ExtractedRuleSource<?> ruleSourceSchema=ruleExtractor.extract(ruleSourceType.getConcreteClass());
      Object[] parameters=new Object[2 + modelViews.size()];
      parameters[0]=ruleSourceSchema.getFactory().create();
      parameters[1]=subjectNode.asImmutable(targetReference.getType(),ruleDefinition.getDescriptor()).getInstance();
      for (int i=2; i < parameters.length; i++) {
        parameters[i]=modelViews.get(i).getInstance();
      }
      ruleDefinition.getRuleInvoker().invoke(parameters);
      subjectNode.applyToSelf(ruleSourceType.getConcreteClass());
    }
  }
));
}
