{
  validateIsVoidMethod(ruleDefinition,context);
  if (ruleDefinition.getReferences().size() < 2) {
    context.add(ruleDefinition,"A method " + getDescription() + " must have at least two parameters");
    return null;
  }
  ModelType<?> ruleType=ruleDefinition.getReferences().get(0).getType();
  if (!RULE_SOURCE_MODEL_TYPE.isAssignableFrom(ruleType)) {
    context.add(ruleDefinition,"The first parameter of a method " + getDescription() + " must be a subtype of "+ RuleSource.class.getName());
  }
  if (context.hasProblems()) {
    return null;
  }
  ModelType<? extends RuleSource> ruleSourceType=ruleType.asSubtype(RULE_SOURCE_MODEL_TYPE);
  ChildTraversalType childTraversal=ChildTraversalType.subjectTraversalOf(context,ruleDefinition,1);
  return new ExtractedRuleSourceDefinitionRule(ruleDefinition,ruleSourceType,context.getRuleExtractor(),childTraversal);
}
