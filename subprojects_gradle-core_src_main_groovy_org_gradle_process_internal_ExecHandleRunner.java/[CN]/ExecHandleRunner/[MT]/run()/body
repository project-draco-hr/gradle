{
  ProcessBuilder processBuilder=processBuilderFactory.createProcessBuilder(execHandle);
  int exitCode;
  try {
    ExecOutputHandleRunner standardOutputRunner;
    ExecOutputHandleRunner errorOutputRunner;
    ExecOutputHandleRunner standardInputRunner;
    Process process;
synchronized (START_LOCK) {
      process=processBuilder.start();
      standardOutputRunner=new ExecOutputHandleRunner("read process standard output",process.getInputStream(),execHandle.getStandardOutput());
      errorOutputRunner=new ExecOutputHandleRunner("read process error output",process.getErrorStream(),execHandle.getErrorOutput());
      standardInputRunner=new ExecOutputHandleRunner("write process standard input",execHandle.getStandardInput(),process.getOutputStream());
    }
synchronized (lock) {
      this.process=process;
    }
    threadPool.execute(standardInputRunner);
    threadPool.execute(standardOutputRunner);
    threadPool.execute(errorOutputRunner);
    execHandle.started();
    exitCode=process.waitFor();
  }
 catch (  Throwable t) {
    execHandle.failed(t);
    return;
  }
  if (aborted) {
    execHandle.aborted(exitCode);
  }
 else {
    execHandle.finished(exitCode);
  }
}
