{
  FileResolver fileResolver=serviceRegistry.get(FileResolver.class);
  Instantiator instantiator=serviceRegistry.get(Instantiator.class);
  for (  final TwirlSourceSet twirlSourceSet : binary.getSource().withType(TwirlSourceSet.class)) {
    final String twirlCompileTaskName=String.format("twirlCompile%s%s",StringUtils.capitalize(twirlSourceSet.getName()),StringUtils.capitalize(binary.getName()));
    final File twirlCompileOutputDirectory=srcOutputDirectory(buildDir,binary,twirlCompileTaskName);
    final ScalaLanguageSourceSet twirlScalaSources=BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class,String.format("%sScalaSources",twirlSourceSet.getName()),binary.getName(),fileResolver,instantiator);
    tasks.create(twirlCompileTaskName,TwirlCompile.class,new Action<TwirlCompile>(){
      public void execute(      TwirlCompile twirlCompile){
        twirlCompile.setPlatform(binary.getTargetPlatform());
        twirlCompile.setSource(twirlSourceSet.getSource());
        twirlCompile.setOutputDirectory(twirlCompileOutputDirectory);
        twirlScalaSources.generatedBy(twirlCompile);
      }
    }
);
    twirlScalaSources.getSource().srcDir(twirlCompileOutputDirectory);
    binary.getGeneratedScala().add(twirlScalaSources);
  }
}
