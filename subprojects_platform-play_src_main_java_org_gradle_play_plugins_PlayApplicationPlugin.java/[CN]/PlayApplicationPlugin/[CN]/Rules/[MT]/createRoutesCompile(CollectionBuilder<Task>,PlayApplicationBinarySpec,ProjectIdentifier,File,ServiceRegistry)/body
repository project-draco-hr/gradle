{
  FileResolver fileResolver=serviceRegistry.get(FileResolver.class);
  Instantiator instantiator=serviceRegistry.get(Instantiator.class);
  final String routesCompileTaskName=String.format("routesCompile%s",StringUtils.capitalize(binary.getName()));
  final File routesCompilerOutputDirectory=srcOutputDirectory(buildDir,binary,routesCompileTaskName);
  final ScalaLanguageSourceSet routesScalaSources=BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class,"routesScalaSources",binary.getName(),fileResolver,instantiator);
  tasks.create(routesCompileTaskName,RoutesCompile.class,new Action<RoutesCompile>(){
    public void execute(    RoutesCompile routesCompile){
      routesCompile.setPlatform(binary.getTargetPlatform());
      routesCompile.setAdditionalImports(new ArrayList<String>());
      routesCompile.setSource(new File(projectIdentifier.getProjectDir(),"conf"));
      routesCompile.include("*.routes");
      routesCompile.include("routes");
      routesCompile.setOutputDirectory(routesCompilerOutputDirectory);
      routesScalaSources.generatedBy(routesCompile);
    }
  }
);
  routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);
  binary.getGeneratedScala().add(routesScalaSources);
}
