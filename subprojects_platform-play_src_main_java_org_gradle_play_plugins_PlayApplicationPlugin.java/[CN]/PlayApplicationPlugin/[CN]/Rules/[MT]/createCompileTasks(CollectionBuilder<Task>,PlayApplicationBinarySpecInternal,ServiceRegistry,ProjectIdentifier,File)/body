{
  final String twirlCompileTaskName=String.format("twirlCompile%s",StringUtils.capitalize(binary.getName()));
  final File twirlCompilerOutputDirectory=new File(buildDir,String.format("%s/twirl",binary.getName()));
  final File routesCompilerOutputDirectory=new File(buildDir,String.format("%s/src_managed",binary.getName()));
  tasks.create(twirlCompileTaskName,TwirlCompile.class,new Action<TwirlCompile>(){
    public void execute(    TwirlCompile twirlCompile){
      twirlCompile.setPlatform(binary.getTargetPlatform());
      twirlCompile.setOutputDirectory(new File(twirlCompilerOutputDirectory,"views"));
      twirlCompile.setSourceDirectory(new File(projectIdentifier.getProjectDir(),"app"));
      twirlCompile.setSource(twirlCompile.getSourceDirectory());
      twirlCompile.include("**/*.html");
      binary.getClasses().builtBy(twirlCompile);
    }
  }
);
  final String routesCompileTaskName=String.format("routesCompile%s",StringUtils.capitalize(binary.getName()));
  tasks.create(routesCompileTaskName,RoutesCompile.class,new Action<RoutesCompile>(){
    public void execute(    RoutesCompile routesCompile){
      routesCompile.setPlatform(binary.getTargetPlatform());
      routesCompile.setOutputDirectory(routesCompilerOutputDirectory);
      routesCompile.setAdditionalImports(new ArrayList<String>());
      routesCompile.setSource(new File(projectIdentifier.getProjectDir(),"conf"));
      routesCompile.include("*.routes");
      routesCompile.include("routes");
      binary.getClasses().builtBy(routesCompile);
    }
  }
);
  final FileResolver fileResolver=serviceRegistry.get(FileResolver.class);
  ConfigurationContainer configurationContainer=serviceRegistry.get(ConfigurationContainer.class);
  DependencyHandler dependencyHandler=serviceRegistry.get(DependencyHandler.class);
  PlayToolChain playToolChain=serviceRegistry.get(PlayToolChain.class);
  final Dependency playDependency=dependencyHandler.create(playToolChain.getPlayDependencyNotationForPlatform(binary.getTargetPlatform()));
  final Configuration appCompileClasspath=configurationContainer.detachedConfiguration(playDependency);
  Dependency zincDependency=dependencyHandler.create(String.format("com.typesafe.zinc:zinc:%s",ScalaBasePlugin.DEFAULT_ZINC_VERSION));
  final Configuration zincClasspath=configurationContainer.detachedConfiguration(zincDependency);
  final String scalaCompileTaskName=String.format("scalaCompile%s",StringUtils.capitalize(binary.getName()));
  tasks.create(scalaCompileTaskName,ScalaCompile.class,new Action<ScalaCompile>(){
    public void execute(    ScalaCompile scalaCompile){
      scalaCompile.setDestinationDir(binary.getClasses().getClassesDir());
      scalaCompile.setClasspath(appCompileClasspath);
      scalaCompile.setScalaClasspath(new ScalaRuntime(scalaCompile.getProject()).inferScalaClasspath(appCompileClasspath));
      scalaCompile.setZincClasspath(zincClasspath);
      scalaCompile.setSourceCompatibility(binary.getTargetPlatform().getJavaVersion().getMajorVersion());
      scalaCompile.setTargetCompatibility(binary.getTargetPlatform().getJavaVersion().getMajorVersion());
      IncrementalCompileOptions incrementalOptions=scalaCompile.getScalaCompileOptions().getIncrementalOptions();
      incrementalOptions.setAnalysisFile(new File(buildDir,String.format("tmp/scala/compilerAnalysis/%s.analysis",scalaCompileTaskName)));
      scalaCompile.getScalaCompileOptions().setFork(true);
      scalaCompile.getScalaCompileOptions().setUseAnt(false);
      scalaCompile.source("app");
      scalaCompile.exclude("**/*.html");
      scalaCompile.dependsOn(twirlCompileTaskName);
      scalaCompile.source(twirlCompilerOutputDirectory);
      scalaCompile.dependsOn(routesCompileTaskName);
      scalaCompile.source(routesCompilerOutputDirectory);
      binary.getClasses().builtBy(scalaCompile);
    }
  }
);
}
