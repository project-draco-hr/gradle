{
  final ToolResolver toolResolver=serviceRegistry.get(ToolResolver.class);
  final ResolvedTool<Compiler<RoutesCompileSpec>> compilerTool=toolResolver.resolveCompiler(RoutesCompileSpec.class,binary.getTargetPlatform());
  for (  final RoutesSourceSet routesSourceSet : binary.getSource().withType(RoutesSourceSet.class)) {
    final String routesCompileTaskName=String.format("routesCompile%s%s",StringUtils.capitalize(routesSourceSet.getName()),StringUtils.capitalize(binary.getName()));
    final File routesCompilerOutputDirectory=srcOutputDirectory(buildDir,binary,routesCompileTaskName);
    tasks.create(routesCompileTaskName,RoutesCompile.class,new Action<RoutesCompile>(){
      public void execute(      RoutesCompile routesCompile){
        routesCompile.setCompilerTool(compilerTool);
        routesCompile.setAdditionalImports(new ArrayList<String>());
        routesCompile.setSource(routesSourceSet.getSource());
        routesCompile.setOutputDirectory(routesCompilerOutputDirectory);
        ScalaLanguageSourceSet routesScalaSources=binary.getGeneratedScala().get(routesSourceSet);
        routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);
        routesScalaSources.builtBy(routesCompile);
      }
    }
);
  }
}
