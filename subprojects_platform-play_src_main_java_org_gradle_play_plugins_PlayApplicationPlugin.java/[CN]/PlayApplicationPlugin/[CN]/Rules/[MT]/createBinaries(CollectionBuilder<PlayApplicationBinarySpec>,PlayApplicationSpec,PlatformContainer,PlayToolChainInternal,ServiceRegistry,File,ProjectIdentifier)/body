{
  for (  final PlayPlatform chosenPlatform : getChosenPlatforms(componentSpec,platforms)) {
    final String binaryName=String.format("%sBinary",componentSpec.getName());
    binaries.create(binaryName,new Action<PlayApplicationBinarySpec>(){
      public void execute(      PlayApplicationBinarySpec playBinary){
        PlayApplicationBinarySpecInternal playBinaryInternal=(PlayApplicationBinarySpecInternal)playBinary;
        FunctionalSourceSet binarySourceSet=((ComponentSpecInternal)componentSpec).getSources().copy(binaryName);
        playBinaryInternal.setBinarySources(binarySourceSet);
        playBinaryInternal.setTargetPlatform(chosenPlatform);
        playBinaryInternal.setToolChain(playToolChainInternal);
        playBinaryInternal.setJarFile(new File(buildDir,String.format("jars/%s/%s.jar",componentSpec.getName(),playBinaryInternal.getName())));
        JvmClasses classes=playBinary.getClasses();
        classes.setClassesDir(new File(buildDir,String.format("classes/%s",binaryName)));
        classes.addResourceDir(new File(projectIdentifier.getProjectDir(),"conf"));
        classes.addResourceDir(new File(projectIdentifier.getProjectDir(),"public"));
        FileResolver fileResolver=serviceRegistry.get(FileResolver.class);
        ScalaSources genSources=new ScalaSources("genSources",binaryName,fileResolver);
        playBinaryInternal.setGeneratedScala(genSources);
        JvmClasses testClasses=playBinary.getTestClasses();
        testClasses.setClassesDir(new File(buildDir,String.format("testClasses/%s",binaryName)));
        ScalaSources testSources=new ScalaSources("testSources",binaryName,fileResolver);
        testSources.getSource().srcDir("test");
        playBinaryInternal.setTestScala(testSources);
      }
    }
);
  }
}
