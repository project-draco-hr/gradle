{
  for (  final PlayApplicationBinarySpec binary : binaryContainer.withType(PlayApplicationBinarySpec.class)) {
    String runTaskName=String.format("run%s",StringUtils.capitalize(binary.getName()));
    tasks.create(runTaskName,PlayRun.class,new Action<PlayRun>(){
      public void execute(      PlayRun playRun){
        playRun.dependsOn(binary.getBuildTask());
        Project project=playRun.getProject();
        Configuration playRunConf=project.getConfigurations().create("playRunConf");
      }
    }
);
    final File testCompileOutputDirectory=new File(buildDir,String.format("testClasses/%s",binary.getName()));
    final FileResolver fileResolver=serviceRegistry.get(FileResolver.class);
    ConfigurationContainer configurationContainer=serviceRegistry.get(ConfigurationContainer.class);
    DependencyHandler dependencyHandler=serviceRegistry.get(DependencyHandler.class);
    PlayToolChain playToolChain=serviceRegistry.get(PlayToolChain.class);
    PlayPlatform targetPlatform=binary.getTargetPlatform();
    Dependency playTestDependency=dependencyHandler.create(String.format("com.typesafe.play:play-test_%s:%s",targetPlatform.getScalaVersion(),targetPlatform.getPlayVersion()));
    final Configuration testCompileConfiguration=configurationContainer.detachedConfiguration(playTestDependency);
    Dependency zincDependency=dependencyHandler.create(String.format("com.typesafe.zinc:zinc:%s",ScalaBasePlugin.DEFAULT_ZINC_VERSION));
    final Configuration zincClasspath=configurationContainer.detachedConfiguration(zincDependency);
    final FileCollection testCompileClasspath=fileResolver.resolveFiles(binary.getJarFile()).plus(testCompileConfiguration);
    final String testCompileTaskName=String.format("compile%sTests",StringUtils.capitalize(binary.getName()));
    tasks.create(testCompileTaskName,ScalaCompile.class,new Action<ScalaCompile>(){
      public void execute(      ScalaCompile scalaCompile){
        scalaCompile.dependsOn(binary.getBuildTask());
        scalaCompile.setClasspath(testCompileClasspath);
        scalaCompile.setZincClasspath(zincClasspath);
        scalaCompile.setScalaClasspath(new ScalaRuntime(scalaCompile.getProject()).inferScalaClasspath(testCompileClasspath));
        scalaCompile.setDestinationDir(testCompileOutputDirectory);
        scalaCompile.setSource("test");
        scalaCompile.setSourceCompatibility(binary.getTargetPlatform().getJavaVersion().getMajorVersion());
        scalaCompile.setTargetCompatibility(binary.getTargetPlatform().getJavaVersion().getMajorVersion());
        IncrementalCompileOptions incrementalOptions=scalaCompile.getScalaCompileOptions().getIncrementalOptions();
        incrementalOptions.setAnalysisFile(new File(buildDir,String.format("tmp/scala/compilerAnalysis/%s.analysis",testCompileTaskName)));
        scalaCompile.getScalaCompileOptions().setFork(true);
        scalaCompile.getScalaCompileOptions().setUseAnt(false);
      }
    }
);
    String testTaskName=String.format("test%s",StringUtils.capitalize(binary.getName()));
    tasks.create(testTaskName,Test.class,new Action<Test>(){
      public void execute(      Test test){
        test.setTestClassesDir(testCompileOutputDirectory);
        test.setBinResultsDir(new File(buildDir,String.format("binTestResultsDir/%s",binary.getName())));
        test.getReports().getJunitXml().setDestination(new File(buildDir,String.format("reports/test/%s/test-results",binary.getName())));
        test.getReports().getHtml().setDestination(new File(buildDir,String.format("reports/test/%s/html",binary.getName())));
        test.dependsOn(testCompileTaskName);
        test.setTestSrcDirs(Arrays.asList(fileResolver.resolve("test")));
        test.setWorkingDir(projectIdentifier.getProjectDir());
        test.setClasspath(testCompileClasspath.plus(fileResolver.resolveFiles(testCompileOutputDirectory)));
      }
    }
);
  }
}
