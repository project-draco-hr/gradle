{
  for (  final PlayPlatform chosenPlatform : getChosenPlatforms(componentSpec,platforms)) {
    final String binaryName=String.format("%sBinary",componentSpec.getName());
    final File binaryBuildDir=new File(buildDir,binaryName);
    binaries.create(binaryName,new Action<PlayApplicationBinarySpec>(){
      public void execute(      PlayApplicationBinarySpec playBinary){
        PlayApplicationBinarySpecInternal playBinaryInternal=(PlayApplicationBinarySpecInternal)playBinary;
        playBinaryInternal.setTargetPlatform(chosenPlatform);
        playBinaryInternal.setToolChain(playToolChainInternal);
        playBinaryInternal.setJarFile(new File(binaryBuildDir,String.format("lib/%s.jar",componentSpec.getName())));
        JvmClasses classes=playBinary.getClasses();
        classes.setClassesDir(new File(binaryBuildDir,"classes"));
        classes.addResourceDir(new File(projectIdentifier.getProjectDir(),"conf"));
        PublicAssets assets=playBinary.getAssets();
        assets.addAssetDir(new File(projectIdentifier.getProjectDir(),"public"));
        ScalaLanguageSourceSet genSources=new DefaultScalaLanguageSourceSet("genSources",binaryName,fileResolver);
        playBinaryInternal.setGeneratedScala(genSources);
      }
    }
);
  }
}
