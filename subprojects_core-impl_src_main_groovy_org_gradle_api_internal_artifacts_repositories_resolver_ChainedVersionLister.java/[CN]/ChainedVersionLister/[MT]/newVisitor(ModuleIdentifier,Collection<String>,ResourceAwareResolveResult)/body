{
  final List<VersionPatternVisitor> visitors=new ArrayList<VersionPatternVisitor>();
  for (  VersionLister lister : versionListers) {
    visitors.add(lister.newVisitor(module,dest,result));
  }
  return new VersionPatternVisitor(){
    public void visit(    ResourcePattern pattern,    IvyArtifactName artifact) throws ResourceException {
      final Iterator<VersionPatternVisitor> versionListIterator=visitors.iterator();
      while (versionListIterator.hasNext()) {
        VersionPatternVisitor list=versionListIterator.next();
        try {
          list.visit(pattern,artifact);
          return;
        }
 catch (        ResourceNotFoundException e) {
          if (!versionListIterator.hasNext()) {
            throw e;
          }
        }
catch (        Exception e) {
          if (versionListIterator.hasNext()) {
            String deprecationMessage=String.format("Error listing versions of %s using %s. Will attempt an alternate way to list versions",module,list.getClass());
            DeprecationLogger.nagUserOfDeprecatedBehaviour(deprecationMessage);
            LOGGER.debug(deprecationMessage,e);
          }
 else {
            throw new ResourceException(String.format("Failed to list versions for %s.",module),e);
          }
        }
      }
    }
  }
;
}
