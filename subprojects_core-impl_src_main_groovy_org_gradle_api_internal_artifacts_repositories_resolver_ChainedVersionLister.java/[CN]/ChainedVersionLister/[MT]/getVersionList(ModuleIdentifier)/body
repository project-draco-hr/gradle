{
  final List<VersionList> versionLists=new ArrayList<VersionList>();
  for (  VersionLister lister : versionListers) {
    versionLists.add(lister.getVersionList(module));
  }
  return new AbstractVersionList(){
    public void visit(    ResourcePattern pattern,    ModuleVersionArtifactMetaData artifact) throws ResourceException {
      final Iterator<VersionList> versionListIterator=versionLists.iterator();
      while (versionListIterator.hasNext()) {
        VersionList list=versionListIterator.next();
        try {
          list.visit(pattern,artifact);
          return;
        }
 catch (        ResourceNotFoundException e) {
          if (!versionListIterator.hasNext()) {
            throw e;
          }
        }
catch (        Exception e) {
          if (versionListIterator.hasNext()) {
            String deprecationMessage=String.format("Error listing versions of %s using %s. Will attempt an alternate way to list versions",module,list.getClass());
            DeprecationLogger.nagUserOfDeprecatedBehaviour(deprecationMessage);
            LOGGER.debug(deprecationMessage,e);
          }
 else {
            throw new ResourceException(String.format("Failed to list versions for %s.",module),e);
          }
        }
      }
    }
    public Set<ListedVersion> getVersions(){
      Set<ListedVersion> allVersions=new HashSet<ListedVersion>();
      for (      VersionList versionList : versionLists) {
        allVersions.addAll(versionList.getVersions());
      }
      return allVersions;
    }
  }
;
}
