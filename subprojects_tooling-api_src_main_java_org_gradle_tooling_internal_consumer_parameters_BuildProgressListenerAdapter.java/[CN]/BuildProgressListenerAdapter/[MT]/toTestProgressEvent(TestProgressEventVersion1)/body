{
  String testOutcome=event.getTestOutcome();
  final long eventTime=event.getEventTime();
  boolean isStart;
  String progressLabel;
  final List<Object> aggregate=new ArrayList<Object>();
  if (TestProgressEventVersion1.OUTCOME_STARTED.equals(testOutcome)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),false);
    final String eventDescription=toEventDescription(testDescriptor,"started");
    return new DefaultStartEvent(eventTime,eventDescription,testDescriptor);
  }
 else   if (TestProgressEventVersion1.OUTCOME_FAILED.equals(testOutcome)) {
    isStart=false;
    progressLabel="failed";
    aggregate.add(new FailureEvent(){
      @Override public Outcome getOutcome(){
        return toTestFailure(event.getResult());
      }
    }
);
  }
 else   if (TestProgressEventVersion1.OUTCOME_SKIPPED.equals(testOutcome)) {
    isStart=false;
    progressLabel="skipped";
    aggregate.add(new SkippedEvent(){
      @Override public Outcome getOutcome(){
        return null;
      }
    }
);
  }
 else   if (TestProgressEventVersion1.OUTCOME_SUCCEEDED.equals(testOutcome)) {
    isStart=false;
    progressLabel="succeeded";
    aggregate.add(new SuccessEvent(){
      @Override public Outcome getOutcome(){
        return toTestSuccess(event.getResult());
      }
    }
);
  }
 else {
    return null;
  }
  TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),!isStart);
  String eventDescription=toEventDescription(testDescriptor,progressLabel);
  TestEvent testEvent=new TestEvent(eventTime,eventDescription,testDescriptor);
  aggregate.add(testEvent);
  InvocationHandler handler=new DelegatingInvocationHandler(aggregate);
  Set<Class<?>> interfaces=collectInterfaces(aggregate);
  return (ProgressEvent)Proxy.newProxyInstance(this.getClass().getClassLoader(),interfaces.toArray(new Class<?>[interfaces.size()]),handler);
}
