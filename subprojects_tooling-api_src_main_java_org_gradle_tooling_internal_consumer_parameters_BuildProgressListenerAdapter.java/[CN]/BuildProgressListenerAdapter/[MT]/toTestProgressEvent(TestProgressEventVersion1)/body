{
  String eventType=event.getEventType();
  final long eventTme=event.getEventTime();
  if (TestProgressEventVersion1.TEST_SUITE_STARTED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),false);
    return new TestSuiteStartedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_SKIPPED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    return new TestSuiteSkippedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_SUCCEEDED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    final TestSuccess testSuccess=toTestSuccess(event.getResult());
    return new TestSuiteSucceededEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
      @Override public TestSuccess getResult(){
        return testSuccess;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_FAILED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    final TestFailure testFailure=toTestFailure(event.getResult());
    return new TestSuiteFailedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
      @Override public TestFailure getResult(){
        return testFailure;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_STARTED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),false);
    return new TestStartedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SKIPPED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    return new TestSkippedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUCCEEDED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    final TestSuccess testSuccess=toTestSuccess(event.getResult());
    return new TestSucceededEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
      @Override public TestSuccess getResult(){
        return testSuccess;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_FAILED.equals(eventType)) {
    final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),true);
    final TestFailure testFailure=toTestFailure(event.getResult());
    return new TestFailedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public long getEventTime(){
        return eventTme;
      }
      @Override public TestFailure getResult(){
        return testFailure;
      }
    }
;
  }
 else {
    return null;
  }
}
