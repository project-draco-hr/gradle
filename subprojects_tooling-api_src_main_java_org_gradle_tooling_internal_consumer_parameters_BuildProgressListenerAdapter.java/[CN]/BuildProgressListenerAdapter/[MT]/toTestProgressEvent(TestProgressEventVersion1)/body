{
  final TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor());
  String eventType=event.getEventType();
  if (TestProgressEventVersion1.TEST_SUITE_STARTED.equals(eventType)) {
    return new TestSuiteStartedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_SKIPPED.equals(eventType)) {
    return new TestSuiteSkippedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_SUCCEEDED.equals(eventType)) {
    return new TestSuiteSucceededEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public TestSuccess getResult(){
        return toTestSuccess(event.getResult());
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUITE_FAILED.equals(eventType)) {
    return new TestSuiteFailedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public TestFailure getResult(){
        return toTestFailure(event.getResult());
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_STARTED.equals(eventType)) {
    return new TestStartedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SKIPPED.equals(eventType)) {
    return new TestSkippedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_SUCCEEDED.equals(eventType)) {
    return new TestSucceededEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public TestSuccess getResult(){
        return toTestSuccess(event.getResult());
      }
    }
;
  }
 else   if (TestProgressEventVersion1.TEST_FAILED.equals(eventType)) {
    return new TestFailedEvent(){
      @Override public TestDescriptor getDescriptor(){
        return testDescriptor;
      }
      @Override public TestFailure getResult(){
        return toTestFailure(event.getResult());
      }
    }
;
  }
 else {
    return null;
  }
}
