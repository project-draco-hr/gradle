{
  String testStructure=event.getTestStructure();
  String testOutcome=event.getTestOutcome();
  final long eventTme=event.getEventTime();
  final TestKind testKind=TestProgressEventVersion1.STRUCTURE_SUITE.equals(testStructure) ? TestKind.suite : TestProgressEventVersion1.STRUCTURE_ATOMIC.equals(testStructure) ? TestKind.test : TestKind.unknown;
  if (testKind == TestKind.unknown || event.getDescriptor() == null) {
    return null;
  }
  String progressLabel=null;
  final List<Object> aggregate=new ArrayList<Object>();
  boolean isStart=false;
  if (TestProgressEventVersion1.OUTCOME_STARTED.equals(testOutcome)) {
    isStart=true;
    aggregate.add(new StartEvent(){
      @Override public Income getIncome(){
        return null;
      }
    }
);
    progressLabel="started";
  }
 else   if (TestProgressEventVersion1.OUTCOME_FAILED.equals(testOutcome)) {
    aggregate.add(new FailureEvent(){
      @Override public Outcome getOutcome(){
        return toTestFailure(event.getResult());
      }
    }
);
    progressLabel="failed";
  }
 else   if (TestProgressEventVersion1.OUTCOME_SKIPPED.equals(testOutcome)) {
    aggregate.add(new SkippedEvent(){
      @Override public Outcome getOutcome(){
        return null;
      }
    }
);
    progressLabel="skipped";
  }
 else   if (TestProgressEventVersion1.OUTCOME_SUCCEEDED.equals(testOutcome)) {
    aggregate.add(new SuccessEvent(){
      @Override public Outcome getOutcome(){
        return toTestSuccess(event.getResult());
      }
    }
);
    progressLabel="succeeded";
  }
  TestDescriptor testDescriptor=toTestDescriptor(event.getDescriptor(),!isStart,testKind);
  String eventDescription=String.format("%s '%s' %s.",testKind.getLabel(),testDescriptor.getName(),progressLabel);
  TestEvent testEvent=new TestEvent(eventTme,eventDescription,testDescriptor);
  aggregate.add(testEvent);
  InvocationHandler handler=new DelegatingInvocationHandler(aggregate);
  Set<Class<?>> interfaces=collectInterfaces(aggregate);
  return (TestProgressEvent)Proxy.newProxyInstance(this.getClass().getClassLoader(),interfaces.toArray(new Class<?>[interfaces.size()]),handler);
}
