{
  byte type=decoder.readByte();
switch (type) {
case ModuleDescriptorCacheEntry.TYPE_MISSING:
    long createTimestamp=decoder.readLong();
  return new MissingModuleCacheEntry(createTimestamp);
case ModuleDescriptorCacheEntry.TYPE_IVY:
boolean isChanging=decoder.readBoolean();
createTimestamp=decoder.readLong();
ModuleSource moduleSource=moduleSourceSerializer.read(decoder);
byte[] encodedHash=decoder.readBinary();
BigInteger hash=new BigInteger(encodedHash);
return new IvyModuleCacheEntry(isChanging,createTimestamp,hash,moduleSource);
case ModuleDescriptorCacheEntry.TYPE_MAVEN:
isChanging=decoder.readBoolean();
String packaging=decoder.readNullableString();
createTimestamp=decoder.readLong();
moduleSource=moduleSourceSerializer.read(decoder);
encodedHash=decoder.readBinary();
hash=new BigInteger(encodedHash);
return new MavenModuleCacheEntry(isChanging,packaging,createTimestamp,hash,moduleSource);
default :
throw new IllegalArgumentException("Don't know how to deserialize meta-data entry of type " + type);
}
}
