{
  tasks.beforeEach(PlayCoffeeScriptCompile.class,new Action<PlayCoffeeScriptCompile>(){
    @Override public void execute(    PlayCoffeeScriptCompile coffeeScriptCompile){
      coffeeScriptCompile.setRhinoClasspathNotation(getDefaultRhinoDependencyNotation());
      coffeeScriptCompile.setCoffeeScriptJsNotation(getDefaultCoffeeScriptDependencyNotation());
    }
  }
);
  for (  final CoffeeScriptSourceSet coffeeScriptSourceSet : binary.getSource().withType(CoffeeScriptSourceSet.class).values()) {
    if (((LanguageSourceSetInternal)coffeeScriptSourceSet).getMayHaveSources()) {
      final String compileTaskName="compile" + capitalize(binary.getName()) + capitalize(coffeeScriptSourceSet.getName());
      tasks.create(compileTaskName,PlayCoffeeScriptCompile.class,new Action<PlayCoffeeScriptCompile>(){
        @Override public void execute(        PlayCoffeeScriptCompile coffeeScriptCompile){
          File outputDirectory=outputDirectory(buildDir,binary,compileTaskName);
          coffeeScriptCompile.setDestinationDir(outputDirectory);
          coffeeScriptCompile.setSource(coffeeScriptSourceSet.getSource());
          JavaScriptSourceSet javaScriptSourceSet=binary.getGeneratedJavaScript().get(coffeeScriptSourceSet);
          javaScriptSourceSet.getSource().srcDir(outputDirectory);
          javaScriptSourceSet.builtBy(coffeeScriptCompile);
        }
      }
);
    }
  }
}
