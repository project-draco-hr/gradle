{
  JavaPluginConvention javaConvention=new JavaPluginConvention(project,customValues);
  Convention convention=project.getConvention();
  convention.getPlugins().put("java",javaConvention);
  configureDependencyManager(project,javaConvention);
  project.setProperty("status","integration");
  project.createTask(INIT);
  ((ConventionTask)project.createTask(map("type",Clean.class),CLEAN)).conventionMapping(DefaultConventionsToPropertiesMapping.CLEAN);
  ((ConventionTask)project.createTask(map("type",Javadoc.class),JAVADOC)).conventionMapping(DefaultConventionsToPropertiesMapping.JAVADOC);
  ((ConventionTask)project.createTask(map("type",Resources.class,"dependsOn",INIT),RESOURCES)).conventionMapping(DefaultConventionsToPropertiesMapping.RESOURCES);
  configureCompile((Compile)project.createTask(map("type",Compile.class,"dependsOn",RESOURCES),COMPILE),DefaultConventionsToPropertiesMapping.COMPILE);
  ConventionTask testResources=(ConventionTask)project.createTask(map("type",Resources.class,"dependsOn",COMPILE),TEST_RESOURCES);
  testResources.getSkipProperties().add(Task.AUTOSKIP_PROPERTY_PREFIX + TEST);
  testResources.conventionMapping(DefaultConventionsToPropertiesMapping.TEST_RESOURCES);
  configureTestCompile((Compile)project.createTask(map("type",Compile.class,"dependsOn",TEST_RESOURCES),TEST_COMPILE),(Compile)project.task(COMPILE),DefaultConventionsToPropertiesMapping.TEST_COMPILE);
  final Test test=(Test)project.createTask(map("type",Test.class,"dependsOn",TEST_COMPILE),TEST);
  test.conventionMapping(DefaultConventionsToPropertiesMapping.TEST);
  test.doFirst(new TaskAction(){
    public void execute(    Task task,    Dag tasksGraph){
      Test test=(Test)task;
      List unmanagedClasspathFromTestCompile=((Compile)test.getProject().task(TEST_COMPILE)).getUnmanagedClasspath();
      test.unmanagedClasspath((Object[])unmanagedClasspathFromTestCompile.toArray(new Object[unmanagedClasspathFromTestCompile.size()]));
    }
  }
);
  Bundle libsBundle=(Bundle)project.createTask(map("type",Bundle.class,"dependsOn",TEST),LIBS);
  libsBundle.conventionMapping(DefaultConventionsToPropertiesMapping.LIB);
  Jar jar=libsBundle.jar();
  jar.conventionMapping(map("resourceCollections",GroovyJavaHelper.createConventionClosure(Collections.singletonList(new FileSet(javaConvention.getClassesDir())))));
  Upload libsUpload=(Upload)project.createTask(map("type",Upload.class,"dependsOn",LIBS),UPLOAD_LIBS);
  libsUpload.getBundles().add(project.task(LIBS));
  libsUpload.getUploadResolvers().add(project.getDependencies().getBuildResolver(),null);
  libsUpload.setUploadModuleDescriptor(true);
  Bundle distsBundle=(Bundle)project.createTask(map("type",Bundle.class,"dependsOn",UPLOAD_LIBS),DISTS);
  distsBundle.conventionMapping(DefaultConventionsToPropertiesMapping.DIST);
  Upload distsUpload=(Upload)project.createTask(map("type",Upload.class,"dependsOn",DISTS),UPLOAD_DISTS);
  distsUpload.getConfigurations().add(DISTS);
}
