{
  JavaPluginConvention javaConvention=new JavaPluginConvention(project,customValues);
  Convention convention=project.getConvention();
  convention.getPlugins().put("java",javaConvention);
  configureDependencyManager(project,javaConvention);
  project.createTask(INIT);
  ((ConventionTask)project.createTask(GUtil.map("type",Clean.class),CLEAN)).conventionMapping(DefaultConventionsToPropertiesMapping.CLEAN);
  ((ConventionTask)project.createTask(GUtil.map("type",Javadoc.class),JAVADOC)).conventionMapping(DefaultConventionsToPropertiesMapping.JAVADOC);
  ((ConventionTask)project.createTask(GUtil.map("type",Resources.class,"dependsOn",INIT),RESOURCES)).conventionMapping(DefaultConventionsToPropertiesMapping.RESOURCES);
  configureCompile((Compile)project.createTask(GUtil.map("type",Compile.class,"dependsOn",RESOURCES),COMPILE),DefaultConventionsToPropertiesMapping.COMPILE);
  configureTestResources(project);
  configureTestCompile((Compile)project.createTask(GUtil.map("type",Compile.class,"dependsOn",TEST_RESOURCES),TEST_COMPILE),(Compile)project.task(COMPILE),DefaultConventionsToPropertiesMapping.TEST_COMPILE);
  configureTest(project);
  configureLibs(project,javaConvention);
  configureUploadLibs(project);
  Bundle distsBundle=(Bundle)project.createTask(GUtil.map("type",Bundle.class,"dependsOn",UPLOAD_LIBS),DISTS);
  distsBundle.conventionMapping(DefaultConventionsToPropertiesMapping.DIST);
  Upload distsUpload=(Upload)project.createTask(GUtil.map("type",Upload.class,"dependsOn",DISTS),UPLOAD_DISTS);
  distsUpload.getConfigurations().add(DISTS);
  configureEclipse(project);
}
