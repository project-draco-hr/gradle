{
  EclipseClasspath eclipseClasspath=(EclipseClasspath)project.createTask(GUtil.map("type",EclipseClasspath.class),ECLIPSE_CP);
  eclipseClasspath.conventionMapping(GUtil.map("srcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    Task task){
      return GUtil.addLists(java(convention).getSrcDirs(),java(convention).getResourceDirs());
    }
  }
,"testSrcDirs",new ConventionValue(){
    public Object getValue(    Convention convention,    Task task){
      return GUtil.addLists(java(convention).getTestSrcDirs(),java(convention).getTestResourceDirs());
    }
  }
,"outputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    Task task){
      return java(convention).getClassesDir();
    }
  }
,"testOutputDirectory",new ConventionValue(){
    public Object getValue(    Convention convention,    Task task){
      return java(convention).getTestClassesDir();
    }
  }
,"classpathLibs",new ConventionValue(){
    public Object getValue(    Convention convention,    final Task task){
      return task.getProject().getDependencies().configuration(TEST_RUNTIME).resolve(new ResolveInstructionModifier(){
        public ResolveInstruction modify(        ResolveInstruction resolveInstruction){
          return new ResolveInstruction(resolveInstruction).setDependencyFilter(new TypeSpec(Type.EXTERNAL)).setFailOnResolveError(((EclipseClasspath)task).getFailForMissingDependencies());
        }
      }
);
    }
  }
,"projectDependencies",new ConventionValue(){
    public Object getValue(    Convention convention,    Task task){
      return task.getProject().getDependencies().getDependencies(new TypeSpec(Type.PROJECT));
    }
  }
));
  return eclipseClasspath;
}
