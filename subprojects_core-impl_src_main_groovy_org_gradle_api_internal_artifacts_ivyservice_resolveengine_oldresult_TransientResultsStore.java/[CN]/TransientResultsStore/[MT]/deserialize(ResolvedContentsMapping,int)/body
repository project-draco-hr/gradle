{
  Clock clock=new Clock();
  DefaultTransientConfigurationResults results=new DefaultTransientConfigurationResults();
  int valuesRead=0;
  byte type=-1;
  try {
    DataInputStream input=binaryStore.getInput();
    try {
      input.skipBytes(offset);
      InputStreamBackedDecoder decoder=new InputStreamBackedDecoder(input);
      while (true) {
        type=decoder.readByte();
        ResolvedConfigurationIdentifier id;
        valuesRead++;
switch (type) {
case NEW_DEP:
          id=resolvedConfigurationIdentifierSerializer.read(decoder);
        results.allDependencies.put(id,new DefaultResolvedDependency(id.getId(),id.getConfiguration()));
      break;
case ROOT:
    id=resolvedConfigurationIdentifierSerializer.read(decoder);
  results.root=results.allDependencies.get(id);
LOG.debug("Loaded resolved configuration results ({}) from {}",clock.getTime(),binaryStore);
return results;
case FIRST_LVL:
id=resolvedConfigurationIdentifierSerializer.read(decoder);
results.firstLevelDependencies.put(mapping.getModuleDependency(id),results.allDependencies.get(id));
break;
case PARENT_CHILD:
DefaultResolvedDependency parent=results.allDependencies.get(resolvedConfigurationIdentifierSerializer.read(decoder));
DefaultResolvedDependency child=results.allDependencies.get(resolvedConfigurationIdentifierSerializer.read(decoder));
parent.addChild(child);
break;
case PARENT_ARTIFACT:
DefaultResolvedDependency c=results.allDependencies.get(resolvedConfigurationIdentifierSerializer.read(decoder));
DefaultResolvedDependency p=results.allDependencies.get(resolvedConfigurationIdentifierSerializer.read(decoder));
c.addParentSpecificArtifacts(p,newHashSet(mapping.getArtifact(decoder.readLong())));
break;
}
}
}
  finally {
input.close();
}
}
 catch (Exception e) {
throw new RuntimeException("Problems loading the resolved configuration (" + clock.getTime() + ") from "+ binaryStore.diagnose()+ ". Read "+ valuesRead+ " values, last was: "+ type,e);
}
}
