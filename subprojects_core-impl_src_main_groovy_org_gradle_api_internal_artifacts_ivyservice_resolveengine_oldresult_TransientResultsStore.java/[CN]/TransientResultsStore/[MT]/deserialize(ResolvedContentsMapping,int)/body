{
  Clock clock=new Clock();
  DefaultTransientConfigurationResults results=new DefaultTransientConfigurationResults();
  DataInputStream input=binaryStore.getInput();
  int valuesRead=0;
  short type=-1;
  try {
    input.skipBytes(offset);
    while (true) {
      ResolvedConfigurationIdentifierSerializer s=new ResolvedConfigurationIdentifierSerializer();
      type=input.readShort();
      ResolvedConfigurationIdentifier id;
      valuesRead++;
switch (type) {
case NEW_DEP:
        id=s.read((DataInput)input);
      results.allDependencies.put(id,new DefaultResolvedDependency(id.getId(),id.getConfiguration()));
    break;
case ROOT:
  id=s.read((DataInput)input);
results.root=results.allDependencies.get(id);
LOG.info("Loaded resolved configuration results ({}) from {}",clock.getTime(),binaryStore);
return results;
case FIRST_LVL:
id=s.read((DataInput)input);
results.firstLevelDependencies.put(mapping.getModuleDependency(id),results.allDependencies.get(id));
break;
case PARENT_CHILD:
DefaultResolvedDependency parent=results.allDependencies.get(s.read((DataInput)input));
DefaultResolvedDependency child=results.allDependencies.get(s.read((DataInput)input));
parent.addChild(child);
break;
case PARENT_ARTIFACT:
DefaultResolvedDependency c=results.allDependencies.get(s.read((DataInput)input));
DefaultResolvedDependency p=results.allDependencies.get(s.read((DataInput)input));
c.addParentSpecificArtifacts(p,newHashSet(mapping.getArtifact(input.readLong())));
break;
}
}
}
 catch (IOException e) {
throw new RuntimeException("Problems loading the resolved configuration (" + clock.getTime() + ") from "+ binaryStore.diagnose()+ ". Read "+ valuesRead+ " values, last was: "+ type,e);
}
}
