{
synchronized (lock) {
    TransientConfigurationResults cached=cache.load();
    if (cached != null) {
      return cached;
    }
    LOG.info("Loading dependency resolution results from disk (old model).");
    DefaultTransientConfigurationResults results=new DefaultTransientConfigurationResults();
    output=null;
    try {
      while (true) {
        ResolvedConfigurationIdentifierSerializer s=new ResolvedConfigurationIdentifierSerializer();
        short type=input.readShort();
        ResolvedConfigurationIdentifier id;
switch (type) {
case 1:
          id=s.read((DataInput)input);
        results.allDependencies.put(id,new DefaultResolvedDependency(id.getId(),id.getConfiguration()));
      break;
case 2:
    id=s.read((DataInput)input);
  results.root=results.allDependencies.get(id);
cache.store(results);
return results;
case 3:
id=s.read((DataInput)input);
results.firstLevelDependencies.put(mapping.getModuleDependency(id),results.allDependencies.get(id));
break;
case 4:
DefaultResolvedDependency parent=results.allDependencies.get(s.read((DataInput)input));
DefaultResolvedDependency child=results.allDependencies.get(s.read((DataInput)input));
parent.addChild(child);
break;
case 5:
DefaultResolvedDependency c=results.allDependencies.get(s.read((DataInput)input));
DefaultResolvedDependency p=results.allDependencies.get(s.read((DataInput)input));
c.addParentSpecificArtifacts(p,newHashSet(mapping.getArtifact(input.readLong())));
break;
}
}
}
 catch (IOException e) {
throw new RuntimeException("Problems loading the resolution result from byte stream.",e);
}
}
}
