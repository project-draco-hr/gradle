{
  rootProject.getGradle().addBuildListener(new BuildAdapter(){
    public void projectsEvaluated(    Gradle gradle){
      VersionNumber ideaTargetVersion=findIdeaTargetVersion();
      final boolean useScalaSdk=ideaTargetVersion == null || IDEA_VERSION_WHEN_SCALA_SDK_WAS_INTRODUCED.compareTo(ideaTargetVersion) <= 0;
      final Collection<Project> scalaProjects=findProjectsApplyingIdeaAndScalaPlugins();
      final Map<String,ProjectLibrary> scalaCompilerLibraries=Maps.newHashMap();
      rootProject.getTasks().getByName("ideaProject").doFirst(new Action<Task>(){
        @Override public void execute(        Task task){
          if (scalaProjects.size() > 0) {
            scalaCompilerLibraries.clear();
            scalaCompilerLibraries.putAll(resolveScalaCompilerLibraries(scalaProjects,useScalaSdk));
            declareUniqueProjectLibraries(Sets.newLinkedHashSet(scalaCompilerLibraries.values()));
          }
        }
      }
);
      rootProject.configure(scalaProjects,new Action<Project>(){
        @Override public void execute(        final Project project){
          project.getExtensions().getByType(IdeaModel.class).getModule().getIml().withXml(new Action<XmlProvider>(){
            @Override public void execute(            XmlProvider xmlProvider){
              if (useScalaSdk) {
                declareScalaSdk(scalaCompilerLibraries.get(project.getPath()),xmlProvider.asNode());
              }
 else {
                declareScalaFacet(scalaCompilerLibraries.get(project.getPath()),xmlProvider.asNode());
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
