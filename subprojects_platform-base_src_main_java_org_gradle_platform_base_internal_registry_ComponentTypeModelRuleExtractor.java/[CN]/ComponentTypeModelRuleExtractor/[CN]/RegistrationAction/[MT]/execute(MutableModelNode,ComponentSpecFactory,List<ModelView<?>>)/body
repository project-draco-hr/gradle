{
  InstanceFactory.TypeRegistrationBuilder<S> registration=components.register(publicType,descriptor);
  if (implementationType != null) {
    ServiceRegistry serviceRegistry=ModelViews.assertType(inputs.get(0),ModelType.of(ServiceRegistry.class)).getInstance();
    final Instantiator instantiator=serviceRegistry.get(Instantiator.class);
    final ProjectIdentifier projectIdentifier=ModelViews.assertType(inputs.get(1),ModelType.of(ProjectIdentifier.class)).getInstance();
    registration.withImplementation(Cast.<ModelType<? extends S>>uncheckedCast(implementationType),new BiFunction<S,String,MutableModelNode>(){
      @Override public S apply(      String name,      MutableModelNode modelNode1){
        ComponentSpecIdentifier id=new DefaultComponentSpecIdentifier(projectIdentifier.getPath(),name);
        return Cast.uncheckedCast(BaseComponentSpec.create(implementationType.getConcreteClass(),id,modelNode1,instantiator));
      }
    }
);
    if (COMPONENT_SPEC_INTERNAL_MODEL_TYPE.isAssignableFrom(implementationType)) {
      registration.withInternalView(COMPONENT_SPEC_INTERNAL_MODEL_TYPE);
    }
  }
  for (  Class<?> internalView : internalViews) {
    registration.withInternalView(ModelType.of(internalView));
  }
}
