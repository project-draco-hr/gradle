{
  ServiceRegistry serviceRegistry=ModelViews.assertType(inputs.get(0),ModelType.of(ServiceRegistry.class)).getInstance();
  final Instantiator instantiator=serviceRegistry.get(Instantiator.class);
  final ProjectIdentifier projectIdentifier=ModelViews.assertType(inputs.get(1),ModelType.of(ProjectIdentifier.class)).getInstance();
  final ProjectSourceSet projectSourceSet=ModelViews.assertType(inputs.get(2),ModelType.of(ProjectSourceSet.class)).getInstance();
  @SuppressWarnings("unchecked") Class<ComponentSpec> publicClass=(Class<ComponentSpec>)publicType.getConcreteClass();
  components.register(publicClass,descriptor,new BiFunction<ComponentSpec,String,MutableModelNode>(){
    @Override public ComponentSpec apply(    String name,    MutableModelNode modelNode){
      FunctionalSourceSet componentSourceSet=instantiator.newInstance(DefaultFunctionalSourceSet.class,name,instantiator,projectSourceSet);
      ComponentSpecIdentifier id=new DefaultComponentSpecIdentifier(projectIdentifier.getPath(),name);
      return BaseComponentSpec.create(implementationType.getConcreteClass(),id,modelNode,componentSourceSet,instantiator);
    }
  }
);
}
