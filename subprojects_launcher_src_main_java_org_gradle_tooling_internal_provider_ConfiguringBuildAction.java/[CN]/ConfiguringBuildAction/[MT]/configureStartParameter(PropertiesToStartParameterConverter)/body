{
  StartParameter startParameter=startParameterTemplate.newInstance();
  startParameter.setProjectDir(projectDirectory);
  if (gradleUserHomeDir != null) {
    startParameter.setGradleUserHomeDir(gradleUserHomeDir);
  }
  if (launchables != null) {
    List<String> allTasks=new ArrayList<String>();
    String projectPath=null;
    for (    InternalLaunchable launchable : launchables) {
      if (launchable instanceof LaunchableImplementation) {
        LaunchableImplementation launchableImpl=(LaunchableImplementation)launchable;
        allTasks.add(launchableImpl.getTaskName());
        if (launchableImpl.getProjectPath() != null) {
          if (projectPath != null && !projectPath.equals(launchableImpl.getProjectPath())) {
            throw new InternalUnsupportedBuildArgumentException("Problem with provided launchable arguments: " + launchables + ". "+ "\nOnly selector from the same Gradle project can be built.");
          }
          projectPath=launchableImpl.getProjectPath();
        }
      }
 else {
        throw new InternalUnsupportedBuildArgumentException("Problem with provided launchable arguments: " + launchables + ". "+ "\nOnly objects from this provider can be built.");
      }
    }
    if (projectPath != null) {
      startParameter.setProjectPath(projectPath);
    }
    startParameter.setTaskNames(allTasks);
  }
 else   if (tasks != null) {
    startParameter.setTaskNames(tasks);
  }
  propertiesToStartParameterConverter.convert(properties,startParameter);
  if (arguments != null) {
    DefaultCommandLineConverter converter=new DefaultCommandLineConverter();
    try {
      converter.convert(arguments,startParameter);
    }
 catch (    CommandLineArgumentException e) {
      throw new InternalUnsupportedBuildArgumentException("Problem with provided build arguments: " + arguments + ". "+ "\n"+ e.getMessage()+ "\nEither it is not a valid build option or it is not supported in the target Gradle version."+ "\nNot all of the Gradle command line options are supported build arguments."+ "\nExamples of supported build arguments: '--info', '-u', '-p'."+ "\nExamples of unsupported build options: '--daemon', '-?', '-v'."+ "\nPlease find more information in the javadoc for the BuildLauncher class.",e);
    }
  }
  if (searchUpwards != null) {
    startParameter.setSearchUpwards(searchUpwards);
  }
  if (buildLogLevel != null) {
    startParameter.setLogLevel(buildLogLevel);
  }
  return startParameter;
}
