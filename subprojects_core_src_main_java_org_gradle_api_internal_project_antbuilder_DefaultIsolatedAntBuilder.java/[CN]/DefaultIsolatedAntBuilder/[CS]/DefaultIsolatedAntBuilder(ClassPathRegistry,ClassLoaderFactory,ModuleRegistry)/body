{
  this.classPathRegistry=classPathRegistry;
  this.classLoaderFactory=classLoaderFactory;
  this.moduleRegistry=moduleRegistry;
  this.libClasspath=new DefaultClassPath();
  GroovySystemLoaderFactory groovySystemLoaderFactory=new GroovySystemLoaderFactory();
  this.classLoaderCache=new ClassPathToClassLoaderCache(groovySystemLoaderFactory);
  List<File> antClasspath=Lists.newArrayList(classPathRegistry.getClassPath("ANT").getAsFiles());
  File toolsJar=Jvm.current().getToolsJar();
  if (toolsJar != null) {
    antClasspath.add(toolsJar);
  }
  antLoader=classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(antClasspath));
  FilteringClassLoader loggingLoader=new FilteringClassLoader(getClass().getClassLoader());
  loggingLoader.allowPackage("org.slf4j");
  loggingLoader.allowPackage("org.apache.commons.logging");
  loggingLoader.allowPackage("org.apache.log4j");
  loggingLoader.allowPackage("org.fusesource.jansi");
  loggingLoader.allowClass(Logger.class);
  loggingLoader.allowClass(LogLevel.class);
  this.baseAntLoader=new CachingClassLoader(new MultiParentClassLoader(antLoader,loggingLoader));
  ClassPath gradleCoreUrls=moduleRegistry.getModule("gradle-core").getImplementationClasspath();
  gradleCoreUrls=gradleCoreUrls.plus(moduleRegistry.getModule("gradle-logging").getImplementationClasspath());
  gradleCoreUrls=gradleCoreUrls.plus(moduleRegistry.getExternalModule("groovy-all").getClasspath());
  gradleCoreUrls=gradleCoreUrls.plus(moduleRegistry.getModule("gradle-base-services").getImplementationClasspath());
  this.antAdapterLoader=new MutableURLClassLoader(baseAntLoader,gradleCoreUrls);
  gradleApiGroovyLoader=groovySystemLoaderFactory.forClassLoader(this.getClass().getClassLoader());
  antAdapterGroovyLoader=groovySystemLoaderFactory.forClassLoader(antAdapterLoader);
}
