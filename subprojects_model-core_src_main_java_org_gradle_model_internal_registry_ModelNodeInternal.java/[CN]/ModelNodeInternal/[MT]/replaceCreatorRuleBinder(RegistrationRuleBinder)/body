{
  if (isAtLeast(State.Created)) {
    throw new IllegalStateException("Cannot replace registration rule binder when node is already created (node: " + this + ", state: "+ getState()+ ")");
  }
  ModelRegistration newRegistration=newRegistrationBinder.getRegistration();
  ModelRegistration oldRegistration=registrationBinder.getRegistration();
  if (!oldRegistration.getPromise().equals(newRegistration.getPromise())) {
    throw new IllegalStateException("can not replace node " + getPath() + " with different promise (old: "+ oldRegistration.getPromise()+ ", new: "+ newRegistration.getPromise()+ ")");
  }
  if (!newRegistration.getInputs().equals(oldRegistration.getInputs())) {
    Joiner joiner=Joiner.on(", ");
    throw new IllegalStateException("can not replace node " + getPath() + " with registration with different input bindings (old: ["+ joiner.join(oldRegistration.getInputs())+ "], new: ["+ joiner.join(newRegistration.getInputs())+ "])");
  }
  this.registrationBinder=newRegistrationBinder;
}
