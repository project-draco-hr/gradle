{
  if (getState() != State.Known) {
    throw new IllegalStateException("Cannot replace creator rule binder when not in known state (node: " + this + ", state: "+ getState()+ ")");
  }
  ModelCreator newCreator=newCreatorBinder.getCreator();
  ModelCreator oldCreator=creatorBinder.getCreator();
  if (!oldCreator.getPromise().equals(newCreator.getPromise())) {
    throw new IllegalStateException("can not replace node " + getPath() + " with different promise (old: "+ oldCreator.getPromise()+ ", new: "+ newCreator.getPromise()+ ")");
  }
  if (!newCreator.getInputs().equals(oldCreator.getInputs())) {
    Joiner joiner=Joiner.on(", ");
    throw new IllegalStateException("can not replace node " + getPath() + " with creator with different input bindings (old: ["+ joiner.join(oldCreator.getInputs())+ "], new: ["+ joiner.join(newCreator.getInputs())+ "])");
  }
  this.creatorBinder=newCreatorBinder;
}
