{
  LogLevel currentLevel=getCurrentLogLevel();
  TestLogging levelLogging=testLogging.get(currentLevel);
  TestExceptionFormatter exceptionFormatter=getExceptionFormatter(levelLogging);
  TestEventLogger eventLogger=new TestEventLogger(textOutputFactory,currentLevel,levelLogging,exceptionFormatter);
  addTestListener(eventLogger);
  addTestOutputListener(eventLogger);
  File binaryResultsDir=new File(getTemporaryDir(),"binary-test-results");
  TestReportDataCollector testReportDataCollector=null;
  if (isTestReport() || testFramework instanceof JUnitTestFramework) {
    getProject().delete(binaryResultsDir);
    getProject().mkdir(binaryResultsDir);
    testReportDataCollector=new TestReportDataCollector(binaryResultsDir);
    addTestListener(testReportDataCollector);
    addTestOutputListener(testReportDataCollector);
  }
  TestCountLogger testCountLogger=new TestCountLogger(progressLoggerFactory);
  addTestListener(testCountLogger);
  TestResultProcessor resultProcessor=new TestListenerAdapter(getTestListenerBroadcaster().getSource(),testOutputListenerBroadcaster.getSource());
  try {
    testExecuter.execute(this,resultProcessor);
  }
  finally {
    testListenerBroadcaster.removeAll(asList(eventLogger,testReportDataCollector,testCountLogger));
    testOutputListenerBroadcaster.removeAll(asList(eventLogger,testReportDataCollector));
  }
  if (testReportDataCollector != null) {
    new Binary2JUnitXmlReportGenerator(getTestResultsDir(),testReportDataCollector).generate();
  }
  testFramework.report();
  testFramework=null;
  if (testCountLogger.hadFailures()) {
    handleTestFailures();
  }
}
