{
  final BuildExperimentInvocationInfo invocationInfo=new DefaultBuildExperimentInvocationInfo(experiment,projectDir,phase,iterationNumber,iterationMax);
  final Runnable runner=session.runner(new GradleInvocationCustomizer(){
    @Override public GradleInvocationSpec customize(    GradleInvocationSpec invocationSpec){
      GradleInvocationSpec gradleInvocationSpec=invocationSpec.withAdditionalArgs(createIterationInfoArguments(phase,iterationNumber,iterationMax));
      System.out.println("Run Gradle using JVM opts: " + gradleInvocationSpec.getJvmOpts());
      return gradleInvocationSpec;
    }
  }
);
  if (experiment.getListener() != null) {
    experiment.getListener().beforeInvocation(invocationInfo);
  }
  MeasuredOperation operation=timer.measure(new Action<MeasuredOperation>(){
    @Override public void execute(    MeasuredOperation measuredOperation){
      runner.run();
    }
  }
);
  final AtomicBoolean omitMeasurement=new AtomicBoolean();
  if (experiment.getListener() != null) {
    experiment.getListener().afterInvocation(invocationInfo,operation,new BuildExperimentListener.MeasurementCallback(){
      @Override public void omitMeasurement(){
        omitMeasurement.set(true);
      }
    }
);
  }
  if (!omitMeasurement.get()) {
    if (operation.getException() == null) {
      dataCollector.collect(invocationInfo,operation);
    }
    results.add(operation);
  }
}
