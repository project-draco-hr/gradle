{
  System.out.println();
  System.out.println(String.format("%s ...",experiment.getDisplayName()));
  System.out.println();
  InvocationSpec invocationSpec=experiment.getInvocation();
  if (invocationSpec instanceof GradleInvocationSpec) {
    GradleInvocationSpec invocation=(GradleInvocationSpec)invocationSpec;
    File workingDirectory=invocation.getWorkingDirectory();
    final List<String> additionalJvmOpts=dataCollector.getAdditionalJvmOpts(workingDirectory);
    final List<String> additionalArgs=new ArrayList<String>(dataCollector.getAdditionalArgs(workingDirectory));
    additionalArgs.add("-PbuildExperimentDisplayName=" + experiment.getDisplayName());
    if (System.getProperty("org.gradle.performance.heapdump") != null) {
      additionalArgs.add("-Pheapdump");
    }
    GradleInvocationSpec buildSpec=invocation.withAdditionalJvmOpts(additionalJvmOpts).withAdditionalArgs(additionalArgs);
    File projectDir=buildSpec.getWorkingDirectory();
    GradleSession session=executerProvider.session(buildSpec);
    session.prepare();
    try {
      int warmUpCount=warmupsForExperiment(experiment);
      for (int i=0; i < warmUpCount; i++) {
        System.out.println();
        System.out.println(String.format("Warm-up #%s",i + 1));
        runOnce(session,experiment,new MeasuredOperationList(),projectDir,Phase.WARMUP,i + 1,warmUpCount);
      }
      waitForMillis(experiment,experiment.getSleepAfterWarmUpMillis());
      int invocationCount=invocationsForExperiment(experiment);
      for (int i=0; i < invocationCount; i++) {
        if (i > 0) {
          waitForMillis(experiment,experiment.getSleepAfterTestRoundMillis());
        }
        System.out.println();
        System.out.println(String.format("Test run #%s",i + 1));
        runOnce(session,experiment,results,projectDir,Phase.MEASUREMENT,i + 1,invocationCount);
      }
    }
  finally {
      session.cleanup();
    }
  }
}
