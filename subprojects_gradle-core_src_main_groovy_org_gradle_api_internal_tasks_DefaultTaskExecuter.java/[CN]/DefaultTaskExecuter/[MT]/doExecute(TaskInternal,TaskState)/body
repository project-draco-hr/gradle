{
  if (!task.getEnabled()) {
    logger.info("Skipping execution as task is disabled.");
    return new TaskExecutionResultImpl(task,null,"SKIPPED");
  }
  if (!startParameter.isNoOpt()) {
    boolean skip;
    try {
      skip=!task.getOnlyIf().isSatisfiedBy(task);
    }
 catch (    Throwable t) {
      Throwable failure=new GradleScriptException(String.format("Could not evaluate onlyIf predicate for %s.",task),t,((ProjectInternal)task.getProject()).getBuildScriptSource());
      return new TaskExecutionResultImpl(task,failure,null);
    }
    if (skip) {
      logger.info("Skipping execution as task onlyIf is false.");
      return new TaskExecutionResultImpl(task,null,"SKIPPED as onlyIf is false");
    }
  }
  listener.beforeActions(task);
  state.setExecuting(true);
  try {
    GradleException failure=executeActions(task,state);
    return new TaskExecutionResultImpl(task,failure,null);
  }
  finally {
    state.setExecuting(false);
    listener.afterActions(task);
  }
}
