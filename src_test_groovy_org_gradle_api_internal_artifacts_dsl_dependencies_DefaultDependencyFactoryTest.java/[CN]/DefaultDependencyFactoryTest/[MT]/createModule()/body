{
  final IDependencyImplementationFactory testImplStringFactoryStub=context.mock(IDependencyImplementationFactory.class,"String");
  final ClientModuleFactory clientModuleFactoryStub=context.mock(ClientModuleFactory.class);
  final ClientModule clientModuleMock=context.mock(ClientModule.class);
  DefaultDependencyFactory dependencyFactory=new DefaultDependencyFactory(WrapUtil.toSet(testImplStringFactoryStub),clientModuleFactoryStub);
  final String someNotation1="someNotation1";
  final String someNotation2="someNotation2";
  final String someNotation3="someNotation3";
  final String someNotation4="someNotation4";
  final String someModuleNotation="junit:junit:4.4";
  final Dependency dependencyDummy1=context.mock(Dependency.class,"dep1");
  final Dependency dependencyDummy2=context.mock(Dependency.class,"dep2");
  final Dependency dependencyDummy3=context.mock(Dependency.class,"dep3");
  final Dependency dependencyMock=context.mock(Dependency.class,"dep4");
  context.checking(new Expectations(){
{
      allowing(clientModuleFactoryStub).createClientModule(someModuleNotation);
      will(returnValue(clientModuleMock));
      allowing(testImplStringFactoryStub).createDependency(someNotation1);
      will(returnValue(dependencyDummy1));
      allowing(testImplStringFactoryStub).createDependency(someNotation2);
      will(returnValue(dependencyDummy2));
      allowing(testImplStringFactoryStub).createDependency(someNotation3);
      will(returnValue(dependencyDummy3));
      allowing(testImplStringFactoryStub).createDependency(with(equal(someNotation4)));
      will(returnValue(dependencyMock));
      one(dependencyMock).setTransitive(true);
      one(clientModuleMock).addDependency(dependencyDummy1);
      one(clientModuleMock).addDependency(dependencyDummy2);
      one(clientModuleMock).addDependency(dependencyDummy3);
      one(clientModuleMock).addDependency(dependencyMock);
    }
  }
);
  Closure configureClosure=HelperUtil.toClosure(String.format("{dependency('%s'); dependencies('%s', '%s'); dependency('%s') { transitive = true }}",someNotation1,someNotation2,someNotation3,someNotation4));
  assertThat(dependencyFactory.createModule(someModuleNotation,configureClosure),Matchers.equalTo(clientModuleMock));
}
