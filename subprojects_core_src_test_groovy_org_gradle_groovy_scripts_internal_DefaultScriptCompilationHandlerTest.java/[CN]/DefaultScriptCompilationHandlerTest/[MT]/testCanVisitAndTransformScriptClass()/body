{
  final Transformer visitor=new AbstractScriptTransformer(){
    public String getId(){
      return "id";
    }
    protected int getPhase(){
      return Phases.CANONICALIZATION;
    }
    @Override public void call(    SourceUnit source) throws CompilationFailedException {
      source.getAST().getStatementBlock().visit(new CodeVisitorSupport(){
        @Override public void visitMethodCallExpression(        MethodCallExpression call){
          call.setObjectExpression(new ClassExpression(ClassHelper.make(System.class)));
          call.setMethod(new ConstantExpression("setProperty"));
          ArgumentListExpression arguments=(ArgumentListExpression)call.getArguments();
          arguments.addExpression(new ConstantExpression(TEST_EXPECTED_SYSTEMPROP_KEY));
          arguments.addExpression(new ConstantExpression(TEST_EXPECTED_SYSTEMPROP_VALUE));
        }
      }
);
    }
  }
;
  MetadataExtractingTransformer<?> transformer=new TransformationOnlyMetadataExtractingTransformer(visitor);
  ScriptSource source=scriptSource("transformMe()");
  scriptCompilationHandler.compileToDir(source,classLoader,scriptCacheDir,transformer,classpathClosureName,expectedScriptClass,verifier);
  Script script=scriptCompilationHandler.loadFromDir(source,classLoader,scriptCacheDir,transformer,expectedScriptClass).loadClass().newInstance();
  evaluateScript(script);
}
