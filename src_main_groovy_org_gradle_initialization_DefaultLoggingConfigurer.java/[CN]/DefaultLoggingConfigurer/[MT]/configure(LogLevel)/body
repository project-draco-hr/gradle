{
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  lc.shutdownAndReset();
  ch.qos.logback.classic.Logger rootLogger=lc.getLogger(LoggerContext.ROOT_NAME);
  ConsoleAppender errorConsoleAppender=new ConsoleAppender();
  errorConsoleAppender.setContext(lc);
  errorConsoleAppender.setTarget("System.err");
  errorConsoleAppender.addFilter(createLevelFilter(lc,Level.ERROR,FilterReply.ACCEPT,FilterReply.DENY));
  Level level=Level.INFO;
  ConsoleAppender nonErrorConsoleAppender=new ConsoleAppender();
  nonErrorConsoleAppender.setContext(lc);
  setLayouts(logLevel,errorConsoleAppender,nonErrorConsoleAppender,lc);
  MarkerFilter quietFilter=new MarkerFilter(Logging.QUIET,FilterReply.DENY);
  nonErrorConsoleAppender.addFilter(quietFilter);
  if (!(logLevel == LogLevel.QUIET)) {
    quietFilter.setOnMismatch(FilterReply.NEUTRAL);
    if (logLevel == LogLevel.DEBUG) {
      level=Level.DEBUG;
      nonErrorConsoleAppender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.ACCEPT,FilterReply.NEUTRAL));
      nonErrorConsoleAppender.addFilter(createLevelFilter(lc,Level.DEBUG,FilterReply.ACCEPT,FilterReply.NEUTRAL));
    }
 else {
      if (logLevel == LogLevel.INFO) {
        level=Level.INFO;
        nonErrorConsoleAppender.addFilter(createLevelFilter(lc,Level.INFO,FilterReply.ACCEPT,FilterReply.NEUTRAL));
      }
 else {
        nonErrorConsoleAppender.addFilter(new MarkerFilter(Logging.LIFECYCLE));
      }
    }
    nonErrorConsoleAppender.addFilter(createLevelFilter(lc,Level.WARN,FilterReply.ACCEPT,FilterReply.DENY));
  }
  rootLogger.addAppender(nonErrorConsoleAppender);
  nonErrorConsoleAppender.start();
  rootLogger.addAppender(errorConsoleAppender);
  errorConsoleAppender.start();
  Message.setDefaultLogger(new IvyLoggingAdaper());
  rootLogger.setLevel(level);
}
