{
  Set<Project> projects=Sets.filter(rootProject.getAllprojects(),new Predicate<Project>(){
    @Override public boolean apply(    Project project){
      return hasIdeaPlugin(project);
    }
  }
);
  Iterable<IdeaModule> ideaModules=Iterables.transform(projects,new Function<Project,IdeaModule>(){
    @Override public IdeaModule apply(    Project p){
      return getModule(p);
    }
  }
);
  HierarchicalElementDeduplicator<IdeaModule> deduplicator=new HierarchicalElementDeduplicator<IdeaModule>(new IdeaDeduplicationAdapter());
  Map<IdeaModule,String> deduplicated=deduplicator.deduplicate(ideaModules);
  for (  Map.Entry<IdeaModule,String> entry : deduplicated.entrySet()) {
    entry.getKey().setName(entry.getValue());
  }
}
