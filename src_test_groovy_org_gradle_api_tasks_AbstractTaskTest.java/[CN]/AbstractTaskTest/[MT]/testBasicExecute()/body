{
  final Sequence captureOutput=context.sequence("captureOutput");
  final StandardOutputCapture standardOutputCaptureMock=context.mock(StandardOutputCapture.class);
  getTask().setStandardOutputCapture(standardOutputCaptureMock);
  context.checking(new Expectations(){
{
      one(standardOutputCaptureMock).start();
      inSequence(captureOutput);
      will(returnValue(standardOutputCaptureMock));
      one(standardOutputCaptureMock).stop();
      inSequence(captureOutput);
      will(returnValue(standardOutputCaptureMock));
    }
  }
);
  getTask().setActions(new ArrayList());
  assertFalse(getTask().isExecuted());
  final List<Boolean> actionsCalled=WrapUtil.toList(false,false);
  TaskAction action1=new TaskAction(){
    public void execute(    Task task){
      actionsCalled.set(0,true);
    }
  }
;
  TaskAction action2=new TaskAction(){
    public void execute(    Task task){
      actionsCalled.set(1,true);
    }
  }
;
  getTask().doLast(action1);
  getTask().doLast(action2);
  getTask().execute();
  assertTrue(getTask().isExecuted());
  assertTrue(actionsCalled.get(0));
  assertTrue(actionsCalled.get(1));
  context.assertIsSatisfied();
}
