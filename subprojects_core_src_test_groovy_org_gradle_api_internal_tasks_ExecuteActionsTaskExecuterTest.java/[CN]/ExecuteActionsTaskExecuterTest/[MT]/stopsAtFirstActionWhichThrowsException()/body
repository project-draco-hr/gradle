{
  final Throwable failure=new RuntimeException("failure");
  final Collector<Throwable> wrappedFailure=collector();
  context.checking(new Expectations(){
{
      allowing(task).getActions();
      will(returnValue(toList(action1,action2)));
      one(listener).beforeActions(task);
      inSequence(sequence);
      one(state).setExecuting(true);
      inSequence(sequence);
      one(state).setDidWork(true);
      inSequence(sequence);
      one(standardOutputCapture).start();
      inSequence(sequence);
      one(action1).execute(task);
      will(throwException(failure));
      inSequence(sequence);
      one(standardOutputCapture).stop();
      inSequence(sequence);
      one(state).executed(with(notNullValue(Throwable.class)));
      will(collectTo(wrappedFailure));
      inSequence(sequence);
      one(state).setExecuting(false);
      inSequence(sequence);
      one(listener).afterActions(task);
      inSequence(sequence);
    }
  }
);
  executer.execute(task,state);
  assertThat(wrappedFailure.get(),instanceOf(TaskExecutionException.class));
  TaskExecutionException exception=(TaskExecutionException)wrappedFailure.get();
  assertThat(exception.getTask(),equalTo((Task)task));
  assertThat(exception.getMessage(),equalTo("Execution failed for <task>."));
  assertThat(exception.getCause(),sameInstance(failure));
}
