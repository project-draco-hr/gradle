{
  final Set<Class> taskTypes=new TreeSet<Class>(new Comparator<Class>(){
    public int compare(    Class o1,    Class o2){
      return o1.getSimpleName().compareTo(o2.getSimpleName());
    }
  }
);
  taskTypes.addAll(CollectionUtils.collect(tasks,new Transformer<Class,Task>(){
    public Class transform(    Task original){
      return new DslObject(original).getDeclaredType();
    }
  }
));
  Map<Class,List<Task>> tasksGroupedByType=new HashMap<Class,List<Task>>();
  for (  final Class taskType : taskTypes) {
    tasksGroupedByType.put(taskType,CollectionUtils.filter(tasks,new Spec<Task>(){
      public boolean isSatisfiedBy(      Task element){
        return new DslObject(element).getDeclaredType().equals(taskType);
      }
    }
));
  }
  return tasksGroupedByType;
}
