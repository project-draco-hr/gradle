{
  final Task task1=task("someTask");
  final Task task2=task("someTasks");
  final Task task3=task("sometask");
  final Task task4=task("other");
  context.checking(new Expectations(){
{
      one(resolver).selectAll("ssomeTask",project);
      will(returnValue(tasks(task1,task2,task3,task4)));
    }
  }
);
  TaskNameResolvingBuildExecuter executer=new TaskNameResolvingBuildExecuter(toList("ssomeTask"),resolver);
  try {
    executer.select(gradle);
    fail();
  }
 catch (  TaskSelectionException e) {
    assertThat(e.getMessage(),equalTo("Task 'ssomeTask' not found in [project]. Some candidates are: 'someTask', 'someTasks', 'sometask'."));
  }
}
