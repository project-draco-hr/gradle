{
  final TaskWithBooleanProperty task1=task("name1",TaskWithBooleanProperty.class);
  final Task task2=task("name2");
  context.checking(new Expectations(){
{
      one(resolver).selectAll("name1",project);
      will(returnValue(tasks(task1)));
      one(resolver).selectAll("name2",project);
      will(returnValue(tasks(task2)));
      Sequence sequence=context.sequence("tasks");
      one(task1).setSomeFlag(true);
      one(taskExecuter).addTasks(toSet(task1));
      inSequence(sequence);
      one(taskExecuter).addTasks(toSet(task2));
      inSequence(sequence);
    }
  }
);
  TaskNameResolvingBuildExecuter executer=new TaskNameResolvingBuildExecuter(toList("name1","--all","name2"),resolver);
  executer.select(gradle);
  assertThat(executer.getDisplayName(),equalTo("primary tasks 'name1', 'name2'"));
}
