{
  SetMultimap<String,Task> matches=LinkedHashMultimap.create();
  for (  String path : paths) {
    Multimap<String,Task> tasksByName;
    String baseName;
    String prefix;
    ProjectInternal project=gradle.getDefaultProject();
    if (path.contains(Project.PATH_SEPARATOR)) {
      String projectPath=StringUtils.substringBeforeLast(path,Project.PATH_SEPARATOR);
      projectPath=projectPath.length() == 0 ? Project.PATH_SEPARATOR : projectPath;
      project=findProject(project,projectPath);
      baseName=StringUtils.substringAfterLast(path,Project.PATH_SEPARATOR);
      prefix=project.getPath() + Project.PATH_SEPARATOR;
      tasksByName=taskNameResolver.select(baseName,project);
    }
 else {
      baseName=path;
      prefix="";
      tasksByName=taskNameResolver.selectAll(path,project);
    }
    Collection<Task> tasks=tasksByName.get(baseName);
    if (!tasks.isEmpty()) {
      matches.putAll(path,tasks);
      continue;
    }
    NameMatcher matcher=new NameMatcher();
    String actualName=matcher.find(baseName,tasksByName.keySet());
    if (actualName != null) {
      matches.putAll(prefix + actualName,tasksByName.get(actualName));
      continue;
    }
    throw new TaskSelectionException(matcher.formatErrorMessage("task",project));
  }
  return matches;
}
