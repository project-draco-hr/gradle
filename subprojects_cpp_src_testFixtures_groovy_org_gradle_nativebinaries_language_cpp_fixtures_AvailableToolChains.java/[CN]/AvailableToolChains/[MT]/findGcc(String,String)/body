{
  String name=String.format("gcc %s",versionPrefix);
  GccVersionDeterminer versionDeterminer=new GccVersionDeterminer(new ExecActionFactory(){
    public ExecAction newExecAction(){
      return new DefaultExecAction(TestFiles.resolver());
    }
  }
);
  List<File> gppCandidates=OperatingSystem.current().findAllInPath("g++");
  for (int i=0; i < gppCandidates.size(); i++) {
    File candidate=gppCandidates.get(i);
    GccVersionResult version=versionDeterminer.transform(candidate);
    if (version.isAvailable() && version.getVersion().startsWith(versionPrefix)) {
      InstalledGcc gcc=new InstalledGcc(name);
      if (i > 0) {
        gcc.inPath(candidate.getParentFile());
      }
      return gcc;
    }
  }
  if (hardcodedFallback != null) {
    File fallback=new File(hardcodedFallback);
    if (fallback.isFile()) {
      return new InstalledGcc(name).inPath(fallback.getParentFile());
    }
  }
  return new UnavailableToolChain(name);
}
