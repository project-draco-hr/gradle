{
  NativeBinarySpecInternal binarySpecInternal=(NativeBinarySpecInternal)nativeBinarySpec;
  NativeToolChainInternal toolChain=(NativeToolChainInternal)toolChains.getForPlatform(nativeBinarySpec.getTargetPlatform());
  binarySpecInternal.setToolChain(toolChain);
  PlatformToolProvider toolProvider=toolChain.select((NativePlatformInternal)nativeBinarySpec.getTargetPlatform());
  binarySpecInternal.setPlatformToolProvider(toolProvider);
  File binariesOutputDir=new File(buildDir,"binaries");
  BinaryNamingScheme namingScheme=binarySpecInternal.getNamingScheme();
  File binaryOutputDir=new File(binariesOutputDir,namingScheme.getOutputDirectoryBase());
  String baseName=binarySpecInternal.getComponent().getBaseName();
  if (binarySpecInternal instanceof NativeExecutableBinarySpec) {
    ((NativeExecutableBinarySpec)binarySpecInternal).setExecutableFile(new File(binaryOutputDir,toolProvider.getExecutableName(baseName)));
  }
 else   if (binarySpecInternal instanceof SharedLibraryBinarySpec) {
    ((SharedLibraryBinarySpec)binarySpecInternal).setSharedLibraryFile(new File(binaryOutputDir,toolProvider.getSharedLibraryName(baseName)));
    ((SharedLibraryBinarySpec)binarySpecInternal).setSharedLibraryLinkFile(new File(binaryOutputDir,toolProvider.getSharedLibraryLinkFileName(baseName)));
  }
 else   if (binarySpecInternal instanceof StaticLibraryBinarySpec) {
    ((StaticLibraryBinarySpec)binarySpecInternal).setStaticLibraryFile(new File(binaryOutputDir,toolProvider.getStaticLibraryName(baseName)));
  }
}
