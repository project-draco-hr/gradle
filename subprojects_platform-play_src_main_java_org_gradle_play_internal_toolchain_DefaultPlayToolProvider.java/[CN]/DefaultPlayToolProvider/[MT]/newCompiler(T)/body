{
  if (spec instanceof TwirlCompileSpec) {
    TwirlCompiler twirlCompiler=TwirlCompilerFactory.create(targetPlatform);
    Set<File> twirlClasspath=resolveToolClasspath(twirlCompiler.getDependencyNotation()).getFiles();
    Compiler<TwirlCompileSpec> compiler=new DaemonTwirlCompiler(fileResolver.resolve("."),twirlCompiler,compilerDaemonManager,twirlClasspath,twirlCompiler.getClassLoaderPackages());
    @SuppressWarnings("unchecked") Compiler<T> twirlCompileSpecCompiler=(Compiler<T>)compiler;
    return twirlCompileSpecCompiler;
  }
 else   if (spec instanceof RoutesCompileSpec) {
    RoutesCompileSpec routesCompileSpec=(RoutesCompileSpec)spec;
    VersionedRoutesCompileSpec versionedSpec=RoutesCompileSpecFactory.create(routesCompileSpec,targetPlatform);
    Set<File> routesClasspath=resolveToolClasspath(versionedSpec.getDependencyNotation()).getFiles();
    DaemonPlayCompiler<VersionedRoutesCompileSpec> compiler=new DaemonPlayCompiler<VersionedRoutesCompileSpec>(fileResolver.resolve("."),new RoutesCompiler(),compilerDaemonManager,routesClasspath);
    @SuppressWarnings("unchecked") Compiler<T> routesSpecCompiler=(Compiler<T>)new MappingSpecCompiler<RoutesCompileSpec,VersionedRoutesCompileSpec>(compiler,WrapUtil.toMap(routesCompileSpec,versionedSpec));
    return routesSpecCompiler;
  }
 else   if (spec instanceof JavaScriptCompileSpec) {
    JavaScriptCompileSpec javaScriptCompileSpec=(JavaScriptCompileSpec)spec;
    Set<File> javaScriptCompilerClasspath=resolveToolClasspath(javaScriptCompileSpec.getDependencyNotation()).getFiles();
    @SuppressWarnings("unchecked") Compiler<T> compiler=(Compiler<T>)new DaemonJavaScriptCompiler<JavaScriptCompileSpec>(fileResolver.resolve("."),new JavaScriptCompiler(),compilerDaemonManager,javaScriptCompilerClasspath);
    return compiler;
  }
  throw new IllegalArgumentException(String.format("Cannot create Compiler for unsupported CompileSpec type '%s'",spec.getClass().getSimpleName()));
}
