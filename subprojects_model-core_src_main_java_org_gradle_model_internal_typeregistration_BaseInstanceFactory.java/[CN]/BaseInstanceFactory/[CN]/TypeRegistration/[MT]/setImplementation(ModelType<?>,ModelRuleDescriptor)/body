{
  if (implementationRegistration != null) {
    throw new IllegalStateException(String.format("Cannot register implementation for type '%s' because an implementation for this type was already registered by %s",publicType,implementationRegistration.getSource()));
  }
  if (managedPublicType) {
    throw new IllegalArgumentException(String.format("Cannot specify default implementation for managed type '%s'",publicType));
  }
  if (Modifier.isAbstract(implementationType.getConcreteClass().getModifiers())) {
    throw new IllegalArgumentException(String.format("Implementation type '%s' registered for '%s' must not be abstract",implementationType,publicType));
  }
  try {
    implementationType.getConcreteClass().getConstructor();
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalArgumentException(String.format("Implementation type '%s' registered for '%s' must have a public default constructor",implementationType,publicType));
  }
  Class<?> implementationClass=implementationType.getConcreteClass();
  ImplementationFactory<S,?> factory=findFactory(implementationClass);
  if (factory == null) {
    throw new IllegalArgumentException(String.format("No factory registered to create an instance of implementation class '%s'.",implementationClass.getName()));
  }
  this.implementationRegistration=new ImplementationRegistration<S>(source,implementationType,factory);
}
