{
  ModelSchemaUtils.walkTypeHierarchy(internalViewRegistration.getInternalView().getConcreteClass(),new ModelSchemaUtils.TypeVisitor<V>(){
    @Override public void visitType(    Class<? super V> type){
      if (!type.isAnnotationPresent(Managed.class) && !type.isAssignableFrom(delegateType.getConcreteClass())) {
        throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because the default implementation type '%s' does not implement unmanaged internal view '%s', " + "internal view was registered by %s",publicType,delegateType,type.getName(),internalViewRegistration.getSource()));
      }
    }
  }
);
}
