{
  if (!isManaged(publicType)) {
    throw new IllegalArgumentException(String.format("Type '%s' is not managed",publicType));
  }
  final List<ImplementationInfo> implementationInfos=Lists.newArrayListWithCapacity(1);
  ModelSchemaUtils.walkTypeHierarchy(publicType.getConcreteClass(),new RegistrationHierarchyVisitor<S>(){
    @Override protected void visitRegistration(    TypeRegistration<? extends PUBLIC> registration){
      if (registration != null && registration.implementationRegistration != null) {
        implementationInfos.add(new ImplementationInfoImpl<S>(publicType,registration.implementationRegistration,getInternalViews(publicType)));
      }
    }
  }
);
  if (implementationInfos.isEmpty()) {
    throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because it doesn't extend an interface with a default implementation",publicType));
  }
  return implementationInfos.get(0);
}
