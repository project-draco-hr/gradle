{
  if (!isManaged(publicType)) {
    throw new IllegalArgumentException(String.format("Type '%s' is not managed",publicType));
  }
  final AtomicReference<ImplementationInfoImpl<S>> implementationInfo=new AtomicReference<ImplementationInfoImpl<S>>();
  ModelSchemaUtils.walkTypeHierarchy(publicType.getConcreteClass(),new RegistrationHierarchyVisitor<S>(){
    @Override protected void visitRegistration(    TypeRegistration<? extends PUBLIC> registration){
      if (registration == null || registration.implementationRegistration == null) {
        return;
      }
      if (implementationInfo.get() == null || implementationInfo.get().implementationRegistration.implementationType.isAssignableFrom(registration.implementationRegistration.implementationType)) {
        implementationInfo.set(new ImplementationInfoImpl<S>(publicType,registration.implementationRegistration,getInternalViews(publicType)));
      }
    }
  }
);
  if (implementationInfo.get() == null) {
    throw new IllegalStateException(String.format("Factory registration for '%s' is invalid because it doesn't extend an interface with a default implementation",publicType));
  }
  return implementationInfo.get();
}
