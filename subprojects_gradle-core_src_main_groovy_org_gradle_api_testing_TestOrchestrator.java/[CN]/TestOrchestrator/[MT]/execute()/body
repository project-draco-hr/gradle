{
  initLock.lock();
  try {
    this.context=factory.createContext(this);
  }
  finally {
    initLock.unlock();
  }
  final List<TestOrchestratorAction> actions=new ArrayList<TestOrchestratorAction>();
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final PipelinesManager pipelinesManager=context.getPipelinesManager();
      final TestOrchestrator testOrchestrator=context.getTestOrchestrator();
      final NativeTest testTask=testOrchestrator.getTestTask();
      pipelinesManager.initialize(testTask);
    }
  }
);
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final TestDetectionOrchestrator testDetectionOrchestrator=context.getTestDetectionOrchestrator();
      testDetectionOrchestrator.startDetection();
      logger.debug("test - detection - started");
    }
  }
);
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final TestPipelineSplitOrchestrator pipelineSplitOrchestrator=context.getPipelineSplitOrchestrator();
      final PipelinesManager pipelinesManager=context.getPipelinesManager();
      pipelineSplitOrchestrator.startPipelineSplitting(pipelinesManager);
      logger.debug("test - pipeline splitting - started");
    }
  }
);
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final TestDetectionOrchestrator testDetectionOrchestrator=context.getTestDetectionOrchestrator();
      testDetectionOrchestrator.waitForDetectionEnd();
      logger.debug("test - detection - ended");
    }
  }
);
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final TestPipelineSplitOrchestrator pipelineSplitOrchestrator=context.getPipelineSplitOrchestrator();
      final PipelinesManager pipelinesManager=context.getPipelinesManager();
      pipelineSplitOrchestrator.waitForPipelineSplittingEnded();
      pipelinesManager.pipelineSplittingEnded();
      logger.debug("test - pipeline splitting - ended");
    }
  }
);
  actions.add(new TestOrchestratorAction(){
    public void execute(    TestOrchestratorContext context){
      final PipelinesManager pipelinesManager=context.getPipelinesManager();
      pipelinesManager.waitForExecutionEnd();
    }
  }
);
  final Iterator<TestOrchestratorAction> actionsIterator=actions.iterator();
  while (context.getKeepRunning().get() && actionsIterator.hasNext()) {
    final TestOrchestratorAction currentAction=actionsIterator.next();
    currentAction.execute(context);
  }
  logger.debug("test - execution - ended");
}
