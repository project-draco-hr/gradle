{
  final Collector<TestScript> collector=collector();
  final ClassLoader classLoader=new ClassLoader(){
  }
;
  context.checking(new Expectations(){
{
      one(cacheRepositoryMock).cache("scripts/class-name/Script");
      will(returnValue(cacheBuilder));
      one(cacheBuilder).withProperties(expectedCacheProperties);
      will(returnValue(cacheBuilder));
      one(cacheBuilder).withInitializer(with(notNullValue(Action.class)));
      will(returnValue(cacheBuilder));
      one(cacheBuilder).open();
      will(returnValue(cacheMock));
      one(scriptCompilationHandlerMock).loadFromDir(expectedSource,classLoader,expectedScriptCacheDir,expectedScriptBaseClass);
      will(returnValue(TestScript.class));
      one(scriptRunnerFactoryMock).create(with(notNullValue(TestScript.class)));
      will(collectTo(collector).then(returnValue(expectedScriptRunner)));
    }
  }
);
  assertSame(expectedScriptRunner,scriptProcessor.createCompiler(source).setClassloader(classLoader).compile(expectedScriptBaseClass));
  assertSame(classLoader,collector.get().getContextClassloader());
}
