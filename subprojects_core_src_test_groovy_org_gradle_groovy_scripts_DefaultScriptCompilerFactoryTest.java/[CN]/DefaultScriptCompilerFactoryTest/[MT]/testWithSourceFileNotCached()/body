{
  final Collector<TestScript> testScriptCollector=collector();
  final Collector<Action<PersistentCache>> initActionCollector=collector();
  context.checking(new Expectations(){
{
      one(cacheRepositoryMock).cache("scripts/class-name/Script");
      will(returnValue(cacheBuilder));
      one(cacheBuilder).withProperties(expectedCacheProperties);
      will(returnValue(cacheBuilder));
      one(cacheBuilder).withInitializer(with(notNullValue(Action.class)));
      will(collectTo(initActionCollector).then(returnValue(cacheBuilder)));
      one(cacheBuilder).open();
      will(new CustomAction("run initializer"){
        public Object invoke(        Invocation invocation) throws Throwable {
          initActionCollector.get().execute(cacheMock);
          return cacheMock;
        }
      }
);
      one(scriptCompilationHandlerMock).compileToDir(expectedSource,testClassLoader,expectedScriptCacheDir,null,expectedScriptBaseClass);
      one(scriptCompilationHandlerMock).loadFromDir(expectedSource,testClassLoader,expectedScriptCacheDir,expectedScriptBaseClass);
      will(returnValue(TestScript.class));
      one(scriptRunnerFactoryMock).create(with(notNullValue(TestScript.class)));
      will(collectTo(testScriptCollector).then(returnValue(expectedScriptRunner)));
    }
  }
);
  assertSame(expectedScriptRunner,scriptProcessor.createCompiler(source).compile(expectedScriptBaseClass));
  assertSame(testClassLoader,testScriptCollector.get().getContextClassloader());
  assertEquals(expectedSource,testScriptCollector.get().getScriptSource());
}
