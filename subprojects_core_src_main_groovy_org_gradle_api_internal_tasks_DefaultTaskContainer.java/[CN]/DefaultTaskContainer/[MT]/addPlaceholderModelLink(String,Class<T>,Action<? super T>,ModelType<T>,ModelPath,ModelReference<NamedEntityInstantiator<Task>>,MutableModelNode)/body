{
  modelNode.addLink(ModelCreators.of(ModelReference.of(path),new BiAction<MutableModelNode,List<ModelView<?>>>(){
    @Override public void execute(    MutableModelNode mutableModelNode,    List<ModelView<?>> inputs){
      NamedEntityInstantiator<Task> instantiator=ModelViews.getInstance(inputs.get(0),instantiatorReference);
      final T task=instantiator.create(placeholderName,taskType);
      configure.execute(task);
      DeprecationLogger.whileDisabled(new Runnable(){
        @Override public void run(){
          modelNode.getPrivateData(ModelType.of(TaskContainerInternal.class)).add(task);
        }
      }
);
      mutableModelNode.setPrivateData(taskModelType,task);
    }
  }
).inputs(instantiatorReference).withProjection(new UnmanagedModelProjection<T>(taskModelType,true,true)).descriptor(new SimpleModelRuleDescriptor("tasks.addPlaceholderAction(" + placeholderName + ")")).build());
}
