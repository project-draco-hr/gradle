{
  dependencyDescriptor1=new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("org1","name1","rev1"),false);
  dependencyDescriptor2=new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("org2","name2","rev2"),false);
  dependencyDescriptor3=new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("org3","name3","rev3"),false);
  dependencyDescriptor1.addDependencyConfiguration("compileConf","default");
  dependencyDescriptor2.addDependencyConfiguration("testCompileConf","default");
  artifactDescriptor1=new DefaultDependencyArtifactDescriptor(dependencyDescriptor3,"artifactName31","type31","ext",null,null);
  artifactDescriptor2=new DefaultDependencyArtifactDescriptor(dependencyDescriptor3,"artifactName32","type32","ext",null,null);
  dependencyDescriptor3.addDependencyConfiguration("compileConf","default");
  dependencyDescriptor3.addDependencyConfiguration("testCompileConf","default");
  dependencyDescriptor3.addDependencyArtifact("compileConf",artifactDescriptor1);
  dependencyDescriptor3.addDependencyArtifact("testCompileConf",artifactDescriptor2);
  pomMock=context.mock(MavenPom.class);
  conf2ScopeMappingContainerMock=context.mock(Conf2ScopeMappingContainer.class);
  excludeRuleConverterMock=context.mock(ExcludeRuleConverter.class);
  dependenciesConverter=new DefaultPomDependenciesConverter(excludeRuleConverterMock);
  context.checking(new Expectations(){
{
      allowing(pomMock).getScopeMappings();
      will(returnValue(conf2ScopeMappingContainerMock));
      allowing(conf2ScopeMappingContainerMock).getScope(dependencyDescriptor2.getModuleConfigurations());
      will(returnValue("test"));
      allowing(conf2ScopeMappingContainerMock).getScope(dependencyDescriptor1.getModuleConfigurations());
      will(returnValue("compile"));
    }
  }
);
}
