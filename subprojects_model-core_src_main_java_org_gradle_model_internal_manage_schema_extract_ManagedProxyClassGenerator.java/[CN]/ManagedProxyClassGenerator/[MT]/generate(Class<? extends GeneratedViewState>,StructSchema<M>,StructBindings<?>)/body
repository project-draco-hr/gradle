{
  if (!structBindings.getAllViewSchemas().contains(viewSchema)) {
    throw new IllegalArgumentException(String.format("View '%s' is not supported by struct '%s'",viewSchema.getType(),structBindings.getPublicSchema().getType()));
  }
  ClassWriter visitor=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
  ModelType<M> viewType=viewSchema.getType();
  StringBuilder generatedTypeNameBuilder=new StringBuilder(viewType.getName());
  if (backingStateType == GeneratedViewState.class) {
    generatedTypeNameBuilder.append("$View");
  }
 else {
    generatedTypeNameBuilder.append("$NodeView");
  }
  StructSchema<D> delegateSchema=Cast.uncheckedCast(structBindings.getDelegateSchema());
  if (delegateSchema != null) {
    generatedTypeNameBuilder.append("$").append(delegateSchema.getType().getName().replaceAll("\\.","_"));
  }
  String generatedTypeName=generatedTypeNameBuilder.toString();
  Type generatedType=Type.getType("L" + generatedTypeName.replaceAll("\\.","/") + ";");
  Class<M> viewClass=viewType.getConcreteClass();
  Class<?> superclass;
  final ImmutableSet.Builder<String> interfacesToImplement=ImmutableSet.builder();
  final ImmutableSet.Builder<Class<?>> typesToDelegate=ImmutableSet.builder();
  typesToDelegate.add(viewClass);
  interfacesToImplement.add(GENERATED_VIEW_TYPE.getInternalName());
  if (backingStateType == ModelElementState.class) {
    interfacesToImplement.add(MANAGED_INSTANCE_TYPE);
  }
  if (viewClass.isInterface()) {
    superclass=Object.class;
    interfacesToImplement.add(Type.getInternalName(viewClass));
  }
 else {
    superclass=viewClass;
  }
  if (delegateSchema != null) {
    ModelSchemaUtils.walkTypeHierarchy(delegateSchema.getType().getConcreteClass(),new ModelSchemaUtils.TypeVisitor<D>(){
      @Override public void visitType(      Class<? super D> type){
        if (type.isInterface()) {
          typesToDelegate.add(type);
          interfacesToImplement.add(Type.getInternalName(type));
        }
      }
    }
);
  }
  generateProxyClass(visitor,viewSchema,delegateSchema,interfacesToImplement.build(),typesToDelegate.build(),generatedType,Type.getType(superclass),backingStateType);
  ClassLoader targetClassLoader=viewClass.getClassLoader();
  if (delegateSchema != null) {
    try {
      viewClass.getClassLoader().loadClass(delegateSchema.getType().getConcreteClass().getName());
    }
 catch (    ClassNotFoundException e) {
      targetClassLoader=delegateSchema.getType().getConcreteClass().getClassLoader();
    }
  }
  return defineClass(visitor,targetClassLoader,generatedTypeName);
}
