{
  WeaklyTypeReferencingMethod<?,Void> weakSetter=property.getSetter();
  if (weakSetter == null) {
    return;
  }
  String propertyName=property.getName();
  Class<?> propertyTypeClass=property.getType().getConcreteClass();
  Label calledOutsideOfConstructor=new Label();
  Method setter=weakSetter.getMethod();
  String methodDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,Type.getType(propertyTypeClass));
  MethodVisitor methodVisitor=declareMethod(visitor,setter.getName(),methodDescriptor,AsmClassGeneratorUtils.signature(setter));
  putCanCallSettersFieldValueOnStack(methodVisitor,generatedType);
  jumpToLabelIfStackEvaluatesToTrue(methodVisitor,calledOutsideOfConstructor);
  throwExceptionBecauseCalledOnItself(methodVisitor);
  methodVisitor.visitLabel(calledOutsideOfConstructor);
  putStateFieldValueOnStack(methodVisitor,generatedType);
  putConstantOnStack(methodVisitor,propertyName);
  putFirstMethodArgumentOnStack(methodVisitor,propertyTypeClass);
  if (propertyTypeClass.isPrimitive()) {
    boxType(methodVisitor,propertyTypeClass);
  }
  invokeStateSetMethod(methodVisitor);
  finishVisitingMethod(methodVisitor);
  if (propertyTypeClass.isPrimitive() || BOXED_TYPES.values().contains(propertyTypeClass) || propertyTypeClass.isEnum()|| BigDecimal.class.equals(propertyTypeClass)|| BigInteger.class.equals(propertyTypeClass)|| String.class.equals(propertyTypeClass)) {
    createScalarConvertingSetter(visitor,generatedType,propertyTypeClass,setter,methodDescriptor);
  }
}
