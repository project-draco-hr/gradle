{
  ModelType<?> viewType=viewSchema.getType();
  Class<?> viewClass=viewType.getConcreteClass();
  declareClass(visitor,interfacesToImplement,generatedType,superclassType);
  declareStateField(visitor);
  declareTypeConverterField(visitor);
  declareManagedTypeField(visitor);
  declareCanCallSettersField(visitor);
  writeStaticConstructor(visitor,generatedType,viewClass);
  writeConstructor(visitor,generatedType,superclassType,delegateSchema,Type.getType(backingStateType));
  writeToString(visitor,generatedType,viewClass,delegateSchema);
  writeGeneratedViewMethods(visitor,generatedType);
  if (backingStateType == ModelElementState.class) {
    writeManagedInstanceMethods(visitor,generatedType);
  }
  if (delegateSchema != null) {
    declareDelegateField(visitor,delegateSchema);
    writeDelegateMethods(visitor,generatedType,delegateSchema,typesToDelegate);
  }
  writeGroovyMethods(visitor,viewClass);
  writePropertyMethods(visitor,generatedType,viewSchema,delegateSchema);
  writeHashCodeMethod(visitor,generatedType);
  writeEqualsMethod(visitor,generatedType);
  visitor.visitEnd();
}
