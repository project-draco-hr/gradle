{
  DefaultIdeaModule defaultIdeaModule=new DefaultIdeaModule().setName(ideaModule.getName()).setContentRoots(asList(ideaModule.getContentRoot())).setParent(ideaProject).setInheritOutputDirs(ideaModule.getInheritOutputDirs() != null ? ideaModule.getInheritOutputDirs() : false).setOutputDir(ideaModule.getOutputDir()).setTestOutputDir(ideaModule.getTestOutputDir()).setModuleFileDir(ideaModule.getIml().getGenerateTo()).setSourceDirectories(new LinkedList<File>(ideaModule.getSourceDirs())).setTestDirectories(new LinkedList<File>(ideaModule.getTestSourceDirs())).setExcludeDirectories(new LinkedList<File>(ideaModule.getExcludeDirs()));
  List<IdeaDependency> deps=new LinkedList<IdeaDependency>();
  defaultIdeaModule.setDependencies(deps);
  Set<Dependency> resolved=ideaModule.resolveDependencies();
  List<IdeaDependency> dependencies=new LinkedList<IdeaDependency>();
  for (  Dependency dependency : resolved) {
    if (dependency instanceof SingleEntryModuleLibrary) {
      SingleEntryModuleLibrary d=(SingleEntryModuleLibrary)dependency;
      IdeaDependency defaultDependency=new DefaultIdeaLibraryDependency().setFile(d.getLibraryFile()).setSource(d.getSourceFile()).setJavadoc(d.getJavadocFile()).setScope(d.getScope()).setExported(d.getExported());
      dependencies.add(defaultDependency);
    }
 else     if (dependency instanceof ModuleDependency) {
      ModuleDependency d=(ModuleDependency)dependency;
      IdeaDependency defaultDependency=new DefaultIdeaModuleDependency().setExported(d.getExported()).setScope(d.getScope()).setDependencyModuleName(d.getName());
      dependencies.add(defaultDependency);
    }
  }
  defaultIdeaModule.setDependencies(dependencies);
  modules.add(defaultIdeaModule);
}
