{
  final DependencyManager dependencyManagerMock=context.mock(DependencyManager.class);
  Map resolver1=WrapUtil.toMap("name",RESOLVER_NAME_1);
  resolver1.put("url","http://www.url1.com");
  Map resolver2=WrapUtil.toMap("name",RESOLVER_NAME_2);
  resolver1.put("url","http://www.url2.com");
  final List<String> expectedConfigurations=WrapUtil.toList("conf1");
  upload.setConfigurations(expectedConfigurations);
  upload.setProject(HelperUtil.createRootProject(projectRootDir));
  ((AbstractProject)upload.getProject()).setDependencies(dependencyManagerMock);
  Bundle bundle=new Bundle(upload.getProject(),"bundle",getTasksGraph());
  bundle.setDefaultArchiveTypes(JavaPluginConvention.DEFAULT_ARCHIVE_TYPES);
  AbstractArchiveTask zip1=bundle.zip(WrapUtil.toMap("baseName","zip1"));
  AbstractArchiveTask zip2=bundle.zip(WrapUtil.toMap("baseName","zip2"));
  AbstractArchiveTask zip3=bundle.zip(WrapUtil.toMap("baseName","zip3"));
  zip1.configurations("zip","zip1");
  zip2.configurations("zip2");
  zip2.setPublish(false);
  zip3.configurations("zip","zip3");
  upload.setBundles(WrapUtil.toSet(bundle));
  context.checking(new Expectations(){
{
      one(dependencyManagerMock).publish((List)with(hasItems("conf1","zip","zip1","zip3")),with(equal(upload.getUploadResolvers())),with(equal(false)));
    }
  }
);
  upload.execute();
}
