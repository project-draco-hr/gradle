{
  final URI requestUri=toUri(requestUrl,"plugin request");
  try {
    HttpResponseResource response=resourceAccessor.getRawResource(requestUri);
    try {
      final int statusCode=response.getStatusCode();
      String contentType=response.getContentType();
      if (contentType == null || !contentType.equalsIgnoreCase(JSON)) {
        final String message=String.format("content type is '%s', expected '%s'",contentType == null ? "" : contentType,JSON);
        throw new OutOfProtocolException(requestUrl,message);
      }
      final String clientStatusChecksum=response.getHeaderValue(CLIENT_STATUS_CHECKSUM_HEADER);
      Reader reader=new InputStreamReader(response.openStream(),"utf-8");
      try {
        if (statusCode == 200) {
          T payload=new Gson().fromJson(reader,type);
          validator.execute(payload);
          return new SuccessResponse<T>(payload,statusCode,requestUrl,clientStatusChecksum);
        }
 else         if (statusCode >= 400 && statusCode < 600) {
          ErrorResponse errorResponse=validate(requestUrl,new Gson().fromJson(reader,ErrorResponse.class));
          return new ErrorResponseResponse<T>(errorResponse,statusCode,requestUrl,clientStatusChecksum);
        }
 else {
          throw new OutOfProtocolException(requestUrl,"unexpected HTTP response status " + statusCode);
        }
      }
 catch (      JsonSyntaxException e) {
        throw new OutOfProtocolException(requestUrl,"could not parse response JSON",e);
      }
catch (      JsonIOException e) {
        throw new OutOfProtocolException(requestUrl,"could not parse response JSON",e);
      }
    }
  finally {
      response.close();
    }
  }
 catch (  IOException e) {
    throw ResourceException.getFailed(requestUri,e);
  }
}
