{
  Escaper escaper=UrlEscapers.urlPathSegmentEscaper();
  String escapedId=escaper.escape(pluginRequest.getId().toString());
  String escapedPluginVersion=escaper.escape(pluginRequest.getVersion());
  String escapedGradleVersion=escaper.escape(GradleVersion.current().getVersion());
  final String requestUrl=String.format(portalUrl + REQUEST_URL,escapedGradleVersion,escapedId,escapedPluginVersion);
  final URI requestUri=toUri(requestUrl,"plugin request");
  HttpResponseResource response=null;
  try {
    response=resourceAccessor.getRawResource(requestUri);
    final int statusCode=response.getStatusCode();
    String contentType=response.getContentType();
    if (contentType == null || !contentType.equalsIgnoreCase(JSON)) {
      final String message=String.format("content type is '%s', expected '%s'",contentType == null ? "" : contentType,JSON);
      throw new OutOfProtocolException(requestUrl,message);
    }
    checkForDeprecationMessageHeader(response);
    return response.withContent(new Transformer<Response<PluginUseMetaData>,InputStream>(){
      public Response<PluginUseMetaData> transform(      InputStream inputStream){
        Reader reader;
        try {
          reader=new InputStreamReader(inputStream,"utf-8");
        }
 catch (        UnsupportedEncodingException e) {
          throw new AssertionError(e);
        }
        try {
          if (statusCode == 200) {
            PluginUseMetaData metadata=validate(requestUrl,new Gson().fromJson(reader,PluginUseMetaData.class));
            return new SuccessResponse<PluginUseMetaData>(metadata,statusCode,requestUrl);
          }
 else           if (statusCode >= 400 && statusCode < 600) {
            ErrorResponse errorResponse=validate(requestUrl,new Gson().fromJson(reader,ErrorResponse.class));
            return new ErrorResponseResponse<PluginUseMetaData>(errorResponse,statusCode,requestUrl);
          }
 else {
            throw new OutOfProtocolException(requestUrl,"unexpected HTTP response status " + statusCode);
          }
        }
 catch (        JsonSyntaxException e) {
          throw new OutOfProtocolException(requestUrl,"could not parse response JSON",e);
        }
catch (        JsonIOException e) {
          throw new OutOfProtocolException(requestUrl,"could not parse response JSON",e);
        }
      }
    }
);
  }
 catch (  IOException e) {
    throw new org.gradle.api.UncheckedIOException(e);
  }
 finally {
    try {
      if (response != null) {
        response.close();
      }
    }
 catch (    IOException e) {
      LOGGER.warn("Error closing HTTP resource",e);
    }
  }
}
