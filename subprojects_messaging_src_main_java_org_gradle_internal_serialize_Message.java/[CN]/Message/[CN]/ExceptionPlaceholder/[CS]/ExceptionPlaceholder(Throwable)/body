{
  type=throwable.getClass().getName();
  try {
    stackTrace=throwable.getStackTrace();
  }
 catch (  Throwable ignored) {
    stackTrace=new StackTraceElement[0];
  }
  try {
    message=throwable.getMessage();
  }
 catch (  Throwable failure) {
    getMessageExec=failure;
  }
  try {
    toString=throwable.toString();
  }
 catch (  Throwable failure) {
    toStringRuntimeExec=failure;
  }
  Throwable causeTmp;
  try {
    causeTmp=throwable.getCause();
  }
 catch (  Throwable ignored) {
    causeTmp=null;
  }
  final Throwable causeFinal=causeTmp;
  StreamByteBuffer buffer=new StreamByteBuffer();
  ObjectOutputStream oos=new ExceptionReplacingObjectOutputStream(buffer.getOutputStream()){
    boolean seenFirst;
    @Override protected Object replaceObject(    Object obj) throws IOException {
      if (!seenFirst) {
        seenFirst=true;
        return obj;
      }
      if (obj == causeFinal) {
        return new CausePlaceholder();
      }
      return super.replaceObject(obj);
    }
  }
;
  try {
    oos.writeObject(throwable);
    oos.close();
    serializedException=buffer.readAsByteArray();
  }
 catch (  Throwable ignored) {
  }
  if (causeFinal != null) {
    cause=new ExceptionPlaceholder(causeFinal);
  }
}
