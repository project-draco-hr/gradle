{
  return new SourceTransformTaskConfig(){
    public String getTaskPrefix(){
      return "compile";
    }
    public Class<? extends DefaultTask> getTaskType(){
      return PlatformScalaCompile.class;
    }
    public void configureTask(    Task task,    BinarySpec binarySpec,    LanguageSourceSet sourceSet){
      PlatformScalaCompile compile=(PlatformScalaCompile)task;
      ScalaLanguageSourceSet scalaSourceSet=(ScalaLanguageSourceSet)sourceSet;
      JvmBinarySpec binary=(JvmBinarySpec)binarySpec;
      compile.setScalaClasspath(toolChain.getScalaClasspath());
      compile.setZincClasspath(toolChain.getZincClasspath());
      compile.getScalaCompileOptions().setUseAnt(false);
      compile.getScalaCompileOptions().setFork(true);
      File analysisFile=new File(task.getTemporaryDir(),String.format("compilerAnalysis/%s.analysis",task.getName()));
      compile.getScalaCompileOptions().getIncrementalOptions().setAnalysisFile(analysisFile);
      compile.setDescription(String.format("Compiles %s.",scalaSourceSet));
      compile.setDestinationDir(binary.getClassesDir());
      compile.setSource(scalaSourceSet.getSource());
      compile.setClasspath(scalaSourceSet.getCompileClasspath().getFiles());
      compile.setTargetCompatibility(binary.getTargetPlatform().getTargetCompatibility().toString());
      compile.setSourceCompatibility(binary.getTargetPlatform().getTargetCompatibility().toString());
      compile.dependsOn(scalaSourceSet);
      binary.getTasks().getJar().dependsOn(compile);
    }
  }
;
}
