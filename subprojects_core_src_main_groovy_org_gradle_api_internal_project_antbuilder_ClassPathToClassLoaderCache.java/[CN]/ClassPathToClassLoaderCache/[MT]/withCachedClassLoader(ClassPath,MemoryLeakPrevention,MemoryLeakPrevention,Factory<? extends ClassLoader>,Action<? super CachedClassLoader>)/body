{
  CachedClassLoader cachedClassLoader;
  lock.lock();
  try {
    CacheEntry cacheEntry=cacheEntries.get(libClasspath);
    cachedClassLoader=maybeGet(cacheEntry);
    if (cachedClassLoader == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format("Classloader cache miss for classpath : %s. Creating classloader.",libClasspath.getAsURIs()));
      }
      ClassLoader classLoader=factory.create();
      cachedClassLoader=new CachedClassLoader(libClasspath,classLoader);
      cacheEntry=new CacheEntry(libClasspath,cachedClassLoader);
      Cleanup cleanup=new Cleanup(libClasspath,cachedClassLoader,finalizerThread.getReferenceQueue(),classLoader,gradleToIsolatedLeakPrevention,antToGradleLeakPrevention);
      finalizerThread.putCleanup(libClasspath,cleanup);
      cacheEntries.put(libClasspath,cacheEntry);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format("Classloader found in cache: %s",libClasspath.getAsURIs()));
      }
    }
    inUseClassLoaders.add(cachedClassLoader);
  }
  finally {
    lock.unlock();
  }
  try {
    action.execute(cachedClassLoader);
  }
  finally {
    lock.lock();
    try {
      inUseClassLoaders.remove(cachedClassLoader);
    }
  finally {
      lock.unlock();
    }
  }
}
