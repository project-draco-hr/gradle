{
  lock.readLock().lock();
  CacheEntry cacheEntry=cacheEntries.get(libClasspath);
  CachedClassLoader cachedClassLoader=maybeGet(cacheEntry);
  if (cacheEntry == null || cachedClassLoader == null) {
    lock.readLock().unlock();
    lock.writeLock().lock();
    try {
      cacheEntry=cacheEntries.get(libClasspath);
      cachedClassLoader=maybeGet(cacheEntry);
      if (cacheEntry == null || cachedClassLoader == null) {
        ClassLoader classLoader=factory.create();
        cachedClassLoader=new CachedClassLoader(libClasspath,classLoader);
        cacheEntry=new CacheEntry(libClasspath,cachedClassLoader);
        Cleanup cleanup=new Cleanup(libClasspath,cachedClassLoader,finalizerThread.getReferenceQueue(),classLoader,gradleToIsolatedLeakPrevention,antToGradleLeakPrevention);
        finalizerThread.putCleanup(libClasspath,cleanup);
        cacheEntries.put(libClasspath,cacheEntry);
      }
      lock.readLock().lock();
    }
  finally {
      lock.writeLock().unlock();
    }
  }
  lock.readLock().unlock();
  action.execute(cachedClassLoader);
}
