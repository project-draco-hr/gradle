{
  ConventionMapping taskMapping=task.getConventionMapping();
  taskMapping.map("findbugsClasspath",Callables.returning(configuration));
  taskMapping.map("ignoreFailures",new Callable<Boolean>(){
    @Override public Boolean call(){
      return extension.isIgnoreFailures();
    }
  }
);
  taskMapping.map("effort",new Callable<String>(){
    @Override public String call(){
      return extension.getEffort();
    }
  }
);
  taskMapping.map("reportLevel",new Callable<String>(){
    @Override public String call(){
      return extension.getReportLevel();
    }
  }
);
  taskMapping.map("visitors",new Callable<Collection<String>>(){
    @Override public Collection<String> call(){
      return extension.getVisitors();
    }
  }
);
  taskMapping.map("omitVisitors",new Callable<Collection<String>>(){
    @Override public Collection<String> call(){
      return extension.getOmitVisitors();
    }
  }
);
  taskMapping.map("excludeFilterConfig",new Callable<TextResource>(){
    @Override public TextResource call(){
      return extension.getExcludeFilterConfig();
    }
  }
);
  taskMapping.map("includeFilterConfig",new Callable<TextResource>(){
    @Override public TextResource call(){
      return extension.getIncludeFilterConfig();
    }
  }
);
  taskMapping.map("excludeBugsFilterConfig",new Callable<TextResource>(){
    @Override public TextResource call(){
      return extension.getExcludeBugsFilterConfig();
    }
  }
);
  taskMapping.map("extraArgs",new Callable<Collection<String>>(){
    @Override public Collection<String> call(){
      return extension.getExtraArgs();
    }
  }
);
}
