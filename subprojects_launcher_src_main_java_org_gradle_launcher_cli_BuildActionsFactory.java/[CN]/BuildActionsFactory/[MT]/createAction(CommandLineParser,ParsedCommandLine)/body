{
  BuildLayoutParameters layout=new BuildLayoutParameters();
  layoutConverter.convert(commandLine,layout);
  Map<String,String> properties=new HashMap<String,String>();
  layoutToPropertiesConverter.convert(layout,properties);
  propertiesConverter.convert(commandLine,properties);
  StartParameter startParameter=new StartParameter();
  propertiesToStartParameterConverter.convert(properties,startParameter);
  commandLineConverter.convert(commandLine,startParameter);
  DaemonParameters daemonParameters=new DaemonParameters(layout,startParameter.getSystemPropertiesArgs());
  propertiesToDaemonParametersConverter.convert(properties,daemonParameters);
  daemonConverter.convert(commandLine,daemonParameters);
  WatchModeParameters watchModeParameters=new WatchModeParameters();
  watchModeConverter.convert(commandLine,watchModeParameters);
  if (commandLine.hasOption(STOP)) {
    return stopAllDaemons(daemonParameters,loggingServices);
  }
  if (commandLine.hasOption(FOREGROUND)) {
    ForegroundDaemonConfiguration conf=new ForegroundDaemonConfiguration(daemonParameters.getUid(),daemonParameters.getBaseDir(),daemonParameters.getIdleTimeout());
    return new ForegroundDaemonAction(loggingServices,conf);
  }
  if (daemonParameters.getDaemonUsage().isEnabled()) {
    return runBuildWithDaemon(startParameter,daemonParameters,loggingServices,watchModeParameters);
  }
  if (canUseCurrentProcess(daemonParameters)) {
    return runBuildInProcess(startParameter,daemonParameters,loggingServices,watchModeParameters);
  }
  return runBuildInSingleUseDaemon(startParameter,daemonParameters,loggingServices,watchModeParameters);
}
