{
  languages.withType(JavaLanguagePlugin.Java.class).all(new Action<JavaLanguagePlugin.Java>(){
    @Override public void execute(    JavaLanguagePlugin.Java java){
      java.registerPlatformJavaCompileConfig(new JavaLanguagePlugin.Java.PlatformJavaCompileConfig(){
        @Override public void configureJavaCompile(        BinarySpec spec,        JavaSourceSet sourceSet,        PlatformJavaCompile javaCompile){
          if (spec instanceof JUnitTestSuiteBinarySpec) {
            JUnitTestSuiteBinarySpec testSuiteBinary=(JUnitTestSuiteBinarySpec)spec;
            JvmBinarySpec testedBinary=testSuiteBinary.getTestedBinary();
            if (testedBinary instanceof JarBinarySpecInternal) {
              FileCollection classpath=javaCompile.getClasspath();
              JvmAssembly assembly=((WithJvmAssembly)testedBinary).getAssembly();
              ArtifactDependencyResolver dependencyResolver=serviceRegistry.get(ArtifactDependencyResolver.class);
              RepositoryHandler repositories=serviceRegistry.get(RepositoryHandler.class);
              List<ResolutionAwareRepository> resolutionAwareRepositories=CollectionUtils.collect(repositories,Transformers.cast(ResolutionAwareRepository.class));
              JvmComponentSpec testedComponent=JvmTestSuites.getTestedComponent(serviceRegistry,testSuiteBinary.getTestSuite().getTestedComponent());
              JvmLibrarySpec jvmLibrarySpec=(JvmLibrarySpec)testedComponent;
              BaseDependencyResolvingClasspath transitiveCompileClasspath=new BaseDependencyResolvingClasspath((BinarySpecInternal)testedBinary,"test suite",dependencyResolver,resolutionAwareRepositories,new LocalComponentResolveContext(((BinarySpecInternal)testedBinary).getId(),DefaultVariantsMetaData.extractFrom(testedBinary,schemaStore),collectDependencies(testedBinary,testedComponent,((JarBinarySpecInternal)testedBinary).getApiDependencies()),UsageKind.RUNTIME,testedBinary.getDisplayName()));
              FileCollection fullClasspath=new UnionFileCollection(classpath,transitiveCompileClasspath,new SimpleFileCollection(assembly.getClassDirectories()),new SimpleFileCollection(assembly.getResourceDirectories()));
              javaCompile.setClasspath(fullClasspath);
              javaCompile.dependsOn(((WithJvmAssembly)testedBinary).getAssembly());
            }
          }
        }
      }
);
    }
  }
);
}
