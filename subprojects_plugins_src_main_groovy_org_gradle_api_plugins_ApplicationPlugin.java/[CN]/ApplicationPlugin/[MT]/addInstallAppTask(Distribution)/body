{
  Sync installTask=project.getTasks().create(TASK_INSTALL_NAME,Sync.class);
  installTask.setDescription("Installs the project as a JVM application along with libs and OS specific scripts.");
  installTask.setGroup(APPLICATION_GROUP);
  installTask.with(distribution.getContents());
  installTask.into(new Callable<File>(){
    @Override public File call() throws Exception {
      return project.file(String.valueOf(project.getBuildDir()) + "/install/" + pluginConvention.getApplicationName());
    }
  }
);
  installTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      DeprecationLogger.nagUserOfReplacedTask(ApplicationPlugin.TASK_INSTALL_NAME,DistributionPlugin.TASK_INSTALL_NAME);
    }
  }
);
  return installTask;
}
