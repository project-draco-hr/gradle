{
  try {
    PotentialPlugin potentialPlugin=pluginRegistry.lookup(pluginId);
    Class<? extends Plugin<?>> pluginClass=potentialPlugin.asImperativeClass();
    if (pluginClass == null) {
      String message=String.format("The type for id '%s' (class: '%s') is not a plugin implementing the Plugin interface. Please use PluginAware.withPlugin() instead to detect it.",pluginId,potentialPlugin.asClass().getName());
      throw new IllegalArgumentException(message);
    }
  }
 catch (  UnknownPluginException e) {
  }
  matching(new Spec<Plugin>(){
    public boolean isSatisfiedBy(    Plugin element){
      return pluginRegistry.hasId(element.getClass(),pluginId);
    }
  }
).all(action);
}
