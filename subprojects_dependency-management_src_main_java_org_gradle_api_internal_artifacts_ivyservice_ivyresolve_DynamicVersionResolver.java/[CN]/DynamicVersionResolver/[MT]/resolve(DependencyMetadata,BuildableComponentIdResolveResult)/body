{
  ModuleVersionSelector requested=dependency.getRequested();
  LOGGER.debug("Attempting to resolve version for {} using repositories {}",requested,repositoryNames);
  List<Throwable> errors=new ArrayList<Throwable>();
  List<RepositoryResolveState> resolveStates=new ArrayList<RepositoryResolveState>();
  for (  ModuleComponentRepository repository : repositories) {
    resolveStates.add(new RepositoryResolveState(dependency,repository));
  }
  final RepositoryChainModuleResolution latestResolved=findLatestModule(resolveStates,errors);
  if (latestResolved != null) {
    LOGGER.debug("Using {} from {}",latestResolved.module.getId(),latestResolved.repository);
    for (    Throwable error : errors) {
      LOGGER.debug("Discarding resolve failure.",error);
    }
    result.resolved(metaDataFactory.transform(latestResolved));
    return;
  }
  if (!errors.isEmpty()) {
    result.failed(new ModuleVersionResolveException(requested,errors));
  }
 else {
    notFound(result,requested,resolveStates);
  }
}
