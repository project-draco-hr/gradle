{
  LOGGER.debug("Resolving {}",configuration);
  return ivyContextManager.withIvy(new Transformer<ResolverResults,Ivy>(){
    public ResolverResults transform(    Ivy ivy){
      IvyAdapter ivyAdapter=ivyFactory.create(configuration,repositories,ivy);
      DependencyToModuleVersionResolver dependencyResolver=ivyAdapter.getDependencyToModuleResolver();
      dependencyResolver=new ClientModuleResolver(dependencyResolver);
      ProjectDependencyResolver projectDependencyResolver=new ProjectDependencyResolver(projectModuleRegistry,dependencyResolver,moduleDescriptorConverter);
      dependencyResolver=projectDependencyResolver;
      DependencyToModuleVersionIdResolver idResolver=new LazyDependencyToModuleResolver(dependencyResolver,ivyAdapter.getVersionMatcher());
      idResolver=new VersionForcingDependencyToModuleResolver(idResolver,configuration.getResolutionStrategy().getDependencyResolveRule());
      ModuleConflictResolver conflictResolver;
      if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
        conflictResolver=new StrictConflictResolver();
      }
 else {
        conflictResolver=new LatestModuleConflictResolver();
      }
      conflictResolver=new VersionSelectionReasonResolver(conflictResolver);
      DependencyGraphBuilder builder=new DependencyGraphBuilder(resolvedArtifactFactory,idResolver,projectDependencyResolver,conflictResolver,cacheLockingManager,new DefaultDependencyToConfigurationResolver());
      ResolutionResultBuilder resultBuilder=new ResolutionResultBuilder();
      DefaultLenientConfiguration result=builder.resolve(configuration,resultBuilder);
      return new ResolverResults(new DefaultResolvedConfiguration(result),resultBuilder.getResult());
    }
  }
);
}
