{
  LOGGER.debug("Resolving {}",configuration);
  return ivyContextManager.withIvy(new Transformer<ResolverResults,Ivy>(){
    public ResolverResults transform(    Ivy ivy){
      IvyAdapter ivyAdapter=ivyFactory.create(configuration,repositories,ivy);
      DependencyToModuleVersionResolver dependencyResolver=ivyAdapter.getDependencyToModuleResolver();
      dependencyResolver=new ClientModuleResolver(dependencyResolver);
      ProjectDependencyResolver projectDependencyResolver=new ProjectDependencyResolver(projectModuleRegistry,dependencyResolver,moduleDescriptorConverter);
      dependencyResolver=projectDependencyResolver;
      DependencyToModuleVersionIdResolver idResolver=new LazyDependencyToModuleResolver(dependencyResolver,ivyAdapter.getVersionMatcher());
      idResolver=new VersionForcingDependencyToModuleResolver(idResolver,configuration.getResolutionStrategy().getDependencyResolveRule());
      ModuleConflictResolver conflictResolver;
      if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
        conflictResolver=new StrictConflictResolver();
      }
 else {
        conflictResolver=new LatestModuleConflictResolver();
      }
      conflictResolver=new VersionSelectionReasonResolver(conflictResolver);
      DependencyGraphBuilder graphBuilder=new DependencyGraphBuilder(idResolver,projectDependencyResolver,conflictResolver,new DefaultDependencyToConfigurationResolver());
      ResolvedConfigurationListener newResultsBuilder=new ResolutionResultBuilder();
      DefaultResolvedConfigurationBuilder oldResultsBuilder=new DefaultResolvedConfigurationBuilder(resolvedArtifactFactory);
      graphBuilder.resolve(configuration,newResultsBuilder,oldResultsBuilder);
      DefaultLenientConfiguration result=new DefaultLenientConfiguration(configuration,oldResultsBuilder,cacheLockingManager);
      return new ResolverResults(new DefaultResolvedConfiguration(result),newResultsBuilder.getResult());
    }
  }
);
}
