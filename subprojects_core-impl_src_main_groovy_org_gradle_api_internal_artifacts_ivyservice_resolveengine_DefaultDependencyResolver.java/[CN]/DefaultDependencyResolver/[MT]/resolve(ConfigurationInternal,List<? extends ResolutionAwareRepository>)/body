{
  LOGGER.debug("Resolving {}",configuration);
  IvyAdapter ivyAdapter=ivyFactory.create(configuration,repositories);
  DependencyToModuleVersionResolver dependencyResolver=ivyAdapter.getDependencyToModuleResolver();
  dependencyResolver=new ClientModuleResolver(dependencyResolver);
  ProjectDependencyResolver projectDependencyResolver=new ProjectDependencyResolver(projectModuleRegistry,dependencyResolver,moduleDescriptorConverter);
  dependencyResolver=projectDependencyResolver;
  DependencyToModuleVersionIdResolver idResolver=new LazyDependencyToModuleResolver(dependencyResolver,ivyAdapter.getResolveData().getSettings().getVersionMatcher());
  idResolver=new VersionForcingDependencyToModuleResolver(idResolver,configuration.getResolutionStrategy().getDependencyResolveRule());
  ModuleConflictResolver conflictResolver;
  if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
    conflictResolver=new StrictConflictResolver();
  }
 else {
    conflictResolver=new LatestModuleConflictResolver();
  }
  ModuleConflictResolver actualResolver=new VersionSelectionReasonResolver(conflictResolver);
  DependencyGraphBuilder builder=new DependencyGraphBuilder(resolvedArtifactFactory,idResolver,projectDependencyResolver,actualResolver,cacheLockingManager,new DefaultDependencyToConfigurationResolver());
  ResolutionResultBuilder resultBuilder=new ResolutionResultBuilder();
  DefaultLenientConfiguration result=builder.resolve(configuration,resultBuilder);
  return new ResolverResults(new DefaultResolvedConfiguration(result),resultBuilder.getResult());
}
