{
  LOGGER.debug("Resolving {}",configuration);
  return ivyContextManager.withIvy(new Transformer<ResolverResults,Ivy>(){
    public ResolverResults transform(    Ivy ivy){
      IvyAdapter ivyAdapter=ivyFactory.create(configuration,repositories);
      DependencyToModuleVersionResolver dependencyResolver=ivyAdapter.getDependencyToModuleResolver();
      dependencyResolver=new ClientModuleResolver(dependencyResolver);
      ProjectDependencyResolver projectDependencyResolver=new ProjectDependencyResolver(projectModuleRegistry,dependencyResolver,moduleDescriptorConverter);
      dependencyResolver=projectDependencyResolver;
      DependencyToModuleVersionIdResolver idResolver=new LazyDependencyToModuleResolver(dependencyResolver,ivyAdapter.getVersionMatcher());
      idResolver=new VersionForcingDependencyToModuleResolver(idResolver,configuration.getResolutionStrategy().getDependencyResolveRule());
      ModuleConflictResolver conflictResolver;
      if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
        conflictResolver=new StrictConflictResolver();
      }
 else {
        conflictResolver=new LatestModuleConflictResolver(ivyAdapter.getLatestStrategy());
      }
      conflictResolver=new VersionSelectionReasonResolver(conflictResolver);
      DependencyGraphBuilder builder=new DependencyGraphBuilder(idResolver,projectDependencyResolver,conflictResolver,new DefaultDependencyToConfigurationResolver());
      ResolvedConfigurationListener newGraphBuilder=new StreamingResolutionResultBuilder();
      BinaryStore binaryStore=storeFactory.createBinaryStore(configuration);
      Store<TransientConfigurationResults> resultsCache=storeFactory.createCachedStore(configuration);
      TransientResultsStore resultsStore=new TransientResultsStore(binaryStore,resultsCache);
      DefaultResolvedConfigurationBuilder oldGraphBuilder=new DefaultResolvedConfigurationBuilder(resolvedArtifactFactory,resultsStore);
      builder.resolve(configuration,newGraphBuilder,oldGraphBuilder);
      DefaultLenientConfiguration result=new DefaultLenientConfiguration(configuration,oldGraphBuilder,cacheLockingManager);
      return new ResolverResults(new DefaultResolvedConfiguration(result),newGraphBuilder.complete());
    }
  }
);
}
