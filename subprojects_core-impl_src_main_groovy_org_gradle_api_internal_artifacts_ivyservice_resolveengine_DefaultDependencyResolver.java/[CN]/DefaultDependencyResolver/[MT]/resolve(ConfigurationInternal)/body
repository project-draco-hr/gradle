{
  LOGGER.debug("Resolving {}",configuration);
  Ivy ivy=ivyFactory.create(configuration.getResolutionStrategy());
  DependencyResolver resolver=ivy.getSettings().getDefaultResolver();
  ResolveOptions options=new ResolveOptions();
  options.setDownload(false);
  options.setConfs(WrapUtil.toArray(configuration.getName()));
  ResolveData resolveData=new ResolveData(ivy.getResolveEngine(),options);
  VersionMatcher versionMatcher=ivy.getSettings().getVersionMatcher();
  DependencyToModuleResolver dependencyResolver=new IvyResolverBackedDependencyToModuleResolver(ivy,resolveData,resolver,versionMatcher);
  dependencyResolver=new VersionForcingDependencyToModuleResolver(dependencyResolver,configuration.getResolutionStrategy().getForcedModules());
  IvyResolverBackedArtifactToFileResolver artifactResolver=new IvyResolverBackedArtifactToFileResolver(resolver);
  ModuleConflictResolver conflictResolver;
  if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
    conflictResolver=new StrictConflictResolver();
  }
 else {
    conflictResolver=new LatestModuleConflictResolver();
  }
  DependencyGraphBuilder builder=new DependencyGraphBuilder(moduleDescriptorConverter,resolvedArtifactFactory,artifactResolver,dependencyResolver,conflictResolver);
  DefaultLenientConfiguration result=builder.resolve(configuration,resolveData);
  return new DefaultResolvedConfiguration(result);
}
