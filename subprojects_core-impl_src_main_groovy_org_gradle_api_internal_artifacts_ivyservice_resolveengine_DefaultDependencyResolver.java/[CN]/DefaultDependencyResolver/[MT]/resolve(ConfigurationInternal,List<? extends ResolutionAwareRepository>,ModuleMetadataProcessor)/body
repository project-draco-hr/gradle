{
  LOGGER.debug("Resolving {}",configuration);
  return ivyContextManager.withIvy(new Transformer<ResolverResults,Ivy>(){
    public ResolverResults transform(    Ivy ivy){
      DependencyToModuleVersionResolver dependencyResolver=ivyFactory.create(configuration,repositories,metadataProcessor);
      dependencyResolver=new ClientModuleResolver(dependencyResolver);
      ProjectDependencyResolver projectDependencyResolver=new ProjectDependencyResolver(projectModuleRegistry,dependencyResolver,localComponentFactory);
      dependencyResolver=projectDependencyResolver;
      DependencyToModuleVersionIdResolver idResolver=new LazyDependencyToModuleResolver(dependencyResolver,versionMatcher);
      idResolver=new VersionForcingDependencyToModuleResolver(idResolver,configuration.getResolutionStrategy().getDependencyResolveRule());
      ModuleConflictResolver conflictResolver;
      if (configuration.getResolutionStrategy().getConflictResolution() instanceof StrictConflictResolution) {
        conflictResolver=new StrictConflictResolver();
      }
 else {
        conflictResolver=new LatestModuleConflictResolver(latestStrategy);
      }
      conflictResolver=new VersionSelectionReasonResolver(conflictResolver);
      DependencyGraphBuilder builder=new DependencyGraphBuilder(idResolver,projectDependencyResolver,conflictResolver,new DefaultDependencyToConfigurationResolver());
      StoreSet stores=storeFactory.createStoreSet();
      BinaryStore newModelStore=stores.nextBinaryStore();
      Store<ResolvedComponentResult> newModelCache=stores.oldModelStore();
      ResolutionResultBuilder newModelBuilder=new StreamingResolutionResultBuilder(newModelStore,newModelCache);
      BinaryStore oldModelStore=stores.nextBinaryStore();
      Store<TransientConfigurationResults> oldModelCache=stores.newModelStore();
      TransientConfigurationResultsBuilder oldTransientModelBuilder=new TransientConfigurationResultsBuilder(oldModelStore,oldModelCache);
      DefaultResolvedConfigurationBuilder oldModelBuilder=new DefaultResolvedConfigurationBuilder(resolvedArtifactFactory,oldTransientModelBuilder);
      builder.resolve(configuration,newModelBuilder,oldModelBuilder);
      DefaultLenientConfiguration result=new DefaultLenientConfiguration(configuration,oldModelBuilder,cacheLockingManager);
      return new ResolverResults(new DefaultResolvedConfiguration(result),newModelBuilder.complete());
    }
  }
);
}
