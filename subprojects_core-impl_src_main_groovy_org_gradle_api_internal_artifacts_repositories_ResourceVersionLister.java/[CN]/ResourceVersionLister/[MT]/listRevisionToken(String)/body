{
  pattern=standardize(pattern);
  if (!pattern.contains(REVISION_TOKEN)) {
    LOGGER.info("revision token not defined in pattern {}.",pattern);
    return Collections.emptyList();
  }
  String prefix=pattern.substring(0,pattern.indexOf(REVISION_TOKEN));
  if (revisionMatchesDirectoryName(pattern)) {
    return listAll(prefix);
  }
 else {
    int parentFolderSlashIndex=prefix.lastIndexOf(fileSeparator);
    String revisionParentFolder=parentFolderSlashIndex == -1 ? "" : prefix.substring(0,parentFolderSlashIndex + 1);
    LOGGER.debug("using {} to list all in {} ",repository,revisionParentFolder);
    List<String> all=repository.list(revisionParentFolder);
    if (all == null) {
      throw new ResourceNotFoundException(String.format("Cannot list versions from %s.",revisionParentFolder));
    }
    LOGGER.debug("found {} urls",all.size());
    Pattern regexPattern=createRegexPattern(pattern,parentFolderSlashIndex);
    List<String> ret=filterMatchedValues(all,regexPattern);
    LOGGER.debug("{} matched {}" + pattern,ret.size(),pattern);
    return ret;
  }
}
