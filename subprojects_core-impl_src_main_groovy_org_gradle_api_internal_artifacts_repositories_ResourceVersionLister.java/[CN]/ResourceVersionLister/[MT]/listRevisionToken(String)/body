{
  String fileSep=repository.getFileSeparator();
  pattern=repository.standardize(pattern);
  String tokenString=IvyPatternHelper.getTokenString(IvyPatternHelper.REVISION_KEY);
  int index=pattern.indexOf(tokenString);
  if (index == -1) {
    LOGGER.info("Unable to find revision token in pattern {}.",pattern);
  }
 else   if (tokenIsWholeDirectoryName(pattern,fileSep,tokenString,index)) {
    String root=pattern.substring(0,index);
    return listAll(root);
  }
 else {
    int slashIndex=pattern.substring(0,index).lastIndexOf(fileSep);
    String root=slashIndex == -1 ? "" : pattern.substring(0,slashIndex);
    LOGGER.debug("using {} to list all in {} ",repository,root);
    List<String> all=repository.list(root);
    if (all == null) {
      throw new ResourceNotFoundException(String.format("Can not load %s for listing resources",root));
    }
    LOGGER.debug("found {} urls",all.size());
    Pattern regexPattern=createRegexPattern(pattern,fileSep,slashIndex);
    List ret=getMatchedValues(all,regexPattern);
    LOGGER.debug("{} matched {}" + pattern,ret.size(),pattern);
    return ret;
  }
  return Collections.emptyList();
}
