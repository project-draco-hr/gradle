{
  final String enumString=notation.toString();
  List<? extends T> enumConstants=Arrays.asList(type.getEnumConstants());
  T match=CollectionUtils.findFirst(enumConstants,new Spec<T>(){
    public boolean isSatisfiedBy(    T enumValue){
      return enumValue.name().equalsIgnoreCase(enumString);
    }
  }
);
  if (match == null) {
    throw new TypeConversionException(String.format("Cannot convert string value '%s' to an enum value of type '%s' (valid case insensitive values: %s)",enumString,type.getName(),Joiner.on(", ").join(CollectionUtils.collect(Arrays.asList(type.getEnumConstants()),new Transformer<String,T>(){
      @Override public String transform(      T t){
        return t.name();
      }
    }
))));
  }
  result.converted(match);
}
