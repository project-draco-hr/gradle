{
  java.util.regex.Matcher matcher=CAUSE_PATTERN.matcher(problem);
  String description;
  List<String> causes=new ArrayList<String>();
  if (!matcher.find()) {
    description=TextUtil.normaliseLineSeparators(problem.trim());
  }
 else {
    description=TextUtil.normaliseLineSeparators(problem.substring(0,matcher.start()).trim());
    while (true) {
      int pos=matcher.end();
      int prefix=matcher.group(1).length();
      String prefixPattern=toPrefixPattern(prefix);
      if (matcher.find(pos)) {
        String cause=TextUtil.normaliseLineSeparators(problem.substring(pos,matcher.start()).trim().replaceAll(prefixPattern,""));
        causes.add(cause);
      }
 else {
        String cause=TextUtil.normaliseLineSeparators(problem.substring(pos).trim().replaceAll(prefixPattern,""));
        causes.add(cause);
        break;
      }
    }
  }
  return new Problem(description,causes);
}
