{
  final FileSet testClassFileSet=new FileSet();
  testClassFileSet.setProject(antBuilder.getAntProject());
  testClassFileSet.setDir(testClassDirectory);
  if (!scanForTestClasses) {
    if (includePatterns.isEmpty()) {
      includePatterns.add("**/*Tests.class");
      includePatterns.add("**/*Test.class");
    }
    if (excludePatterns.isEmpty()) {
      excludePatterns.add("**/Abstract*.class");
    }
  }
  if (includePatterns != null && !includePatterns.isEmpty())   testClassFileSet.appendIncludes(includePatterns.toArray(new String[includePatterns.size()]));
  if (excludePatterns != null && !excludePatterns.isEmpty())   testClassFileSet.appendExcludes(excludePatterns.toArray(new String[excludePatterns.size()]));
  final Iterator testClassFilesIterator=testClassFileSet.iterator();
  final Set<String> testClassNames=new HashSet<String>();
  while (testClassFilesIterator.hasNext()) {
    final FileResource fileResource=(FileResource)testClassFilesIterator.next();
    if (!fileResource.isDirectory() && fileResource.getFile().getAbsolutePath().endsWith(".class")) {
      final String fileResourceName=fileResource.getName();
      logger.debug("test-class-scan : scanning {}",fileResourceName);
      if (scanForTestClasses) {
        if (!testFramework.isTestClass(fileResource.getFile())) {
          logger.debug("test-class-scan : discarded {} not a test class",fileResourceName);
        }
      }
 else       testClassNames.add(fileResourceName);
    }
  }
  if (scanForTestClasses)   return testFramework.getTestClassNames();
 else   return testClassNames;
}
