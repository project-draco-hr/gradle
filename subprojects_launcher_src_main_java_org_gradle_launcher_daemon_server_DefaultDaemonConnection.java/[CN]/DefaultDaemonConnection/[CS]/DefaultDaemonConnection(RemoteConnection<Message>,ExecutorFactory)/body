{
  this.connection=connection;
  stdinQueue=new StdinQueue(executorFactory);
  disconnectQueue=new DisconnectQueue();
  cancelQueue=new CancelQueue(executorFactory);
  receiveQueue=new ReceiveQueue();
  executor=executorFactory.create("Handler for " + connection.toString());
  executor.execute(new Runnable(){
    public void run(){
      Throwable failure=null;
      try {
        while (true) {
          Object message;
          try {
            message=connection.receive();
          }
 catch (          Exception e) {
            if (LOGGER.isDebugEnabled()) {
              LOGGER.debug(String.format("thread %s: Could not receive message from client.",Thread.currentThread().getId()),e);
            }
            failure=e;
            return;
          }
          if (message == null) {
            LOGGER.debug("thread {}: Received end-of-input from client.",Thread.currentThread().getId());
            return;
          }
          if (message instanceof InputMessage) {
            LOGGER.debug("thread {}: Received IO message from client: {}",Thread.currentThread().getId(),message);
            stdinQueue.add((InputMessage)message);
          }
 else           if (message instanceof Cancel) {
            LOGGER.debug("thread {}: Received cancel message from client: {}",Thread.currentThread().getId(),message);
            cancelQueue.add((Cancel)message);
          }
 else {
            LOGGER.debug("thread {}: Received non-IO message from client: {}",Thread.currentThread().getId(),message);
            receiveQueue.add(message);
          }
        }
      }
  finally {
        stdinQueue.disconnect();
        cancelQueue.disconnect();
        disconnectQueue.disconnect();
        receiveQueue.disconnect(failure);
      }
    }
  }
);
}
