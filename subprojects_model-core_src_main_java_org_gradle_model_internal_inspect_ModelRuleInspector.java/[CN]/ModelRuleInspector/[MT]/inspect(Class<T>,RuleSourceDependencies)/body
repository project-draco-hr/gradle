{
  validate(source);
  final Method[] methods=source.getDeclaredMethods();
  Arrays.sort(methods,new Comparator<Method>(){
    public int compare(    Method o1,    Method o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  ImmutableList.Builder<ModelRuleRegistration> registrations=ImmutableList.builder();
  for (  Method method : methods) {
    if (method.getTypeParameters().length > 0) {
      throw invalid(method,"cannot have type variables (i.e. cannot be a generic method)");
    }
    MethodRuleDefinition<?,?> ruleDefinition=DefaultMethodRuleDefinition.create(source,method);
    MethodModelRuleExtractor handler=getMethodHandler(ruleDefinition);
    if (handler != null) {
      validate(method);
      ModelRuleRegistration registration=handler.registration(ruleDefinition,dependencies);
      if (registration != null) {
        registrations.add(registration);
      }
    }
  }
  return registrations.build();
}
