{
  int modifiers=source.getModifiers();
  if (Modifier.isInterface(modifiers)) {
    invalid(source,"must be a class, not an interface");
  }
  if (Modifier.isAbstract(modifiers)) {
    invalid(source,"class cannot be abstract");
  }
  if (source.getEnclosingClass() != null) {
    if (Modifier.isStatic(modifiers)) {
      if (Modifier.isPrivate(modifiers)) {
        invalid(source,"class cannot be private");
      }
    }
 else {
      invalid(source,"enclosed classes must be static and non private");
    }
  }
  Class<?> superclass=source.getSuperclass();
  if (!superclass.equals(Object.class)) {
    invalid(source,"cannot have superclass");
  }
  Constructor<?>[] constructors=source.getDeclaredConstructors();
  if (constructors.length > 1) {
    invalid(source,"cannot have more than one constructor");
  }
  Constructor constructor=constructors[0];
  if (constructor.getParameterTypes().length > 0) {
    invalid(source,"constructor cannot take any arguments");
  }
  Field[] fields=source.getDeclaredFields();
  for (  Field field : fields) {
    int fieldModifiers=field.getModifiers();
    if (!field.isSynthetic() && !(Modifier.isStatic(fieldModifiers) && Modifier.isFinal(fieldModifiers))) {
      invalid(source,"field " + field.getName() + " is not static final");
    }
  }
}
