{
  int modifiers=source.getModifiers();
  if (Modifier.isInterface(modifiers)) {
    throw invalid(source,"must be a class, not an interface");
  }
  if (Modifier.isAbstract(modifiers)) {
    throw invalid(source,"class cannot be abstract");
  }
  if (source.getEnclosingClass() != null) {
    if (Modifier.isStatic(modifiers)) {
      if (Modifier.isPrivate(modifiers)) {
        throw invalid(source,"class cannot be private");
      }
    }
 else {
      throw invalid(source,"enclosed classes must be static and non private");
    }
  }
  if (!source.getSuperclass().equals(RuleSource.class)) {
    throw invalid(source,String.format("rule source classes have to directly extend %s",RuleSource.class.getName()));
  }
  Constructor<?>[] constructors=source.getDeclaredConstructors();
  for (  Constructor<?> constructor : constructors) {
    if (constructor.getParameterTypes().length > 0) {
      throw invalid(source,"cannot declare a constructor that takes arguments");
    }
  }
  try {
    Constructor<?> constructor=constructors[0];
    constructor.setAccessible(true);
    constructor.newInstance();
  }
 catch (  InvocationTargetException e) {
    throw invalid(source,"instance creation failed",e.getCause());
  }
catch (  InstantiationException e) {
    throw invalid(source,"instance creation failed",e);
  }
catch (  IllegalAccessException e) {
    throw invalid(source,"must have an accessible constructor",e);
  }
  Field[] fields=source.getDeclaredFields();
  for (  Field field : fields) {
    int fieldModifiers=field.getModifiers();
    if (!field.isSynthetic() && !(Modifier.isStatic(fieldModifiers) && Modifier.isFinal(fieldModifiers))) {
      throw invalid(source,"field " + field.getName() + " is not static final");
    }
  }
}
