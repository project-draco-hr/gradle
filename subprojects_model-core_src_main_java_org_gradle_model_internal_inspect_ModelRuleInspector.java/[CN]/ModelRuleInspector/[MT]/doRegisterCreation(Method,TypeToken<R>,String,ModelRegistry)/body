{
  ReflectiveRule.bind(modelRegistry,method,new Action<List<ReflectiveRule.BindableParameter<?>>>(){
    public void execute(    List<ReflectiveRule.BindableParameter<?>> bindableParameters){
      @SuppressWarnings("unchecked") final Class<T> clazz=(Class<T>)method.getDeclaringClass();
      @SuppressWarnings("unchecked") Class<R> returnTypeClass=(Class<R>)returnType.getRawType();
      final JavaMethod<T,R> methodWrapper=JavaReflectionUtil.method(clazz,returnTypeClass,method);
      List<String> inputPaths=Lists.transform(bindableParameters,new Function<ReflectiveRule.BindableParameter<?>,String>(){
        public String apply(        ReflectiveRule.BindableParameter<?> input){
          return input.getPath().toString();
        }
      }
);
      modelRegistry.create(inputPaths,new ModelCreator<R>(){
        public ModelReference<R> getReference(){
          return new ModelReference<R>(new ModelPath(modelName),new ModelType<R>(returnType));
        }
        public R create(        Inputs inputs){
          T instance=Modifier.isStatic(method.getModifiers()) ? null : toInstance(clazz);
          if (inputs.size() == 0) {
            return methodWrapper.invoke(instance);
          }
 else {
            Object[] args=new Object[inputs.size()];
            int i=0;
            for (            ModelElement<?> input : inputs) {
              args[i++]=input.getInstance();
            }
            return methodWrapper.invoke(instance,args);
          }
        }
        public ModelRuleSourceDescriptor getSourceDescriptor(){
          return new MethodModelRuleSourceDescriptor(method);
        }
      }
);
    }
  }
);
}
