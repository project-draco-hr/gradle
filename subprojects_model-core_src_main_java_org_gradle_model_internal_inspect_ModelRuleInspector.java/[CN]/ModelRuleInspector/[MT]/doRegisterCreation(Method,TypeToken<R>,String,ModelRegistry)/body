{
  ReflectiveRule.bind(modelRegistry,method,false,new Action<List<ReflectiveRule.BindableParameter<?>>>(){
    public void execute(    final List<ReflectiveRule.BindableParameter<?>> bindableParameters){
      @SuppressWarnings("unchecked") final Class<T> clazz=(Class<T>)method.getDeclaringClass();
      @SuppressWarnings("unchecked") Class<R> returnTypeClass=(Class<R>)returnType.getRawType();
      final JavaMethod<T,R> methodWrapper=JavaReflectionUtil.method(clazz,returnTypeClass,method);
      final ModelType<R> type=new ModelType<R>(returnType);
      modelRegistry.create(new ModelCreator(){
        private final ModelPromise promise=new SingleTypeModelPromise(type);
        private final ModelPath path=new ModelPath(modelName);
        private List<ModelReference<?>> bindings=Lists.transform(bindableParameters,new Function<ReflectiveRule.BindableParameter<?>,ModelReference<?>>(){
          @Nullable public ModelReference<?> apply(          ReflectiveRule.BindableParameter<?> input){
            return ModelReference.of(input.getPath(),input.getType());
          }
        }
);
        public List<? extends ModelReference<?>> getInputBindings(){
          return bindings;
        }
        public ModelPath getPath(){
          return path;
        }
        public ModelPromise getPromise(){
          return promise;
        }
        public ModelAdapter create(        Inputs inputs){
          R instance=invoke(inputs);
          if (instance == null) {
            throw new ModelRuleExecutionException(getSourceDescriptor(),"rule returned null");
          }
          return InstanceModelAdapter.of(type,instance);
        }
        private R invoke(        Inputs inputs){
          T instance=Modifier.isStatic(method.getModifiers()) ? null : toInstance(clazz);
          if (inputs.size() == 0) {
            return methodWrapper.invoke(instance);
          }
 else {
            Object[] args=new Object[inputs.size()];
            for (int i=0; i < inputs.size(); i++) {
              args[i]=inputs.get(i,bindings.get(i).getType()).getInstance();
            }
            return methodWrapper.invoke(instance,args);
          }
        }
        public ModelRuleSourceDescriptor getSourceDescriptor(){
          return new MethodModelRuleSourceDescriptor(method);
        }
      }
);
    }
  }
);
}
