{
  LOGGER.info("start() called on daemon - {}",daemonContext);
  lifecycleLock.lock();
  try {
    if (stateCoordinator != null) {
      throw new IllegalStateException("cannot start daemon as it is already running");
    }
    SecureRandom secureRandom=new SecureRandom();
    byte[] token=new byte[16];
    secureRandom.nextBytes(token);
    registryUpdater=new DomainRegistryUpdater(daemonRegistry,daemonContext,token);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        try {
          daemonRegistry.remove(connectorAddress);
        }
 catch (        Exception e) {
          LOGGER.debug("VM shutdown hook was unable to remove the daemon address from the registry. It will be cleaned up later.",e);
        }
      }
    }
);
    Runnable onStartCommand=new Runnable(){
      @Override public void run(){
        registryUpdater.onStartActivity();
      }
    }
;
    Runnable onFinishCommand=new Runnable(){
      @Override public void run(){
        registryUpdater.onCompleteActivity();
      }
    }
;
    stateCoordinator=new DaemonStateCoordinator(executorFactory,onStartCommand,onFinishCommand);
    connectionHandler=new DefaultIncomingConnectionHandler(commandExecuter,daemonContext,stateCoordinator,executorFactory,token);
    Runnable connectionErrorHandler=new Runnable(){
      @Override public void run(){
        stateCoordinator.stop();
      }
    }
;
    connectorAddress=connector.start(connectionHandler,connectionErrorHandler);
    LOGGER.debug("Daemon starting at: {}, with address: {}",new Date(),connectorAddress);
    registryUpdater.onStart(connectorAddress);
  }
  finally {
    lifecycleLock.unlock();
  }
  LOGGER.lifecycle(DaemonMessages.PROCESS_STARTED);
}
