{
  Iterable<ExtractedModelRule> extractedRules=ruleExtractor.extract(rules);
  for (  ExtractedModelRule extractedRule : extractedRules) {
    if (!extractedRule.getRuleDependencies().isEmpty()) {
      throw new IllegalStateException("Rule source " + rules + " cannot have plugin dependencies (introduced by rule "+ extractedRule+ ")");
    }
    if (extractedRule.getType().equals(ExtractedModelRule.Type.CREATOR)) {
      if (scope.equals(ModelPath.ROOT)) {
        DefaultModelRegistry.this.create(extractedRule.getCreator());
      }
 else {
        throw new InvalidModelRuleDeclarationException("Rule " + extractedRule.getCreator().getDescriptor() + " cannot be applied at the scope of model element "+ scope+ " as creation rules cannot be used when applying rule sources to particular elements");
      }
    }
 else     if (extractedRule.getType().equals(ExtractedModelRule.Type.ACTION)) {
      DefaultModelRegistry.this.apply(scope,extractedRule.getActionRole(),extractedRule.getAction());
    }
 else {
      throw new IllegalStateException("unexpected extracted rule type: " + extractedRule.getType());
    }
  }
}
