{
  GoalGraph graph=new GoalGraph();
  boolean newInputsBound=true;
  while (newInputsBound || !nodesToBeValidated.isEmpty()) {
    while (!nodesToBeValidated.isEmpty()) {
      ModelNodeInternal node=nodesToBeValidated.removeFirst();
      transitionTo(graph,graph.nodeAtState(new NodeAtState(node.getPath(),RulesDefined)));
    }
    if (unboundRules.isEmpty()) {
      return;
    }
    newInputsBound=false;
    RuleBinder[] unboundBinders=unboundRules.toArray(new RuleBinder[unboundRules.size()]);
    for (    RuleBinder binder : unboundBinders) {
      transitionTo(graph,new TryBindInputs(binder));
      newInputsBound=newInputsBound || binder.isBound();
    }
  }
  if (!unboundRules.isEmpty()) {
    SortedSet<RuleBinder> sortedBinders=new TreeSet<RuleBinder>(new Comparator<RuleBinder>(){
      @Override public int compare(      RuleBinder o1,      RuleBinder o2){
        return o1.getDescriptor().toString().compareTo(o2.getDescriptor().toString());
      }
    }
);
    sortedBinders.addAll(unboundRules);
    throw unbound(sortedBinders);
  }
}
