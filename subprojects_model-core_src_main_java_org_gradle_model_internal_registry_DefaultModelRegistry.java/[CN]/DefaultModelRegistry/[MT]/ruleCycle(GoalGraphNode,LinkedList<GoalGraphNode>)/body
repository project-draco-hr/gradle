{
  List<String> path=new ArrayList<String>();
  int pos=queue.indexOf(brokenGoal);
  ListIterator<GoalGraphNode> iterator=queue.listIterator(pos + 1);
  while (iterator.hasPrevious()) {
    GoalGraphNode goal=iterator.previous();
    goal.attachToCycle(path);
  }
  brokenGoal.attachToCycle(path);
  Formatter out=new Formatter();
  out.format("A cycle has been detected in model rule dependencies. References forming the cycle:");
  String last=null;
  StringBuilder indent=new StringBuilder("");
  for (int i=0; i < path.size(); i++) {
    String node=path.get(i);
    if (node.equals(last)) {
      continue;
    }
    last=node;
    if (i == 0) {
      out.format("%n%s%s",indent,node);
    }
 else {
      out.format("%n%s\\- %s",indent,node);
      indent.append("   ");
    }
  }
  return new ConfigurationCycleException(out.toString());
}
