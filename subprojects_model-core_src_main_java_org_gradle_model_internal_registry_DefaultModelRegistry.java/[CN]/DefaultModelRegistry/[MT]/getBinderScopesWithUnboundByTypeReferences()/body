{
  Iterable<ModelPath> binderScopesWithUnboundByTypeReferences=FluentIterable.from(binders).filter(new Predicate<RuleBinder<?>>(){
    public boolean apply(    RuleBinder<?> binder){
      return binder.getHasUnboundTypeReferences();
    }
  }
).transform(new Function<RuleBinder<?>,ModelPath>(){
    public ModelPath apply(    RuleBinder<?> input){
      return input.getScope();
    }
  }
);
  return ImmutableSet.copyOf(binderScopesWithUnboundByTypeReferences);
}
