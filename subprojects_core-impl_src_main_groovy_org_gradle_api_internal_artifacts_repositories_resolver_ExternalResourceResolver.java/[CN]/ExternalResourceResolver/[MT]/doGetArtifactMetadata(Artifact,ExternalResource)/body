{
  if (artifact.isMetadata()) {
    ModuleRevisionId dependencyRevisionId=artifact.getId().getModuleRevisionId();
    LocallyAvailableExternalResource cachedResource;
    try {
      cachedResource=repositoryCacheManager.downloadAndCacheArtifactFile(artifact.getId(),resourceDownloader,resource);
    }
 catch (    IOException e) {
      LOGGER.warn("Problem while downloading module descriptor: {}: {}",resource,e.getMessage());
      return null;
    }
    return metaDataParser.parseMetaData(new ExternalResourceResolverDescriptorParseContext(nestedResolver,this,dependencyRevisionId),cachedResource);
  }
 else {
    DefaultModuleDescriptor md=DefaultModuleDescriptor.newDefaultInstance(artifact.getModuleRevisionId());
    md.setStatus("integration");
    return new ModuleDescriptorAdapter(artifact.getModuleRevisionId(),md);
  }
}
