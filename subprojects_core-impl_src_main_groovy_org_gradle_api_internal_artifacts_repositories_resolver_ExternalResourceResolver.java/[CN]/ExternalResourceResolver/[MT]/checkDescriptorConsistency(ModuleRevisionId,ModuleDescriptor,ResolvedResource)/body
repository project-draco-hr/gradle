{
  List<String> errors=new ArrayList<String>();
  if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
    errors.add("bad organisation: expected='" + mrid.getOrganisation() + "' found='"+ md.getModuleRevisionId().getOrganisation()+ "'");
  }
  if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
    errors.add("bad module name: expected='" + mrid.getName() + "' found='"+ md.getModuleRevisionId().getName()+ "'");
  }
  if (mrid.getBranch() != null && !mrid.getBranch().equals(md.getModuleRevisionId().getBranch())) {
    errors.add("bad branch name: expected='" + mrid.getBranch() + "' found='"+ md.getModuleRevisionId().getBranch()+ "'");
  }
  if (ivyRef.getRevision() != null && !ivyRef.getRevision().startsWith("working@")) {
    ModuleRevisionId expectedMrid=ModuleRevisionId.newInstance(mrid,ivyRef.getRevision());
    if (!getVersionMatcher().accept(expectedMrid,md)) {
      errors.add("bad revision: expected='" + ivyRef.getRevision() + "' found='"+ md.getModuleRevisionId().getRevision()+ "'");
    }
  }
  if (!getSettings().getStatusManager().isStatus(md.getStatus())) {
    errors.add("bad status: '" + md.getStatus() + "'; ");
  }
  if (errors.size() > 0) {
    throw new ParseException(String.format("inconsistent module descriptor file found in '%s': %s",ivyRef.getResource(),errors.toString()),0);
  }
}
