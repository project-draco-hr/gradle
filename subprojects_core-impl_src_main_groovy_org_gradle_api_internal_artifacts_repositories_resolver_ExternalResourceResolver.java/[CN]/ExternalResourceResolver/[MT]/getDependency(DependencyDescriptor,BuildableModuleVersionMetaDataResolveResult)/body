{
  ModuleRevisionId moduleRevisionId=dependencyDescriptor.getDependencyRevisionId();
  boolean isDynamic=getVersionMatcher().isDynamic(moduleRevisionId);
  ResolvedArtifact ivyRef=findIvyFileRef(dependencyDescriptor);
  if (ivyRef == null) {
    if (!isAllownomd()) {
      LOGGER.debug("No ivy file found for module '{}' in repository '{}'.",moduleRevisionId,getName());
      result.missing();
      return;
    }
    DefaultModuleDescriptor generatedModuleDescriptor=DefaultModuleDescriptor.newDefaultInstance(moduleRevisionId,dependencyDescriptor.getAllDependencyArtifacts());
    ResolvedArtifact artifactRef=findAnyArtifact(generatedModuleDescriptor);
    if (artifactRef == null) {
      LOGGER.debug("No ivy file nor artifact found for module '{}' in repository '{}'.",moduleRevisionId,getName());
      result.missing();
    }
 else {
      long lastModified=artifactRef.resource.getLastModified();
      if (lastModified != 0) {
        generatedModuleDescriptor.setLastModified(lastModified);
      }
      LOGGER.debug("No ivy file found for module '{}' in repository '{}', using default data instead.",moduleRevisionId,getName());
      if (isDynamic) {
        generatedModuleDescriptor.setResolvedModuleRevisionId(artifactRef.artifact.getModuleRevisionId());
      }
      result.resolved(generatedModuleDescriptor,isChanging(generatedModuleDescriptor),null);
    }
  }
 else {
    try {
      ModuleVersionMetaData moduleVersionMetaData;
      if (ivyRef instanceof DownloadedAndParsedMetaDataArtifact) {
        moduleVersionMetaData=((DownloadedAndParsedMetaDataArtifact)ivyRef).moduleVersionMetaData;
      }
 else {
        moduleVersionMetaData=parse(ivyRef.artifact.getId(),ivyRef.resource);
      }
      ModuleDescriptor descriptor=moduleVersionMetaData.getDescriptor();
      if (isCheckconsistency()) {
        checkDescriptorConsistency(moduleRevisionId,descriptor,ivyRef);
      }
      LOGGER.debug("Ivy file found for module '{}' in repository '{}'.",moduleRevisionId,getName());
      result.resolved(descriptor,isChanging(descriptor),null);
    }
 catch (    MetaDataParseException e) {
      result.failed(new ModuleVersionResolveException(moduleRevisionId,e));
    }
  }
}
