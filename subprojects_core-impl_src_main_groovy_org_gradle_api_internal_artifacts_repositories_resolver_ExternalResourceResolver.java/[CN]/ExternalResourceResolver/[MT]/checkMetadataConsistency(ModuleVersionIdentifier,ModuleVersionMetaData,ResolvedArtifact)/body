{
  List<String> errors=new ArrayList<String>();
  if (!expectedId.getGroup().equals(metadata.getId().getGroup())) {
    errors.add("bad group: expected='" + expectedId.getGroup() + "' found='"+ metadata.getId().getGroup()+ "'");
  }
  if (!expectedId.getName().equals(metadata.getId().getName())) {
    errors.add("bad module name: expected='" + expectedId.getName() + "' found='"+ metadata.getId().getName()+ "'");
  }
  if (!expectedId.getVersion().equals(metadata.getId().getVersion())) {
    errors.add("bad version: expected='" + expectedId.getVersion() + "' found='"+ metadata.getId().getVersion()+ "'");
  }
  if (!metadata.getStatusScheme().contains(metadata.getStatus())) {
    errors.add("bad status: '" + metadata.getStatus() + "'; ");
  }
  if (errors.size() > 0) {
    throw new MetaDataParseException(String.format("inconsistent module metadata found. Descriptor: %s Errors: %s",ivyRef.resource,Joiner.on(SystemProperties.getLineSeparator()).join(errors)));
  }
}
