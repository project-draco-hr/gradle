{
  String requestedVersion=requestedRevision.getRevision();
  String name=getName();
  for (  VersionList.ListedVersion listedVersion : versions.sortLatestFirst(latestStrategy)) {
    String foundVersion=listedVersion.getVersion();
    if (!versionMatcher.accept(requestedVersion,foundVersion)) {
      LOGGER.debug(name + ": rejected by version matcher: " + foundVersion);
      continue;
    }
    boolean needsMetadata=versionMatcher.needModuleMetadata(requestedVersion,foundVersion);
    artifact=DefaultArtifact.cloneWithAnotherMrid(artifact,ModuleRevisionId.newInstance(requestedRevision,foundVersion));
    String resourcePath=listedVersion.getPattern().toPath(artifact);
    ExternalResource resource=getResource(resourcePath,artifact.getId(),forDownload || needsMetadata);
    String description=foundVersion + " [" + resource+ "]";
    if (!resource.exists()) {
      LOGGER.debug(name + ": unreachable: " + description);
      discardResource(resource);
      continue;
    }
    if (needsMetadata) {
      MutableModuleVersionMetaData metaData=getArtifactMetadata(artifact,resource);
      if (metaData == null) {
        LOGGER.debug(name + ": impossible to get module descriptor resource: " + description);
        discardResource(resource);
        continue;
      }
      metadataProcessor.process(new ModuleDetailsAdapter(metaData));
      if (!versionMatcher.accept(requestedVersion,metaData)) {
        LOGGER.debug(name + ": md rejected by version matcher: " + description);
        discardResource(resource);
        continue;
      }
      return new DownloadedAndParsedMetaDataArtifact(resource,artifact,metaData);
    }
    return new ResolvedArtifact(resource,artifact);
  }
  return null;
}
