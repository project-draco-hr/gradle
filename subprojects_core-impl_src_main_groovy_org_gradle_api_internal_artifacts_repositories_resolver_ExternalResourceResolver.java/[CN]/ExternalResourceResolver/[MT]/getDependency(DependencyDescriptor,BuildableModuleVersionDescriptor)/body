{
  DependencyDescriptor nsDd=fromSystem(dependencyDescriptor);
  ModuleRevisionId systemMrid=dependencyDescriptor.getDependencyRevisionId();
  ModuleRevisionId nsMrid=nsDd.getDependencyRevisionId();
  boolean isDynamic=getVersionMatcher().isDynamic(systemMrid);
  ResolvedResource ivyRef=findIvyFileRef(nsDd);
  ModuleDescriptor nsMd;
  ModuleDescriptor systemMd;
  if (ivyRef == null) {
    if (!isAllownomd()) {
      LOGGER.debug("No ivy file found for module '{}' in repository '{}'.",systemMrid,getName());
      result.missing();
      return;
    }
    nsMd=DefaultModuleDescriptor.newDefaultInstance(nsMrid,nsDd.getAllDependencyArtifacts());
    ResolvedResource artifactRef=findFirstArtifactRef(nsMd);
    if (artifactRef == null) {
      LOGGER.debug("No ivy file nor artifact found for module '{}' in repository '{}'.",systemMrid,getName());
      result.missing();
    }
 else {
      long lastModified=artifactRef.getLastModified();
      if (lastModified != 0 && nsMd instanceof DefaultModuleDescriptor) {
        ((DefaultModuleDescriptor)nsMd).setLastModified(lastModified);
      }
      LOGGER.debug("No ivy file found for module '{}' in repository '{}', using default data instead.",systemMrid,getName());
      if (isDynamic) {
        nsMd.setResolvedModuleRevisionId(ModuleRevisionId.newInstance(nsMrid,artifactRef.getRevision()));
      }
      systemMd=toSystem(nsMd);
      result.resolved(systemMd,isChanging(systemMd),null);
    }
  }
 else {
    try {
      ResolvedModuleRevision rmr=null;
      if (ivyRef instanceof MDResolvedResource) {
        rmr=((MDResolvedResource)ivyRef).getResolvedModuleRevision();
      }
      if (rmr == null) {
        rmr=parse(ivyRef,dependencyDescriptor);
      }
      nsMd=rmr.getDescriptor();
      systemMd=toSystem(nsMd);
      if (isCheckconsistency()) {
        checkDescriptorConsistency(systemMrid,systemMd,ivyRef);
        checkDescriptorConsistency(nsMrid,nsMd,ivyRef);
      }
      LOGGER.debug("Ivy file found for module '{}' in repository '{}'.",systemMrid,getName());
      result.resolved(systemMd,isChanging(systemMd),null);
    }
 catch (    ParseException e) {
      result.failed(new ModuleVersionResolveException(systemMrid,e));
    }
  }
}
