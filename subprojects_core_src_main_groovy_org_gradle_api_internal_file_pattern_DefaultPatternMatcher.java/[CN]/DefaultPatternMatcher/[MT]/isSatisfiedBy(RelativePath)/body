{
  ListIterator<PatternStep> patternIt=steps.listIterator();
  ListIterator<String> testIt=pathToTest.segmentIterator();
  boolean seenGreedy=false;
  PatternStep patternStep;
  while (testIt.hasNext()) {
    String nextToTest=testIt.next();
    if (!patternIt.hasNext()) {
      return false;
    }
    patternStep=patternIt.next();
    if (patternStep.isGreedy()) {
      seenGreedy=true;
      advancePatternStepToNextNonGreedy(patternIt);
      if (!patternIt.hasNext()) {
        return true;
      }
      patternStep=patternIt.next();
      while (!(patternStep.matches(nextToTest) && ((patternIt.hasNext() == testIt.hasNext()) || nextPatternIsGreedy(patternIt)))) {
        if (!testIt.hasNext()) {
          return partialMatchDirs && !pathToTest.isFile();
        }
        nextToTest=testIt.next();
      }
    }
 else {
      if (!patternStep.matches(nextToTest)) {
        if (seenGreedy) {
          rewindPatternStepToPreviousGreedy(patternIt);
          testIt.previous();
        }
 else {
          return false;
        }
      }
    }
  }
  if (!patternIt.hasNext()) {
    return true;
  }
  return isTerminatingMatch(pathToTest,patternIt);
}
