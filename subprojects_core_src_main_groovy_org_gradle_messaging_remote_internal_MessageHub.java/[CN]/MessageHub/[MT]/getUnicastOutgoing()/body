{
  lock.lock();
  try {
    if (unicastOutgoing == null) {
      Protocol<ChannelMessage> unicastSendProtocol=new InstancePerChannelProtocolAdapter<Object>(Object.class,new InstancePerChannelProtocolAdapter.ChannelProtocolFactory<Object>(){
        public Protocol<Object> newChannel(        Object channelKey){
          return new UnicastSendProtocol();
        }
      }
);
      Protocol<ChannelMessage> sendProtocol=new InstancePerChannelProtocolAdapter<Object>(Object.class,new InstancePerChannelProtocolAdapter.ChannelProtocolFactory<Object>(){
        public Protocol<Object> newChannel(        Object channelKey){
          return new SendProtocol(idGenerator.generateId(),nodeName);
        }
      }
);
      StoppableExecutor executor=executorFactory.create(displayName + " outgoing unicast");
      executors.add(executor);
      unicastOutgoing=new ProtocolStack<ChannelMessage>(executor,failureHandler,failureHandler,unicastSendProtocol,sendProtocol);
      AsyncConnection<Message> outgoingEndpoint=router.createLocalConnection();
      unicastOutgoing.getBottom().dispatchTo(outgoingEndpoint);
      outgoingEndpoint.dispatchTo(new TypeCastDispatch<ChannelMessage,Message>(ChannelMessage.class,unicastOutgoing.getBottom()));
    }
    return unicastOutgoing.getTop();
  }
  finally {
    lock.unlock();
  }
}
