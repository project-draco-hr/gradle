{
  StateFileWriter stateFileWriter=null;
  try {
    final MessageDigest fileDigester=digesterCache.getDigester(Thread.currentThread().getName() + "_file");
    final MessageDigest dirDigester=digesterCache.getDigester(Thread.currentThread().getName() + "_dir");
    final File directory=directoryState.getDirectory();
    final String relativeDirectoryPath=directoryState.getRelativePath();
    final StateFileUtil stateFileUtil=directoryStateChangeDetecter.getStateFileUtil();
    final File stateFile=stateFileUtil.getNewDirsStateFile(stateFileUtil.getDirStateFilename(directoryState.getRelativePathDigest()));
    stateFileWriter=new StateFileWriter(ioFactory,stateFile);
    long directorySize=0;
    final List<File> subFiles=GFileUtils.getSubFiles(directory);
    if (subFiles.size() > 0) {
      Collections.sort(subFiles,new Comparator<File>(){
        public int compare(        final File firstFile,        final File secondFile){
          return firstFile.getName().compareTo(secondFile.getName());
        }
      }
);
      for (      final File subFile : subFiles) {
        digesterUtil.digestFile(fileDigester,subFile);
        final String fileDigest=DigestStringUtil.digestToHexString(fileDigester.digest());
        stateFileWriter.addDigest(subFile.getName(),fileDigest);
        directorySize+=subFile.length();
        dirDigester.update(fileDigest.getBytes());
      }
      stateFileWriter.lastFileDigestAdded();
    }
    final List<DirectoryState> subDirectoryStateItems=getNewSubDirectoryStates(relativeDirectoryPath);
    for (    final DirectoryState subDirectoryStateItem : subDirectoryStateItems) {
      dirDigester.update(subDirectoryStateItem.getDigest().getBytes());
      directorySize+=subDirectoryStateItem.getSize();
    }
    digesterUtil.digestDirectory(dirDigester,directory,directorySize);
    final String dirDigest=DigestStringUtil.digestToHexString(dirDigester.digest());
    directoryState.setDigest(dirDigest);
    directoryState.setSize(directorySize);
  }
 catch (  Throwable t) {
    directoryState.setFailureCause(t);
  }
 finally {
    addNewDirectoryState(directoryState);
    if (stateFileWriter != null) {
      stateFileWriter.close();
    }
  }
}
