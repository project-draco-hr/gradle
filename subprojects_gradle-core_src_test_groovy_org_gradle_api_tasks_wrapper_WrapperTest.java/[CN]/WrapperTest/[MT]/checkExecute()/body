{
  context.checking(new Expectations(){
{
      one(wrapperScriptGeneratorMock).generate(targetWrapperJarPath + "/" + Wrapper.WRAPPER_JAR,targetWrapperJarPath + "/" + Wrapper.WRAPPER_PROPERTIES,new File(getProject().getProjectDir(),wrapper.getScriptDestinationPath()));
    }
  }
);
  wrapper.execute();
  File unjarDir=HelperUtil.makeNewTestDir("unjar");
  CompressUtil.unzip(expectedTargetWrapperJar,unjarDir);
  assertEquals(TEST_TEXT,FileUtils.readFileToString(new File(unjarDir,TEST_FILE_NAME)));
  Properties properties=GUtil.loadProperties(expectedTargetWrapperProperties);
  assertEquals(properties.getProperty(Wrapper.URL_ROOT_PROPERTY),wrapper.getUrlRoot());
  assertEquals(properties.getProperty(Wrapper.DISTRIBUTION_BASE_PROPERTY),wrapper.getDistributionBase().toString());
  assertEquals(properties.getProperty(Wrapper.DISTRIBUTION_PATH_PROPERTY),wrapper.getDistributionPath());
  assertEquals(properties.getProperty(Wrapper.DISTRIBUTION_NAME_PROPERTY),wrapper.getArchiveName());
  assertEquals(properties.getProperty(Wrapper.DISTRIBUTION_CLASSIFIER_PROPERTY),wrapper.getArchiveClassifier());
  assertEquals(properties.getProperty(Wrapper.DISTRIBUTION_VERSION_PROPERTY),wrapper.getGradleVersion());
  assertEquals(properties.getProperty(Wrapper.ZIP_STORE_BASE_PROPERTY),wrapper.getArchiveBase().toString());
  assertEquals(properties.getProperty(Wrapper.ZIP_STORE_PATH_PROPERTY),wrapper.getArchivePath());
}
