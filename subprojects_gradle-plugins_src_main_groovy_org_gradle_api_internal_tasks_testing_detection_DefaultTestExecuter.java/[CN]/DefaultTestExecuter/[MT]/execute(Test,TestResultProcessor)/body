{
  final TestFramework testFramework=testTask.getTestFramework();
  final WorkerTestClassProcessorFactory testInstanceFactory=testFramework.getProcessorFactory();
  final TestClassProcessorFactory forkingProcessorFactory=new TestClassProcessorFactory(){
    public TestClassProcessor create(){
      return new ForkingTestClassProcessor(workerFactory,testInstanceFactory,testTask,testTask.getClasspath(),testFramework.getWorkerConfigurationAction());
    }
  }
;
  TestClassProcessorFactory reforkingProcessorFactory=new TestClassProcessorFactory(){
    public TestClassProcessor create(){
      return new RestartEveryNTestClassProcessor(forkingProcessorFactory,testTask.getForkEvery());
    }
  }
;
  TestClassProcessor processor=new MaxNParallelTestClassProcessor(testTask.getMaxParallelForks(),reforkingProcessorFactory,actorFactor);
  final FileTree testClassFiles=testTask.getCandidateClassFiles();
  Runnable detector;
  if (testTask.isScanForTestClasses()) {
    TestFrameworkDetector testFrameworkDetector=testTask.getTestFramework().getDetector();
    detector=new DefaultTestClassScanner(testClassFiles,testFrameworkDetector,processor);
  }
 else {
    detector=new DefaultTestClassScanner(testClassFiles,null,processor);
  }
  new TestMainAction(detector,processor,testResultProcessor,new TrueTimeProvider()).run();
}
