{
  final FileCollectionInternal taskInputs=new UnionFileCollection(CollectionUtils.collect(tasks,new Transformer<FileCollection,Task>(){
    public FileCollection transform(    Task input){
      return input.getInputs().getFiles();
    }
  }
));
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug("Task inputs: {}",taskInputs.getFiles());
  }
  fileWatcherFactory.watch(taskInputs.getFileSystemRoots(),new Action<Throwable>(){
    @Override public void execute(    Throwable throwable){
      listener.triggered(new DefaultTriggerDetails(TriggerDetails.Type.STOP,"error " + throwable.getMessage()));
    }
  }
,new FilteringFileWatcherListener(new Spec<FileWatcherEvent>(){
    @Override public boolean isSatisfiedBy(    FileWatcherEvent element){
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Received file system event: {}",element);
      }
      return element.getType().equals(FileWatcherEvent.Type.OVERFLOW) || taskInputs.wouldContain(element.getFile());
    }
  }
,new StopThenFireFileWatcherListener(new Runnable(){
    @Override public void run(){
      listener.triggered(new DefaultTriggerDetails(TriggerDetails.Type.REBUILD,"file change"));
    }
  }
)));
}
