{
  patternSpecFactory=from.patternSpecFactory;
  includes.clear();
  excludes.clear();
  includeSpecs.clear();
  excludeSpecs.clear();
  caseSensitive=from.caseSensitive;
  if (from instanceof IntersectionPatternSet) {
    PatternSet other=((IntersectionPatternSet)from).other;
    PatternSet otherCopy=new PatternSet(other).copyFrom(other);
    PatternSet intersectCopy=new IntersectionPatternSet(otherCopy);
    intersectCopy.includes.addAll(from.includes);
    intersectCopy.excludes.addAll(from.excludes);
    intersectCopy.includeSpecs.addAll(from.includeSpecs);
    intersectCopy.excludeSpecs.addAll(from.excludeSpecs);
    includeSpecs.add(intersectCopy.getAsSpec());
  }
 else {
    includes.addAll(from.includes);
    excludes.addAll(from.excludes);
    includeSpecs.addAll(from.includeSpecs);
    excludeSpecs.addAll(from.excludeSpecs);
  }
  return this;
}
