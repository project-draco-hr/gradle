{
  String method=request.getMethod();
  configureMethod(request);
  HttpResponse response;
  try {
    response=executeMethod(request);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(String.format("Could not %s '%s'.",method,source),e);
  }
  if (wasMissing(response)) {
    LOGGER.info("Resource missing. [HTTP {}: {}]",method,source);
    return new MissingHttpResource(source);
  }
  if (!wasSuccessful(response)) {
    LOGGER.info("Failed to get resource: {}. [HTTP {}: {}]",new Object[]{method,response.getStatusLine(),source});
    throw new UncheckedIOException(String.format("Could not %s '%s'. Received status code %s from server: %s",method,source,response.getStatusLine().getStatusCode(),response.getStatusLine().getReasonPhrase()));
  }
  LOGGER.info("Resource found. [HTTP {}: {}]",method,source);
  return new HttpResponseResource(method,source,response){
    @Override public void close() throws IOException {
      super.close();
      HttpResourceCollection.this.openResources.remove(this);
    }
  }
;
}
