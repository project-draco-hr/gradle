{
  return protocolType.cast(Proxy.newProxyInstance(protocolType.getClassLoader(),new Class[]{protocolType},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      WorkerProcess workerProcess=builder.build();
      workerProcess.start();
      ObjectConnection connection=workerProcess.getConnection();
      RequestProtocol requestProtocol=connection.addOutgoing(RequestProtocol.class);
      Receiver receiver=new Receiver(getBaseName());
      connection.addIncoming(ResponseProtocol.class,receiver);
      connection.useJavaSerializationForParameters(workerImplementation.getClassLoader());
      connection.connect();
      requestProtocol.runThenStop(method.getName(),method.getParameterTypes(),args);
      workerProcess.waitForStop();
      return receiver.getNextResult();
    }
  }
));
}
