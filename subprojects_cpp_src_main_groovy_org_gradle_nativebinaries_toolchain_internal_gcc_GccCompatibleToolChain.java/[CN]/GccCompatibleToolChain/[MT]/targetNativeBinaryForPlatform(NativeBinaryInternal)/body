{
  org.gradle.nativebinaries.OperatingSystem targetOs=nativeBinary.getTargetPlatform().getOperatingSystem();
  ArchitectureInternal targetArch=(ArchitectureInternal)nativeBinary.getTargetPlatform().getArchitecture();
  if (!targetOs.isCurrent()) {
    nativeBinary.setBuildable(false);
    return;
  }
  if (targetArch == ArchitectureInternal.TOOL_CHAIN_DEFAULT) {
    return;
  }
  if (targetArch.isI386()) {
    nativeBinary.getLinker().args("-m32");
    toolArgs(nativeBinary,"cCompiler","-m32");
    toolArgs(nativeBinary,"cppCompiler","-m32");
    if (targetOs.isMacOsX()) {
      toolArgs(nativeBinary,"assembler","-arch","i386");
    }
 else {
      toolArgs(nativeBinary,"assembler","--32");
    }
    return;
  }
  if (targetArch.isAmd64()) {
    nativeBinary.getLinker().args("-m64");
    toolArgs(nativeBinary,"cCompiler","-m64");
    toolArgs(nativeBinary,"cppCompiler","-m64");
    if (targetOs.isMacOsX()) {
      toolArgs(nativeBinary,"assembler","-arch","x86_64");
    }
 else {
      toolArgs(nativeBinary,"assembler","--64");
    }
    return;
  }
  nativeBinary.setBuildable(false);
}
