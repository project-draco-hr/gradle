{
  configure(modelRegistry,Initialize,ModelReference.of(path,ModelRegistryHelper.instantiatorType(itemType)),new Action<RuleAwarePolymorphicNamedEntityInstantiator<I>>(){
    @Override public void execute(    final RuleAwarePolymorphicNamedEntityInstantiator<I> instantiator){
      registrations.execute(new PolymorphicNamedEntityInstantiator<I>(){
        @Override public Set<? extends Class<? extends I>> getCreatableTypes(){
          return instantiator.getCreatableTypes();
        }
        @Override public <U extends I>void registerFactory(        Class<U> type,        NamedDomainObjectFactory<? extends U> factory){
          instantiator.registerFactory(type,factory,new SimpleModelRuleDescriptor("ModelRegistryHelper.modelMap"));
        }
        @Override public <S extends I>S create(        String name,        Class<S> type){
          return instantiator.create(name,type);
        }
      }
);
    }
  }
);
  return register(modelRegistry,path,new Transformer<ModelRegistration,ModelRegistrationBuilder>(){
    @Override public ModelRegistration transform(    ModelRegistrationBuilder modelRegistrationBuilder){
      return modelRegistrationBuilder.modelMap(itemType);
    }
  }
);
}
