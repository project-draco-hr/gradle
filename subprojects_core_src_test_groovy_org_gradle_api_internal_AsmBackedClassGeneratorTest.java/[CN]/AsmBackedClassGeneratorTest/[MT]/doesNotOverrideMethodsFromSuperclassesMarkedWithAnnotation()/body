{
  BeanSubClass bean=generator.generate(BeanSubClass.class).newInstance();
  IConventionAware conventionAware=(IConventionAware)bean;
  conventionAware.getConventionMapping().map("property",new Callable<Object>(){
    public Object call() throws Exception {
      throw new UnsupportedOperationException();
    }
  }
);
  conventionAware.getConventionMapping().map("interfaceProperty",new Callable<Object>(){
    public Object call() throws Exception {
      throw new UnsupportedOperationException();
    }
  }
);
  conventionAware.getConventionMapping().map("overriddenProperty",new Callable<Object>(){
    public Object call() throws Exception {
      return "conventionValue";
    }
  }
);
  conventionAware.getConventionMapping().map("otherProperty",new Callable<Object>(){
    public Object call() throws Exception {
      return "conventionValue";
    }
  }
);
  assertEquals(null,bean.getProperty());
  assertEquals(null,bean.getInterfaceProperty());
  assertEquals("conventionValue",bean.getOverriddenProperty());
  assertEquals("conventionValue",bean.getOtherProperty());
}
