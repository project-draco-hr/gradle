{
  Class<?> generatedClass=generator.generate(BeanWithComplexConstructor.class);
  Constructor<?> constructor=generatedClass.getDeclaredConstructors()[0];
  assertThat(constructor.getTypeParameters().length,equalTo(3));
  assertThat(constructor.getGenericParameterTypes().length,equalTo(12));
  Type paramType=constructor.getGenericParameterTypes()[0];
  assertThat(paramType,equalTo((Type)Callable.class));
  paramType=constructor.getGenericParameterTypes()[1];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  ParameterizedType parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],equalTo((Type)String.class));
  paramType=constructor.getGenericParameterTypes()[2];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  WildcardType wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getUpperBounds()[0],equalTo((Type)String.class));
  assertThat(wildcard.getLowerBounds().length,equalTo(0));
  paramType=constructor.getGenericParameterTypes()[3];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getUpperBounds()[0],equalTo((Type)Object.class));
  assertThat(wildcard.getLowerBounds().length,equalTo(1));
  assertThat(wildcard.getLowerBounds()[0],equalTo((Type)String.class));
  paramType=constructor.getGenericParameterTypes()[4];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getUpperBounds()[0],equalTo((Type)Object.class));
  assertThat(wildcard.getLowerBounds().length,equalTo(0));
  paramType=constructor.getGenericParameterTypes()[5];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getLowerBounds().length,equalTo(0));
  assertThat(wildcard.getUpperBounds()[0],instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)wildcard.getUpperBounds()[0];
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getUpperBounds()[0],equalTo((Type)Object.class));
  assertThat(wildcard.getLowerBounds().length,equalTo(0));
  paramType=constructor.getGenericParameterTypes()[6];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(TypeVariable.class));
  TypeVariable typeVariable=(TypeVariable)parameterizedType.getActualTypeArguments()[0];
  assertThat(typeVariable.getName(),equalTo("S"));
  assertThat(typeVariable.getBounds()[0],instanceOf(ParameterizedType.class));
  paramType=constructor.getGenericParameterTypes()[7];
  assertThat(paramType,instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)paramType;
  assertThat(parameterizedType.getRawType(),equalTo((Type)Callable.class));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  wildcard=(WildcardType)parameterizedType.getActualTypeArguments()[0];
  assertThat(wildcard.getUpperBounds().length,equalTo(1));
  assertThat(wildcard.getLowerBounds().length,equalTo(0));
  assertThat(wildcard.getUpperBounds()[0],instanceOf(TypeVariable.class));
  typeVariable=(TypeVariable)wildcard.getUpperBounds()[0];
  assertThat(typeVariable.getName(),equalTo("T"));
  assertThat(typeVariable.getBounds()[0],equalTo((Type)IOException.class));
  paramType=constructor.getGenericParameterTypes()[8];
  assertThat(paramType,instanceOf(TypeVariable.class));
  typeVariable=(TypeVariable)paramType;
  assertThat(typeVariable.getName(),equalTo("V"));
  assertThat(typeVariable.getBounds()[0],equalTo((Type)Object.class));
  GenericArrayType arrayType;
  paramType=constructor.getGenericParameterTypes()[9];
  assertThat(paramType,equalTo((Type)String[].class));
  assertThat(((Class<?>)paramType).getComponentType(),equalTo((Type)String.class));
  paramType=constructor.getGenericParameterTypes()[10];
  assertThat(paramType,instanceOf(GenericArrayType.class));
  arrayType=(GenericArrayType)paramType;
  assertThat(arrayType.getGenericComponentType(),instanceOf(ParameterizedType.class));
  parameterizedType=(ParameterizedType)arrayType.getGenericComponentType();
  assertThat(parameterizedType.getRawType(),equalTo((Type)List.class));
  assertThat(parameterizedType.getActualTypeArguments().length,equalTo(1));
  assertThat(parameterizedType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  paramType=constructor.getGenericParameterTypes()[11];
  assertThat(paramType,equalTo((Type)Boolean.TYPE));
  assertThat(constructor.getGenericExceptionTypes().length,equalTo(2));
  Type exceptionType=constructor.getGenericExceptionTypes()[0];
  assertThat(exceptionType,equalTo((Type)Exception.class));
  exceptionType=constructor.getGenericExceptionTypes()[1];
  assertThat(exceptionType,instanceOf(TypeVariable.class));
  typeVariable=(TypeVariable)exceptionType;
  assertThat(typeVariable.getName(),equalTo("T"));
}
