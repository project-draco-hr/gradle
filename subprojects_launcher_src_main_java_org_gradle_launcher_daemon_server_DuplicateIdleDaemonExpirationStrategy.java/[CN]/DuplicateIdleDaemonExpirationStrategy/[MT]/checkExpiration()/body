{
  Spec<DaemonInfo> spec=new Spec<DaemonInfo>(){
    @Override public boolean isSatisfiedBy(    DaemonInfo daemonInfo){
      return compatibilitySpec.isSatisfiedBy(daemonInfo.getContext());
    }
  }
;
  Collection<DaemonInfo> compatibleIdleDaemons=CollectionUtils.filter(daemon.getDaemonRegistry().getIdle(),spec);
  if (compatibleIdleDaemons.size() > 1 && daemon.getStateCoordinator().getState() == Idle && !isMostRecentlyUsed(compatibleIdleDaemons,daemon.getDaemonContext()) && hasBeenIdle()) {
    return new DaemonExpirationResult(DaemonExpirationStatus.GRACEFUL_EXPIRE,"after other compatible daemons were started");
  }
 else {
    return DaemonExpirationResult.NOT_TRIGGERED;
  }
}
