{
  Class<? extends Action> aClass=action.getClass();
  Type[] genericInterfaces=aClass.getGenericInterfaces();
  Type actionType=findFirst(genericInterfaces,new Spec<Type>(){
    public boolean isSatisfiedBy(    Type element){
      return element instanceof ParameterizedType && ((ParameterizedType)element).getRawType().equals(Action.class);
    }
  }
);
  ParameterizedType actionParamaterizedType=(ParameterizedType)actionType;
  Type tType=actionParamaterizedType.getActualTypeArguments()[0];
  final Class<?> modelType;
  if (tType instanceof Class) {
    modelType=(Class)tType;
  }
 else   if (tType instanceof ParameterizedType) {
    modelType=(Class)((ParameterizedType)tType).getRawType();
  }
 else {
    throw new RuntimeException("!");
  }
  @SuppressWarnings("unchecked") Class<T> castModelType=(Class<T>)modelType;
  return castModelType;
}
