{
  final StartParameter noSearchParameter=context.mock(StartParameter.class,"noSearchParameter");
  final SettingsInternal currentDirSettings=context.mock(SettingsInternal.class,"currentDirSettings");
  final ProjectDescriptor rootProject=context.mock(ProjectDescriptor.class);
  context.checking(new Expectations(){
{
      one(finder).find(startParameter);
      one(delegate).process(finder,startParameter,propertiesLoader);
      will(returnValue(settings));
      one(projectRegistry).findAll(defaultProjectSelector);
      will(returnValue(toSet()));
      one(startParameter).newInstance();
      will(returnValue(noSearchParameter));
      one(noSearchParameter).setSettingsScriptSource(with(Matchers.reflectionEquals(new StringScriptSource("empty settings file",""))));
      one(finder).find(noSearchParameter);
      one(delegate).process(finder,noSearchParameter,propertiesLoader);
      will(returnValue(currentDirSettings));
      allowing(noSearchParameter).getBuildFile();
      will(returnValue(null));
      allowing(noSearchParameter).getDefaultProjectSelector();
      will(returnValue(defaultProjectSelector));
      allowing(currentDirSettings).getRootProject();
      will(returnValue(rootProject));
      allowing(currentDirSettings).getProjectRegistry();
      will(returnValue(projectRegistry));
      allowing(rootProject).getChildren();
      will(returnValue(toSet()));
      allowing(projectRegistry).findAll(defaultProjectSelector);
      will(returnValue(toSet(rootProject)));
    }
  }
);
  assertThat(processor.process(finder,startParameter,propertiesLoader),sameInstance(currentDirSettings));
}
