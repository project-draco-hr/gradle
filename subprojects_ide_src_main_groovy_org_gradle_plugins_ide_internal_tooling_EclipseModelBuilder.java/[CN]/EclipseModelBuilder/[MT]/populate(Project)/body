{
  EclipseModel eclipseModel=project.getExtensions().getByType(EclipseModel.class);
  EclipseClasspath classpath=eclipseModel.getClasspath();
  classpath.setProjectDependenciesOnly(projectDependenciesOnly);
  List<ClasspathEntry> entries=classpath.resolveDependencies();
  final List<DefaultEclipseExternalDependency> externalDependencies=new LinkedList<DefaultEclipseExternalDependency>();
  final List<DefaultEclipseProjectDependency> projectDependencies=new LinkedList<DefaultEclipseProjectDependency>();
  final List<DefaultEclipseSourceDirectory> sourceDirectories=new LinkedList<DefaultEclipseSourceDirectory>();
  for (  ClasspathEntry entry : entries) {
    if (entry instanceof Library) {
      AbstractLibrary library=(AbstractLibrary)entry;
      final File file=library.getLibrary().getFile();
      final File source=library.getSourcePath() == null ? null : library.getSourcePath().getFile();
      final File javadoc=library.getJavadocPath() == null ? null : library.getJavadocPath().getFile();
      externalDependencies.add(new DefaultEclipseExternalDependency(file,javadoc,source,library.getModuleVersion(),library.isExported()));
    }
 else     if (entry instanceof ProjectDependency) {
      final ProjectDependency projectDependency=(ProjectDependency)entry;
      final String path=StringUtils.removeStart(projectDependency.getPath(),"/");
      projectDependencies.add(new DefaultEclipseProjectDependency(path,projectMapping.get(projectDependency.getGradlePath()),projectDependency.isExported()));
    }
 else     if (entry instanceof SourceFolder) {
      final SourceFolder sourceFolder=(SourceFolder)entry;
      String path=sourceFolder.getPath();
      sourceDirectories.add(new DefaultEclipseSourceDirectory(path,sourceFolder.getDir()));
    }
  }
  DefaultEclipseProject eclipseProject=projectMapping.get(project.getPath());
  eclipseProject.setClasspath(externalDependencies);
  eclipseProject.setProjectDependencies(projectDependencies);
  eclipseProject.setSourceDirectories(sourceDirectories);
  List<DefaultEclipseLinkedResource> linkedResources=new LinkedList<DefaultEclipseLinkedResource>();
  for (  Link r : eclipseModel.getProject().getLinkedResources()) {
    linkedResources.add(new DefaultEclipseLinkedResource(r.getName(),r.getType(),r.getLocation(),r.getLocationUri()));
  }
  eclipseProject.setLinkedResources(linkedResources);
  List<DefaultEclipseTask> tasks=new ArrayList<DefaultEclipseTask>();
  for (  Task t : tasksFactory.getTasks(project)) {
    tasks.add(new DefaultEclipseTask(eclipseProject,t.getPath(),t.getName(),t.getDescription()));
  }
  eclipseProject.setTasks(tasks);
  List<DefaultEclipseProjectNature> natures=new ArrayList<DefaultEclipseProjectNature>();
  for (  String n : eclipseModel.getProject().getNatures()) {
    natures.add(new DefaultEclipseProjectNature(n));
  }
  eclipseProject.setProjectNatures(natures);
  List<DefaultEclipseBuildCommand> buildCommands=new ArrayList<DefaultEclipseBuildCommand>();
  for (  BuildCommand b : eclipseModel.getProject().getBuildCommands()) {
    buildCommands.add(new DefaultEclipseBuildCommand(b.getName(),b.getArguments()));
  }
  eclipseProject.setBuildCommands(buildCommands);
  EclipseJdt jdt=eclipseModel.getJdt();
  if (jdt != null) {
    final Jvm currentJvm=Jvm.current();
    eclipseProject.setJavaSourceSettings(new DefaultJavaSourceSettings().setSourceLanguageLevel(jdt.getSourceCompatibility()).setTargetBytecodeLevel(jdt.getTargetCompatibility()).setTargetRuntime(new DefaultJavaRuntime(currentJvm.getJavaHome(),currentJvm.getJavaVersion())));
  }
  for (  Project childProject : project.getChildProjects().values()) {
    populate(childProject);
  }
}
