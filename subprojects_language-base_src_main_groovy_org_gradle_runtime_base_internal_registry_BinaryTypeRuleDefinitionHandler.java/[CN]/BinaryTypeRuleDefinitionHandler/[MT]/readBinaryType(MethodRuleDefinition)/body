{
  if (ruleDefinition.getReferences().size() != 1) {
    throw new InvalidComponentModelException(String.format("BinaryType method must have a single parameter of type %s.",BinaryTypeBuilder.class.getSimpleName()));
  }
  if (!ModelType.of(Void.TYPE).equals(ruleDefinition.getReturnType())) {
    throw new InvalidComponentModelException("BinaryType method must not have a return value.");
  }
  ModelType<?> binaryTypeBuilder=ruleDefinition.getReferences().get(0).getType();
  if (!BinaryTypeBuilder.class.isAssignableFrom(binaryTypeBuilder.getRawClass())) {
    throw new InvalidComponentModelException(String.format("BinaryType method must have a single parameter of type %s.",BinaryTypeBuilder.class.getSimpleName()));
  }
  if (binaryTypeBuilder.getTypeVariables().size() != 1) {
    throw new InvalidComponentModelException("BinaryTypeBuilder parameter must declare a type parameter (must be generified).");
  }
  Class<?> binarySpec=binaryTypeBuilder.getTypeVariables().get(0).getRawClass();
  if (!BinarySpec.class.isAssignableFrom(binarySpec)) {
    throw new InvalidComponentModelException(String.format("Binary type '%s' must extend '%s'.",binarySpec.getSimpleName(),BinarySpec.class.getSimpleName()));
  }
  if (binarySpec.equals(BinarySpec.class)) {
    throw new InvalidComponentModelException(String.format("Binary type must be a subtype of '%s'.",BinarySpec.class.getSimpleName()));
  }
  return (Class<? extends BinarySpec>)binarySpec;
}
