{
  MyBinaryTypeBuilder builder=new MyBinaryTypeBuilder();
  ruleDefinition.getRuleInvoker().invoke(builder);
  Class<? extends BinarySpec> implementation=builder.implementation;
  if (implementation != null) {
    if (!DefaultBinarySpec.class.isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("Binary implementation '%s' must extend '%s'.",implementation.getSimpleName(),DefaultBinarySpec.class.getSimpleName()));
    }
    if (!type.isAssignableFrom(implementation)) {
      throw new InvalidComponentModelException(String.format("Binary implementation '%s' must implement '%s'.",implementation.getSimpleName(),type.getSimpleName()));
    }
    try {
      implementation.getConstructor();
    }
 catch (    NoSuchMethodException nsmException) {
      throw new InvalidComponentModelException(String.format("Binary implementation '%s' must have public default constructor.",implementation.getSimpleName()));
    }
  }
  return (Class<? extends DefaultBinarySpec>)implementation;
}
