{
  super("binary",BinaryType.class,BinarySpec.class,BaseBinarySpec.class,BinaryTypeBuilder.class,new Action<RegistrationContext<BinarySpec,BaseBinarySpec>>(){
    public void execute(    RegistrationContext<BinarySpec,BaseBinarySpec> context){
      BinaryContainer binaries=context.getExtensions().getByType(BinaryContainer.class);
      doRegister(binaries,context.getType(),context.getImplementation());
    }
    private <T extends BinarySpec,U extends BaseBinarySpec>void doRegister(    BinaryContainer binaries,    ModelType<T> type,    final ModelType<U> implementation){
      binaries.registerFactory(type.getConcreteClass(),new NamedDomainObjectFactory<T>(){
        public T create(        String name){
          BinaryNamingScheme binaryNamingScheme=new DefaultBinaryNamingSchemeBuilder().withComponentName(name).build();
          @SuppressWarnings("unchecked") T created=(T)BaseBinarySpec.create(implementation.getConcreteClass(),binaryNamingScheme,instantiator);
          return created;
        }
      }
);
    }
  }
);
}
