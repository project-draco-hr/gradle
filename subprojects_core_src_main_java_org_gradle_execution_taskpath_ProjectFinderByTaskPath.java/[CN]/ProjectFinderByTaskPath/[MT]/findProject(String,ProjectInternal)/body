{
  if (projectPath.equals(Project.PATH_SEPARATOR)) {
    return startFrom.getRootProject();
  }
  Project current=startFrom;
  if (projectPath.startsWith(Project.PATH_SEPARATOR)) {
    current=current.getRootProject();
    projectPath=projectPath.substring(1);
  }
  for (  String pattern : projectPath.split(Project.PATH_SEPARATOR)) {
    Map<String,Project> children=current.getChildProjects();
    NameMatcher matcher=new NameMatcher();
    Project child=matcher.find(pattern,children);
    if (child != null) {
      current=child;
      continue;
    }
    throw new ProjectLookupException(matcher.formatErrorMessage("project",current));
  }
  return (ProjectInternal)current;
}
