{
  for (  final PlayDistribution distribution : distributions.withType(PlayDistribution.class)) {
    final PlayApplicationBinarySpec binary=distribution.getBinary();
    if (binary == null) {
      throw new InvalidUserCodeException(String.format("Play Distribution '%s' does not have a configured Play binary.",distribution.getName()));
    }
    final File distJarDir=new File(buildDir,String.format("distributionJars/%s",distribution.getName()));
    final String jarTaskName=String.format("create%sDistributionJar",StringUtils.capitalize(distribution.getName()));
    tasks.create(jarTaskName,Jar.class,new Action<Jar>(){
      @Override public void execute(      Jar jar){
        jar.setDescription("Assembles an application jar suitable for deployment for the " + binary + ".");
        jar.dependsOn(binary.getTasks().withType(Jar.class));
        jar.from(jar.getProject().zipTree(binary.getJarFile()));
        jar.setDestinationDir(distJarDir);
        jar.setArchiveName(binary.getJarFile().getName());
        Map<String,Object> classpath=Maps.newHashMap();
        classpath.put("Class-Path",new PlayManifestClasspath(configurations.getPlayRun(),binary.getAssetsJarFile()));
        jar.getManifest().attributes(classpath);
      }
    }
);
    final Task distributionJar=tasks.get(jarTaskName);
    final File scriptsDir=new File(buildDir,String.format("scripts/%s",distribution.getName()));
    String createStartScriptsTaskName=String.format("create%sStartScripts",StringUtils.capitalize(distribution.getName()));
    tasks.create(createStartScriptsTaskName,CreateStartScripts.class,new Action<CreateStartScripts>(){
      @Override public void execute(      CreateStartScripts createStartScripts){
        createStartScripts.setDescription("Creates OS specific scripts to run the " + binary + ".");
        createStartScripts.setClasspath(distributionJar.getOutputs().getFiles());
        createStartScripts.setMainClassName("play.core.server.NettyServer");
        createStartScripts.setApplicationName(distribution.getName());
        createStartScripts.setOutputDir(scriptsDir);
      }
    }
);
    Task createStartScripts=tasks.get(createStartScriptsTaskName);
    CopySpecInternal distSpec=(CopySpecInternal)distribution.getContents();
    CopySpec libSpec=distSpec.addChild().into("lib");
    libSpec.from(distributionJar);
    libSpec.from(binary.getAssetsJarFile());
    libSpec.from(configurations.getPlayRun().getAllArtifacts());
    libSpec.eachFile(new RenameArtifactFiles(configurations.getPlayRun()));
    CopySpec binSpec=distSpec.addChild().into("bin");
    binSpec.from(createStartScripts);
    binSpec.setFileMode(0755);
    CopySpec confSpec=distSpec.addChild().into("conf");
    confSpec.from("conf").exclude("routes");
    distSpec.from("README");
  }
}
