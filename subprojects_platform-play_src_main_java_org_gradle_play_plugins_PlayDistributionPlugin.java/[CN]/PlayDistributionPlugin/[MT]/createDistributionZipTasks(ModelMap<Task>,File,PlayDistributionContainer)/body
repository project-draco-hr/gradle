{
  for (  final PlayDistribution distribution : distributions.withType(PlayDistribution.class)) {
    final String stageTaskName=String.format("stage%sDist",StringUtils.capitalize(distribution.getName()));
    final File stageDir=new File(buildDir,"stage");
    final String baseName=StringUtils.isNotEmpty(distribution.getBaseName()) ? distribution.getBaseName() : distribution.getName();
    tasks.create(stageTaskName,Sync.class,new Action<Sync>(){
      @Override public void execute(      Sync sync){
        sync.setDescription("Copies the '" + distribution.getName() + "' distribution to a staging directory.");
        sync.setDestinationDir(stageDir);
        CopySpecInternal baseSpec=sync.getRootSpec().addChild();
        baseSpec.into(baseName);
        baseSpec.with(distribution.getContents());
      }
    }
);
    tasks.named("stage",new Action<Task>(){
      @Override public void execute(      Task task){
        task.dependsOn(stageTaskName);
      }
    }
);
    final Task stageTask=tasks.get(stageTaskName);
    final String distributionZipTaskName=String.format("create%sZipDist",StringUtils.capitalize(distribution.getName()));
    tasks.create(distributionZipTaskName,Zip.class,new Action<Zip>(){
      @Override public void execute(      final Zip zip){
        zip.setDescription("Packages the '" + distribution.getName() + "' distribution as a zip file.");
        zip.setArchiveName(String.format("%s.zip",baseName));
        zip.setDestinationDir(new File(buildDir,"distributions"));
        CopySpec baseSpec=zip.getRootSpec().addChild();
        baseSpec.into(baseName);
        baseSpec.with(distribution.getContents());
      }
    }
);
    final String distributionTarTaskName=String.format("create%sTarDist",StringUtils.capitalize(distribution.getName()));
    tasks.create(distributionTarTaskName,Tar.class,new Action<Tar>(){
      @Override public void execute(      final Tar tar){
        tar.setDescription("Packages the '" + distribution.getName() + "' distribution as a tar file.");
        tar.setArchiveName(String.format("%s.tar",baseName));
        tar.setDestinationDir(new File(buildDir,"distributions"));
        CopySpec baseSpec=tar.getRootSpec().addChild();
        baseSpec.into(baseName);
        baseSpec.with(distribution.getContents());
      }
    }
);
    tasks.named("dist",new Action<Task>(){
      @Override public void execute(      Task task){
        task.dependsOn(distributionZipTaskName,distributionTarTaskName);
      }
    }
);
  }
}
