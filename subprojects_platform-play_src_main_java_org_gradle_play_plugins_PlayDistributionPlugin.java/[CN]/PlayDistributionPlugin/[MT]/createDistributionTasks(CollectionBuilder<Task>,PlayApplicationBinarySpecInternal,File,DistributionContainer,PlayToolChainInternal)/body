{
  final File scriptsDir=new File(buildDir,String.format("scripts/%s",binary.getName()));
  final FileCollection playDependencies=playToolChain.select(binary.getTargetPlatform()).getPlayDependencies();
  String createStartScriptsTaskName=String.format("create%sStartScripts",StringUtils.capitalize(binary.getName()));
  tasks.create(createStartScriptsTaskName,CreateStartScripts.class,new Action<CreateStartScripts>(){
    @Override public void execute(    CreateStartScripts createStartScripts){
      createStartScripts.setDescription("Creates OS specific scripts to run the play application.");
      createStartScripts.setClasspath(new UnionFileCollection(new SimpleFileCollection(binary.getJarFile(),binary.getAssetsJarFile()),playDependencies));
      createStartScripts.setMainClassName("play.core.server.NettyServer");
      createStartScripts.setApplicationName(binary.getName());
      createStartScripts.setOutputDir(scriptsDir);
      CopySpecInternal distSpec=(CopySpecInternal)distributions.findByName(binary.getName()).getContents();
      distSpec.addChild().into("bin").from(createStartScripts);
    }
  }
);
  String distTaskName=String.format("create%sDist",StringUtils.capitalize(binary.getName()));
  tasks.create(distTaskName,Zip.class,new Action<Zip>(){
    @Override public void execute(    Zip zip){
      zip.setDescription("Bundles the play binary as a distribution.");
      zip.setGroup("distribution");
      zip.setBaseName(binary.getName());
      zip.setDestinationDir(new File(buildDir,"distributions"));
      String baseDirName=zip.getArchiveName().substring(0,zip.getArchiveName().length() - zip.getExtension().length() - 1);
      CopySpecInternal baseSpec=zip.getRootSpec().addChild();
      baseSpec.into(baseDirName);
      baseSpec.with(distributions.findByName(binary.getName()).getContents());
      zip.dependsOn(binary.getTasks().withType(Jar.class));
      zip.dependsOn(binary.getTasks().withType(CreateStartScripts.class));
    }
  }
);
}
