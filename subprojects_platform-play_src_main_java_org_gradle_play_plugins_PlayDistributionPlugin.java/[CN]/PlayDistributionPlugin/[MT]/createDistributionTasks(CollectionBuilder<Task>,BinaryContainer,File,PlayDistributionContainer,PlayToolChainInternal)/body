{
  for (  final PlayApplicationBinarySpecInternal binary : binaryContainer.withType(PlayApplicationBinarySpecInternal.class)) {
    final File scriptsDir=new File(buildDir,String.format("scripts/%s",binary.getName()));
    String createStartScriptsTaskName=String.format("create%sStartScripts",StringUtils.capitalize(binary.getName()));
    tasks.create(createStartScriptsTaskName,CreateStartScripts.class,new Action<CreateStartScripts>(){
      @Override public void execute(      CreateStartScripts createStartScripts){
        createStartScripts.setDescription("Creates OS specific scripts to run the play application.");
        createStartScripts.setClasspath(new UnionFileCollection(new SimpleFileCollection(binary.getJarFile(),binary.getAssetsJarFile()),binary.getClasspath()));
        createStartScripts.setMainClassName("play.core.server.NettyServer");
        createStartScripts.setApplicationName(binary.getName());
        createStartScripts.setOutputDir(scriptsDir);
        Spec<PlayDistribution> matchingBinary=new Spec<PlayDistribution>(){
          @Override public boolean isSatisfiedBy(          PlayDistribution distribution){
            return distribution.getBinary() == binary;
          }
        }
;
        for (        PlayDistribution distribution : distributions.matching(matchingBinary)) {
          CopySpecInternal distSpec=(CopySpecInternal)distribution.getContents();
          CopySpec binSpec=distSpec.addChild().into("bin");
          binSpec.from(createStartScripts);
          binSpec.setFileMode(0755);
        }
      }
    }
);
  }
  for (  final PlayDistribution distribution : distributions) {
    final String stageTaskName=String.format("stage%sDist",StringUtils.capitalize(distribution.getName()));
    final File stageDir=new File(buildDir,"stage");
    final String baseName=StringUtils.isNotEmpty(distribution.getBaseName()) ? distribution.getBaseName() : distribution.getName();
    tasks.create(stageTaskName,Copy.class,new Action<Copy>(){
      @Override public void execute(      Copy copy){
        copy.setDescription("Copies the binary distribution to a staging directory.");
        copy.setGroup(DISTRIBUTION_GROUP);
        copy.setDestinationDir(stageDir);
        CopySpecInternal baseSpec=copy.getRootSpec().addChild();
        baseSpec.into(baseName);
        baseSpec.with(distribution.getContents());
      }
    }
);
    String distributionTaskName=String.format("create%sDist",StringUtils.capitalize(distribution.getName()));
    tasks.create(distributionTaskName,Zip.class,new Action<Zip>(){
      @Override public void execute(      final Zip zip){
        zip.setDescription("Bundles the play binary as a distribution.");
        zip.setGroup(DISTRIBUTION_GROUP);
        zip.setBaseName(baseName);
        zip.setDestinationDir(new File(buildDir,"distributions"));
        ConventionMapping mapping=zip.getConventionMapping();
        mapping.map("version",new Callable<String>(){
          @Override public String call() throws Exception {
            return zip.getProject().getVersion() == Project.DEFAULT_VERSION ? null : zip.getProject().getVersion().toString();
          }
        }
);
        String baseDirName=zip.getArchiveName().substring(0,zip.getArchiveName().length() - zip.getExtension().length() - 1);
        CopySpecInternal baseSpec=zip.getRootSpec().addChild();
        baseSpec.into(baseDirName);
        baseSpec.from(new File(stageDir,baseName));
        zip.dependsOn(stageTaskName);
      }
    }
);
  }
}
