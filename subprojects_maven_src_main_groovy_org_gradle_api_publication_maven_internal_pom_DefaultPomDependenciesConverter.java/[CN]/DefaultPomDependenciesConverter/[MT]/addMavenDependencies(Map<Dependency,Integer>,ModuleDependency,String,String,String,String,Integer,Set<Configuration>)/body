{
  List<Dependency> mavenDependencies=new ArrayList<Dependency>();
  if (dependency instanceof ProjectDependency) {
    ProjectDependency projectDependency=(ProjectDependency)dependency;
    final String artifactId=determineProjectDependencyArtifactId((ProjectDependency)dependency);
    Configuration dependencyConfig=projectDependency.getProjectConfiguration();
    for (    PublishArtifact artifactToPublish : dependencyConfig.getAllArtifacts()) {
      Dependency mavenDependency=new Dependency();
      mavenDependency.setArtifactId(artifactId);
      if (artifactToPublish.getClassifier() != null && !artifactToPublish.getClassifier().equals("")) {
        mavenDependency.setClassifier(artifactToPublish.getClassifier());
      }
      mavenDependencies.add(mavenDependency);
    }
  }
 else {
    Dependency mavenDependency=new Dependency();
    mavenDependency.setArtifactId(name);
    mavenDependency.setClassifier(classifier);
    mavenDependencies.add(mavenDependency);
  }
  for (  Dependency mavenDependency : mavenDependencies) {
    mavenDependency.setGroupId(dependency.getGroup());
    mavenDependency.setVersion(mapToMavenSyntax(dependency.getVersion()));
    mavenDependency.setType(type);
    mavenDependency.setScope(scope);
    mavenDependency.setExclusions(getExclusions(dependency,configurations));
    Optional<Dependency> duplicateDependency=findEqualIgnoreScopeVersionAndExclusions(dependenciesWithPriorities.keySet(),mavenDependency);
    if (!duplicateDependency.isPresent()) {
      dependenciesWithPriorities.put(mavenDependency,priority);
    }
 else {
      int duplicatePriority=dependenciesWithPriorities.get(duplicateDependency.get());
      ArtifactVersion mavenVersion=new DefaultArtifactVersion(mavenDependency.getVersion());
      ArtifactVersion duplicateVersion=new DefaultArtifactVersion(duplicateDependency.get().getVersion());
      boolean higherPriority=priority > duplicatePriority;
      boolean higherVersion=mavenVersion.compareTo(duplicateVersion) > 0;
      if (higherPriority || higherVersion) {
        dependenciesWithPriorities.remove(duplicateDependency.get());
        if (!higherPriority) {
          mavenDependency.setScope(duplicateDependency.get().getScope());
          mavenDependency.setExclusions(duplicateDependency.get().getExclusions());
        }
        int highestPriority=higherPriority ? priority : duplicatePriority;
        dependenciesWithPriorities.put(mavenDependency,highestPriority);
      }
    }
  }
}
