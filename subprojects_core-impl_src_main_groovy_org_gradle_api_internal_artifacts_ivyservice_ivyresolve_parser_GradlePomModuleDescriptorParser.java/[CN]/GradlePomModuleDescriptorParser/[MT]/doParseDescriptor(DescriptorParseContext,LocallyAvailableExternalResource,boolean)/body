{
  GradlePomModuleDescriptorBuilder mdBuilder=new GradlePomModuleDescriptorBuilder(resource,parserSettings);
  PomReader pomReader=new PomReader(resource);
  pomReader.setProperty("parent.version",pomReader.getParentVersion());
  pomReader.setProperty("parent.groupId",pomReader.getParentGroupId());
  pomReader.setProperty("project.parent.version",pomReader.getParentVersion());
  pomReader.setProperty("project.parent.groupId",pomReader.getParentGroupId());
  Map pomProperties=pomReader.getPomProperties();
  for (  Object o : pomProperties.entrySet()) {
    Map.Entry prop=(Map.Entry)o;
    pomReader.setProperty((String)prop.getKey(),(String)prop.getValue());
    mdBuilder.addProperty((String)prop.getKey(),(String)prop.getValue());
  }
  ModuleDescriptor parentDescr=null;
  if (pomReader.hasParent()) {
    ModuleRevisionId parentModRevID=ModuleRevisionId.newInstance(pomReader.getParentGroupId(),pomReader.getParentArtifactId(),pomReader.getParentVersion());
    parentDescr=parseOtherPom(parserSettings,parentModRevID);
    if (parentDescr == null) {
      throw new IOException("Impossible to load parent for " + resource.getName() + ". Parent="+ parentModRevID);
    }
    Map parentPomProps=GradlePomModuleDescriptorBuilder.extractPomProperties(parentDescr.getExtraInfo());
    for (    Object o : parentPomProps.entrySet()) {
      Map.Entry prop=(Map.Entry)o;
      pomReader.setProperty((String)prop.getKey(),(String)prop.getValue());
    }
  }
  String groupId=pomReader.getGroupId();
  String artifactId=pomReader.getArtifactId();
  String version=pomReader.getVersion();
  mdBuilder.setModuleRevId(parserSettings.getCurrentRevisionId(),groupId,artifactId,version);
  mdBuilder.setHomePage(pomReader.getHomePage());
  mdBuilder.setDescription(pomReader.getDescription());
  mdBuilder.setLicenses(pomReader.getLicenses());
  ModuleRevisionId relocation=pomReader.getRelocation();
  if (relocation != null) {
    if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getOrganisation())) {
      LOGGER.error("POM relocation to an other version number is not fully supported in Gradle : {} relocated to {}.",mdBuilder.getModuleDescriptor().getModuleRevisionId(),relocation);
      LOGGER.warn("Please update your dependency to directly use the correct version '{}'.",relocation);
      LOGGER.warn("Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.");
      ModuleDescriptor relocatedModule=parseOtherPom(parserSettings,relocation);
      if (relocatedModule == null) {
        throw new ParseException("impossible to load module " + relocation + " to which "+ mdBuilder.getModuleDescriptor().getModuleRevisionId()+ " has been relocated",0);
      }
      DependencyDescriptor[] dds=relocatedModule.getDependencies();
      for (      DependencyDescriptor dd : dds) {
        mdBuilder.addDependency(dd);
      }
    }
 else {
      LOGGER.info(mdBuilder.getModuleDescriptor().getModuleRevisionId() + " is relocated to " + relocation+ ". Please update your dependencies.");
      LOGGER.debug("Relocated module will be considered as a dependency");
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(mdBuilder.getModuleDescriptor(),relocation,true,false,true);
      Configuration[] m2Confs=GradlePomModuleDescriptorBuilder.MAVEN2_CONFIGURATIONS;
      for (      Configuration m2Conf : m2Confs) {
        if (Visibility.PUBLIC.equals(m2Conf.getVisibility())) {
          dd.addDependencyConfiguration(m2Conf.getName(),m2Conf.getName());
        }
      }
      mdBuilder.addDependency(dd);
    }
  }
 else {
    pomReader.setProperty("project.groupId",groupId);
    pomReader.setProperty("pom.groupId",groupId);
    pomReader.setProperty("groupId",groupId);
    pomReader.setProperty("project.artifactId",artifactId);
    pomReader.setProperty("pom.artifactId",artifactId);
    pomReader.setProperty("artifactId",artifactId);
    pomReader.setProperty("project.version",version);
    pomReader.setProperty("pom.version",version);
    pomReader.setProperty("version",version);
    if (parentDescr != null) {
      mdBuilder.addExtraInfos(parentDescr.getExtraInfo());
      List depMgt=GradlePomModuleDescriptorBuilder.getDependencyManagements(parentDescr);
      for (      Object aDepMgt : depMgt) {
        mdBuilder.addDependencyMgt((PomDependencyMgt)aDepMgt);
      }
      List plugins=GradlePomModuleDescriptorBuilder.getPlugins(parentDescr);
      for (      Object plugin : plugins) {
        mdBuilder.addPlugin((PomDependencyMgt)plugin);
      }
    }
    for (    Object o : pomReader.getDependencyMgt()) {
      PomDependencyMgt dep=(PomDependencyMgt)o;
      if ("import".equals(dep.getScope())) {
        ModuleRevisionId importModRevID=ModuleRevisionId.newInstance(dep.getGroupId(),dep.getArtifactId(),dep.getVersion());
        ModuleDescriptor importDescr=parseOtherPom(parserSettings,importModRevID);
        if (importDescr == null) {
          throw new IOException("Impossible to import module for " + resource.getName() + "."+ " Import="+ importModRevID);
        }
        List depMgt=GradlePomModuleDescriptorBuilder.getDependencyManagements(importDescr);
        for (        Object aDepMgt : depMgt) {
          mdBuilder.addDependencyMgt((PomDependencyMgt)aDepMgt);
        }
      }
 else {
        mdBuilder.addDependencyMgt(dep);
      }
    }
    for (    Object o : pomReader.getDependencies()) {
      PomReader.PomDependencyData dep=(PomReader.PomDependencyData)o;
      mdBuilder.addDependency(dep);
    }
    if (parentDescr != null) {
      for (int i=0; i < parentDescr.getDependencies().length; i++) {
        mdBuilder.addDependency(parentDescr.getDependencies()[i]);
      }
    }
    for (    Object o : pomReader.getPlugins()) {
      PomReader.PomPluginElement plugin=(PomReader.PomPluginElement)o;
      mdBuilder.addPlugin(plugin);
    }
    mdBuilder.addMainArtifact(artifactId,pomReader.getPackaging());
  }
  DefaultModuleDescriptor moduleDescriptor=mdBuilder.getModuleDescriptor();
  return new ModuleDescriptorAdapter(moduleDescriptor.getModuleRevisionId(),moduleDescriptor);
}
