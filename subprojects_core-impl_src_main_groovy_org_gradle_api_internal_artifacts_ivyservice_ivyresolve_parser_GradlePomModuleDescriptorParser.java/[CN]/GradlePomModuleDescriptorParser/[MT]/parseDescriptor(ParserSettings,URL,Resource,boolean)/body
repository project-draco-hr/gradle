{
  GradlePomModuleDescriptorBuilder mdBuilder=new GradlePomModuleDescriptorBuilder(this,res,ivySettings);
  try {
    PomReader domReader=new PomReader(descriptorURL,res);
    domReader.setProperty("parent.version",domReader.getParentVersion());
    domReader.setProperty("parent.groupId",domReader.getParentGroupId());
    domReader.setProperty("project.parent.version",domReader.getParentVersion());
    domReader.setProperty("project.parent.groupId",domReader.getParentGroupId());
    Map pomProperties=domReader.getPomProperties();
    for (    Object o : pomProperties.entrySet()) {
      Map.Entry prop=(Map.Entry)o;
      domReader.setProperty((String)prop.getKey(),(String)prop.getValue());
      mdBuilder.addProperty((String)prop.getKey(),(String)prop.getValue());
    }
    ModuleDescriptor parentDescr=null;
    if (domReader.hasParent()) {
      ModuleRevisionId parentModRevID=ModuleRevisionId.newInstance(domReader.getParentGroupId(),domReader.getParentArtifactId(),domReader.getParentVersion());
      ResolvedModuleRevision parentModule=parseOtherPom(ivySettings,parentModRevID);
      if (parentModule != null) {
        parentDescr=parentModule.getDescriptor();
      }
 else {
        throw new IOException("Impossible to load parent for " + res.getName() + "."+ " Parent="+ parentModRevID);
      }
      if (parentDescr != null) {
        Map parentPomProps=GradlePomModuleDescriptorBuilder.extractPomProperties(parentDescr.getExtraInfo());
        for (        Object o : parentPomProps.entrySet()) {
          Map.Entry prop=(Map.Entry)o;
          domReader.setProperty((String)prop.getKey(),(String)prop.getValue());
        }
      }
    }
    String groupId=domReader.getGroupId();
    String artifactId=domReader.getArtifactId();
    String version=domReader.getVersion();
    mdBuilder.setModuleRevId(groupId,artifactId,version);
    mdBuilder.setHomePage(domReader.getHomePage());
    mdBuilder.setDescription(domReader.getDescription());
    mdBuilder.setLicenses(domReader.getLicenses());
    ModuleRevisionId relocation=domReader.getRelocation();
    if (relocation != null) {
      if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getOrganisation())) {
        Message.error("Relocation to an other version number not supported in ivy : " + mdBuilder.getModuleDescriptor().getModuleRevisionId() + " relocated to "+ relocation+ ". Please update your dependency to directly use the right version.");
        Message.warn("Resolution will only pick dependencies of the relocated element." + "  Artefact and other metadata will be ignored.");
        ResolvedModuleRevision relocatedModule=parseOtherPom(ivySettings,relocation);
        if (relocatedModule == null) {
          throw new ParseException("impossible to load module " + relocation + " to which "+ mdBuilder.getModuleDescriptor().getModuleRevisionId()+ " has been relocated",0);
        }
        DependencyDescriptor[] dds=relocatedModule.getDescriptor().getDependencies();
        for (        DependencyDescriptor dd : dds) {
          mdBuilder.addDependency(dd);
        }
      }
 else {
        Message.info(mdBuilder.getModuleDescriptor().getModuleRevisionId() + " is relocated to " + relocation+ ". Please update your dependencies.");
        Message.verbose("Relocated module will be considered as a dependency");
        DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(mdBuilder.getModuleDescriptor(),relocation,true,false,true);
        Configuration[] m2Confs=GradlePomModuleDescriptorBuilder.MAVEN2_CONFIGURATIONS;
        for (        Configuration m2Conf : m2Confs) {
          if (Visibility.PUBLIC.equals(m2Conf.getVisibility())) {
            dd.addDependencyConfiguration(m2Conf.getName(),m2Conf.getName());
          }
        }
        mdBuilder.addDependency(dd);
      }
    }
 else {
      domReader.setProperty("project.groupId",groupId);
      domReader.setProperty("pom.groupId",groupId);
      domReader.setProperty("groupId",groupId);
      domReader.setProperty("project.artifactId",artifactId);
      domReader.setProperty("pom.artifactId",artifactId);
      domReader.setProperty("artifactId",artifactId);
      domReader.setProperty("project.version",version);
      domReader.setProperty("pom.version",version);
      domReader.setProperty("version",version);
      if (parentDescr != null) {
        mdBuilder.addExtraInfos(parentDescr.getExtraInfo());
        List depMgt=GradlePomModuleDescriptorBuilder.getDependencyManagements(parentDescr);
        for (        Object aDepMgt : depMgt) {
          mdBuilder.addDependencyMgt((PomDependencyMgt)aDepMgt);
        }
        List plugins=GradlePomModuleDescriptorBuilder.getPlugins(parentDescr);
        for (        Object plugin : plugins) {
          mdBuilder.addPlugin((PomDependencyMgt)plugin);
        }
      }
      for (      Object o : domReader.getDependencyMgt()) {
        PomDependencyMgt dep=(PomDependencyMgt)o;
        if ("import".equals(dep.getScope())) {
          ModuleRevisionId importModRevID=ModuleRevisionId.newInstance(dep.getGroupId(),dep.getArtifactId(),dep.getVersion());
          ResolvedModuleRevision importModule=parseOtherPom(ivySettings,importModRevID);
          if (importModule != null) {
            ModuleDescriptor importDescr=importModule.getDescriptor();
            List depMgt=GradlePomModuleDescriptorBuilder.getDependencyManagements(importDescr);
            for (            Object aDepMgt : depMgt) {
              mdBuilder.addDependencyMgt((PomDependencyMgt)aDepMgt);
            }
          }
 else {
            throw new IOException("Impossible to import module for " + res.getName() + "."+ " Import="+ importModRevID);
          }
        }
 else {
          mdBuilder.addDependencyMgt(dep);
        }
      }
      for (      Object o : domReader.getDependencies()) {
        PomReader.PomDependencyData dep=(PomReader.PomDependencyData)o;
        mdBuilder.addDependency(dep);
      }
      if (parentDescr != null) {
        for (int i=0; i < parentDescr.getDependencies().length; i++) {
          mdBuilder.addDependency(parentDescr.getDependencies()[i]);
        }
      }
      for (      Object o : domReader.getPlugins()) {
        PomReader.PomPluginElement plugin=(PomReader.PomPluginElement)o;
        mdBuilder.addPlugin(plugin);
      }
      mdBuilder.addMainArtifact(artifactId,domReader.getPackaging());
    }
  }
 catch (  SAXException e) {
    throw newParserException(e);
  }
  return mdBuilder.getModuleDescriptor();
}
