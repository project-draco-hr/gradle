{
  if (pomReader.hasParent()) {
    ModuleVersionIdentifier parentId=DefaultModuleVersionIdentifier.newId(pomReader.getParentGroupId(),pomReader.getParentArtifactId(),pomReader.getParentVersion());
    PomReader parentPomReader=parseOtherPom(parserSettings,parentId);
    pomReader.setPomParent(parentPomReader);
  }
  pomReader.resolveGAV();
  String groupId=pomReader.getGroupId();
  String artifactId=pomReader.getArtifactId();
  String version=pomReader.getVersion();
  mdBuilder.setModuleRevId(parserSettings.getCurrentRevisionId(),groupId,artifactId,version);
  mdBuilder.setHomePage(pomReader.getHomePage());
  mdBuilder.setDescription(pomReader.getDescription());
  mdBuilder.setLicenses(pomReader.getLicenses());
  ModuleRevisionId relocation=pomReader.getRelocation();
  if (relocation != null) {
    if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getOrganisation())) {
      LOGGER.error("POM relocation to an other version number is not fully supported in Gradle : {} relocated to {}.",mdBuilder.getModuleDescriptor().getModuleRevisionId(),relocation);
      LOGGER.warn("Please update your dependency to directly use the correct version '{}'.",relocation);
      LOGGER.warn("Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.");
      PomReader relocatedModule=parseOtherPom(parserSettings,DefaultModuleVersionIdentifier.newId(relocation));
      Collection<PomDependencyData> pomDependencyDataList=relocatedModule.getDependencies().values();
      for (      PomDependencyData pomDependencyData : pomDependencyDataList) {
        mdBuilder.addDependency(pomDependencyData);
      }
    }
 else {
      LOGGER.info(mdBuilder.getModuleDescriptor().getModuleRevisionId() + " is relocated to " + relocation+ ". Please update your dependencies.");
      LOGGER.debug("Relocated module will be considered as a dependency");
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(mdBuilder.getModuleDescriptor(),relocation,true,false,true);
      Configuration[] m2Confs=GradlePomModuleDescriptorBuilder.MAVEN2_CONFIGURATIONS;
      for (      Configuration m2Conf : m2Confs) {
        if (Visibility.PUBLIC.equals(m2Conf.getVisibility())) {
          dd.addDependencyConfiguration(m2Conf.getName(),m2Conf.getName());
        }
      }
      mdBuilder.addDependency(dd);
    }
  }
 else {
    overrideDependencyMgtsWithImported(parserSettings,pomReader);
    for (    PomDependencyData dependency : pomReader.getDependencies().values()) {
      mdBuilder.addDependency(dependency);
    }
  }
}
