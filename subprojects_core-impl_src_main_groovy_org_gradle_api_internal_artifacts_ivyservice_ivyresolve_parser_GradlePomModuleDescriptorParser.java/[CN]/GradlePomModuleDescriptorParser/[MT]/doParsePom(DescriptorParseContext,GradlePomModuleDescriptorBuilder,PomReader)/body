{
  PomReader parentDescr=null;
  if (pomReader.hasParent()) {
    ModuleRevisionId parentModRevID=ModuleRevisionId.newInstance(pomReader.getParentGroupId(),pomReader.getParentArtifactId(),pomReader.getParentVersion());
    parentDescr=parseOtherPom(parserSettings,parentModRevID);
    Map<String,String> parentPomProps=parentDescr.getProperties();
    for (    Map.Entry<String,String> entry : parentPomProps.entrySet()) {
      pomReader.setProperty(entry.getKey(),entry.getValue());
    }
    pomReader.addDependencyMgts(parentDescr.getDependencyMgt());
  }
  pomReader.resolveGAV();
  String groupId=pomReader.getGroupId();
  String artifactId=pomReader.getArtifactId();
  String version=pomReader.getVersion();
  mdBuilder.setModuleRevId(parserSettings.getCurrentRevisionId(),groupId,artifactId,version);
  mdBuilder.setHomePage(pomReader.getHomePage());
  mdBuilder.setDescription(pomReader.getDescription());
  mdBuilder.setLicenses(pomReader.getLicenses());
  ModuleRevisionId relocation=pomReader.getRelocation();
  if (relocation != null) {
    if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getOrganisation())) {
      LOGGER.error("POM relocation to an other version number is not fully supported in Gradle : {} relocated to {}.",mdBuilder.getModuleDescriptor().getModuleRevisionId(),relocation);
      LOGGER.warn("Please update your dependency to directly use the correct version '{}'.",relocation);
      LOGGER.warn("Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.");
      PomReader relocatedModule=parseOtherPom(parserSettings,relocation);
      List<PomDependencyData> pomDependencyDataList=relocatedModule.getDependencies();
      for (      PomDependencyData pomDependencyData : pomDependencyDataList) {
        mdBuilder.addDependency(pomDependencyData);
      }
    }
 else {
      LOGGER.info(mdBuilder.getModuleDescriptor().getModuleRevisionId() + " is relocated to " + relocation+ ". Please update your dependencies.");
      LOGGER.debug("Relocated module will be considered as a dependency");
      DefaultDependencyDescriptor dd=new DefaultDependencyDescriptor(mdBuilder.getModuleDescriptor(),relocation,true,false,true);
      Configuration[] m2Confs=GradlePomModuleDescriptorBuilder.MAVEN2_CONFIGURATIONS;
      for (      Configuration m2Conf : m2Confs) {
        if (Visibility.PUBLIC.equals(m2Conf.getVisibility())) {
          dd.addDependencyConfiguration(m2Conf.getName(),m2Conf.getName());
        }
      }
      mdBuilder.addDependency(dd);
    }
  }
 else {
    if (parentDescr != null) {
      Set<PomDependencyMgt> depMgt=parentDescr.getDependencyMgt();
      for (      PomDependencyMgt aDepMgt : depMgt) {
        mdBuilder.addDependencyMgt(aDepMgt);
      }
      List<PomPluginElement> plugins=parentDescr.getPlugins();
      for (      PomPluginElement plugin : plugins) {
        mdBuilder.addPlugin(plugin);
      }
    }
    for (    Object o : pomReader.getDependencyMgt()) {
      PomDependencyMgt dep=(PomDependencyMgt)o;
      if ("import".equals(dep.getScope())) {
        ModuleRevisionId importModRevID=ModuleRevisionId.newInstance(dep.getGroupId(),dep.getArtifactId(),dep.getVersion());
        PomReader importDescr=parseOtherPom(parserSettings,importModRevID);
        Set<PomDependencyMgt> depMgt=importDescr.getDependencyMgt();
        pomReader.addDependencyMgts(depMgt);
        for (        PomDependencyMgt aDepMgt : depMgt) {
          mdBuilder.addDependencyMgt(aDepMgt);
        }
      }
 else {
        mdBuilder.addDependencyMgt(dep);
      }
    }
    for (    Object o : pomReader.getDependencies()) {
      PomDependencyData dep=(PomDependencyData)o;
      mdBuilder.addDependency(dep);
    }
    if (parentDescr != null) {
      for (      PomDependencyData pomDependencyData : parentDescr.getDependencies()) {
        mdBuilder.addDependency(pomDependencyData);
      }
    }
    for (    Object o : pomReader.getPlugins()) {
      PomPluginElement plugin=(PomPluginElement)o;
      mdBuilder.addPlugin(plugin);
    }
  }
}
