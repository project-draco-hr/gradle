{
  boolean changed=false;
  if (processed.containsKey(file)) {
    return processed.get(file);
  }
  if (!file.exists()) {
    return true;
  }
  processed.put(file,false);
  CompilationFileState previousState=previous.getState(file);
  HashCode newHash=snapshotter.snapshot(file).getHash();
  IncludeDirectives includeDirectives;
  if (!sameHash(previousState,newHash)) {
    changed=true;
    includeDirectives=sourceIncludesParser.parseIncludes(file);
  }
 else {
    includeDirectives=previousState.getIncludeDirectives();
  }
  SourceIncludesResolver.ResolvedSourceIncludes resolutionResult=resolveIncludes(file,includeDirectives);
  CompilationFileState newState=new CompilationFileState(newHash,includeDirectives,ImmutableSet.copyOf(resolutionResult.getResolvedIncludes()));
  discoveredInputs.addAll(resolutionResult.getCheckedLocations());
  if (!sameResolved(previousState,newState)) {
    changed=true;
  }
  current.setState(file,newState);
  for (  ResolvedInclude dep : newState.getResolvedIncludes()) {
    if (dep.isUnknown()) {
      LOGGER.info("Cannot determine changed state of included '{}' in source file '{}'. Assuming changed.",dep.getInclude(),file.getName());
      changed=true;
    }
 else {
      boolean depChanged=checkChangedAndUpdateState(dep.getFile());
      changed=changed || depChanged;
    }
  }
  processed.put(file,changed);
  return changed;
}
