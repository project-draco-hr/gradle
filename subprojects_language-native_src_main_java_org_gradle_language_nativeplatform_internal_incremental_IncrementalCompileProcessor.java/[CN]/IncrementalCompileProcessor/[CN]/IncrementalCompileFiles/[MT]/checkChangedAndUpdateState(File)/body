{
  boolean changed=false;
  if (processed.containsKey(file)) {
    return processed.get(file);
  }
  if (!file.exists()) {
    return true;
  }
  processed.put(file,false);
  CompilationFileState previousState=previous.getState(file);
  CompilationFileState newState=new CompilationFileState(snapshotter.snapshot(file).getHash());
  if (!sameHash(previousState,newState)) {
    changed=true;
    newState.setSourceIncludes(sourceIncludesParser.parseIncludes(file));
  }
 else {
    newState.setSourceIncludes(previousState.getSourceIncludes());
  }
  SourceIncludesResolver.SourceIncludesResolutionResult resolutionResult=resolveIncludes(file,newState.getSourceIncludes());
  newState.setResolvedIncludes(resolutionResult.getDependencies());
  candidates.addAll(resolutionResult.getIncludeFileCandidates());
  if (!sameResolved(previousState,newState)) {
    changed=true;
  }
  current.setState(file,newState);
  for (  ResolvedInclude dep : newState.getResolvedIncludes()) {
    if (dep.isUnknown()) {
      LOGGER.info(String.format("Cannot determine changed state of included '%s' in source file '%s'. Assuming changed.",dep.getInclude(),file.getName()));
      changed=true;
    }
 else {
      boolean depChanged=checkChangedAndUpdateState(dep.getFile());
      changed=changed || depChanged;
    }
  }
  processed.put(file,changed);
  return changed;
}
