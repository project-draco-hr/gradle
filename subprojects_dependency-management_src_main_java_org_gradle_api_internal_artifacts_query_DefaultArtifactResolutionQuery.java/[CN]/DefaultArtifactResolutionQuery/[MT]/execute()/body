{
  if (componentType == null) {
    throw new IllegalStateException("Must specify component type and artifacts to query.");
  }
  List<ResolutionAwareRepository> repositories=CollectionUtils.collect(repositoryHandler,Transformers.cast(ResolutionAwareRepository.class));
  ConfigurationInternal configuration=configurationContainer.detachedConfiguration();
  final RepositoryChain repositoryChain=ivyFactory.create(configuration,repositories,metadataHandler.getComponentMetadataProcessor());
  final ArtifactResolver artifactResolver=new ErrorHandlingArtifactResolver(repositoryChain.getArtifactResolver());
  return lockingManager.useCache("resolve artifacts",new Factory<ArtifactResolutionResult>(){
    public ArtifactResolutionResult create(){
      Set<ComponentResult> componentResults=Sets.newHashSet();
      for (      ComponentIdentifier componentId : componentIds) {
        if (!(componentId instanceof ModuleComponentIdentifier)) {
          throw new IllegalArgumentException(String.format("Cannot resolve the artifacts for component %s with unsupported type %s.",componentId.getDisplayName(),componentId.getClass().getName()));
        }
        ModuleComponentIdentifier moduleComponentId=(ModuleComponentIdentifier)componentId;
        try {
          componentResults.add(buildComponentResult(moduleComponentId,repositoryChain,artifactResolver));
        }
 catch (        Throwable t) {
          componentResults.add(new DefaultUnresolvedComponentResult(moduleComponentId,t));
        }
      }
      return new DefaultArtifactResolutionResult(componentResults);
    }
  }
);
}
