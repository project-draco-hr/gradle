{
  ModelMap<Task> cast=new DomainObjectSetBackedModelMap<Task>(Task.class,binary.getTasks(),new NamedEntityInstantiator<Task>(){
    @Override public <S extends Task>S create(    String name,    Class<S> type){
      modelNode.getPrivateData(ModelType.of(BinarySpec.class)).getTasks().create(name,type,Actions.doNothing());
      return null;
    }
  }
,new Namer<Object>(){
    @Override public String determineName(    Object object){
      return Cast.cast(Task.class,object).getName();
    }
  }
,new Action<Task>(){
    @Override public void execute(    Task task){
      binary.builtBy(task);
    }
  }
);
  List<ModelView<?>> inputsWithBinary=new ArrayList<ModelView<?>>(inputs.size() + 1);
  inputsWithBinary.addAll(inputs);
  inputsWithBinary.add(InstanceModelView.of(getSubject().getPath(),getSubject().getType(),binary));
  invoke(inputsWithBinary,cast,binary,binary);
}
