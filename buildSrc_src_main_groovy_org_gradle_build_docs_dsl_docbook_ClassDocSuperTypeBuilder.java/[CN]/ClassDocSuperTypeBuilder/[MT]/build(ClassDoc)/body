{
  ClassMetaData classMetaData=classDoc.getClassMetaData();
  String superClassName=classMetaData.getSuperClassName();
  if (superClassName != null) {
    ClassDoc superClass=model.getClassDoc(superClassName);
    classDoc.setSuperClass(superClass);
    return;
  }
  List<String> interfaceNames=classMetaData.getInterfaceNames();
  List<ClassDoc> candidates=new ArrayList<ClassDoc>();
  for (  String interfaceName : interfaceNames) {
    ClassDoc superInterface=model.findClassDoc(interfaceName);
    if (superInterface != null) {
      candidates.add(superInterface);
    }
  }
  if (candidates.isEmpty()) {
    return;
  }
  ClassDoc superInterface=candidates.get(0);
  if (candidates.size() > 1) {
    listener.warning("Ignoring properties and methods inherited from interfaces " + candidates.subList(1,candidates.size()));
  }
  classDoc.setSuperClass(superInterface);
}
