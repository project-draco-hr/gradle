{
  final IvySettings ivySettingsDummy=new IvySettings();
  final Configuration configuration=context.mock(Configuration.class);
  final Set<Configuration> configurations=createConfiguration();
  final File someDescriptorDestination=new File("somePath");
  final List<DependencyResolver> publishResolversDummy=createPublishResolversDummy();
  final Module moduleDummy=context.mock(Module.class,"moduleForResolve");
  File cacheParentDirDummy=createCacheParentDirDummy();
  final DefaultIvyService ivyService=createIvyService();
  setUpForPublish(configurations,publishResolversDummy,moduleDummy,cacheParentDirDummy,ivyService,ivySettingsDummy);
  final Set<String> expectedConfigurations=Configurations.getNames(configurations,true);
  context.checking(new Expectations(){
{
      allowing(configuration).getHierarchy();
      will(returnValue(configurations));
      allowing(resolverProvider).getResolvers();
      will(returnValue(publishResolversDummy));
      one(fileModuleDescriptorMock).toIvyFile(someDescriptorDestination);
      one(ivyService.getDependencyPublisher()).publish(expectedConfigurations,publishResolversDummy,publishModuleDescriptorDummy,someDescriptorDestination,publishEngineDummy);
    }
  }
);
  ivyService.publish(configuration,someDescriptorDestination);
}
