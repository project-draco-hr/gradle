{
  final ByteArrayOutputStream output=new ByteArrayOutputStream();
  final OutputStream syncOutput=new SynchronizedOutputStream(output);
  final List<BuildTask> tasks=new ArrayList<BuildTask>();
  maybeRegisterCleanup();
  GradleConnector gradleConnector=buildConnector(parameters.getGradleUserHome(),parameters.getProjectDir(),parameters.isEmbedded(),parameters.getGradleDistribution());
  ProjectConnection connection=null;
  try {
    connection=gradleConnector.connect();
    DefaultBuildLauncher launcher=(DefaultBuildLauncher)connection.newBuild();
    launcher.setStandardOutput(new NoCloseOutputStream(teeOutput(syncOutput,parameters.getStandardOutput())));
    launcher.setStandardError(new NoCloseOutputStream(teeOutput(syncOutput,parameters.getStandardError())));
    launcher.addProgressListener(new TaskExecutionProgressListener(tasks));
    launcher.withArguments(parameters.getBuildArgs().toArray(new String[parameters.getBuildArgs().size()]));
    launcher.setJvmArguments(parameters.getJvmArgs().toArray(new String[parameters.getJvmArgs().size()]));
    launcher.withInjectedClassPath(parameters.getInjectedClassPath());
    launcher.run();
  }
 catch (  UnsupportedVersionException e) {
    throw new InvalidRunnerConfigurationException("The build could not be executed due to a feature not being supported by the target Gradle version",e);
  }
catch (  BuildException t) {
    return new GradleExecutionResult(output.toString(),tasks,t);
  }
catch (  GradleConnectionException t) {
    StringBuilder message=new StringBuilder("An error occurred executing build with ");
    if (parameters.getBuildArgs().isEmpty()) {
      message.append("no args");
    }
 else {
      message.append("args '");
      message.append(CollectionUtils.join(" ",parameters.getBuildArgs()));
      message.append("'");
    }
    message.append(" in directory '").append(parameters.getProjectDir().getAbsolutePath()).append("'");
    String capturedOutput=output.toString();
    if (!capturedOutput.isEmpty()) {
      message.append(". Output before error:").append(SystemProperties.getInstance().getLineSeparator()).append(capturedOutput);
    }
    throw new IllegalStateException(message.toString(),t);
  }
 finally {
    if (connection != null) {
      connection.close();
    }
  }
  return new GradleExecutionResult(output.toString(),tasks);
}
