{
  URL[] classLoaderURLs=((URLClassLoader)(Thread.currentThread().getContextClassLoader())).getURLs();
  URL pluginClasspathUrl=CollectionUtils.findFirst(classLoaderURLs,new Spec<URL>(){
    @Override public boolean isSatisfiedBy(    URL url){
      return url.toString().endsWith("pluginClasspathManifest/plugin-under-test-metadata.properties");
    }
  }
);
  if (pluginClasspathUrl != null) {
    Properties properties=GUtil.loadProperties(pluginClasspathUrl);
    if (!properties.isEmpty()) {
      if (!properties.containsKey(IMPLEMENTATION_CLASSPATH_PROP_KEY)) {
        throw new IncompletePluginMetadataException(String.format("Plugin classpath manifest file does not contain expected property named '%s'",IMPLEMENTATION_CLASSPATH_PROP_KEY));
      }
      String[] parsedImplementationClasspath=properties.getProperty(IMPLEMENTATION_CLASSPATH_PROP_KEY).split(",");
      return CollectionUtils.collect(parsedImplementationClasspath,new Transformer<File,String>(){
        @Override public File transform(        String classpathEntry){
          return new File(classpathEntry);
        }
      }
);
    }
  }
  return Collections.emptyList();
}
