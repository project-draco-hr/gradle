{
  context.checking(new Expectations(){
{
      WorkerProcessBuilder builder=context.mock(WorkerProcessBuilder.class);
      ObjectConnection connection=context.mock(ObjectConnection.class);
      JavaExecHandleBuilder javaCommandBuilder=context.mock(JavaExecHandleBuilder.class);
      one(workerFactory).create();
      will(returnValue(builder));
      one(builder).worker(with(notNullValue(TestWorker.class)));
      one(builder).applicationClasspath(appClassPath);
      one(builder).setLoadApplicationInSystemClassLoader(true);
      one(action).execute(builder);
      allowing(builder).getJavaCommand();
      will(returnValue(javaCommandBuilder));
      one(options).copyTo(javaCommandBuilder);
      one(builder).build();
      will(returnValue(workerProcess));
      one(workerProcess).start();
      allowing(workerProcess).getConnection();
      will(returnValue(connection));
      one(connection).addIncoming(TestResultProcessor.class,resultProcessor);
      one(connection).addOutgoing(RemoteTestClassProcessor.class);
      will(returnValue(worker));
      one(connection).useParameterSerializer(with(any(TestEventSerializer.class)));
      one(connection).connect();
      one(worker).startProcessing();
    }
  }
);
}
