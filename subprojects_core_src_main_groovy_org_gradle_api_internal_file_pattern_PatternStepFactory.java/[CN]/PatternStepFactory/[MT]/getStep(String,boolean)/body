{
  if (source.length() == 0) {
    return new FixedPatternStep(source,caseSensitive);
  }
  char ch=source.charAt(0);
  int endPrefixWildcard=0;
  if (ch == '*') {
    endPrefixWildcard=1;
    while (endPrefixWildcard < source.length() && source.charAt(endPrefixWildcard) == '*') {
      endPrefixWildcard++;
    }
  }
  if (endPrefixWildcard == source.length()) {
    return ANY_WILDCARD_PATTERN_STEP;
  }
  int endLiteral=endPrefixWildcard;
  for (; endLiteral < source.length(); endLiteral++) {
    ch=source.charAt(endLiteral);
    if (ch == '?') {
      return new RegExpPatternStep(source,caseSensitive);
    }
    if (ch == '*') {
      break;
    }
  }
  if (endLiteral == source.length()) {
    if (endPrefixWildcard == 0) {
      return new FixedPatternStep(source,caseSensitive);
    }
    return new HasSuffixPatternStep(source.substring(endPrefixWildcard),caseSensitive);
  }
  if (endPrefixWildcard > 0) {
    return new RegExpPatternStep(source,caseSensitive);
  }
  int endSuffixWildcard=endLiteral;
  for (; endSuffixWildcard < source.length(); endSuffixWildcard++) {
    ch=source.charAt(endSuffixWildcard);
    if (ch != '*') {
      break;
    }
  }
  if (endSuffixWildcard == source.length()) {
    return new HasPrefixPatternStep(source.substring(0,endLiteral),caseSensitive);
  }
  for (int i=endSuffixWildcard; i < source.length(); i++) {
    ch=source.charAt(i);
    if (ch == '?' || ch == '*') {
      return new RegExpPatternStep(source,caseSensitive);
    }
  }
  return new HasPrefixAndSuffixPatternStep(source.substring(0,endLiteral),source.substring(endSuffixWildcard),caseSensitive);
}
