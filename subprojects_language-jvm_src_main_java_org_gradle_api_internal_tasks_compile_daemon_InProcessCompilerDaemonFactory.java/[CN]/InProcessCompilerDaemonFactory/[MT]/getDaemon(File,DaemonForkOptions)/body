{
  return new CompilerDaemon(){
    public <T extends CompileSpec>CompileResult execute(    Compiler<T> compiler,    T spec){
      ClassLoader groovyClassLoader=classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(forkOptions.getClasspath()));
      GroovySystemLoader groovyLoader=groovySystemLoaderFactory.forClassLoader(groovyClassLoader);
      FilteringClassLoader.Spec filteredGroovySpec=new FilteringClassLoader.Spec();
      for (      String packageName : forkOptions.getSharedPackages()) {
        filteredGroovySpec.allowPackage(packageName);
      }
      ClassLoader filteredGroovy=classLoaderFactory.createFilteringClassLoader(groovyClassLoader,filteredGroovySpec);
      FilteringClassLoader.Spec loggingSpec=new FilteringClassLoader.Spec();
      loggingSpec.allowPackage("org.slf4j");
      loggingSpec.allowClass(Logger.class);
      loggingSpec.allowClass(LogLevel.class);
      ClassLoader loggingClassLoader=classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(),loggingSpec);
      ClassLoader groovyAndLoggingClassLoader=new CachingClassLoader(new MultiParentClassLoader(loggingClassLoader,filteredGroovy));
      ClassLoader workerClassLoader=new VisitableURLClassLoader(groovyAndLoggingClassLoader,ClasspathUtil.getClasspath(compiler.getClass().getClassLoader()));
      try {
        byte[] serializedWorker=GUtil.serialize(new Worker<T>(compiler,spec,gradleUserHomeDir));
        ClassLoaderObjectInputStream inputStream=new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedWorker),workerClassLoader);
        Callable<?> worker=(Callable<?>)inputStream.readObject();
        Object result=worker.call();
        byte[] serializedResult=GUtil.serialize(result);
        inputStream=new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedResult),getClass().getClassLoader());
        return (CompileResult)inputStream.readObject();
      }
 catch (      Exception e) {
        throw UncheckedException.throwAsUncheckedException(e);
      }
 finally {
        groovyLoader.shutdown();
      }
    }
  }
;
}
