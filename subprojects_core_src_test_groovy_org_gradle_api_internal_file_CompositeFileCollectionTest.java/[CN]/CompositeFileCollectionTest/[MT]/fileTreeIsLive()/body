{
  final FileTreeInternal tree1=context.mock(FileTreeInternal.class);
  final FileTreeInternal tree2=context.mock(FileTreeInternal.class);
  final FileCollectionInternal source3=context.mock(FileCollectionInternal.class);
  final FileTreeInternal tree3=context.mock(FileTreeInternal.class);
  context.checking(new Expectations(){
{
      one(source1).getAsFileTree();
      will(returnValue(tree1));
      one(source2).getAsFileTree();
      will(returnValue(tree2));
    }
  }
);
  FileTree fileTree=collection.getAsFileTree();
  assertThat(fileTree,instanceOf(CompositeFileTree.class));
  assertThat(((CompositeFileTree)fileTree).getSourceCollections(),equalTo((Iterable)toList(tree1,tree2)));
  collection.sourceCollections.add(source3);
  context.checking(new Expectations(){
{
      one(source1).getAsFileTree();
      will(returnValue(tree1));
      one(source2).getAsFileTree();
      will(returnValue(tree2));
      one(source3).getAsFileTree();
      will(returnValue(tree3));
    }
  }
);
  assertThat(((CompositeFileTree)fileTree).getSourceCollections(),equalTo((Iterable)toList(tree1,tree2,tree3)));
}
