{
  final File dir1=new File("dir1");
  final File dir2=new File("dir1");
  final File dir3=new File("dir1");
  final FileCollectionInternal source3=context.mock(FileCollectionInternal.class);
  FileTree fileTree=collection.getAsFileTree();
  assertThat(fileTree,instanceOf(CompositeFileTree.class));
  context.checking(new Expectations(){
{
      one(source1).iterator();
      will(returnIterator(dir1));
      one(source2).iterator();
      will(returnIterator(dir2));
    }
  }
);
  ((CompositeFileTree)fileTree).getSourceCollections();
  collection.sourceCollections.add(source3);
  context.checking(new Expectations(){
{
      one(source1).iterator();
      will(returnIterator(dir1));
      one(source2).iterator();
      will(returnIterator(dir2));
      one(source3).iterator();
      will(returnIterator(dir3));
    }
  }
);
  ((CompositeFileTree)fileTree).getSourceCollections();
}
