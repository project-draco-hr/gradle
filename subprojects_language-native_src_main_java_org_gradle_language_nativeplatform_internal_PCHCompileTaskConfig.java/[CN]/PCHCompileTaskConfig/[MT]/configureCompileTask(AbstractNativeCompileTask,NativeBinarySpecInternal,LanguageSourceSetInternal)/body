{
  final DependentSourceSetInternal sourceSet=(DependentSourceSetInternal)languageSourceSet;
  task.setDescription(String.format("Compiles a pre-compiled header for the %s of %s",sourceSet,binary));
  task.includes(new Callable<Set<File>>(){
    public Set<File> call() throws Exception {
      return sourceSet.getSource().getSrcDirs();
    }
  }
);
  final Project project=task.getProject();
  task.source(sourceSet.getPrefixHeaderFile());
  task.setObjectFileDir(project.file(String.valueOf(project.getBuildDir()) + "/objs/" + binary.getNamingScheme().getOutputDirectoryBase()+ "/"+ languageSourceSet.getFullName()+ "PCH"));
  task.dependsOn(project.getTasks().withType(PrefixHeaderFileGenerateTask.class).matching(new Spec<PrefixHeaderFileGenerateTask>(){
    @Override public boolean isSatisfiedBy(    PrefixHeaderFileGenerateTask prefixHeaderFileGenerateTask){
      return prefixHeaderFileGenerateTask.getPrefixHeaderFile().equals(sourceSet.getPrefixHeaderFile());
    }
  }
));
  binary.binaryInputs(task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include("**/*.obj","**/*.o")));
  binary.getPrefixFileToPCH().put(sourceSet.getPrefixHeaderFile(),task.getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include("**/*.pch","**/*.gch")));
}
