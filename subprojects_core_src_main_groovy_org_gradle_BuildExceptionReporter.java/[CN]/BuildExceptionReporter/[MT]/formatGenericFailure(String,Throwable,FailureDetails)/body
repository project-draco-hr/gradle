{
  details.summary.format("%s failed with an exception.",granularity);
  fillInFailureResolution(details);
  if (failure instanceof LocationAwareException) {
    final LocationAwareException scriptException=(LocationAwareException)failure;
    details.failure=scriptException.getCause();
    if (scriptException.getLocation() != null) {
      details.location.text(scriptException.getLocation());
    }
    scriptException.visitReportableCauses(new TreeVisitor<Throwable>(){
      int depth;
      int causes;
      @Override public void node(      final Throwable node){
        if (node == scriptException) {
          details.details.text(getMessage(scriptException.getCause()));
        }
 else {
          if (shouldLimitNumberOfCauses()) {
            if (causes < maxCauses) {
              final LinePrefixingStyledTextOutput output=getLinePrefixingStyledTextOutput();
              output.text(getMessage(node));
            }
          }
 else {
            final LinePrefixingStyledTextOutput output=getLinePrefixingStyledTextOutput();
            output.text(getMessage(node));
          }
          causes++;
        }
      }
      @Override public void startChildren(){
        depth++;
        causes=0;
      }
      @Override public void endChildren(){
        if (shouldLimitNumberOfCauses()) {
          int causesOverMaxCount=causes - maxCauses;
          if (causesOverMaxCount > 0) {
            final LinePrefixingStyledTextOutput output=getLinePrefixingStyledTextOutput();
            output.text(String.format("... %d more",causesOverMaxCount));
          }
        }
        depth--;
        causes=0;
      }
      private boolean shouldLimitNumberOfCauses(){
        return loggingConfiguration.getLogLevel() != LogLevel.DEBUG;
      }
      private LinePrefixingStyledTextOutput getLinePrefixingStyledTextOutput(){
        details.details.format("%n");
        StringBuilder prefix=new StringBuilder();
        for (int i=1; i < depth; i++) {
          prefix.append("   ");
        }
        details.details.text(prefix);
        prefix.append("  ");
        details.details.style(Info).text("> ").style(Normal);
        return new LinePrefixingStyledTextOutput(details.details,prefix);
      }
    }
);
  }
 else {
    details.details.text(getMessage(failure));
  }
}
