{
  final TaskHistory history=loadHistory(task);
  final LazyTaskExecution currentExecution=new LazyTaskExecution();
  currentExecution.snapshotRepository=snapshotRepository;
  currentExecution.setOutputFiles(outputFiles(task));
  final LazyTaskExecution previousExecution=findPreviousExecution(currentExecution,history);
  if (previousExecution != null) {
    previousExecution.snapshotRepository=snapshotRepository;
  }
  history.configurations.add(0,currentExecution);
  return new History(){
    public TaskExecution getPreviousExecution(){
      return previousExecution;
    }
    public TaskExecution getCurrentExecution(){
      return currentExecution;
    }
    public void update(){
      if (currentExecution.inputFilesSnapshotId == null && currentExecution.inputFilesSnapshot != null) {
        currentExecution.inputFilesSnapshotId=snapshotRepository.add(currentExecution.inputFilesSnapshot);
      }
      if (currentExecution.outputFilesSnapshotId == null && currentExecution.outputFilesSnapshot != null) {
        currentExecution.outputFilesSnapshotId=snapshotRepository.add(currentExecution.outputFilesSnapshot);
      }
      while (history.configurations.size() > TaskHistory.MAX_HISTORY_ENTRIES) {
        LazyTaskExecution execution=history.configurations.remove(history.configurations.size() - 1);
        if (execution.inputFilesSnapshotId != null) {
          snapshotRepository.remove(execution.inputFilesSnapshotId);
        }
        if (execution.outputFilesSnapshotId != null) {
          snapshotRepository.remove(execution.outputFilesSnapshotId);
        }
      }
      taskHistoryCache.put(task.getPath(),history);
    }
  }
;
}
