{
  final SelfResolvingDependency selfResolvingDependency=context.mock(SelfResolvingDependency.class);
  final ProjectDependency targetProjectDependencyStub=context.mock(ProjectDependency.class);
  final Set<File> selfResolvingFiles=toSet(new File("somePath"));
  final Set<File> selfResolvingTargetProjectDependencyFiles=toSet(new File("someOtherPath"));
  context.checking(new Expectations(){
{
      allowing(targetConfigurationHandlerStub).getByName("conf1");
      will(returnValue(targetConfigurationMock));
      allowing(targetConfigurationMock).getAllDependencies(SelfResolvingDependency.class);
      will(returnValue(toSet(selfResolvingDependency,targetProjectDependencyStub)));
      allowing(selfResolvingDependency).resolve();
      will(returnValue(selfResolvingFiles));
      allowing(targetProjectDependencyStub).resolve();
      will(returnValue(selfResolvingTargetProjectDependencyFiles));
    }
  }
);
  DefaultProjectDependency projectDependency=new DefaultProjectDependency(targetProjectStub,"conf1",instruction);
  projectDependency.setTransitive(false);
  assertThat(projectDependency.resolve(true),equalTo(selfResolvingFiles));
}
