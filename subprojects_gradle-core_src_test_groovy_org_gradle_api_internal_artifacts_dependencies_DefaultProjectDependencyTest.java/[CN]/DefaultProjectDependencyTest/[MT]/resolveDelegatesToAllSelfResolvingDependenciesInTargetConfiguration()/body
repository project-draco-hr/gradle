{
  final SelfResolvingDependency projectSelfResolvingDependency=context.mock(SelfResolvingDependency.class);
  final ProjectDependency transitiveProjectDependencyStub=context.mock(ProjectDependency.class);
  final Set<File> selfResolvingProjectFiles=toSet(new File("somePath"));
  final Set<File> selfResolvingTransitiveProjectDependencyFiles=toSet(new File("someOtherPath"));
  context.checking(new Expectations(){
{
      allowing(projectConfigurationsStub).getByName("conf1");
      will(returnValue(projectConfigurationStub));
      allowing(projectConfigurationStub).getAllDependencies(SelfResolvingDependency.class);
      will(returnValue(toSet(projectSelfResolvingDependency,transitiveProjectDependencyStub)));
      allowing(projectSelfResolvingDependency).resolve();
      will(returnValue(selfResolvingProjectFiles));
      allowing(transitiveProjectDependencyStub).isTransitive();
      will(returnValue(true));
      allowing(transitiveProjectDependencyStub).resolve();
      will(returnValue(selfResolvingTransitiveProjectDependencyFiles));
    }
  }
);
  DefaultProjectDependency projectDependency=new DefaultProjectDependency(dependencyProjectStub,"conf1",instruction);
  Set<File> expectedResult=GUtil.addSets(selfResolvingProjectFiles,selfResolvingTransitiveProjectDependencyFiles);
  assertThat(projectDependency.resolve(),equalTo(expectedResult));
  assertThat(projectDependency.resolve(true),equalTo(expectedResult));
}
