{
  final Configuration configurationStub=context.mock(Configuration.class);
  final ConfigurationHandler configurationHandlerStub=context.mock(ConfigurationHandler.class);
  final Project projectStub=context.mock(Project.class);
  final SelfResolvingDependency selfResolvingDependency=context.mock(SelfResolvingDependency.class);
  final Set<File> selfResolvingFiles=WrapUtil.toSet(new File("somePath"));
  context.checking(new Expectations(){
{
      allowing(projectStub).getConfigurations();
      will(returnValue(configurationHandlerStub));
      allowing(configurationHandlerStub).getByName("conf1");
      will(returnValue(configurationStub));
      allowing(configurationStub).getAllDependencies(SelfResolvingDependency.class);
      will(returnValue(WrapUtil.toSet(selfResolvingDependency)));
      allowing(selfResolvingDependency).resolve();
      will(returnValue(selfResolvingFiles));
    }
  }
);
  DefaultProjectDependency projectDependency=new DefaultProjectDependency(projectStub,"conf1");
  assertThat(projectDependency.resolve(),equalTo(selfResolvingFiles));
}
