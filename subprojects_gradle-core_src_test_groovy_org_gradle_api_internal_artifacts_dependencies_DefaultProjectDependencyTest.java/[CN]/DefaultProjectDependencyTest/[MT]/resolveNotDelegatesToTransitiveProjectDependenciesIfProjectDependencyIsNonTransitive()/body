{
  final SelfResolvingDependency projectSelfResolvingDependency=context.mock(SelfResolvingDependency.class);
  final ProjectDependency transitiveProjectDependencyStub=context.mock(ProjectDependency.class);
  final Set<File> selfResolvingProjectFiles=toSet(new File("somePath"));
  context.checking(new Expectations(){
{
      allowing(projectConfigurationsStub).getByName("conf1");
      will(returnValue(projectConfigurationStub));
      allowing(projectSelfResolvingDependency).resolve();
      will(returnValue(selfResolvingProjectFiles));
      allowing(projectConfigurationStub).getAllDependencies(SelfResolvingDependency.class);
      will(returnValue(toSet(projectSelfResolvingDependency,transitiveProjectDependencyStub)));
      allowing(projectConfigurationStub).files(with(any(Spec.class)));
      will(returnValue(selfResolvingProjectFiles));
    }
  }
);
  DefaultProjectDependency projectDependency=new DefaultProjectDependency(dependencyProjectStub,"conf1",instruction);
  projectDependency.setTransitive(false);
  assertThat(projectDependency.resolve(true),equalTo(selfResolvingProjectFiles));
}
