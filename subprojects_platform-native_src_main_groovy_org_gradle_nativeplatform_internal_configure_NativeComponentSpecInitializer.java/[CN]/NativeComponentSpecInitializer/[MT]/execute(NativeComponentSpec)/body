{
  TargetedNativeComponentInternal targetedComponent=(TargetedNativeComponentInternal)projectNativeComponent;
  List<PlatformRequirement> targetPlatforms=targetedComponent.getTargetPlatforms();
  if (targetPlatforms.isEmpty()) {
    PlatformRequirement requirement=DefaultPlatformRequirement.create(NativePlatforms.getDefaultPlatformName());
    targetPlatforms=Collections.singletonList(requirement);
  }
  List<NativePlatform> resolvedPlatforms=platforms.resolve(NativePlatform.class,targetPlatforms);
  for (  NativePlatform platform : resolvedPlatforms) {
    NativeToolChainInternal toolChain=(NativeToolChainInternal)toolChainRegistry.getForPlatform(platform);
    PlatformToolProvider toolProvider=toolChain.select((NativePlatformInternal)platform);
    BinaryNamingSchemeBuilder builder=namingSchemeBuilder.withComponentName(projectNativeComponent.getName());
    builder=maybeAddDimension(builder,platform,resolvedPlatforms);
    executeForEachBuildType(projectNativeComponent,(NativePlatformInternal)platform,builder,toolChain,toolProvider);
  }
}
