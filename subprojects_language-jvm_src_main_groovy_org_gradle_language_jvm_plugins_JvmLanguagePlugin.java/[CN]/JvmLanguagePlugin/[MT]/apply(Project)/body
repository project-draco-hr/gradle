{
  target.getPlugins().apply(LanguageBasePlugin.class);
  ProjectSourceSet projectSourceSet=target.getExtensions().getByType(ProjectSourceSet.class);
  projectSourceSet.all(new Action<FunctionalSourceSet>(){
    public void execute(    final FunctionalSourceSet functionalSourceSet){
      functionalSourceSet.registerFactory(ResourceSet.class,new NamedDomainObjectFactory<ResourceSet>(){
        public ResourceSet create(        String name){
          return instantiator.newInstance(DefaultResourceSet.class,name,instantiator.newInstance(DefaultSourceDirectorySet.class,name,fileResolver),functionalSourceSet);
        }
      }
);
    }
  }
);
  BinaryContainer binaryContainer=target.getExtensions().getByType(BinaryContainer.class);
  binaryContainer.registerFactory(ClassDirectoryBinary.class,new NamedDomainObjectFactory<ClassDirectoryBinary>(){
    public ClassDirectoryBinary create(    String name){
      return instantiator.newInstance(DefaultClassDirectoryBinary.class,name);
    }
  }
);
  binaryContainer.withType(ClassDirectoryBinary.class).all(new Action<ClassDirectoryBinary>(){
    public void execute(    final ClassDirectoryBinary binary){
      ConventionMapping conventionMapping=new DslObject(binary).getConventionMapping();
      final BinaryNamingScheme namingScheme=((BinaryInternal)binary).getNamingScheme();
      conventionMapping.map("classesDir",new Callable<File>(){
        public File call() throws Exception {
          return new File(new File(target.getBuildDir(),"classes"),namingScheme.getOutputDirectoryBase());
        }
      }
);
      final Task classesTask=target.getTasks().create(namingScheme.getTaskName(null,"classes"));
      classesTask.setDescription(String.format("Assembles %s.",binary));
      binary.setClassesTask(classesTask);
      binary.getSource().withType(ResourceSet.class).all(new Action<ResourceSet>(){
        public void execute(        ResourceSet resourceSet){
          Copy resourcesTask=target.getTasks().create(namingScheme.getTaskName("process","resources"),ProcessResources.class);
          resourcesTask.setDescription(String.format("Processes %s.",resourceSet));
          new DslObject(resourcesTask).getConventionMapping().map("destinationDir",new Callable<File>(){
            public File call() throws Exception {
              return binary.getResourcesDir();
            }
          }
);
          classesTask.dependsOn(resourcesTask);
          resourcesTask.from(resourceSet.getSource());
        }
      }
);
    }
  }
);
}
