{
  ModuleRevisionId moduleRevisionId=md.getModuleRevisionId();
  writer.startElement("info");
  writer.attribute("organisation",moduleRevisionId.getOrganisation());
  writer.attribute("module",moduleRevisionId.getName());
  ModuleRevisionId resolvedModuleRevisionId=md.getResolvedModuleRevisionId();
  String branch=resolvedModuleRevisionId.getBranch();
  if (branch != null) {
    writer.attribute("branch",branch);
  }
  String revision=resolvedModuleRevisionId.getRevision();
  if (revision != null) {
    writer.attribute("revision",revision);
  }
  writer.attribute("status",md.getStatus());
  SimpleDateFormat ivyDateFormat=new SimpleDateFormat(IVY_DATE_PATTERN);
  Date publicationDate=md.getResolvedPublicationDate();
  if (publicationDate != null) {
    writer.attribute("publication",ivyDateFormat.format(publicationDate));
  }
  if (md.isDefault()) {
    writer.attribute("default","true");
  }
  if (md instanceof DefaultModuleDescriptor) {
    DefaultModuleDescriptor dmd=(DefaultModuleDescriptor)md;
    if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals("system")) {
      writer.attribute("namespace",dmd.getNamespace().getName());
    }
  }
  if (!md.getExtraAttributes().isEmpty()) {
    printExtraAttributes(md,writer);
  }
  ExtendsDescriptor[] parents=md.getInheritedDescriptors();
  if (parents.length != 0) {
    throw new UnsupportedOperationException("Extends descriptors not supported.");
  }
  License[] licenses=md.getLicenses();
  for (int i=0; i < licenses.length; i++) {
    License license=licenses[i];
    writer.startElement("license");
    if (license.getName() != null) {
      writer.attribute("name",license.getName());
    }
    if (license.getUrl() != null) {
      writer.attribute("url",license.getUrl());
    }
    writer.endElement();
  }
  if (md.getHomePage() != null || md.getDescription() != null) {
    writer.startElement("description");
    if (md.getHomePage() != null) {
      writer.attribute("homepage",md.getHomePage());
    }
    if (md.getDescription() != null && md.getDescription().trim().length() > 0) {
      writer.characters(md.getDescription());
    }
    writer.endElement();
  }
  for (Iterator it=md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) {
    Map.Entry extraDescr=(Map.Entry)it.next();
    if (extraDescr.getValue() == null || ((String)extraDescr.getValue()).length() == 0) {
      continue;
    }
    writer.startElement(extraDescr.getKey().toString());
    writer.characters(extraDescr.getValue().toString());
    writer.endElement();
  }
  writer.endElement();
}
