{
  if (value == null) {
    builder.putString("$NULL");
    return;
  }
  if (value.getClass().isArray()) {
    builder.putString("Array");
    for (int idx=0, len=Array.getLength(value); idx < len; idx++) {
      builder.putInt(idx);
      appendToCacheKey(builder,Array.get(value,idx));
    }
    return;
  }
  if (value instanceof Iterable) {
    builder.putString("Iterable");
    int idx=0;
    for (    Object elem : (Iterable<?>)value) {
      builder.putInt(idx);
      appendToCacheKey(builder,elem);
      idx++;
    }
    return;
  }
  if (value instanceof Map) {
    builder.putString("Map");
    int idx=0;
    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {
      builder.putInt(idx);
      appendToCacheKey(builder,entry.getKey());
      appendToCacheKey(builder,entry.getValue());
      idx++;
    }
    return;
  }
  if (value instanceof Boolean) {
    builder.putBoolean((Boolean)value);
  }
 else   if (value instanceof Integer) {
    builder.putInt((Integer)value);
  }
 else   if (value instanceof Short) {
    builder.putInt((Short)value);
  }
 else   if (value instanceof Byte) {
    builder.putInt((Byte)value);
  }
 else   if (value instanceof Double) {
    builder.putDouble((Double)value);
  }
 else   if (value instanceof Float) {
    builder.putDouble((Float)value);
  }
 else   if (value instanceof BigInteger) {
    builder.putBytes(((BigInteger)value).toByteArray());
  }
 else   if (value instanceof CharSequence) {
    builder.putString((CharSequence)value);
  }
 else   if (value instanceof Enum) {
    builder.putString(value.getClass().getName());
    builder.putString(((Enum)value).name());
  }
 else {
    byte[] bytes=SerializationUtils.serialize((Serializable)value);
    builder.putBytes(bytes);
  }
}
