{
  List<FileCollection> result=new ArrayList<FileCollection>();
  while (!queue.isEmpty()) {
    Object element=queue.removeFirst();
    if (element instanceof CompositeFileCollection) {
      CompositeFileCollection fileCollection=(CompositeFileCollection)element;
      addTo=queue.subList(0,0);
      try {
        fileCollection.resolve(this);
      }
  finally {
        addTo=queue;
      }
    }
 else     if (element instanceof FileCollection) {
      FileCollection fileCollection=(FileCollection)element;
      result.add(fileCollection);
    }
 else     if (element instanceof MinimalFileCollection) {
      MinimalFileCollection fileCollection=(MinimalFileCollection)element;
      result.add(new FileCollectionAdapter(fileCollection));
    }
 else     if (element instanceof Closure) {
      Closure closure=(Closure)element;
      Object closureResult=closure.call();
      if (closureResult != null) {
        queue.addFirst(closureResult);
      }
    }
 else     if (element instanceof Callable) {
      Callable callable=(Callable)element;
      Object callableResult;
      try {
        callableResult=callable.call();
      }
 catch (      Exception e) {
        throw UncheckedException.asUncheckedException(e);
      }
      if (callableResult != null) {
        queue.addFirst(callableResult);
      }
    }
 else     if (element instanceof Iterable) {
      Iterable<?> iterable=(Iterable)element;
      GUtil.addToCollection(queue.subList(0,0),iterable);
    }
 else     if (element instanceof Object[]) {
      Object[] array=(Object[])element;
      GUtil.addToCollection(queue.subList(0,0),Arrays.asList(array));
    }
 else {
      result.add(new SingletonFileCollection(fileResolver.resolve(element),defaultBuiltBy));
    }
  }
  return result;
}
