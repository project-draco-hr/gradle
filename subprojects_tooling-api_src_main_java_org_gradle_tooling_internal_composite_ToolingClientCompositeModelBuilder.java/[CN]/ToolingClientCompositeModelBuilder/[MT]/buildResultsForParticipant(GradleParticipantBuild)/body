{
  final Set<ModelResult<T>> participantResults=Sets.newConcurrentHashSet();
  if (isBuildEnvironment(modelType)) {
    GradleBuild gradleBuild=getProjectModel(participant,GradleBuild.class);
    BuildEnvironment buildEnvironment=getProjectModel(participant,BuildEnvironment.class);
    addPerBuildModelResult(participant,gradleBuild.getRootProject(),buildEnvironment,participantResults);
  }
 else   if (isGradleBuild(modelType)) {
    GradleBuild gradleBuild=getProjectModel(participant,GradleBuild.class);
    addPerBuildModelResult(participant,gradleBuild.getRootProject(),gradleBuild,participantResults);
  }
 else   if (hasProjectHierarchy(modelType)) {
    addResultsFromHierarchicalModel(participant,participantResults);
  }
 else   if (supportsCustomModelAction(participant)) {
    addResultsUsingModelAction(participant,participantResults);
  }
 else {
    GradleBuild gradleBuild=getProjectModel(participant,GradleBuild.class);
    buildResultsWithSeparateProjectConnections(participant,gradleBuild.getRootProject(),participantResults);
  }
  return participantResults;
}
