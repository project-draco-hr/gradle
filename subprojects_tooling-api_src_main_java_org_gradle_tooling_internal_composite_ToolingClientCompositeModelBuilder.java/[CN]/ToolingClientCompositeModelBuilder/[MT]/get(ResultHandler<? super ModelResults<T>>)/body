{
  final Set<ModelResult<T>> results=Sets.newConcurrentHashSet();
  for (  GradleParticipantBuild participant : participants) {
    if (hasProjectHierarchy(modelType)) {
      buildResultsFromHierarchicalModel(participant,results);
    }
 else {
      if (!isBuildEnvironment(modelType) && supportsCustomModelAction(participant)) {
        buildResultsUsingModelAction(participant,results);
      }
 else {
        EclipseProject rootProject=getModel(participant,EclipseProject.class);
        buildResultsWithSeparateProjectConnections(participant,rootProject,results);
      }
    }
  }
  handler.onComplete(new ModelResults<T>(){
    @Override public Iterator<ModelResult<T>> iterator(){
      return results.iterator();
    }
  }
);
}
