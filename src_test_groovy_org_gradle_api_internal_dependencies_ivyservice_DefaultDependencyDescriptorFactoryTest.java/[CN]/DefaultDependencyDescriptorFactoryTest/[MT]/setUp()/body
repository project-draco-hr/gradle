{
  dependencyDescriptorFactory=new DefaultDependencyDescriptorFactory();
  excludeRuleContainerMock=context.mock(ExcludeRuleContainer.class);
  dependencyConfigurationMappingContainerMock=context.mock(DependencyConfigurationMappingContainer.class);
  excludeRuleWithAllConf=HelperUtil.getTestExcludeRule();
  excludeRuleWithAllConf.addConfiguration(TEST_CONF);
  excludeRuleWithAllConf.addConfiguration(TEST_CONF_2);
  excludeRuleWithAllConf.addConfiguration(TEST_CONF_3);
  excludeRuleWithConf=HelperUtil.getTestExcludeRule();
  excludeRuleWithConf.addConfiguration(TEST_CONF_2);
  excludeRuleWithConf.addConfiguration(TEST_CONF_3);
  testDependencyConfigurations=new HashMap<Configuration,List<String>>(){
{
      put(createMockConf(TEST_CONF),WrapUtil.toList("depconf1","depconf2"));
      put(createMockConf(TEST_CONF_2),WrapUtil.toList("depconf3"));
      put(DependencyConfigurationMappingContainer.WILDCARD,WrapUtil.toList(WILDCARD_CONF));
    }
  }
;
  context.checking(new Expectations(){
{
      allowing(excludeRuleContainerMock).createRules(new ArrayList<String>(TEST_CONFS));
      will(returnValue(WrapUtil.toList(excludeRuleWithConf,excludeRuleWithAllConf)));
      allowing(dependencyConfigurationMappingContainerMock).getMappings();
      will(returnValue(testDependencyConfigurations));
    }
  }
);
  artifact=new DefaultDependencyArtifact("name","type",null,null,null);
  artifactWithClassifierAndConfs=new DefaultDependencyArtifact("name2","type2","ext2","classifier2","http://www.url2.com");
  artifactWithClassifierAndConfs.setConfs(WrapUtil.toList(TEST_CONF_2,TEST_CONF_3));
}
