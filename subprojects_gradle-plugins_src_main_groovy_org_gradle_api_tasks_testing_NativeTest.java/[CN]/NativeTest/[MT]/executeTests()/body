{
  ((LocalSimpleForkPolicyConfig)defaultPipelineConfig.getForkPolicyConfig()).setAmountToStart(amountOfForksToStart);
  ReforkItemConfigs reforkItemConfigs=null;
  if (reforkEvery >= 1) {
    if (reforkItemConfigs == null)     reforkItemConfigs=new ReforkItemConfigs();
    final AmountOfTestsExecutedByForkConfig reforkEveryConfig=(AmountOfTestsExecutedByForkConfig)ReforkReasonRegister.getDecisionContextItem(ReforkReasons.AMOUNT_OF_TEST_EXECUTED_BY_FORK).getConfig();
    reforkEveryConfig.setReforkEvery(reforkEvery);
    reforkItemConfigs.addItemConfig(ReforkReasons.AMOUNT_OF_TEST_EXECUTED_BY_FORK,reforkEveryConfig);
  }
  if (lowMemoryThreshold > 0) {
    if (reforkItemConfigs == null)     reforkItemConfigs=new ReforkItemConfigs();
    final ForkMemoryLowConfig forkMemoryLowConfig=(ForkMemoryLowConfig)ReforkReasonRegister.getDecisionContextItem(ReforkReasons.FORK_MEMORY_LOW).getConfig();
    forkMemoryLowConfig.setMemoryLowThreshold(lowMemoryThreshold);
    reforkItemConfigs.addItemConfig(ReforkReasons.FORK_MEMORY_LOW,forkMemoryLowConfig);
  }
  if (reforkItemConfigs != null)   defaultPipelineConfig.setReforkItemConfigs(reforkItemConfigs);
  final TestOrchestrator orchestrator=new TestOrchestrator(this);
  orchestrator.execute();
  if (stopAtFailuresOrErrors && GUtil.isTrue(getProject().getAnt().getProject().getProperty(FAILURES_OR_ERRORS_PROPERTY))) {
    if (testReport) {
      throw new GradleException("There were failing tests. See the report at " + getTestReportDir() + ".");
    }
 else {
      throw new GradleException("There were failing tests.");
    }
  }
}
