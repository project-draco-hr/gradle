{
  ((LocalSimpleForkPolicyConfig)defaultPipelineConfig.getForkPolicyConfig()).setAmountToStart(amountOfForksToStart);
  ReforkReasonConfigs reforkReasonConfigs=null;
  Long forkEvery=getForkEvery();
  if (forkEvery != null) {
    if (reforkReasonConfigs == null) {
      reforkReasonConfigs=new ReforkReasonConfigs();
    }
    final AmountOfTestCasesConfig reforkEveryConfig=(AmountOfTestCasesConfig)ReforkReasonRegister.getReforkReason(ReforkReasons.AMOUNT_OF_TESTCASES).getConfig();
    reforkEveryConfig.setReforkEvery(forkEvery);
    reforkReasonConfigs.addOrUpdateReforkReasonConfig(reforkEveryConfig);
  }
  if (lowMemoryThreshold > 0) {
    if (reforkReasonConfigs == null) {
      reforkReasonConfigs=new ReforkReasonConfigs();
    }
    final ForkMemoryLowConfig forkMemoryLowConfig=(ForkMemoryLowConfig)ReforkReasonRegister.getReforkReason(ReforkReasons.FORK_MEMORY_LOW).getConfig();
    forkMemoryLowConfig.setMemoryLowThreshold(lowMemoryThreshold);
    reforkReasonConfigs.addOrUpdateReforkReasonConfig(forkMemoryLowConfig);
  }
  if (reforkReasonConfigs != null) {
    defaultPipelineConfig.setReforkReasonConfigs(reforkReasonConfigs);
  }
  final TestOrchestrator orchestrator=new TestOrchestrator(this);
  orchestrator.execute();
  if (!isIgnoreFailures() && GUtil.isTrue(getProject().getAnt().getProject().getProperty(FAILURES_OR_ERRORS_PROPERTY))) {
    if (isTestReport()) {
      throw new GradleException("There were failing tests. See the report at " + getTestReportDir() + ".");
    }
 else {
      throw new GradleException("There were failing tests.");
    }
  }
}
