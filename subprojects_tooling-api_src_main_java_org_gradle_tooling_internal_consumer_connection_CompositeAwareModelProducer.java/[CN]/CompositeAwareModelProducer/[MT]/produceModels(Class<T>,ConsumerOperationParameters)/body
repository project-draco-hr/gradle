{
  BuildResult<?> result=buildModels(elementType,operationParameters);
  if (result.getModel() instanceof Map) {
    final List<ModelResult<T>> models=new LinkedList<ModelResult<T>>();
    Map<Object,Object> resultMap=(Map)result.getModel();
    for (    Map.Entry<Object,Object> entry : resultMap.entrySet()) {
      ProjectIdentity projectIdentity=adapter.adapt(ProjectIdentity.class,entry.getKey(),getCompatibilityMapperAction());
      if (entry.getValue() instanceof Throwable) {
        String failureMessage=String.format("Could not fetch model of type '%s' using Gradle installation.",elementType.getSimpleName());
        models.add(new DefaultModelResult<T>(projectIdentity,new GradleConnectionException(failureMessage,(Throwable)entry.getValue())));
      }
 else {
        T modelResult=adapter.adapt(elementType,entry.getValue(),getCompatibilityMapperAction());
        models.add(new DefaultModelResult<T>(projectIdentity,modelResult));
      }
    }
    return models;
  }
  throw new UnsupportedOperationException(String.format("Produced result of type %s for model %s",result.getModel().getClass().getCanonicalName(),elementType.getCanonicalName()));
}
