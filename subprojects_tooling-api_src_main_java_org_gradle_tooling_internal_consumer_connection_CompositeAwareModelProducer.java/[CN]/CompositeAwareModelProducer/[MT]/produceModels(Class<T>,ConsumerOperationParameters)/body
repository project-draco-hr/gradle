{
  BuildResult<?> result=buildModels(elementType,operationParameters);
  ExceptionTransformer exceptionTransformer=new CompositeExceptionTransformer(elementType);
  if (result.getModel() instanceof List) {
    final List<ModelResult<T>> models=new LinkedList<ModelResult<T>>();
    List resultMap=(List)result.getModel();
    for (    Object modelValueTriple : resultMap) {
      Object[] t=(Object[])modelValueTriple;
      ProjectIdentifier projectIdentifier=new DefaultProjectIdentifier((File)t[0],(String)t[1]);
      Object modelValue=t[2];
      if (modelValue instanceof Throwable) {
        GradleConnectionException failure=exceptionTransformer.transform((Throwable)modelValue);
        models.add(new DefaultFailedModelResult<T>(projectIdentifier,failure));
      }
 else {
        T modelResult=applyCompatibilityMapping(adapter.builder(elementType),projectIdentifier).build(modelValue);
        models.add(new DefaultModelResult<T>(modelResult));
      }
    }
    return models;
  }
  throw new UnsupportedOperationException(String.format("Produced result of type %s for model %s",result.getModel().getClass().getCanonicalName(),elementType.getCanonicalName()));
}
