{
  for (  Object argument : arguments) {
    String argStr=argument.toString();
    Matcher matcher=sysPropPattern.matcher(argStr);
    if (matcher.matches()) {
      systemProperties.put(matcher.group(1),matcher.group(2));
      continue;
    }
    matcher=noArgSysPropPattern.matcher(argStr);
    if (matcher.matches()) {
      systemProperties.put(matcher.group(1),null);
      continue;
    }
    matcher=maxHeapPattern.matcher(argStr);
    if (matcher.matches()) {
      maxHeapSize=matcher.group(1);
      continue;
    }
    matcher=bootstrapPattern.matcher(argStr);
    if (matcher.matches()) {
      setBootstrapClasspath(matcher.group(1).split(Pattern.quote(File.pathSeparator)));
      continue;
    }
    if (argStr.equals("-ea") || argStr.equals("-enableassertions")) {
      assertionsEnabled=true;
      continue;
    }
    if (argStr.equals("-da") || argStr.equals("-disableassertions")) {
      assertionsEnabled=false;
      continue;
    }
    extraJvmArgs.add(argument);
  }
  boolean xdebugFound=false;
  boolean xrunjdwpFound=false;
  Set<Object> matches=new HashSet<Object>();
  for (  Object extraJvmArg : extraJvmArgs) {
    if (extraJvmArg.toString().equals("-Xdebug")) {
      xdebugFound=true;
      matches.add(extraJvmArg);
    }
 else     if (extraJvmArg.toString().equals("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")) {
      xrunjdwpFound=true;
      matches.add(extraJvmArg);
    }
  }
  if (xdebugFound && xrunjdwpFound) {
    debug=true;
    extraJvmArgs.removeAll(matches);
  }
 else {
    debug=false;
  }
}
