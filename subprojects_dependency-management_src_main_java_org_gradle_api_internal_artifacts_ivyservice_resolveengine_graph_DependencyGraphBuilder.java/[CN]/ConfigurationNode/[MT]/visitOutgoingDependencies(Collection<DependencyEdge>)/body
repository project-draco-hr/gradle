{
  if (moduleRevision.state != ModuleState.Selected) {
    LOGGER.debug("version for {} is not selected. ignoring.",this);
    return;
  }
  List<DependencyEdge> transitiveIncoming=new ArrayList<DependencyEdge>();
  for (  DependencyEdge edge : incomingEdges) {
    if (edge.isTransitive()) {
      transitiveIncoming.add(edge);
    }
  }
  if (transitiveIncoming.isEmpty() && this != resolveState.root) {
    if (previousTraversalExclusions != null) {
      removeOutgoingEdges();
    }
    if (incomingEdges.isEmpty()) {
      LOGGER.debug("{} has no incoming edges. ignoring.",this);
    }
 else {
      LOGGER.debug("{} has no transitive incoming edges. ignoring outgoing edges.",this);
    }
    return;
  }
  ModuleExclusion resolutionFilter=getModuleResolutionFilter(transitiveIncoming);
  if (previousTraversalExclusions != null) {
    if (previousTraversalExclusions.excludesSameModulesAs(resolutionFilter)) {
      LOGGER.debug("Changed edges for {} selects same versions as previous traversal. ignoring",this);
      previousTraversalExclusions=resolutionFilter;
      return;
    }
    removeOutgoingEdges();
  }
  for (  DependencyMetaData dependency : metaData.getDependencies()) {
    ModuleIdentifier targetModuleId=DefaultModuleIdentifier.newId(dependency.getRequested().getGroup(),dependency.getRequested().getName());
    if (isExcluded(resolutionFilter,targetModuleId)) {
      continue;
    }
    DependencyEdge dependencyEdge=new DependencyEdge(this,dependency,resolutionFilter,resolveState);
    outgoingEdges.add(dependencyEdge);
    target.add(dependencyEdge);
  }
  previousTraversalExclusions=resolutionFilter;
}
