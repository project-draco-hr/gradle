{
  final Configuration configurationDummy=context.mock(Configuration.class);
  final Set<Configuration> configurations=WrapUtil.toSet(configurationDummy);
  final ResolvedConfiguration resolvedConfiguration=context.mock(ResolvedConfiguration.class);
  final ModuleDescriptor moduleDescriptorDummy=HelperUtil.createModuleDescriptor(WrapUtil.toSet("someConf"));
  final Ivy ivyStub=context.mock(Ivy.class);
  final IvySettings ivySettingsDummy=new IvySettings();
  context.checking(new Expectations(){
{
      allowing(ivyFactoryStub).createIvy(ivySettingsDummy);
      will(returnValue(ivyStub));
      allowing(configurationDummy).getAll();
      will(returnValue(configurations));
      allowing(ivyStub).getSettings();
      will(returnValue(ivySettingsDummy));
      allowing(ivyService.getDependencyResolver()).resolve(configurationDummy,ivyStub,moduleDescriptorDummy);
      will(returnValue(resolvedConfiguration));
      allowing(ivyService.getResolveModuleDescriptorConverter()).convert(WrapUtil.toSet(configurationDummy),moduleDummy,ivySettingsDummy);
      will(returnValue(moduleDescriptorDummy));
      allowing(ivyService.getSettingsConverter()).convertForResolve(dependencyResolversDummy);
      will(returnValue(ivySettingsDummy));
    }
  }
);
  assertThat(ivyService.resolve(configurationDummy),sameInstance(resolvedConfiguration));
}
