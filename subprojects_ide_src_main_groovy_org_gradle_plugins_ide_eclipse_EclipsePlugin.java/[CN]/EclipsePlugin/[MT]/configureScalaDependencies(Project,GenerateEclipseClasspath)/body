{
  project.getPlugins().withType(ScalaBasePlugin.class,new Action<ScalaBasePlugin>(){
    @Override public void execute(    ScalaBasePlugin scalaBasePlugin){
      task.getClasspath().containers("org.scala-ide.sdt.launching.SCALA_CONTAINER");
      project.getGradle().addBuildListener(new BuildAdapter(){
        @Override public void projectsEvaluated(        Gradle gradle){
          final List<String> provided=Lists.newArrayList("scala-library","scala-swing","scala-dbc");
          Predicate<Dependency> dependencyInProvided=new Predicate<Dependency>(){
            @Override public boolean apply(            Dependency dependency){
              return provided.contains(dependency.getName());
            }
          }
;
          List<Dependency> dependencies=Lists.newArrayList(Iterables.filter(Iterables.concat(Iterables.transform(task.getClasspath().getPlusConfigurations(),new Function<Configuration,Iterable<Dependency>>(){
            @Override public Iterable<Dependency> apply(            Configuration config){
              return config.getAllDependencies();
            }
          }
)),dependencyInProvided));
          if (!dependencies.isEmpty()) {
            task.getClasspath().getMinusConfigurations().add(project.getConfigurations().detachedConfiguration(dependencies.toArray(new Dependency[0])));
          }
        }
      }
);
    }
  }
);
}
