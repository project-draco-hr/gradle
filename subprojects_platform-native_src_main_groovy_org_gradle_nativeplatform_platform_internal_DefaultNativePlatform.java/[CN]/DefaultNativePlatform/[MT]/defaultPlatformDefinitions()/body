{
  Set<DefaultNativePlatform> platforms=new LinkedHashSet<DefaultNativePlatform>();
  OperatingSystemInternal windows=new DefaultOperatingSystem("windows");
  OperatingSystemInternal freebsd=new DefaultOperatingSystem("freebsd");
  OperatingSystemInternal linux=new DefaultOperatingSystem("linux");
  OperatingSystemInternal osx=new DefaultOperatingSystem("osx");
  OperatingSystemInternal unix=new DefaultOperatingSystem("unix");
  OperatingSystemInternal solaris=new DefaultOperatingSystem("solaris");
  ArchitectureInternal x86=new DefaultArchitecture("x86");
  ArchitectureInternal x64=new DefaultArchitecture("x86_64");
  ArchitectureInternal ia64=new DefaultArchitecture("ia64");
  ArchitectureInternal armv7=new DefaultArchitecture("armv7");
  ArchitectureInternal armv8=new DefaultArchitecture("armv8");
  ArchitectureInternal sparc=new DefaultArchitecture("sparc");
  ArchitectureInternal ultrasparc=new DefaultArchitecture("ultrasparc");
  ArchitectureInternal ppc=new DefaultArchitecture("ppc");
  ArchitectureInternal ppc64=new DefaultArchitecture("ppc64");
  platforms.add(createPlatform(windows,x86));
  platforms.add(createPlatform(windows,x64));
  platforms.add(createPlatform(windows,armv7));
  platforms.add(createPlatform(windows,ia64));
  platforms.add(createPlatform(freebsd,x86));
  platforms.add(createPlatform(freebsd,x64));
  platforms.add(createPlatform(freebsd,armv7));
  platforms.add(createPlatform(freebsd,armv8));
  platforms.add(createPlatform(freebsd,ppc));
  platforms.add(createPlatform(freebsd,ppc64));
  platforms.add(createPlatform(unix,x86));
  platforms.add(createPlatform(unix,x64));
  platforms.add(createPlatform(unix,armv7));
  platforms.add(createPlatform(unix,armv8));
  platforms.add(createPlatform(unix,ppc));
  platforms.add(createPlatform(unix,ppc64));
  platforms.add(createPlatform(linux,x64));
  platforms.add(createPlatform(linux,x86));
  platforms.add(createPlatform(linux,armv7));
  platforms.add(createPlatform(linux,armv8));
  platforms.add(createPlatform(osx,x86));
  platforms.add(createPlatform(osx,x64));
  platforms.add(createPlatform(solaris,x64));
  platforms.add(createPlatform(solaris,x86));
  platforms.add(createPlatform(solaris,sparc));
  platforms.add(createPlatform(solaris,ultrasparc));
  return platforms;
}
