{
  final DeserializeMap map=classLoaderRegistry.newDeserializeSession();
  try {
    final Map<Short,ClassLoaderDetails> classLoaderDetails=(Map<Short,ClassLoaderDetails>)payload.getHeader();
    final ObjectInputStream objectStream=new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())){
      @Override protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {
        Class<?> aClass=readClass();
        ObjectStreamClass descriptor=ObjectStreamClass.lookupAny(aClass);
        if (descriptor == null) {
          throw new ClassNotFoundException(aClass.getName());
        }
        return descriptor;
      }
      @Override protected Class<?> resolveClass(      ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        return desc.forClass();
      }
      private Class<?> readClass() throws IOException, ClassNotFoundException {
        short id=readShort();
        String className=readUTF();
        ClassLoaderDetails classLoader=classLoaderDetails.get(id);
        return map.resolveClass(classLoader,className);
      }
      @Override protected Class<?> resolveProxyClass(      String[] interfaces) throws IOException, ClassNotFoundException {
        int count=readInt();
        Class<?>[] actualInterfaces=new Class<?>[count];
        for (int i=0; i < count; i++) {
          actualInterfaces[i]=readClass();
        }
        return Proxy.getProxyClass(actualInterfaces[0].getClassLoader(),actualInterfaces);
      }
    }
;
    return objectStream.readObject();
  }
 catch (  Exception e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
