{
  final SerializeMap map=classLoaderRegistry.newSerializeSession();
  try {
    ByteArrayOutputStream content=new ByteArrayOutputStream();
    final ObjectOutputStream objectStream=new ObjectOutputStream(content){
      @Override protected void writeClassDescriptor(      ObjectStreamClass desc) throws IOException {
        Class<?> targetClass=desc.forClass();
        writeClass(targetClass);
      }
      @Override protected void annotateProxyClass(      Class<?> cl) throws IOException {
        writeInt(cl.getInterfaces().length);
        for (        Class<?> type : cl.getInterfaces()) {
          writeClass(type);
        }
      }
      private void writeClass(      Class<?> targetClass) throws IOException {
        writeClassLoader(targetClass);
        writeUTF(targetClass.getName());
      }
      private void writeClassLoader(      Class<?> targetClass) throws IOException {
        ClassLoader classLoader=targetClass.getClassLoader();
        if (classLoader == null || SYSTEM_CLASS_LOADERS.contains(classLoader)) {
          writeShort(SYSTEM_CLASS_LOADER_ID);
        }
 else {
          writeShort(map.visitClass(targetClass));
        }
      }
    }
;
    objectStream.writeObject(payload);
    objectStream.close();
    Map<Short,ClassLoaderDetails> classLoaders=map.getClassLoaders();
    if (classLoaders.containsKey(SYSTEM_CLASS_LOADER_ID)) {
      throw new IllegalArgumentException("Unexpected ClassLoader id found");
    }
    return new SerializedPayload(classLoaders,content.toByteArray());
  }
 catch (  IOException e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
