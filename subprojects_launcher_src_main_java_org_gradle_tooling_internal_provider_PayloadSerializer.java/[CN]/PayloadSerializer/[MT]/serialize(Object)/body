{
  final SerializeMap map=classLoaderRegistry.newSerializeSession();
  try {
    StreamByteBuffer buffer=new StreamByteBuffer();
    final ObjectOutputStream objectStream=new ObjectOutputStream(buffer.getOutputStream()){
      @Override protected void writeClassDescriptor(      ObjectStreamClass desc) throws IOException {
        Class<?> targetClass=desc.forClass();
        writeClass(targetClass);
      }
      @Override protected void annotateProxyClass(      Class<?> cl) throws IOException {
        writeInt(cl.getInterfaces().length);
        for (        Class<?> type : cl.getInterfaces()) {
          writeClass(type);
        }
      }
      private void writeClass(      Class<?> targetClass) throws IOException {
        writeClassLoader(targetClass);
        writeUTF(targetClass.getName());
      }
      private void writeClassLoader(      Class<?> targetClass) throws IOException {
        writeShort(map.visitClass(targetClass));
      }
    }
;
    objectStream.writeObject(payload);
    objectStream.close();
    Map<Short,ClassLoaderDetails> classLoaders=new HashMap<Short,ClassLoaderDetails>();
    map.collectClassLoaderDefinitions(classLoaders);
    return new SerializedPayload(classLoaders,buffer.readAsByteArray());
  }
 catch (  IOException e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
