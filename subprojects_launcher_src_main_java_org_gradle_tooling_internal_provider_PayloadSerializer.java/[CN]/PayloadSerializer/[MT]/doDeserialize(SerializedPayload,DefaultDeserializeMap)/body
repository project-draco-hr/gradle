{
  try {
    final Map<Short,ClassLoader> classLoaders=new HashMap<Short,ClassLoader>();
    for (ClassLoader cl=ClassLoader.getSystemClassLoader().getParent(); cl != null; cl=cl.getParent()) {
      classLoaders.put(SYSTEM_CLASS_LOADER_ID,ClassLoader.getSystemClassLoader().getParent());
    }
    Map<Short,ClassLoaderDetails> detailsMap=(Map<Short,ClassLoaderDetails>)payload.getHeader();
    for (    Map.Entry<Short,ClassLoaderDetails> entry : detailsMap.entrySet()) {
      classLoaders.put(entry.getKey(),map.getClassLoader(entry.getValue()));
    }
    final ObjectInputStream objectStream=new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())){
      @Override protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {
        ClassLoader classLoader=readClassLoader();
        String cl=readUTF();
        ObjectStreamClass descriptor=ObjectStreamClass.lookupAny(Class.forName(cl,false,classLoader));
        if (descriptor == null) {
          throw new ClassNotFoundException(cl);
        }
        return descriptor;
      }
      @Override protected Class<?> resolveClass(      ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        return desc.forClass();
      }
      @Override protected Class<?> resolveProxyClass(      String[] interfaces) throws IOException, ClassNotFoundException {
        ClassLoader classLoader=readClassLoader();
        int count=readInt();
        Class<?>[] actualInterfaces=new Class<?>[count];
        for (int i=0; i < count; i++) {
          actualInterfaces[i]=readClassDescriptor().forClass();
        }
        return Proxy.getProxyClass(classLoader,actualInterfaces);
      }
      private ClassLoader readClassLoader() throws IOException {
        short id=readShort();
        return classLoaders.get(id);
      }
    }
;
    return objectStream.readObject();
  }
 catch (  Exception e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
