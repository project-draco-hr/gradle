{
  ModuleVersionSelector requested=dependency.getRequested();
  final ModuleIdentifier moduleId=getCacheKey(requested);
  ModuleVersionsCache.CachedModuleVersionList cachedModuleVersionList=moduleVersionsCache.getCachedModuleResolution(delegate,moduleId);
  if (cachedModuleVersionList != null) {
    ModuleVersionListing versionList=cachedModuleVersionList.getModuleVersions();
    Set<ModuleVersionIdentifier> versions=CollectionUtils.collect(versionList.getVersions(),new Transformer<ModuleVersionIdentifier,Versioned>(){
      public ModuleVersionIdentifier transform(      Versioned original){
        return new DefaultModuleVersionIdentifier(moduleId,original.getVersion());
      }
    }
);
    if (cachePolicy.mustRefreshVersionList(moduleId,versions,cachedModuleVersionList.getAgeMillis())) {
      LOGGER.debug("Version listing in dynamic revision cache is expired: will perform fresh resolve of '{}' in '{}'",requested,delegate.getName());
    }
 else {
      if (cachedModuleVersionList.getAgeMillis() == 0) {
        result.listed(versionList);
      }
 else {
        result.probablyListed(versionList);
      }
    }
  }
}
