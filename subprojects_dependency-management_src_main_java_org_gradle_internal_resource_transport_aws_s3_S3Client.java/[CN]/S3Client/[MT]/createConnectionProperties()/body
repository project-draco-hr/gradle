{
  Jets3tProperties properties=Jets3tProperties.getInstance(Constants.JETS3T_PROPERTIES_FILENAME);
  Optional<URI> endpoint=s3ConnectionProperties.getEndpoint();
  if (endpoint.isPresent()) {
    URI uri=endpoint.get();
    properties.setProperty("s3service.s3-endpoint",uri.getHost());
    properties.setProperty("s3service.s3-endpoint-http-port",Integer.toString(uri.getPort()));
    properties.setProperty("s3service.https-only",Boolean.toString(uri.getScheme().toUpperCase().equals("HTTPS")));
    properties.setProperty("s3service.disable-dns-buckets","true");
  }
  Optional<HttpProxySettings.HttpProxy> proxyOptional=s3ConnectionProperties.getProxy();
  if (proxyOptional.isPresent()) {
    HttpProxySettings.HttpProxy proxy=proxyOptional.get();
    properties.setProperty("httpclient.proxy-autodetect","false");
    properties.setProperty("httpclient.proxy-host",proxy.host);
    properties.setProperty("httpclient.proxy-port",Integer.toString(proxy.port));
    PasswordCredentials credentials=proxy.credentials;
    if (credentials != null) {
      properties.setProperty("httpclient.proxy-user",credentials.getUsername());
      properties.setProperty("httpclient.proxy-password",credentials.getPassword());
    }
  }
 else {
    properties.setProperty("httpclient.proxy-autodetect","true");
  }
  return properties;
}
