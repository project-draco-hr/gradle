{
  ModuleRegistry registry=new DefaultModuleRegistry();
  ClassPath classpath=new DefaultClassPath();
  for (  Module module : registry.getModule("gradle-launcher").getAllRequiredModules()) {
    classpath=classpath.plus(module.getClasspath());
  }
  if (classpath.isEmpty()) {
    throw new IllegalStateException("Unable to construct a bootstrap classpath when starting the daemon");
  }
  List<File> additionalClassPath=registry.getAdditionalClassPath().getAsFiles();
  versionValidator.validate(daemonParameters);
  List<String> daemonArgs=new ArrayList<String>();
  daemonArgs.add(daemonParameters.getEffectiveJavaExecutable().getAbsolutePath());
  List<String> daemonOpts=daemonParameters.getEffectiveJvmArgs();
  daemonArgs.addAll(daemonOpts);
  daemonArgs.add("-cp");
  daemonArgs.add(CollectionUtils.join(File.pathSeparator,classpath.getAsFiles()));
  if (Boolean.getBoolean("org.gradle.daemon.debug")) {
    daemonArgs.add("-Xdebug");
    daemonArgs.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005");
  }
  LOGGER.debug("Using daemon args: {}",daemonArgs);
  daemonArgs.add(GradleDaemon.class.getName());
  daemonArgs.add(GradleVersion.current().getVersion());
  ByteArrayOutputStream serializedConfig=new ByteArrayOutputStream();
  FlushableEncoder encoder=new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig));
  try {
    encoder.writeString(daemonParameters.getGradleUserHomeDir().getAbsolutePath());
    encoder.writeString(daemonDir.getBaseDir().getAbsolutePath());
    encoder.writeSmallInt(daemonParameters.getIdleTimeout());
    encoder.writeString(daemonParameters.getUid());
    encoder.writeSmallInt(daemonOpts.size());
    for (    String daemonOpt : daemonOpts) {
      encoder.writeString(daemonOpt);
    }
    encoder.writeSmallInt(additionalClassPath.size());
    for (    File file : additionalClassPath) {
      encoder.writeString(file.getAbsolutePath());
    }
    encoder.flush();
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
  ByteArrayInputStream stdInput=new ByteArrayInputStream(serializedConfig.toByteArray());
  DaemonStartupInfo daemonInfo=startProcess(daemonArgs,daemonDir.getVersionedDir(),stdInput);
  listener.daemonStarted(daemonInfo);
  return daemonInfo;
}
