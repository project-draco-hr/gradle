{
  return new ModelView<M>(){
    private boolean closed;
    public ModelType<M> getType(){
      return ManagedModelProjection.this.getType();
    }
    public M getInstance(){
      return proxyFactory.createProxy(new State(),schema);
    }
    public void close(){
      closed=true;
    }
class State implements ModelElementState {
      public Object get(      String name){
        ModelProperty<?> property=schema.getProperties().get(name);
        ModelType<?> propertyType=property.getType();
        return doGet(propertyType,name,property);
      }
      private <T>T doGet(      ModelType<T> propertyType,      String propertyName,      ModelProperty<?> property){
        MutableModelNode propertyNode=modelNode.getLink(propertyName);
        if (!property.isWritable()) {
          if (writable) {
            ModelView<? extends T> modelView=propertyNode.asWritable(propertyType,ruleDescriptor,null);
            if (closed) {
              modelView.close();
            }
            return modelView.getInstance();
          }
 else {
            return propertyNode.asReadOnly(propertyType,ruleDescriptor).getInstance();
          }
        }
 else {
          return propertyNode.getPrivateData(propertyType);
        }
      }
      public void set(      String name,      Object value){
        if (!writable) {
          throw new IllegalStateException(String.format("Cannot mutate model element '%s' of type '%s' as it is an input to rule '%s'",modelNode.getPath(),getType(),ruleDescriptor));
        }
        if (closed) {
          throw new IllegalStateException(String.format("Cannot mutate model element '%s' of type '%s' used as subject of rule '%s' after the rule has completed",modelNode.getPath(),getType(),ruleDescriptor));
        }
        ModelProperty<?> property=schema.getProperties().get(name);
        ModelType<?> propertyType=property.getType();
        doSet(name,value,propertyType);
      }
      private <T>void doSet(      String name,      Object value,      ModelType<T> propertyType){
        ModelSchema<T> schema=schemaStore.getSchema(propertyType);
        if (schema.getKind().isManaged() && !ManagedInstance.class.isInstance(value)) {
          throw new IllegalArgumentException(String.format("Only managed model instances can be set as property '%s' of class '%s'",name,getType()));
        }
        T castValue=Cast.uncheckedCast(value);
        modelNode.getLink(name).setPrivateData(propertyType,castValue);
      }
    }
  }
;
}
