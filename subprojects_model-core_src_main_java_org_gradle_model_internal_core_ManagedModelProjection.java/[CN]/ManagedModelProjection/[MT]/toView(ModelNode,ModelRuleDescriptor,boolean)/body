{
  return new ModelView<M>(){
    private boolean closed;
    public ModelType<M> getType(){
      return ManagedModelProjection.this.getType();
    }
    public M getInstance(){
      Class<M> clazz=getType().getConcreteClass();
      return proxyFactory.createProxy(new State(),clazz.getClassLoader(),clazz,ManagedInstance.class);
    }
    public void close(){
      closed=true;
    }
class State implements ModelElementState {
      public <T>T get(      ModelType<T> modelType,      String name){
        ModelNode propertyNode=modelNode.getLinks().get(name);
        ModelProperty<?> property=schema.getProperties().get(name);
        if (!property.isWritable()) {
          ModelAdapter adapter=propertyNode.getAdapter();
          if (writable) {
            return adapter.asWritable(modelType,propertyNode,ruleDescriptor,null).getInstance();
          }
 else {
            return adapter.asReadOnly(modelType,propertyNode,ruleDescriptor).getInstance();
          }
        }
 else {
          return propertyNode.getPrivateData(modelType);
        }
      }
      public <T>void set(      ModelType<T> propertyType,      String name,      T value){
        if (!writable) {
          throw new IllegalStateException(String.format("Cannot mutate model element '%s' of type '%s' as it is an input to rule '%s'",modelNode.getPath(),getType(),ruleDescriptor));
        }
        if (closed) {
          throw new IllegalStateException(String.format("Cannot mutate model element '%s' of type '%s' used as subject of rule '%s' after the rule has completed",modelNode.getPath(),getType(),ruleDescriptor));
        }
        ModelSchema<T> schema=schemaStore.getSchema(propertyType);
        if (schema.getKind().isManaged() && !ManagedInstance.class.isInstance(value)) {
          throw new IllegalArgumentException(String.format("Only managed model instances can be set as property '%s' of class '%s'",name,getType()));
        }
        modelNode.getLinks().get(name).setPrivateData(propertyType,value);
      }
    }
  }
;
}
