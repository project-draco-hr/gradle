{
  if (!inputs.isIncremental()) {
    deleteQuietly(outputFile);
    deleteDirectory(apiClassesDir);
  }
  outputFile.getParentFile().mkdirs();
  apiClassesDir.mkdirs();
  final ApiClassExtractor apiClassExtractor=new ApiClassExtractor(exportedPackages);
  final AtomicBoolean updated=new AtomicBoolean();
  final Map<File,byte[]> apiClasses=newHashMap();
  inputs.outOfDate(new ErroringAction<InputFileDetails>(){
    @Override protected void doExecute(    InputFileDetails inputFileDetails) throws Exception {
      updated.set(true);
      File originalClassFile=inputFileDetails.getFile();
      if (!apiClassExtractor.shouldExtractApiClassFrom(originalClassFile)) {
        return;
      }
      final byte[] apiClassBytes=apiClassExtractor.extractApiClassFrom(originalClassFile);
      apiClasses.put(originalClassFile,apiClassBytes);
      File apiClassFile=apiClassFileFor(originalClassFile);
      apiClassFile.getParentFile().mkdirs();
      withResource(new FileOutputStream(apiClassFile),new ErroringAction<OutputStream>(){
        @Override protected void doExecute(        OutputStream outputStream) throws Exception {
          outputStream.write(apiClassBytes);
        }
      }
);
    }
  }
);
  inputs.removed(new ErroringAction<InputFileDetails>(){
    @Override protected void doExecute(    InputFileDetails removedOriginalClassFile) throws Exception {
      updated.set(true);
      deleteApiClassFileFor(removedOriginalClassFile.getFile());
    }
  }
);
  if (updated.get()) {
    updateApiJarFile(apiClasses);
  }
}
