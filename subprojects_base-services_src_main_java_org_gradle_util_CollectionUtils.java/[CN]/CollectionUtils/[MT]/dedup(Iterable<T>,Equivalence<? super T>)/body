{
  Iterable<Equivalence.Wrapper<T>> wrappers=Iterables.transform(source,new Function<T,Equivalence.Wrapper<T>>(){
    public Equivalence.Wrapper<T> apply(    @Nullable T input){
      return equivalence.wrap(input);
    }
  }
);
  Set<Equivalence.Wrapper<T>> deduped=ImmutableSet.copyOf(wrappers);
  return ImmutableList.copyOf(Iterables.transform(deduped,new Function<Equivalence.Wrapper<T>,T>(){
    public T apply(    Equivalence.Wrapper<T> input){
      return input.get();
    }
  }
));
}
