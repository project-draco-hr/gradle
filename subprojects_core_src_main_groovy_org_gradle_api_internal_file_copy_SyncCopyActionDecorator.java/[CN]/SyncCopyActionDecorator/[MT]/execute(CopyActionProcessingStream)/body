{
  final Set<RelativePath> visited=new HashSet<RelativePath>();
  WorkResult didWork=delegate.execute(new CopyActionProcessingStream(){
    public void process(    final Action<? super FileCopyDetailsInternal> action){
      stream.process(new Action<FileCopyDetailsInternal>(){
        public void execute(        FileCopyDetailsInternal details){
          visited.add(details.getRelativePath());
          action.execute(details);
        }
      }
);
    }
  }
);
  final BooleanHolder didDeleteHolder=new BooleanHolder();
  FileVisitor fileVisitor=new FileVisitor(){
    public void visitDir(    FileVisitDetails dirDetails){
      maybeDelete(dirDetails,true);
    }
    public void visitFile(    FileVisitDetails fileDetails){
      maybeDelete(fileDetails,false);
    }
    private void maybeDelete(    FileVisitDetails fileDetails,    boolean isDir){
      RelativePath path=fileDetails.getRelativePath();
      if (!visited.contains(path)) {
        if (isDir) {
          GFileUtils.deleteDirectory(fileDetails.getFile());
        }
 else {
          GFileUtils.deleteQuietly(fileDetails.getFile());
        }
        didDeleteHolder.flag=true;
      }
    }
  }
;
  MinimalFileTree walker=new DirectoryFileTree(baseDestDir).postfix();
  walker.visit(fileVisitor);
  visited.clear();
  return new SimpleWorkResult(didWork.getDidWork() || didDeleteHolder.flag);
}
