{
  final Collection<InternalTestDescriptor> testDescriptors=testExecutionRequestAction.getTestExecutionDescriptors();
  final List<String> testTaskPaths=org.gradle.util.CollectionUtils.collect(testDescriptors,new Transformer<String,InternalTestDescriptor>(){
    @Override public String transform(    InternalTestDescriptor testDescriptor){
      return ((DefaultTestDescriptor)testDescriptor).getTaskPath();
    }
  }
);
  List<Test> testTasksToRun=new ArrayList<Test>();
  for (  final String testTaskPath : testTaskPaths) {
    final Task task=gradle.getRootProject().getTasks().findByPath(testTaskPath);
    if (task == null) {
      throw new TestExecutionException(String.format("Requested test task with path '%s' cannot be found.",testTaskPath));
    }
 else     if (!(task instanceof Test)) {
      throw new TestExecutionException(String.format("Task '%s' of type '%s' not supported for executing tests via TestLauncher API.",testTaskPath,task.getClass().getName()));
    }
 else {
      Test testTask=(Test)task;
      for (      InternalTestDescriptor testDescriptor : testDescriptors) {
        DefaultTestDescriptor defaultTestDescriptor=(DefaultTestDescriptor)testDescriptor;
        if (defaultTestDescriptor.getTaskPath().equals(testTaskPath)) {
          String className=defaultTestDescriptor.getClassName();
          String methodName=defaultTestDescriptor.getMethodName();
          if (className == null && methodName == null) {
            testTask.getFilter().includeTestsMatching("*");
          }
 else {
            testTask.getFilter().includeTest(className,methodName);
          }
        }
      }
      testTasksToRun.add(testTask);
    }
  }
  return testTasksToRun;
}
