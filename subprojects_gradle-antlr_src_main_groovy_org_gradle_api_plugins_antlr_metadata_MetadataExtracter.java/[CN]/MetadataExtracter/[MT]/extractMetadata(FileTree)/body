{
  antlr.Tool tool=new antlr.Tool();
  antlr.preprocessor.Hierarchy hierarchy=new antlr.preprocessor.Hierarchy(tool);
  for (  File grammarFileFile : source.getFiles()) {
    final String grammarFilePath=grammarFileFile.getPath();
    try {
      hierarchy.readGrammarFile(grammarFilePath);
    }
 catch (    FileNotFoundException e) {
      throw new IllegalStateException("Received FileNotFoundException on already read file",e);
    }
  }
  XRef xref=new XRef(hierarchy);
  for (  File grammarFileFile : source.getFiles()) {
    String grammarPackageName=null;
    try {
      BufferedReader in=new BufferedReader(new FileReader(grammarFileFile));
      try {
        String line;
        while ((line=in.readLine()) != null) {
          line=line.trim();
          if (line.startsWith("package") && line.endsWith(";")) {
            grammarPackageName=line.substring(8,line.length() - 1);
            break;
          }
        }
      }
  finally {
        try {
          in.close();
        }
 catch (        IOException e) {
          throw new UncheckedIOException(e);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    final String grammarFilePath=grammarFileFile.getPath();
    antlr.preprocessor.GrammarFile antlrGrammarFile=hierarchy.getFile(grammarFilePath);
    GrammarFileMetadata grammarFileMetadata=new GrammarFileMetadata(grammarFileFile,antlrGrammarFile,grammarPackageName);
    xref.addGrammarFile(grammarFileMetadata);
  }
  return xref;
}
