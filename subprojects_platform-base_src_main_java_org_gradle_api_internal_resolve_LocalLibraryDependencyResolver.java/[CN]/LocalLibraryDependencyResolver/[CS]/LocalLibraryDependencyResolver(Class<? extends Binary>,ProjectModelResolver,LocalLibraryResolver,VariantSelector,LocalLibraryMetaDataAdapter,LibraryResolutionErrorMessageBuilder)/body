{
  this.libraryMetaDataAdapter=libraryMetaDataAdapter;
  this.variantSelector=variantSelector;
  this.errorMessageBuilder=errorMessageBuilder;
  this.projectModelResolver=projectModelResolver;
  this.libraryResolver=libraryResolver;
  this.binaryType=binaryType;
  this.binaryPredicate=new Predicate<VariantComponent>(){
    @Override public boolean apply(    VariantComponent input){
      return Iterables.any(input.getVariants(),new Predicate<Binary>(){
        @Override public boolean apply(        Binary input){
          return binaryType.isAssignableFrom(input.getClass());
        }
      }
);
    }
  }
;
}
