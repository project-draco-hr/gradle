{
  Collection<BinarySpec> allBinaries=selectedLibrary.getBinaries().values();
  Collection<? extends BinarySpec> compatibleBinaries=matcher.filterBinaries(variantsMetaData,allBinaries);
  if (!allBinaries.isEmpty() && compatibleBinaries.isEmpty()) {
    result.failed(new ModuleVersionResolveException(selector,errorMessageBuilder.noCompatibleVariantErrorMessage(libraryName,allBinaries)));
  }
 else   if (compatibleBinaries.size() > 1) {
    result.failed(new ModuleVersionResolveException(selector,errorMessageBuilder.multipleCompatibleVariantsErrorMessage(libraryName,compatibleBinaries)));
  }
 else {
    BinarySpec selectedBinary=compatibleBinaries.iterator().next();
    LocalComponentMetaData metaData=libraryMetaDataAdapter.createLocalComponentMetaData(selectedBinary,selectorProjectPath);
    result.resolved(metaData);
  }
}
