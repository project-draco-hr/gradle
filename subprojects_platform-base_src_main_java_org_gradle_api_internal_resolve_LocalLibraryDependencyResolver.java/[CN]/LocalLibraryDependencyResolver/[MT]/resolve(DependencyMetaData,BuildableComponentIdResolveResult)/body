{
  if (dependency.getSelector() instanceof LibraryComponentSelector) {
    DefaultLocalComponentMetaData metaData=null;
    LibraryComponentSelector selector=(LibraryComponentSelector)dependency.getSelector();
    ProjectInternal project=projectFinder.getProject(dependency.getRequested().getGroup());
    if (project != null && selector.getProjectPath() != null) {
      project=project.getRootProject().findProject(selector.getProjectPath());
    }
    if (project != null) {
      ComponentSpecContainer components=project.getModelRegistry().realize(ModelPath.path("components"),ModelType.of(ComponentSpecContainer.class));
      ModelMap<? extends LibrarySpec> libraries=components.withType(LibrarySpec.class);
      String libraryName=selector.getLibraryName();
      if (libraryName == null && libraries.size() == 1) {
        libraryName=libraries.values().iterator().next().getName();
      }
      if (libraryName != null) {
        String version=project.getVersion().toString();
        String projectPath=project.getPath();
        LibrarySpec library=libraries.get(libraryName);
        if (library != null) {
          metaData=DefaultLibraryLocalComponentMetaData.newMetaData(projectPath,libraryName,version);
        }
      }
    }
    if (metaData != null) {
      result.resolved(metaData.toResolveMetaData());
    }
 else {
      result.failed(new ModuleVersionResolveException(selector,String.format("Could not resolve dependency '%s'",selector)));
    }
  }
}
