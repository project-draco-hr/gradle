{
  if (dependency.getSelector() instanceof LibraryComponentSelector) {
    LibraryComponentSelector selector=(LibraryComponentSelector)dependency.getSelector();
    final String selectorProjectPath=selector.getProjectPath();
    final String libraryName=selector.getLibraryName();
    final ProjectInternal project=projectFinder.getProject(selectorProjectPath);
    List<String> candidateLibraries=new LinkedList<String>();
    if (project != null) {
      withLibrary(project,libraryName,candidateLibraries,new Action<LibrarySpec>(){
        @Override public void execute(        LibrarySpec librarySpec){
          DefaultLibraryLocalComponentMetaData metaData=DefaultLibraryLocalComponentMetaData.newMetaData(selectorProjectPath,librarySpec.getName());
          result.resolved(metaData.toResolveMetaData());
        }
      }
);
    }
    if (!result.hasResult()) {
      String message=prettyErrorMessage(selector,project,selectorProjectPath,candidateLibraries);
      ModuleVersionResolveException failure=new ModuleVersionResolveException(selector,message);
      result.failed(failure);
    }
  }
}
