{
  final String selectorProjectPath=selector.getProjectPath();
  final String libraryName=selector.getLibraryName();
  final String variant=selector.getVariant();
  LibraryResolutionErrorMessageBuilder.LibraryResolutionResult resolutionResult=doResolve(selectorProjectPath,libraryName);
  VariantComponentSpec selectedLibrary=resolutionResult.getSelectedLibrary();
  if (selectedLibrary == null) {
    String message=resolutionResult.toResolutionErrorMessage(binaryType,selector);
    ModuleVersionResolveException failure=new ModuleVersionResolveException(selector,new LibraryResolveException(message));
    result.failed(failure);
    return;
  }
  Collection<? extends BinarySpec> matchingVariants=chooseMatchingVariants(selectedLibrary,variant);
  if (matchingVariants.isEmpty()) {
    result.failed(new ModuleVersionResolveException(selector,errorMessageBuilder.noCompatibleVariantErrorMessage(libraryName,selectedLibrary.getBinaries().values())));
  }
 else   if (matchingVariants.size() > 1) {
    result.failed(new ModuleVersionResolveException(selector,errorMessageBuilder.multipleCompatibleVariantsErrorMessage(libraryName,matchingVariants)));
  }
 else {
    BinarySpec selectedBinary=matchingVariants.iterator().next();
    LocalComponentMetadata metaData;
    if (variant == null) {
      metaData=libraryMetaDataAdapter.createLocalComponentMetaData(selectedBinary,selectorProjectPath,false);
    }
 else {
      metaData=libraryMetaDataAdapter.createLocalComponentMetaData(selectedBinary,selectorProjectPath,true);
    }
    result.resolved(metaData);
  }
}
