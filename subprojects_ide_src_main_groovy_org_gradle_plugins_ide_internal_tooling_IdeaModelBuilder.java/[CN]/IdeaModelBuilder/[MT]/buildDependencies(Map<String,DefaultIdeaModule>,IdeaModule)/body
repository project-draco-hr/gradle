{
  ideaModule.setOffline(offlineDependencyResolution);
  Set<Dependency> resolved=ideaModule.resolveDependencies();
  List<DefaultIdeaDependency> dependencies=new LinkedList<DefaultIdeaDependency>();
  for (  Dependency dependency : resolved) {
    if (dependency instanceof SingleEntryModuleLibrary) {
      SingleEntryModuleLibrary d=(SingleEntryModuleLibrary)dependency;
      DefaultIdeaSingleEntryLibraryDependency defaultDependency=new org.gradle.tooling.internal.idea.DefaultIdeaSingleEntryLibraryDependency().setFile(d.getLibraryFile()).setSource(d.getSourceFile()).setJavadoc(d.getJavadocFile()).setScope(new DefaultIdeaDependencyScope(d.getScope())).setExported(d.isExported());
      if (d.getModuleVersion() != null) {
        defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));
      }
      dependencies.add(defaultDependency);
    }
 else     if (dependency instanceof ModuleDependency) {
      ModuleDependency d=(ModuleDependency)dependency;
      DefaultIdeaModule targetModule=modules.get(d.getName());
      File targetProjectDirectory=targetModule == null ? compositeProjectMapper.transform(d.getGradlePath()) : targetModule.getGradleProject().getProjectDirectory();
      DefaultIdeaModuleDependency defaultDependency=new org.gradle.tooling.internal.idea.DefaultIdeaModuleDependency().setExported(d.isExported()).setScope(new DefaultIdeaDependencyScope(d.getScope())).setDependencyModule(targetModule).setProjectDirectory(targetProjectDirectory);
      dependencies.add(defaultDependency);
    }
  }
  modules.get(ideaModule.getName()).setDependencies(dependencies);
}
