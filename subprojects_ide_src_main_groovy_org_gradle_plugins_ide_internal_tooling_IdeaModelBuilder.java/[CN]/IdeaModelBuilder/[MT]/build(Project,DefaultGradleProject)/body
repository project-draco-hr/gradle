{
  IdeaModel ideaModel=project.getPlugins().getPlugin(IdeaPlugin.class).getModel();
  IdeaProject projectModel=ideaModel.getProject();
  JavaVersion projectSourceLanguageLevel=convertIdeaLanguageLevelToJavaVersion(projectModel.getLanguageLevel());
  final Jvm currentJvm=Jvm.current();
  final DefaultJavaRuntime javaRuntime=new DefaultJavaRuntime(currentJvm.getJavaHome(),currentJvm.getJavaVersion());
  DefaultIdeaProject out=new DefaultIdeaProject().setName(projectModel.getName()).setJdkName(projectModel.getJdkName()).setLanguageLevel(new DefaultIdeaLanguageLevel(projectModel.getLanguageLevel().getLevel())).setJavaSourceSettings(new DefaultJavaSourceSettings().setSourceLanguageLevel(projectSourceLanguageLevel).setTargetRuntime(javaRuntime));
  Map<String,DefaultIdeaModule> modules=new HashMap<String,DefaultIdeaModule>();
  for (  IdeaModule module : projectModel.getModules()) {
    appendModule(modules,module,out,rootGradleProject,javaRuntime);
  }
  for (  IdeaModule module : projectModel.getModules()) {
    buildDependencies(modules,module);
  }
  final Collection<DefaultIdeaModule> ideaModules=modules.values();
  final Set<JavaVersion> moduleBytecodeVersions=toSet(compact(collect(ideaModules,new Transformer<JavaVersion,DefaultIdeaModule>(){
    @Override public JavaVersion transform(    DefaultIdeaModule defaultIdeaModule){
      return defaultIdeaModule.getJavaSourceSettings().getTargetBytecodeLevel();
    }
  }
)));
  if (moduleBytecodeVersions.size() > 0) {
    final JavaVersion maxBytecodeLevel=Collections.max(moduleBytecodeVersions);
    out.getJavaSourceSettings().setTargetBytecodeLevel(maxBytecodeLevel);
    for (    DefaultIdeaModule ideaModule : ideaModules) {
      if (ideaModule.getJavaSourceSettings().getTargetBytecodeLevel() != null && ideaModule.getJavaSourceSettings().getTargetBytecodeLevel().equals(maxBytecodeLevel)) {
        ideaModule.getJavaSourceSettings().setTargetBytecodeLevelInherited(true);
      }
    }
  }
  out.setChildren(new LinkedList<DefaultIdeaModule>(ideaModules));
  return out;
}
