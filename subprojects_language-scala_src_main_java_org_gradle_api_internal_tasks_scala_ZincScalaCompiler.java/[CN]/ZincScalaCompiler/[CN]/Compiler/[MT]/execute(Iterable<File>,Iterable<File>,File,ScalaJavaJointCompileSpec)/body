{
  LOGGER.info("Compiling with Zinc Scala compiler.");
  final xsbti.Logger logger=new SbtLoggerAdapter();
  com.typesafe.zinc.Compiler compiler=createParallelSafeCompiler(scalaClasspath,zincClasspath,logger,gradleUserHome);
  List<String> scalacOptions=new ZincScalaCompilerArgumentsGenerator().generate(spec);
  List<String> javacOptions=new JavaCompilerArgumentsBuilder(spec).includeClasspath(false).build();
  Inputs inputs=Inputs.create(ImmutableList.copyOf(spec.getClasspath()),ImmutableList.copyOf(spec.getSource()),spec.getDestinationDir(),scalacOptions,javacOptions,spec.getScalaCompileOptions().getIncrementalOptions().getAnalysisFile(),spec.getAnalysisMap(),"mixed",getIncOptions(),true);
  if (LOGGER.isDebugEnabled()) {
    Inputs.debug(inputs,logger);
  }
  if (spec.getScalaCompileOptions().isForce()) {
    GFileUtils.deleteDirectory(spec.getDestinationDir());
  }
  try {
    compiler.compile(inputs,logger);
  }
 catch (  xsbti.CompileFailed e) {
    throw new CompilationFailedException(e);
  }
  return new SimpleWorkResult(true);
}
