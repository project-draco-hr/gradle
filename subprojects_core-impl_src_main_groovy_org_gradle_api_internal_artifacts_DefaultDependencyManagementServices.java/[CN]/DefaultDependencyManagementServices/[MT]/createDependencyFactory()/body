{
  Instantiator instantiator=get(Instantiator.class);
  DefaultProjectDependencyFactory factory=new DefaultProjectDependencyFactory(get(ProjectAccessListener.class),instantiator,get(StartParameter.class).isBuildProjectDependencies());
  ProjectDependencyFactory projectDependencyFactory=new ProjectDependencyFactory(factory);
  DependencyProjectNotationParser projParser=new DependencyProjectNotationParser(factory);
  NotationParser<? extends Dependency> moduleMapParser=new DependencyMapNotationParser<DefaultExternalModuleDependency>(instantiator,DefaultExternalModuleDependency.class);
  NotationParser<? extends Dependency> moduleStringParser=new DependencyStringNotationParser<DefaultExternalModuleDependency>(instantiator,DefaultExternalModuleDependency.class);
  NotationParser<? extends Dependency> selfResolvingDependencyFactory=new DependencyFilesNotationParser(instantiator);
  List<NotationParser<? extends Dependency>> notationParsers=WrapUtil.toList(moduleStringParser,moduleMapParser,selfResolvingDependencyFactory,projParser,new DependencyClassPathNotationParser(instantiator,get(ClassPathRegistry.class),new IdentityFileResolver()));
  DependencyNotationParser dependencyNotationParser=new DependencyNotationParser(notationParsers);
  return new DefaultDependencyFactory(dependencyNotationParser,new ClientModuleNotationParser(instantiator),projectDependencyFactory);
}
