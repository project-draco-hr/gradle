{
  URI location;
  try {
    CodeSource codeSource=targetClass.getProtectionDomain().getCodeSource();
    if (codeSource != null && codeSource.getLocation() != null) {
      location=codeSource.getLocation().toURI();
      if (!location.getScheme().equals("jar")) {
        if (!location.getScheme().equals("file")) {
          throw new GradleException(String.format("Cannot determine classpath for %s from codebase '%s'.",targetClass.getName(),location));
        }
        return new File(location);
      }
    }
    String resourceName=targetClass.getName().replace(".","/") + ".class";
    URL resource=targetClass.getClassLoader().getResource(resourceName);
    if (resource != null) {
      return getClasspathForResource(resource,resourceName);
    }
    throw new GradleException(String.format("Cannot determine classpath for class %s.",targetClass.getName()));
  }
 catch (  URISyntaxException e) {
    throw UncheckedException.throwAsUncheckedException(e);
  }
}
