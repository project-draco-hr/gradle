{
  if (dependency.getSelector() instanceof LibraryComponentSelector) {
    LibraryComponentSelector selector=(LibraryComponentSelector)dependency.getSelector();
    final String selectorProjectPath=selector.getProjectPath();
    final String libraryName=selector.getLibraryName();
    LibraryResolutionResult resolutionResult=doResolve(selectorProjectPath,libraryName);
    LibrarySpec selectedLibrary=resolutionResult.getSelectedLibrary();
    if (selectedLibrary != null) {
      Collection<BinarySpec> allVariants=selectedLibrary.getBinaries().values();
      Collection<? extends BinarySpec> variants=filterBinaries(allVariants);
      if (!allVariants.isEmpty() && variants.isEmpty()) {
        result.failed(new ModuleVersionResolveException(selector,noCompatiblePlatformErrorMessage(libraryName,javaPlatform,allVariants)));
      }
 else       if (variants.size() > 1) {
        result.failed(new ModuleVersionResolveException(selector,multipleBinariesForSameVariantErrorMessage(libraryName,javaPlatform,variants)));
      }
 else {
        JarBinarySpec jarBinary=(JarBinarySpec)variants.iterator().next();
        DefaultTaskDependency buildDependencies=new DefaultTaskDependency();
        buildDependencies.add(jarBinary);
        DefaultLibraryLocalComponentMetaData metaData=DefaultLibraryLocalComponentMetaData.newMetaData(jarBinary.getId(),buildDependencies);
        metaData.addArtifacts(DefaultLibraryBinaryIdentifier.CONFIGURATION_NAME,Collections.singleton(createJarPublishArtifact(jarBinary)));
        result.resolved(metaData);
      }
    }
    if (!result.hasResult()) {
      String message=prettyResolutionErrorMessage(selector,resolutionResult);
      ModuleVersionResolveException failure=new ModuleVersionResolveException(selector,new LibraryResolveException(message));
      result.failed(failure);
    }
  }
}
