{
  if (dependency.getSelector() instanceof LibraryComponentSelector) {
    LibraryComponentSelector selector=(LibraryComponentSelector)dependency.getSelector();
    final String selectorProjectPath=selector.getProjectPath();
    final String libraryName=selector.getLibraryName();
    final ProjectInternal project=projectLocator.locateProject(selectorProjectPath);
    LibraryResolutionResult resolutionResult=doResolve(project,libraryName);
    LibrarySpec selectedLibrary=resolutionResult.getSelectedLibrary();
    if (selectedLibrary != null) {
      DefaultTaskDependency buildDependencies=new DefaultTaskDependency();
      Collection<BinarySpec> variants=selectedLibrary.getBinaries().values();
      if (variants.size() > 1) {
        result.failed(new ModuleVersionResolveException(selector,String.format("Multiple binaries available for library '%s' : %s",libraryName,variants)));
      }
 else {
        for (        BinarySpec spec : variants) {
          buildDependencies.add(spec.getBuildTask());
          DefaultLibraryLocalComponentMetaData metaData=DefaultLibraryLocalComponentMetaData.newMetaData(selectorProjectPath,selectedLibrary.getName(),spec.getName(),buildDependencies);
          ComponentResolveMetaData resolveMetaData=metaData.toResolveMetaData();
          result.resolved(resolveMetaData);
          BinarySpecToArtifactConverter<BinarySpec> factory=binarySpecToArtifactConverterRegistry.getConverter(spec);
          if (factory != null) {
            metaData.addArtifact(factory.convertArtifact((LibraryComponentIdentifier)resolveMetaData.getComponentId(),spec));
          }
        }
      }
    }
    if (!result.hasResult()) {
      String message=prettyErrorMessage(selector,resolutionResult);
      ModuleVersionResolveException failure=new ModuleVersionResolveException(selector,new LibraryResolveException(message));
      result.failed(failure);
    }
  }
}
