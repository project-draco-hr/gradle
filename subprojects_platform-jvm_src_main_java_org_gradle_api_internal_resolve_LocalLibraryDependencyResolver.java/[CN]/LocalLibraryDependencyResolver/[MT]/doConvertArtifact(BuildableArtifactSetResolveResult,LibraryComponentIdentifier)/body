{
  String projectPath=componentId.getProjectPath();
  final String libraryName=componentId.getLibraryName();
  ProjectInternal project=projectLocator.locateProject(projectPath);
  LibraryResolutionResult resolutionResult=doResolve(project,libraryName);
  LibrarySpec selectedLibrary=resolutionResult.getSelectedLibrary();
  if (selectedLibrary != null) {
    List<ComponentArtifactMetaData> artifacts=new LinkedList<ComponentArtifactMetaData>();
    Collection<BinarySpec> binaries=selectedLibrary.getBinaries().values();
    if (binaries.size() > 1) {
      result.failed(new ArtifactResolveException(String.format("Multiple binaries available for library '%s' : %s",libraryName,binaries)));
    }
 else {
      for (      BinarySpec binary : binaries) {
        BinarySpecToArtifactConverter<BinarySpec> factory=binarySpecToArtifactConverterRegistry.getConverter(binary);
        if (factory != null) {
          artifacts.add(factory.convertArtifact(componentId,binary));
        }
      }
      result.resolved(artifacts);
    }
  }
  if (!result.hasResult()) {
    result.failed(new ArtifactResolveException("Unable to resolve artifact for " + componentId));
  }
}
