{
  UserResolverChain userResolverChain=new UserResolverChain();
  ResolutionRules resolutionRules=configuration.getResolutionStrategy().getResolutionRules();
  startParameterResolutionOverride.addResolutionRules(resolutionRules);
  LoopbackDependencyResolver loopbackDependencyResolver=new LoopbackDependencyResolver(SettingsConverter.LOOPBACK_RESOLVER_NAME,userResolverChain,cacheLockingManager);
  List<DependencyResolver> rawResolvers=resolverProvider.getResolvers();
  IvySettings ivySettings=settingsConverter.convertForResolve(loopbackDependencyResolver,rawResolvers);
  Ivy ivy=ivyFactory.createIvy(ivySettings);
  ResolveData resolveData=createResolveData(ivy,configuration.getName());
  IvyContextualiser contextualiser=new IvyContextualiser(ivy,resolveData);
  for (  DependencyResolver rawResolver : rawResolvers) {
    IvyAwareModuleVersionRepository moduleVersionRepository;
    if (rawResolver instanceof ExternalResourceResolver) {
      moduleVersionRepository=new ExternalResourceResolverAdapter((ExternalResourceResolver)rawResolver);
    }
 else {
      moduleVersionRepository=new IvyDependencyResolverAdapter(rawResolver);
    }
    moduleVersionRepository.setSettings(ivySettings);
    LocalAwareModuleVersionRepository localAwareRepository;
    if (moduleVersionRepository.isLocal()) {
      localAwareRepository=new LocalModuleVersionRepository(moduleVersionRepository);
    }
 else {
      ModuleVersionRepository wrapperRepository=new CacheLockingModuleVersionRepository(moduleVersionRepository,cacheLockingManager);
      wrapperRepository=startParameterResolutionOverride.overrideModuleVersionRepository(wrapperRepository);
      localAwareRepository=new CachingModuleVersionRepository(wrapperRepository,moduleResolutionCache,moduleDescriptorCache,artifactAtRepositoryCachedResolutionIndex,configuration.getResolutionStrategy().getCachePolicy(),timeProvider);
    }
    LocalAwareModuleVersionRepository ivyContextualisedRepository=contextualiser.contextualise(LocalAwareModuleVersionRepository.class,localAwareRepository);
    userResolverChain.add(ivyContextualisedRepository);
  }
  return new DefaultIvyAdapter(resolveData,userResolverChain);
}
