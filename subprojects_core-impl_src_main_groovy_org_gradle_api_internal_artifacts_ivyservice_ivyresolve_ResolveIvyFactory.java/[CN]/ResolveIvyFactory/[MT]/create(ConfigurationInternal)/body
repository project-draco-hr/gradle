{
  UserResolverChain userResolverChain=new UserResolverChain();
  ResolutionRules resolutionRules=configuration.getResolutionStrategy().getResolutionRules();
  startParameterResolutionOverride.addResolutionRules(resolutionRules);
  LoopbackDependencyResolver loopbackDependencyResolver=new LoopbackDependencyResolver(SettingsConverter.LOOPBACK_RESOLVER_NAME,userResolverChain,cacheLockingManager);
  List<DependencyResolver> rawResolvers=resolverProvider.getResolvers();
  IvySettings ivySettings=settingsConverter.convertForResolve(loopbackDependencyResolver,rawResolvers);
  Ivy ivy=ivyFactory.createIvy(ivySettings);
  ResolveData resolveData=createResolveData(ivy,configuration.getName());
  RefreshWhenMissingInAllRepositoriesCachePolicy repositoryAwareCachePolicy=new RefreshWhenMissingInAllRepositoriesCachePolicy(configuration.getResolutionStrategy().getCachePolicy(),moduleDescriptorCache);
  IvyContextualiser contextualiser=new IvyContextualiser(ivy,resolveData);
  for (  DependencyResolver rawResolver : rawResolvers) {
    rawResolver.setSettings(ivySettings);
    ModuleVersionRepository moduleVersionRepository=new DependencyResolverAdapter(rawResolver);
    repositoryAwareCachePolicy.registerRepository(moduleVersionRepository);
    moduleVersionRepository=new CacheLockingModuleVersionRepository(moduleVersionRepository,cacheLockingManager);
    moduleVersionRepository=startParameterResolutionOverride.overrideModuleVersionRepository(moduleVersionRepository);
    ModuleVersionRepository cachingRepository=new CachingModuleVersionRepository(moduleVersionRepository,moduleResolutionCache,moduleDescriptorCache,artifactAtRepositoryCachedResolutionIndex,repositoryAwareCachePolicy,timeProvider);
    ModuleVersionRepository ivyContextualisedRepository=contextualiser.contextualise(ModuleVersionRepository.class,cachingRepository);
    userResolverChain.add(ivyContextualisedRepository);
  }
  return new DefaultIvyAdapter(resolveData,userResolverChain);
}
