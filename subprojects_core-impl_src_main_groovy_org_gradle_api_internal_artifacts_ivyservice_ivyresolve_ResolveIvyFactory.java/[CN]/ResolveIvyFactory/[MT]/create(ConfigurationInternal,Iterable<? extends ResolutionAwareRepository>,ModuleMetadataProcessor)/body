{
  ResolutionRules resolutionRules=configuration.getResolutionStrategy().getResolutionRules();
  CachePolicy cachePolicy=configuration.getResolutionStrategy().getCachePolicy();
  startParameterResolutionOverride.addResolutionRules(resolutionRules);
  UserResolverChain userResolverChain=new UserResolverChain(versionMatcher,latestStrategy);
  RepositoryChain parentLookupResolver=new ParentModuleLookupResolver(userResolverChain,cacheLockingManager);
  for (  ResolutionAwareRepository repository : repositories) {
    ConfiguredModuleComponentRepository baseRepository=repository.createResolver();
    if (baseRepository instanceof IvyAwareModuleVersionRepository) {
      ivyContextualize((IvyAwareModuleVersionRepository)baseRepository,userResolverChain,configuration.getName());
    }
    if (baseRepository instanceof ExternalResourceResolver) {
      ((ExternalResourceResolver)baseRepository).setRepositoryChain(parentLookupResolver);
    }
    ModuleComponentRepository moduleComponentRepository=baseRepository;
    if (baseRepository.isLocal()) {
      moduleComponentRepository=new LocalModuleComponentRepository(baseRepository,metadataProcessor);
    }
 else {
      moduleComponentRepository=new CacheLockReleasingModuleComponentsRepository(moduleComponentRepository,cacheLockingManager);
      moduleComponentRepository=startParameterResolutionOverride.overrideModuleVersionRepository(moduleComponentRepository);
      moduleComponentRepository=new CachingModuleComponentRepository(moduleComponentRepository,moduleVersionsCache,moduleMetaDataCache,moduleArtifactsCache,artifactAtRepositoryCachedResolutionIndex,cachePolicy,timeProvider,metadataProcessor);
    }
    if (baseRepository.isDynamicResolveMode()) {
      moduleComponentRepository=IvyDynamicResolveModuleComponentRepositoryAccess.wrap(moduleComponentRepository);
    }
    moduleComponentRepository=inMemoryCache.cached(moduleComponentRepository);
    userResolverChain.add(moduleComponentRepository);
  }
  return userResolverChain;
}
