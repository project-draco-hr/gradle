{
  UserResolverChain userResolverChain=new UserResolverChain();
  ResolutionRules resolutionRules=configuration.getResolutionStrategy().getResolutionRules();
  startParameterResolutionOverride.addResolutionRules(resolutionRules);
  LoopbackDependencyResolver loopbackDependencyResolver=new LoopbackDependencyResolver(SettingsConverter.LOOPBACK_RESOLVER_NAME,userResolverChain,cacheLockingManager);
  IvySettings ivySettings=settingsConverter.convertForResolve(loopbackDependencyResolver);
  userResolverChain.setSettings(ivySettings);
  Ivy ivy=ivyFactory.createIvy(ivySettings);
  ResolveData resolveData=createResolveData(ivy,configuration.getName());
  IvyContextualiser contextualiser=new IvyContextualiser(ivy,resolveData);
  for (  ResolutionAwareRepository repository : repositories) {
    IvyAwareModuleVersionRepository moduleVersionRepository=repository.createResolver();
    moduleVersionRepository.setSettings(ivySettings);
    LocalAwareModuleVersionRepository localAwareRepository;
    if (moduleVersionRepository.isLocal()) {
      localAwareRepository=new LocalModuleVersionRepository(moduleVersionRepository);
    }
 else {
      ModuleVersionRepository wrapperRepository=new CacheLockingModuleVersionRepository(moduleVersionRepository,cacheLockingManager);
      wrapperRepository=startParameterResolutionOverride.overrideModuleVersionRepository(wrapperRepository);
      localAwareRepository=new CachingModuleVersionRepository(wrapperRepository,moduleResolutionCache,moduleDescriptorCache,artifactAtRepositoryCachedResolutionIndex,configuration.getResolutionStrategy().getCachePolicy(),timeProvider);
    }
    if (moduleVersionRepository.isDynamicResolveMode()) {
      localAwareRepository=new IvyDynamicResolveModuleVersionRepository(localAwareRepository);
    }
    localAwareRepository=contextualiser.contextualise(LocalAwareModuleVersionRepository.class,localAwareRepository);
    localAwareRepository=inMemoryCache.cached(localAwareRepository);
    userResolverChain.add(localAwareRepository);
  }
  return new DefaultIvyAdapter(resolveData,userResolverChain);
}
