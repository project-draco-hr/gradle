{
  PluginResolutionApplicator resolutionApplicator=new PluginResolutionApplicator(target);
  List<Result> results=collect(requests,new Transformer<Result,PluginRequest>(){
    public Result transform(    PluginRequest request){
      return resolveToFoundResult(request);
    }
  }
);
  ImmutableListMultimap<Boolean,Result> categorizedResults=groupBy(results,new Transformer<Boolean,Result>(){
    public Boolean transform(    Result original){
      return original.legacyFound != null;
    }
  }
);
  List<Result> legacy=categorizedResults.get(true);
  List<Result> nonLegacy=categorizedResults.get(false);
  final List<String> legacyActualPluginIds=new LinkedList<String>();
  if (!legacy.isEmpty()) {
    final RepositoryHandler repositories=scriptHandler.getRepositories();
    final List<MavenArtifactRepository> mavenRepos=repositories.withType(MavenArtifactRepository.class);
    LegacyPluginResolveContext legacyPluginResolveContext=new LegacyPluginResolveContext(){
      public Dependency add(      String pluginId,      final String m2RepoUrl,      Object dependencyNotation){
        legacyActualPluginIds.add(pluginId);
        boolean repoExists=any(mavenRepos,new Spec<MavenArtifactRepository>(){
          public boolean isSatisfiedBy(          MavenArtifactRepository element){
            return element.getUrl().toString().equals(m2RepoUrl);
          }
        }
);
        if (!repoExists) {
          repositories.maven(new Action<MavenArtifactRepository>(){
            public void execute(            MavenArtifactRepository mavenArtifactRepository){
              mavenArtifactRepository.setUrl(m2RepoUrl);
            }
          }
);
        }
        return scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION,dependencyNotation);
      }
    }
;
    for (    Result result : legacy) {
      result.legacyFound.action.execute(legacyPluginResolveContext);
    }
  }
  Configuration classpathConfiguration=scriptHandler.getConfigurations().getByName(ScriptHandler.CLASSPATH_CONFIGURATION);
  Set<File> files=classpathConfiguration.getFiles();
  if (!files.isEmpty()) {
    ClassPath classPath=new DefaultClassPath(files);
    Factory<? extends ClassLoader> loader=classLoaderScope.getParent().loader(classPath);
    classLoaderScope.export(loader);
  }
  classLoaderScope.lock();
  for (  String pluginId : legacyActualPluginIds) {
    target.getPlugins().apply(pluginId);
  }
  for (  Result result : nonLegacy) {
    resolutionApplicator.execute(result.found.resolution);
  }
}
