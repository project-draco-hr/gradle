{
  if (requests.isEmpty()) {
    defineScriptHandlerClassScope(scriptHandler,classLoaderScope);
    return;
  }
  if (target == null) {
    throw new IllegalStateException("Plugin target is 'null' and there are plugin requests");
  }
  final PluginResolver effectivePluginResolver=wrapInNotInClasspathCheck(classLoaderScope);
  List<Result> results=collect(requests,new Transformer<Result,PluginRequest>(){
    public Result transform(    PluginRequest request){
      return resolveToFoundResult(effectivePluginResolver,request);
    }
  }
);
  final Map<Result,PluginId> legacyActualPluginIds=Maps.newLinkedHashMap();
  final Map<Result,PotentialPluginWithId<?>> pluginImpls=Maps.newLinkedHashMap();
  if (!results.isEmpty()) {
    final RepositoryHandler repositories=scriptHandler.getRepositories();
    final List<MavenArtifactRepository> mavenRepos=repositories.withType(MavenArtifactRepository.class);
    final Set<String> repoUrls=Sets.newLinkedHashSet();
    for (    final Result result : results) {
      applyPlugin(result.request,result.found.getPluginId(),new Runnable(){
        @Override public void run(){
          result.found.execute(new PluginResolveContext(){
            public void addLegacy(            PluginId pluginId,            final String m2RepoUrl,            Object dependencyNotation){
              legacyActualPluginIds.put(result,pluginId);
              repoUrls.add(m2RepoUrl);
              scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION,dependencyNotation);
            }
            @Override public void add(            PotentialPluginWithId<?> plugin){
              pluginImpls.put(result,plugin);
            }
          }
);
        }
      }
);
    }
    for (    final String m2RepoUrl : repoUrls) {
      boolean repoExists=any(mavenRepos,new Spec<MavenArtifactRepository>(){
        public boolean isSatisfiedBy(        MavenArtifactRepository element){
          return element.getUrl().toString().equals(m2RepoUrl);
        }
      }
);
      if (!repoExists) {
        repositories.maven(new Action<MavenArtifactRepository>(){
          public void execute(          MavenArtifactRepository mavenArtifactRepository){
            mavenArtifactRepository.setUrl(m2RepoUrl);
          }
        }
);
      }
    }
  }
  defineScriptHandlerClassScope(scriptHandler,classLoaderScope);
  for (  final Map.Entry<Result,PluginId> entry : legacyActualPluginIds.entrySet()) {
    final PluginRequest request=entry.getKey().request;
    final PluginId id=entry.getValue();
    applyPlugin(request,id,new Runnable(){
      public void run(){
        target.apply(id.toString());
      }
    }
);
  }
  for (  final Map.Entry<Result,PotentialPluginWithId<?>> entry : pluginImpls.entrySet()) {
    final Result result=entry.getKey();
    applyPlugin(result.request,result.found.getPluginId(),new Runnable(){
      public void run(){
        target.apply(entry.getValue());
      }
    }
);
  }
}
