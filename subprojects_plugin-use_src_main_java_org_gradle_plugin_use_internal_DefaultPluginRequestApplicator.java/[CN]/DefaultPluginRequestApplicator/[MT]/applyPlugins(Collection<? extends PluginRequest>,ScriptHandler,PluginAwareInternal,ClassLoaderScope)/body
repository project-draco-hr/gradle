{
  if (requests.isEmpty()) {
    defineScriptHandlerClassScope(scriptHandler,classLoaderScope);
    return;
  }
  if (target == null) {
    throw new IllegalStateException("Plugin target is 'null' and there are plugin requests");
  }
  final PluginResolutionApplicator resolutionApplicator=new PluginResolutionApplicator(target);
  final PluginResolver effectivePluginResolver=wrapInNotInClasspathCheck(classLoaderScope);
  List<Result> results=collect(requests,new Transformer<Result,PluginRequest>(){
    public Result transform(    PluginRequest request){
      return resolveToFoundResult(effectivePluginResolver,request);
    }
  }
);
  ImmutableListMultimap<Boolean,Result> categorizedResults=groupBy(results,new Transformer<Boolean,Result>(){
    public Boolean transform(    Result original){
      return original.legacyFound != null;
    }
  }
);
  final List<Result> legacy=categorizedResults.get(true);
  List<Result> nonLegacy=categorizedResults.get(false);
  final Map<Result,String> legacyActualPluginIds=Maps.newLinkedHashMap();
  if (!legacy.isEmpty()) {
    final RepositoryHandler repositories=scriptHandler.getRepositories();
    final List<MavenArtifactRepository> mavenRepos=repositories.withType(MavenArtifactRepository.class);
    for (    final Result result : legacy) {
      result.legacyFound.action.execute(new LegacyPluginResolveContext(){
        public Dependency add(        String pluginId,        final String m2RepoUrl,        Object dependencyNotation){
          legacyActualPluginIds.put(result,pluginId);
          boolean repoExists=any(mavenRepos,new Spec<MavenArtifactRepository>(){
            public boolean isSatisfiedBy(            MavenArtifactRepository element){
              return element.getUrl().toString().equals(m2RepoUrl);
            }
          }
);
          if (!repoExists) {
            repositories.maven(new Action<MavenArtifactRepository>(){
              public void execute(              MavenArtifactRepository mavenArtifactRepository){
                mavenArtifactRepository.setUrl(m2RepoUrl);
              }
            }
);
          }
          return scriptHandler.getDependencies().add(ScriptHandler.CLASSPATH_CONFIGURATION,dependencyNotation);
        }
      }
);
    }
  }
  defineScriptHandlerClassScope(scriptHandler,classLoaderScope);
  for (  final Map.Entry<Result,String> entry : legacyActualPluginIds.entrySet()) {
    final PluginRequest request=entry.getKey().request;
    final String id=entry.getValue();
    applyPlugin(request,id,new Runnable(){
      public void run(){
        target.getPluginManager().apply(id);
      }
    }
);
  }
  for (  final Result result : nonLegacy) {
    applyPlugin(result.request,result.found.resolution.getPluginId().toString(),new Runnable(){
      public void run(){
        resolutionApplicator.execute(result.found.resolution);
      }
    }
);
  }
}
