{
  if (targetedRequests.isEmpty()) {
    defineScriptHandlerClassScope(scriptHandler,classLoaderScope,Collections.<PluginImplementation<?>>emptyList());
    return;
  }
  final PluginResolver pluginResolver=pluginResolverFactory.create();
  Set<PluginRequest> requests=toSet(collect(targetedRequests,new Transformer<PluginRequest,TargetedPluginRequest>(){
    @Override public PluginRequest transform(    TargetedPluginRequest targetedPluginRequest){
      return targetedPluginRequest.getRequest();
    }
  }
));
  Set<Result> results=collect(requests,new Transformer<Result,PluginRequest>(){
    public Result transform(    PluginRequest request){
      return resolveToFoundResult(pluginResolver,request);
    }
  }
);
  final Map<Result,PluginId> legacyActualPluginIds=Maps.newLinkedHashMap();
  final Map<Result,PluginImplementation<?>> pluginImpls=Maps.newLinkedHashMap();
  final Map<Result,PluginImplementation<?>> pluginImplsFromOtherLoaders=Maps.newLinkedHashMap();
  if (!results.isEmpty()) {
    final RepositoryHandler repositories=scriptHandler.getRepositories();
    List<ArtifactRepository> pluginArtifactRepositories=new ArrayList<ArtifactRepository>();
    pluginRepositoryRegistry.lock();
    for (    PluginRepository pluginRepository : pluginRepositoryRegistry.getPluginRepositories()) {
      if (pluginRepository instanceof BackedByArtifactRepository) {
        pluginArtifactRepositories.add(((BackedByArtifactRepository)pluginRepository).createArtifactRepository(repositories));
      }
    }
    repositories.removeAll(pluginArtifactRepositories);
    repositories.addAll(0,pluginArtifactRepositories);
    final List<MavenArtifactRepository> mavenRepos=repositories.withType(MavenArtifactRepository.class);
    final Set<String> repoUrls=Sets.newLinkedHashSet();
    for (    final Result result : results) {
      applyPlugin(result.request,result.found.getPluginId(),new Runnable(){
        @Override public void run(){
          result.found.execute(new PluginResolveContext(){
            public void addLegacy(            PluginId pluginId,            final String m2RepoUrl,            Object dependencyNotation){
              repoUrls.add(m2RepoUrl);
              addLegacy(pluginId,dependencyNotation);
            }
            @Override public void addLegacy(            PluginId pluginId,            Object dependencyNotation){
              legacyActualPluginIds.put(result,pluginId);
              scriptHandler.addScriptClassPathDependency(dependencyNotation);
            }
            @Override public void add(            PluginImplementation<?> plugin){
              pluginImpls.put(result,plugin);
            }
            @Override public void addFromDifferentLoader(            PluginImplementation<?> plugin){
              pluginImplsFromOtherLoaders.put(result,plugin);
            }
          }
);
        }
      }
);
    }
    for (    final String m2RepoUrl : repoUrls) {
      boolean repoExists=any(mavenRepos,new Spec<MavenArtifactRepository>(){
        public boolean isSatisfiedBy(        MavenArtifactRepository element){
          return element.getUrl().toString().equals(m2RepoUrl);
        }
      }
);
      if (!repoExists) {
        repositories.maven(new Action<MavenArtifactRepository>(){
          public void execute(          MavenArtifactRepository mavenArtifactRepository){
            mavenArtifactRepository.setUrl(m2RepoUrl);
          }
        }
);
      }
    }
  }
  defineScriptHandlerClassScope(scriptHandler,classLoaderScope,pluginImplsFromOtherLoaders.values());
  final Multimap<PluginId,TargetedPluginRequest> targetsById=groupBy(targetedRequests,new Transformer<PluginId,TargetedPluginRequest>(){
    @Override public PluginId transform(    TargetedPluginRequest targetedPluginRequest){
      return targetedPluginRequest.getRequest().getId();
    }
  }
);
  for (  final Map.Entry<Result,PluginId> entry : legacyActualPluginIds.entrySet()) {
    final PluginRequest request=entry.getKey().request;
    final PluginId id=entry.getValue();
    for (    final TargetedPluginRequest targetedPluginRequest : targetsById.get(id)) {
      applyPlugin(request,id,new Runnable(){
        public void run(){
          targetedPluginRequest.getTarget().getPluginManager().apply(id.toString());
        }
      }
);
    }
  }
  for (  final Map.Entry<Result,PluginImplementation<?>> entry : Iterables.concat(pluginImpls.entrySet(),pluginImplsFromOtherLoaders.entrySet())) {
    final Result result=entry.getKey();
    for (    final TargetedPluginRequest targetedPluginRequest : targetsById.get(result.request.getId())) {
      applyPlugin(result.request,result.found.getPluginId(),new Runnable(){
        public void run(){
          ((PluginManagerInternal)targetedPluginRequest.getTarget().getPluginManager()).apply(entry.getValue());
        }
      }
);
    }
  }
}
