{
  LinkedList<Object> queue=new LinkedList<Object>(values);
  while (!queue.isEmpty()) {
    Object dependency=queue.removeFirst();
    if (dependency instanceof Buildable) {
      context.add(dependency);
    }
 else     if (dependency instanceof Task) {
      context.add(dependency);
    }
 else     if (dependency instanceof TaskDependency) {
      context.add(dependency);
    }
 else     if (dependency instanceof Closure) {
      Closure closure=(Closure)dependency;
      Object closureResult=closure.call(context.getTask());
      if (closureResult != null) {
        queue.add(0,closureResult);
      }
    }
 else     if (dependency instanceof RealizableTaskCollection) {
      RealizableTaskCollection realizableTaskCollection=(RealizableTaskCollection)dependency;
      realizableTaskCollection.realizeRuleTaskTypes();
      queue.addAll(0,GUtil.addToCollection(new ArrayList<Object>(),realizableTaskCollection));
    }
 else     if (dependency instanceof Iterable) {
      Iterable<?> iterable=(Iterable)dependency;
      queue.addAll(0,GUtil.addToCollection(new ArrayList<Object>(),iterable));
    }
 else     if (dependency instanceof Map) {
      Map<?,?> map=(Map)dependency;
      queue.addAll(0,map.values());
    }
 else     if (dependency instanceof Object[]) {
      Object[] array=(Object[])dependency;
      queue.addAll(0,Arrays.asList(array));
    }
 else     if (dependency instanceof Callable) {
      Callable callable=(Callable)dependency;
      Object callableResult=uncheckedCall(callable);
      if (callableResult != null) {
        queue.add(0,callableResult);
      }
    }
 else     if (resolver != null && dependency instanceof TaskReference) {
      context.add(resolver.resolveTask((TaskReference)dependency));
    }
 else     if (resolver != null && dependency instanceof CharSequence) {
      context.add(resolver.resolveTask(dependency.toString()));
    }
 else {
      List<String> formats=new ArrayList<String>();
      if (resolver != null) {
        formats.add("A String or CharSequence task name or path");
        formats.add("A TaskReference instance");
      }
      formats.add("A Task instance");
      formats.add("A Buildable instance");
      formats.add("A TaskDependency instance");
      formats.add("A Closure instance that returns any of the above types");
      formats.add("A Callable instance that returns any of the above types");
      formats.add("An Iterable, Collection, Map or array instance that contains any of the above types");
      throw new UnsupportedNotationException(dependency,String.format("Cannot convert %s to a task.",dependency),null,formats);
    }
  }
}
