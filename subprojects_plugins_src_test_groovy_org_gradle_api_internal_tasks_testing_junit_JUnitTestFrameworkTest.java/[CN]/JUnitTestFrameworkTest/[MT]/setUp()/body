{
  super.setUp();
  reporterMock=context.mock(TestReporter.class);
  jUnitOptionsMock=context.mock(JUnitOptions.class);
  idGenerator=context.mock(IdGenerator.class);
  serviceRegistry=context.mock(ServiceRegistry.class);
  final Factory<File> temporaryDirFactory=new Factory<File>(){
    public File create(){
      return temporaryDir;
    }
  }
;
  context.checking(new Expectations(){
{
      allowing(testMock).getTestClassesDir();
      will(returnValue(testClassesDir));
      allowing(testMock).getClasspath();
      will(returnValue(classpathMock));
      allowing(testMock).getAnt();
      will(returnValue(context.mock(AntBuilder.class)));
      allowing(testMock).getTemporaryDirFactory();
      will(returnValue(temporaryDirFactory));
    }
  }
);
}
