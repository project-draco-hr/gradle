{
  if (!specRuleAction.getSpec().isSatisfiedBy(selection)) {
    return;
  }
  List<Object> inputs=Lists.newArrayList();
  for (  Class<?> inputType : specRuleAction.getAction().getInputTypes()) {
    if (inputType == ModuleComponentResolveMetaData.class) {
      inputs.add(metadataProvider.getMetaData());
      continue;
    }
    if (inputType == ComponentMetadata.class) {
      inputs.add(metadataProvider.getComponentMetadata());
      continue;
    }
    if (inputType == IvyModuleDescriptor.class) {
      IvyModuleDescriptor ivyModuleDescriptor=metadataProvider.getIvyModuleDescriptor();
      if (ivyModuleDescriptor == null) {
        return;
      }
      inputs.add(ivyModuleDescriptor);
      continue;
    }
    throw new IllegalStateException();
  }
  try {
    specRuleAction.getAction().execute(selection,inputs);
  }
 catch (  Exception e) {
    throw new InvalidUserCodeException(USER_CODE_ERROR,e);
  }
}
