{
  final ScriptObjectConfigurerFactory scriptObjectConfigurerFactory=context.mock(ScriptObjectConfigurerFactory.class);
  final ScriptObjectConfigurer configurer=context.mock(ScriptObjectConfigurer.class);
  final ScriptSource initScriptMock=context.mock(ScriptSource.class);
  final GradleInternal gradleMock=context.mock(GradleInternal.class);
  final ScriptClassLoaderProvider buildClassLoaderProviderMock=context.mock(ScriptClassLoaderProvider.class);
  context.checking(new Expectations(){
{
      one(scriptObjectConfigurerFactory).create(initScriptMock);
      will(returnValue(configurer));
      one(configurer).setClasspathClosureName("initscript");
      allowing(gradleMock).getClassLoaderProvider();
      will(returnValue(buildClassLoaderProviderMock));
      one(configurer).setClassLoaderProvider(buildClassLoaderProviderMock);
      one(configurer).setScriptBaseClass(InitScript.class);
      one(configurer).apply(gradleMock);
    }
  }
);
  DefaultInitScriptProcessor processor=new DefaultInitScriptProcessor(scriptObjectConfigurerFactory);
  processor.process(initScriptMock,gradleMock);
}
