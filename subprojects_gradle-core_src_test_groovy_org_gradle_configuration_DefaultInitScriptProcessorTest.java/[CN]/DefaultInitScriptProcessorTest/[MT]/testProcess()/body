{
  final ScriptCompilerFactory scriptCompilerFactoryMock=context.mock(ScriptCompilerFactory.class);
  final ScriptCompiler scriptCompilerMock=context.mock(ScriptCompiler.class);
  final ScriptSource initScriptMock=context.mock(ScriptSource.class);
  final GradleInternal gradleMock=context.mock(GradleInternal.class);
  final ScriptClassLoaderProvider buildClassLoaderProviderMock=context.mock(ScriptClassLoaderProvider.class);
  final URLClassLoader classLoader=new URLClassLoader(new URL[0]);
  final groovy.lang.Script classPathScriptMock=new EmptyScript();
  final groovy.lang.Script buildScriptMock=new EmptyScript();
  context.checking(new Expectations(){
{
      one(scriptCompilerFactoryMock).createCompiler(initScriptMock);
      will(returnValue(gradleMock));
      allowing(gradleMock).getClassLoaderProvider();
      will(returnValue(buildClassLoaderProviderMock));
      one(buildClassLoaderProviderMock).getClassLoader();
      will(returnValue(classLoader));
      one(scriptCompilerMock).setClassloader(classLoader);
      one(scriptCompilerMock).setTransformer(with(any(InitScriptClasspathScriptTransformer.class)));
      one(scriptCompilerMock).compile(Script.class);
      will(returnValue(classPathScriptMock));
      one(buildClassLoaderProviderMock).updateClassPath();
      one(scriptCompilerMock).setTransformer(with(any(InitScriptTransformer.class)));
      one(scriptCompilerMock).compile(Script.class);
      will(returnValue(buildScriptMock));
    }
  }
);
}
