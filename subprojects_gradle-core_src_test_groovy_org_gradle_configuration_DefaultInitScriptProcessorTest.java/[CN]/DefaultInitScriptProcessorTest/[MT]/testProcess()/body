{
  final ScriptProcessorFactory scriptProcessorFactoryMock=context.mock(ScriptProcessorFactory.class);
  final ScriptProcessor scriptProcessorMock=context.mock(ScriptProcessor.class);
  final InitScriptMetaData initScriptMetaDataMock=context.mock(InitScriptMetaData.class);
  final ScriptSource initScriptMock=context.mock(ScriptSource.class);
  final GradleInternal gradleMock=context.mock(GradleInternal.class);
  final ScriptClassLoaderProvider buildClassLoaderProviderMock=context.mock(ScriptClassLoaderProvider.class);
  final URLClassLoader classLoader=new URLClassLoader(new URL[0]);
  final Script classPathScriptMock=new EmptyScript();
  final Script buildScriptMock=new EmptyScript();
  context.checking(new Expectations(){
{
      one(scriptProcessorFactoryMock).createProcessor(initScriptMock);
      will(returnValue(gradleMock));
      allowing(gradleMock).getClassLoaderProvider();
      will(returnValue(buildClassLoaderProviderMock));
      one(buildClassLoaderProviderMock).getClassLoader();
      will(returnValue(classLoader));
      one(scriptProcessorMock).setClassloader(classLoader);
      one(scriptProcessorMock).setTransformer(with(any(InitScriptClasspathScriptTransformer.class)));
      one(scriptProcessorMock).process(ScriptWithSource.class);
      will(returnValue(classPathScriptMock));
      one(initScriptMetaDataMock).applyMetaData(classPathScriptMock,gradleMock);
      one(buildClassLoaderProviderMock).updateClassPath();
      one(scriptProcessorMock).setTransformer(with(any(InitScriptTransformer.class)));
      one(scriptProcessorMock).process(ScriptWithSource.class);
      will(returnValue(buildScriptMock));
      one(initScriptMetaDataMock).applyMetaData(buildScriptMock,gradleMock);
    }
  }
);
}
