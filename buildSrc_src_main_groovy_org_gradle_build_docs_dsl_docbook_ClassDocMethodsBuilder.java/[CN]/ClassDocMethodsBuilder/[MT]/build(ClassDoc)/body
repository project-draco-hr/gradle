{
  Set<String> signatures=new HashSet<String>();
  for (  Element tr : children(classDoc.getMethodsTable(),"tr")) {
    List<Element> cells=children(tr,"td");
    if (cells.size() != 1) {
      throw new RuntimeException(String.format("Expected 1 cell in <tr>, found: %s",tr));
    }
    String methodName=cells.get(0).getTextContent().trim();
    Collection<MethodMetaData> methods=classDoc.getClassMetaData().findDeclaredMethods(methodName);
    if (methods.isEmpty()) {
      throw new RuntimeException(String.format("No metadata for method '%s.%s()'. Available methods: %s",classDoc.getName(),methodName,classDoc.getClassMetaData().getDeclaredMethodNames()));
    }
    for (    MethodMetaData method : methods) {
      DocComment docComment=javadocConverter.parse(method,listener);
      MethodDoc methodDoc=new MethodDoc(method,docComment.getDocbook());
      if (methodDoc.getDescription() == null) {
        throw new RuntimeException(String.format("Docbook content for '%s %s' does not contain a description paragraph.",classDoc.getName(),method.getSignature()));
      }
      PropertyDoc property=classDoc.findProperty(methodName);
      boolean multiValued=false;
      if (property != null && method.getParameters().size() == 1 && method.getParameters().get(0).getType().getSignature().equals(Closure.class.getName())) {
        TypeMetaData type=property.getMetaData().getType();
        if (type.getName().equals("java.util.List") || type.getName().equals("java.util.Collection") || type.getName().equals("java.util.Set")|| type.getName().equals("java.util.Iterable")) {
          type=type.getTypeArgs().get(0);
          multiValued=true;
        }
        classDoc.addClassBlock(new BlockDoc(methodDoc,property,type,multiValued));
      }
 else {
        classDoc.addClassMethod(methodDoc);
        signatures.add(method.getOverrideSignature());
      }
    }
  }
  ClassDoc supertype=classDoc.getSuperClass();
  if (supertype != null) {
    for (    MethodDoc method : supertype.getClassMethods()) {
      if (signatures.add(method.getMetaData().getOverrideSignature())) {
        classDoc.addClassMethod(method);
      }
    }
  }
}
