{
  String treePath=null;
  PatternSet treePattern=null;
  if (CACHING_TREE_VISITOR_FEATURE_ENABLED && isDirectoryFileTree(fileTree)) {
    DirectoryFileTree directoryFileTree=DirectoryFileTree.class.cast(((FileTreeAdapter)fileTree).getTree());
    treePath=directoryFileTree.getDir().getAbsolutePath();
    treePattern=directoryFileTree.getPatternSet();
    if (isCacheablePath(treePath)) {
      VisitedTreeCacheEntry cacheEntry=findOrCreateCacheEntry(treePath);
      cacheEntry.lock();
      try {
        VisitedTree cachedTree=null;
        if (cacheEntry != null) {
          if (allowReuse) {
            cachedTree=cacheEntry.get(treePattern);
          }
 else {
            cacheEntry.clear();
          }
        }
        if (cachedTree != null) {
          recordCacheHit(directoryFileTree);
          return cachedTree;
        }
 else {
          recordCacheMiss(directoryFileTree,allowReuse);
          cachedTree=doVisitTree(treePath,treePattern,fileTree,true);
          cacheEntry.put(treePattern,cachedTree);
          return cachedTree;
        }
      }
  finally {
        cacheEntry.unlock();
      }
    }
  }
  return doVisitTree(treePath,treePattern,fileTree,false);
}
