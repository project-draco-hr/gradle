{
  ClassWriter visitor=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  String typeName=type.getName() + "_Decorated";
  Type generatedType=Type.getType("L" + typeName.replaceAll("\\.","/") + ";");
  Type superclassType=Type.getType(type);
  visitor.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC,generatedType.getInternalName(),null,superclassType.getInternalName(),new String[0]);
  String constructorDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,new Type[0]);
  MethodVisitor methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,"<init>",constructorDescriptor,null,new String[0]);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,superclassType.getInternalName(),"<init>",constructorDescriptor);
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
  String runDesciptor=Type.getMethodDescriptor(Type.getType(Object.class),new Type[0]);
  methodVisitor=visitor.visitMethod(Opcodes.ACC_PUBLIC,"run",runDesciptor,null,new String[0]);
  methodVisitor.visitCode();
  methodVisitor.visitInsn(Opcodes.ACONST_NULL);
  methodVisitor.visitInsn(Opcodes.ARETURN);
  methodVisitor.visitMaxs(0,0);
  methodVisitor.visitEnd();
  visitor.visitEnd();
  byte[] bytecode=visitor.toByteArray();
  return (Class<T>)ReflectionUtil.invoke(type.getClassLoader(),"defineClass",new Object[]{typeName,bytecode,0,bytecode.length});
}
