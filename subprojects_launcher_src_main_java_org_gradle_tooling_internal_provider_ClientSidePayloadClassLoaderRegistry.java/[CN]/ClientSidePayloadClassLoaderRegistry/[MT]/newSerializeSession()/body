{
  final Set<ClassLoader> candidates=new LinkedHashSet<ClassLoader>();
  final Set<URL> classPath=new LinkedHashSet<URL>();
  return new SerializeMap(){
    public short visitClass(    Class<?> target){
      classpathInferer.getClassPathFor(target,classPath);
      candidates.add(target.getClassLoader());
      return CLIENT_CLASS_LOADER_ID;
    }
    public Map<Short,ClassLoaderDetails> getClassLoaders(){
      lock.lock();
      UUID uuid;
      try {
        uuid=classLoaderIds.get(candidates);
        if (uuid == null) {
          uuid=UUID.randomUUID();
          classLoaderIds.put(candidates,uuid);
          classLoaders.put(uuid,candidates);
        }
      }
  finally {
        lock.unlock();
      }
      return Collections.singletonMap(CLIENT_CLASS_LOADER_ID,new ClassLoaderDetails(uuid,new MutableURLClassLoader.Spec(new ArrayList<URL>(classPath))));
    }
  }
;
}
