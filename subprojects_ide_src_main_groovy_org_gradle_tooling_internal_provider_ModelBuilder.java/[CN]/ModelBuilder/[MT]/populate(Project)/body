{
  EclipseModel eclipseModel=project.getPlugins().getPlugin(EclipsePlugin.class).getModel();
  EclipseClasspath classpath=eclipseModel.getClasspath();
  classpath.setProjectDependenciesOnly(projectDependenciesOnly);
  List<ClasspathEntry> entries=classpath.resolveDependencies();
  final List<ExternalDependencyVersion1> externalDependencies=new LinkedList<ExternalDependencyVersion1>();
  final List<EclipseProjectDependencyVersion2> projectDependencies=new LinkedList<EclipseProjectDependencyVersion2>();
  final List<EclipseSourceDirectoryVersion1> sourceDirectories=new LinkedList<EclipseSourceDirectoryVersion1>();
  for (  ClasspathEntry entry : entries) {
    if (entry instanceof Library) {
      Library library=(Library)entry;
      final File file=project.file(library.getPath());
      final File source=library.getSourcePath() == null ? null : project.file(library.getSourcePath());
      final File javadoc=library.getJavadocPath() == null ? null : project.file(library.getJavadocPath());
      externalDependencies.add(new DefaultExternalDependency(file,javadoc,source));
    }
 else     if (entry instanceof ProjectDependency) {
      final ProjectDependency projectDependency=(ProjectDependency)entry;
      final String path=StringUtils.removeStart(projectDependency.getPath(),"/");
      projectDependencies.add(new DefaultEclipseProjectDependency(path,projectMapping.get(projectDependency.getGradlePath())));
    }
 else     if (entry instanceof SourceFolder) {
      String path=((SourceFolder)entry).getPath();
      sourceDirectories.add(new DefaultEclipseSourceDirectory(path,project.file(path)));
    }
  }
  final EclipseProjectVersion3 eclipseProject=projectMapping.get(project.getPath());
  ReflectionUtil.setProperty(eclipseProject,"classpath",externalDependencies);
  ReflectionUtil.setProperty(eclipseProject,"projectDependencies",projectDependencies);
  ReflectionUtil.setProperty(eclipseProject,"sourceDirectories",sourceDirectories);
  if (ReflectionUtil.hasProperty(eclipseProject,"linkedResources")) {
    List<DefaultEclipseLinkedResource> linkedResources=new LinkedList<DefaultEclipseLinkedResource>();
    for (    Link r : eclipseModel.getProject().getLinkedResources()) {
      linkedResources.add(new DefaultEclipseLinkedResource(r.getName(),r.getType(),r.getLocation(),r.getLocationUri()));
    }
    ReflectionUtil.setProperty(eclipseProject,"linkedResources",linkedResources);
  }
  List<EclipseTaskVersion1> out=new ArrayList<EclipseTaskVersion1>();
  for (  final Task t : tasksFactory.getTasks(project)) {
    out.add(new DefaultEclipseTask(eclipseProject,t.getPath(),t.getName(),t.getDescription()));
  }
  ReflectionUtil.setProperty(eclipseProject,"tasks",out);
  for (  Project childProject : project.getChildProjects().values()) {
    populate(childProject);
  }
}
