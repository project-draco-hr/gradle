{
  String parentOrganisation=attributes.getValue("organisation");
  String parentModule=attributes.getValue("module");
  String parentRevision=attributes.getValue("revision");
  String location=elvis(attributes.getValue("location"),"../ivy.xml");
  String extendType=elvis(attributes.getValue("extendType"),"all").toLowerCase();
  List<String> extendTypes=Arrays.asList(extendType.split(","));
  ModuleDescriptor parent;
  try {
    LOGGER.debug("Trying to parse included ivy file :{}",location);
    parent=parseOtherIvyFileOnFileSystem(location);
    if (parent != null) {
      ModuleId expected=IvyUtil.createModuleId(parentOrganisation,parentModule);
      ModuleId pid=parent.getModuleRevisionId().getModuleId();
      if (!expected.equals(pid)) {
        LOGGER.warn("Ignoring parent Ivy file {}; expected {} but found {}",location,expected,pid);
        parent=null;
      }
    }
    if (parent == null) {
      LOGGER.debug("Trying to parse included ivy file by asking repository for module :{}#{};{}",parentOrganisation,parentModule,parentRevision);
      parent=parseOtherIvyFile(parentOrganisation,parentModule,parentRevision);
    }
  }
 catch (  Exception e) {
    throw (ParseException)new ParseException("Unable to parse included ivy file for " + parentOrganisation + "#"+ parentModule+ ";"+ parentRevision,0).initCause(e);
  }
  if (parent == null) {
    throw new ParseException("Unable to parse included ivy file for " + parentOrganisation + "#"+ parentModule+ ";"+ parentRevision,0);
  }
  mergeWithOtherModuleDescriptor(extendTypes,parent);
}
