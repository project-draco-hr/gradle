{
  return new ModuleComponentRepositoryAccess(){
    public void listModuleVersions(    DependencyMetaData dependency,    BuildableModuleVersionSelectionResolveResult result){
      IvyContext.getContext().setResolveData(resolveData);
      try {
        ResolvedModuleRevision revision=resolver.getDependency(dependency.getDescriptor(),resolveData);
        if (revision == null) {
          result.listed(new DefaultModuleVersionListing());
        }
 else {
          result.listed(new DefaultModuleVersionListing(revision.getId().getRevision()));
        }
      }
 catch (      ParseException e) {
        throw UncheckedException.throwAsUncheckedException(e);
      }
    }
    public void resolveComponentMetaData(    DependencyMetaData dependency,    ModuleComponentIdentifier moduleComponent,    BuildableModuleVersionMetaDataResolveResult result){
      IvyContext.getContext().setResolveData(resolveData);
      try {
        ResolvedModuleRevision revision=resolver.getDependency(dependency.getDescriptor(),resolveData);
        if (revision == null) {
          LOGGER.debug("Performed resolved of module '{}' in repository '{}': not found",moduleComponent,getName());
          result.missing();
        }
 else {
          LOGGER.debug("Performed resolved of module '{}' in repository '{}': found",moduleComponent,getName());
          ModuleDescriptorAdapter metaData=new ModuleDescriptorAdapter(revision.getDescriptor());
          metaData.setChanging(isChanging(revision));
          metaData.setIvyMetaData(new DefaultIvyModuleVersionMetaData(revision.getDescriptor().getExtraInfo()));
          result.resolved(metaData,null);
        }
      }
 catch (      ParseException e) {
        throw UncheckedException.throwAsUncheckedException(e);
      }
    }
    public void resolveModuleArtifacts(    ComponentMetaData component,    ArtifactType context,    BuildableArtifactSetResolveResult result){
      Class<? extends Artifact> artifactType=context.getArtifactType();
      try {
        result.resolved(getCandidateArtifacts((ModuleVersionMetaData)component,artifactType));
      }
 catch (      Exception e) {
        result.failed(new ArtifactResolveException(component.getComponentId(),e));
      }
    }
    public void resolveModuleArtifacts(    ComponentMetaData component,    ComponentUsage context,    BuildableArtifactSetResolveResult result){
      String configurationName=context.getConfigurationName();
      result.resolved(component.getConfiguration(configurationName).getArtifacts());
    }
  }
;
}
