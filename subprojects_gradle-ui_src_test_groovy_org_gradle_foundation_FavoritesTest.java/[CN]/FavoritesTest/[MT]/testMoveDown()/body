{
  FavoritesEditor editor=new FavoritesEditor();
  Assert.assertTrue(editor.getFavoriteTasks().isEmpty());
  FavoriteTask mySubProject1CompleFavorite=editor.addFavorite(mySubProject1Comple,false);
  FavoriteTask mySubProject1LibFavorite=editor.addFavorite(mySubProject1Lib,false);
  FavoriteTask mySubProject1DocFavorite=editor.addFavorite(mySubProject1Doc,false);
  FavoriteTask mySubSubProjectCompileFavorite=editor.addFavorite(mySubSubProjectCompile,false);
  FavoriteTask mySubSubProjectLibFavorite=editor.addFavorite(mySubSubProjectLib,false);
  FavoriteTask mySubSubProjectDocFavorite=editor.addFavorite(mySubSubProjectDoc,false);
  List<FavoriteTask> favoritesToMove=new ArrayList<FavoriteTask>();
  favoritesToMove.add(mySubProject1CompleFavorite);
  favoritesToMove.add(mySubProject1DocFavorite);
  favoritesToMove.add(mySubSubProjectLibFavorite);
  TestOrderFavoritesObserver observer=new TestOrderFavoritesObserver(editor,mySubProject1LibFavorite,mySubProject1CompleFavorite,mySubSubProjectCompileFavorite,mySubProject1DocFavorite,mySubSubProjectDocFavorite,mySubSubProjectLibFavorite);
  editor.addFavoriteTasksObserver(observer,false);
  editor.moveFavoritesAfter(favoritesToMove);
  observer.setExpectedOrder(mySubProject1LibFavorite,mySubSubProjectCompileFavorite,mySubProject1CompleFavorite,mySubSubProjectDocFavorite,mySubProject1DocFavorite,mySubSubProjectLibFavorite);
  editor.moveFavoritesAfter(favoritesToMove);
  observer.setExpectedOrder(mySubProject1LibFavorite,mySubSubProjectCompileFavorite,mySubSubProjectDocFavorite,mySubProject1CompleFavorite,mySubProject1DocFavorite,mySubSubProjectLibFavorite);
  editor.moveFavoritesAfter(favoritesToMove);
  observer.setExpectedOrder(mySubProject1LibFavorite,mySubSubProjectCompileFavorite,mySubSubProjectDocFavorite,mySubProject1CompleFavorite,mySubProject1DocFavorite,mySubSubProjectLibFavorite);
  editor.moveFavoritesAfter(favoritesToMove);
}
