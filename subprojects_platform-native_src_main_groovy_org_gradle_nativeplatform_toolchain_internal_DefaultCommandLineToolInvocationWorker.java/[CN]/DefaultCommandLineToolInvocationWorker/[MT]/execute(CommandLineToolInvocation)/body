{
  ExecAction toolExec=execActionFactory.newExecAction();
  toolExec.executable(executable);
  if (invocation.getWorkDirectory() != null) {
    GFileUtils.mkdirs(invocation.getWorkDirectory());
    toolExec.workingDir(invocation.getWorkDirectory());
  }
  toolExec.args(invocation.getArgs());
  if (!invocation.getPath().isEmpty()) {
    String pathVar=OperatingSystem.current().getPathVar();
    String toolPath=Joiner.on(File.pathSeparator).join(invocation.getPath());
    toolPath=toolPath + File.pathSeparator + System.getenv(pathVar);
    toolExec.environment(pathVar,toolPath);
    if (OperatingSystem.current().isWindows() && toolExec.getEnvironment().containsKey(pathVar.toUpperCase())) {
      toolExec.getEnvironment().remove(pathVar.toUpperCase());
    }
  }
  toolExec.environment(invocation.getEnvironment());
  ByteArrayOutputStream errOutput=new ByteArrayOutputStream();
  ByteArrayOutputStream stdOutput=new ByteArrayOutputStream();
  toolExec.setErrorOutput(errOutput);
  toolExec.setStandardOutput(stdOutput);
  try {
    toolExec.execute();
    invocation.getLogger().operationSuccess(invocation.getDescription(),combineOutput(stdOutput,errOutput));
  }
 catch (  ExecException e) {
    invocation.getLogger().operationFailed(invocation.getDescription(),combineOutput(stdOutput,errOutput));
    throw new CommandLineToolInvocationFailure(invocation,String.format("%s failed while %s; see the error output for details.",name,invocation.getDescription()));
  }
}
