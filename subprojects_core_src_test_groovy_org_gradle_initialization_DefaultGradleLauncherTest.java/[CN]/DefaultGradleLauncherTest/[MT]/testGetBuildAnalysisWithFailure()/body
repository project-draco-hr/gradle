{
  final RuntimeException exception=new RuntimeException();
  final RuntimeException transformedException=new RuntimeException();
  expectLoggingStarted();
  expectInitScriptsExecuted();
  expectSettingsBuilt();
  context.checking(new Expectations(){
{
      one(gradleMock).getParent();
      one(buildBroadcaster).buildStarted(gradleMock);
      one(buildLoaderMock).load(expectedRootProjectDescriptor,expectedDefaultProjectDescriptor,gradleMock,baseClassLoaderScope);
      will(throwException(exception));
      one(exceptionAnalyserMock).transform(exception);
      will(returnValue(transformedException));
      one(buildBroadcaster).buildFinished(with(any(BuildResult.class)));
    }
  }
);
  try {
    gradleLauncher.getBuildAnalysis();
    fail();
  }
 catch (  ReportedException e) {
    assertThat((RuntimeException)e.getCause(),sameInstance(transformedException));
  }
}
