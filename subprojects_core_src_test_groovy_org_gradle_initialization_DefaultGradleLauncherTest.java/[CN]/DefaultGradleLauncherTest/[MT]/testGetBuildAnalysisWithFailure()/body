{
  final RuntimeException exception=new RuntimeException();
  final RuntimeException transformedException=new RuntimeException();
  expectLoggingStarted();
  expectInitScriptsExecuted();
  expectSettingsBuilt();
  context.checking(new Expectations(){
{
      one(gradleMock).getParent();
      one(buildBroadcaster).buildStarted(gradleMock);
      startEvent(this,BuildOperationType.RUNNING_BUILD);
      startEvent(this,BuildOperationType.EVALUATING_INIT_SCRIPTS);
      finishEvent(this,BuildOperationType.EVALUATING_INIT_SCRIPTS);
      startEvent(this,BuildOperationType.EVALUATING_SETTINGS);
      finishEvent(this,BuildOperationType.EVALUATING_SETTINGS);
      finishEvent(this,BuildOperationType.RUNNING_BUILD);
      one(buildLoaderMock).load(expectedRootProjectDescriptor,expectedDefaultProjectDescriptor,gradleMock,baseClassLoaderScope);
      will(throwException(exception));
      one(exceptionAnalyserMock).transform(exception);
      will(returnValue(transformedException));
      one(buildBroadcaster).buildFinished(with(any(BuildResult.class)));
    }
  }
);
  BuildResult buildResult=gradleLauncher.getBuildAnalysis();
  assertThat(buildResult.getGradle(),sameInstance((Object)gradleMock));
  assertThat((RuntimeException)buildResult.getFailure(),sameInstance(transformedException));
}
