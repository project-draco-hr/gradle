{
  final RuntimeException exception=new RuntimeException();
  final RuntimeException transformedException=new RuntimeException();
  expectLoggingStarted();
  expectInitScriptsExecuted();
  expectSettingsBuilt();
  context.checking(new Expectations(){
{
      one(buildBroadcaster).buildStarted(gradleMock);
      one(internalBuildListener).started(with(any(Object.class)),with(any(long.class)),with(InternalBuildListener.BUILD_TYPE));
      one(internalBuildListener).started(with(any(Object.class)),with(any(long.class)),with(InternalBuildListener.SETTINGS_EVAL_TYPE));
      one(internalBuildListener).finished(with(any(Object.class)),with(any(long.class)),with(any(long.class)),with(InternalBuildListener.SETTINGS_EVAL_TYPE));
      one(internalBuildListener).started(with(any(Object.class)),with(any(long.class)),with(InternalBuildListener.PROJECTS_LOADING_TYPE));
      one(internalBuildListener).finished(with(any(Object.class)),with(any(long.class)),with(any(long.class)),with(InternalBuildListener.BUILD_TYPE));
      one(buildLoaderMock).load(expectedRootProjectDescriptor,expectedDefaultProjectDescriptor,gradleMock,baseClassLoaderScope);
      will(throwException(exception));
      one(exceptionAnalyserMock).transform(exception);
      will(returnValue(transformedException));
      one(buildBroadcaster).buildFinished(with(any(BuildResult.class)));
    }
  }
);
  BuildResult buildResult=gradleLauncher.getBuildAnalysis();
  assertThat(buildResult.getGradle(),sameInstance((Object)gradleMock));
  assertThat((RuntimeException)buildResult.getFailure(),sameInstance(transformedException));
}
