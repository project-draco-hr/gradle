{
  initScriptHandlerMock=context.mock(InitScriptHandler.class);
  settingsHandlerMock=context.mock(SettingsHandler.class);
  settingsMock=context.mock(SettingsInternal.class);
  taskExecuterMock=context.mock(TaskGraphExecuter.class);
  buildLoaderMock=context.mock(BuildLoader.class);
  buildConfigurerMock=context.mock(BuildConfigurer.class);
  gradleMock=context.mock(GradleInternal.class);
  buildBroadcaster=context.mock(BuildListener.class);
  buildExecuter=context.mock(BuildExecuter.class);
  boolean expectedSearchUpwards=false;
  File expectedRootDir=tmpDir.file("rootDir");
  File expectedCurrentDir=new File(expectedRootDir,"currentDir");
  expectedRootProjectDescriptor=new DefaultProjectDescriptor(null,"someName",new File("somedir"),new DefaultProjectDescriptorRegistry(),TestFiles.resolver(expectedRootDir));
  expectedRootProject=TestUtil.createRootProject(expectedRootDir);
  expectedDefaultProjectDescriptor=new DefaultProjectDescriptor(null,"default",new File("default"),new DefaultProjectDescriptorRegistry(),TestFiles.resolver(expectedCurrentDir));
  expectedCurrentProject=TestUtil.createRootProject(expectedCurrentDir);
  expectedStartParams=new StartParameter();
  expectedStartParams.setCurrentDir(expectedCurrentDir);
  expectedStartParams.setSearchUpwards(expectedSearchUpwards);
  expectedStartParams.setGradleUserHomeDir(tmpDir.createDir("gradleUserHome"));
  gradleLauncher=new DefaultGradleLauncher(gradleMock,initScriptHandlerMock,settingsHandlerMock,buildLoaderMock,buildConfigurerMock,exceptionAnalyserMock,loggingManagerMock,buildBroadcaster,modelListenerMock,tasksCompletionListener,buildCompletionListener,buildOperationExecutor,buildExecuter,buildServices);
  context.checking(new Expectations(){
{
      allowing(settingsMock).getRootProject();
      will(returnValue(expectedRootProjectDescriptor));
      allowing(settingsMock).getDefaultProject();
      will(returnValue(expectedRootProjectDescriptor));
      allowing(settingsMock).getRootClassLoaderScope();
      will(returnValue(baseClassLoaderScope));
      allowing(gradleMock).getRootProject();
      will(returnValue(expectedRootProject));
      allowing(gradleMock).getDefaultProject();
      will(returnValue(expectedCurrentProject));
      allowing(gradleMock).getTaskGraph();
      will(returnValue(taskExecuterMock));
      allowing(gradleMock).getStartParameter();
      will(returnValue(expectedStartParams));
    }
  }
);
}
