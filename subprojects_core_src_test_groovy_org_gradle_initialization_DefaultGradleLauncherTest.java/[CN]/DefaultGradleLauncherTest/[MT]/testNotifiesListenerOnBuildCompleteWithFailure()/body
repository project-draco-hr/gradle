{
  final RuntimeException failure=new RuntimeException();
  final RuntimeException transformedException=new RuntimeException();
  expectLoggingStarted();
  expectInitScriptsExecuted();
  expectSettingsBuilt();
  expectDagBuilt();
  expectTasksRunWithFailure(failure);
  context.checking(new Expectations(){
{
      one(gradleMock).getParent();
      one(buildBroadcaster).buildStarted(gradleMock);
      one(buildBroadcaster).projectsLoaded(gradleMock);
      one(buildBroadcaster).projectsEvaluated(gradleMock);
      one(modelListenerMock).onConfigure(gradleMock);
      one(exceptionAnalyserMock).transform(failure);
      will(returnValue(transformedException));
      one(buildBroadcaster).buildFinished(with(result(sameInstance(transformedException))));
    }
  }
);
  try {
    gradleLauncher.run();
    fail();
  }
 catch (  ReportedException e) {
    assertThat((RuntimeException)e.getCause(),sameInstance(transformedException));
  }
}
