{
  final RuntimeException failure=new RuntimeException();
  final RuntimeException transformedException=new RuntimeException();
  expectLoggingStarted();
  expectInitScriptsExecuted();
  context.checking(new Expectations(){
{
      one(buildBroadcaster).buildStarted(gradleMock);
      one(settingsHandlerMock).findAndLoadSettings(gradleMock);
      will(throwException(failure));
      one(exceptionAnalyserMock).transform(failure);
      will(returnValue(transformedException));
      one(internalBuildListener).started(with(any(Object.class)),with(any(long.class)),with(InternalBuildListener.BUILD_TYPE));
      one(internalBuildListener).started(with(any(Object.class)),with(any(long.class)),with(InternalBuildListener.SETTINGS_EVAL_TYPE));
      one(internalBuildListener).finished(with(any(Object.class)),with(any(long.class)),with(any(long.class)),with(InternalBuildListener.BUILD_TYPE));
      one(buildBroadcaster).buildFinished(with(result(sameInstance(transformedException))));
    }
  }
);
  BuildResult buildResult=gradleLauncher.run();
  assertThat(buildResult.getFailure(),sameInstance((Throwable)transformedException));
}
