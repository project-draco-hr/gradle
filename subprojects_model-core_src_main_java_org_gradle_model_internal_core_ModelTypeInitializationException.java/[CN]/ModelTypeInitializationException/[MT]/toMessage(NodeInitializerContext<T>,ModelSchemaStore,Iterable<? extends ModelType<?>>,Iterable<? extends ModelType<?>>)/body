{
  Optional<? extends NodeInitializerContext.PropertyContext> propertyContextOptional=context.getPropertyContextOptional();
  StringBuilder s=new StringBuilder();
  if (propertyContextOptional.isPresent()) {
    NodeInitializerContext.PropertyContext propertyContext=propertyContextOptional.get();
    s.append(String.format("A model element of type: '%s' can not be constructed.%n",propertyContext.getDeclaringType().getName()));
    String propertyName=propertyContext.getName();
    ModelType<?> propertyType=propertyContext.getType();
    if (isManagedCollection(propertyType)) {
      s.append(String.format("Its property '%s %s' is not a valid managed collection%n",propertyType.getName(),propertyName));
      CollectionSchema<?,?> schema=(CollectionSchema)schemaStore.getSchema(propertyType);
      s.append(String.format("A managed collection can not contain '%s's%n",schema.getElementType()));
      appendManagedCollections(s,1,constructibleTypes);
    }
 else     if (isScalarCollection(propertyType,propertyContext.isDeclaredAsHavingUnmanagedType())) {
      ModelType<?> innerType=propertyType.getTypeVariables().get(0);
      s.append(String.format("Its property '%s %s' is not a valid scalar collection%n",propertyType.getName(),propertyName));
      s.append(String.format("A scalar collection can not contain '%s's%n",innerType));
      s.append(explainScalarCollections(scalarTypes));
    }
 else {
      s.append(String.format("Its property '%s %s' can not be constructed%n",propertyType.getName(),propertyName));
      s.append(String.format("It must be one of:%n"));
      s.append(String.format("    - %s%n",MANAGED_TYPE_DESCRIPTION));
      s.append("    - A managed collection. ");
      appendManagedCollections(s,1,constructibleTypes);
      s.append(String.format("%n    - A scalar collection. %s%n    - %s",explainScalarCollections(scalarTypes),UNMANAGED_PROPERTY_DESCRIPTION));
      maybeAppendConstructibles(s,constructibleTypes,1);
    }
  }
 else {
    s.append(String.format("A model element of type: '%s' can not be constructed.%n",context.getModelType().getName()));
    s.append(String.format("It must be one of:%n"));
    s.append(String.format("    - %s",MANAGED_TYPE_DESCRIPTION));
    maybeAppendConstructibles(s,constructibleTypes,1);
  }
  return s.toString();
}
