{
  Instantiator instantiator=serviceRegistry.get(Instantiator.class);
  NativeDependencyResolver resolver=serviceRegistry.get(NativeDependencyResolver.class);
  Action<ProjectNativeBinary> configureBinaryAction=new ProjectNativeBinaryInitializer(buildDir);
  Action<ProjectNativeBinary> setToolsAction=new ToolSettingNativeBinaryInitializer(extensions.getByType(LanguageRegistry.class));
  Action<ProjectNativeBinary> initAction=Actions.composite(configureBinaryAction,setToolsAction);
  NativeBinariesFactory factory=new DefaultNativeBinariesFactory(instantiator,initAction,resolver);
  BinaryNamingSchemeBuilder namingSchemeBuilder=new DefaultBinaryNamingSchemeBuilder();
  Action<ProjectNativeComponent> createBinariesAction=new ProjectNativeComponentInitializer(factory,namingSchemeBuilder,toolChains,platforms,buildTypes,flavors);
  ProjectComponentContainer projectComponents=extensions.getByType(ProjectComponentContainer.class);
  for (  ProjectNativeComponent component : projectComponents.withType(ProjectNativeComponent.class)) {
    createBinariesAction.execute(component);
    binaries.addAll(component.getBinaries());
  }
}
