{
  project.getPlugins().apply(ComponentModelBasePlugin.class);
  modelRules.register("toolChains",ToolChainRegistryInternal.class,factory(DefaultToolChainRegistry.class));
  modelRules.register("platforms",PlatformContainer.class,factory(DefaultPlatformContainer.class));
  modelRules.register("buildTypes",BuildTypeContainer.class,factory(DefaultBuildTypeContainer.class));
  modelRules.register("flavors",FlavorContainer.class,factory(DefaultFlavorContainer.class));
  project.getModelRegistry().create("repositories",Arrays.asList("flavors","platforms","buildTypes"),new RepositoriesFactory("repositories",instantiator,fileResolver));
  modelRules.rule(new CreateNativeBinaries(instantiator,project,resolver));
  ProjectComponentContainer components=project.getExtensions().getByType(ProjectComponentContainer.class);
  components.registerFactory(ProjectNativeExecutable.class,new ProjectNativeExecutableFactory(instantiator,project));
  NamedDomainObjectContainer<ProjectNativeExecutable> nativeExecutables=components.containerWithType(ProjectNativeExecutable.class);
  components.registerFactory(ProjectNativeLibrary.class,new ProjectNativeLibraryFactory(instantiator,project));
  NamedDomainObjectContainer<ProjectNativeLibrary> nativeLibraries=components.containerWithType(ProjectNativeLibrary.class);
  project.getExtensions().create("nativeRuntime",DefaultNativeComponentExtension.class,nativeExecutables,nativeLibraries);
  project.getExtensions().add("nativeComponents",components.withType(ProjectNativeComponent.class));
  project.getExtensions().add("executables",nativeExecutables);
  project.getExtensions().add("libraries",nativeLibraries);
  configurationActions.add(Actions.composite(new ConfigureGeneratedSourceSets(),new ApplyHeaderSourceSetConventions()));
}
