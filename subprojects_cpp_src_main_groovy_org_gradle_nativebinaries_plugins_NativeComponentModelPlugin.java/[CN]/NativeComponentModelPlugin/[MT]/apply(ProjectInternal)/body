{
  project.getPlugins().apply(BasePlugin.class);
  project.getPlugins().apply(LanguageBasePlugin.class);
  modelRules.register("toolChains",ToolChainRegistryInternal.class,factory(DefaultToolChainRegistry.class));
  modelRules.register("platforms",PlatformContainer.class,factory(DefaultPlatformContainer.class));
  modelRules.register("buildTypes",BuildTypeContainer.class,factory(DefaultBuildTypeContainer.class));
  modelRules.register("flavors",FlavorContainer.class,factory(DefaultFlavorContainer.class));
  project.getModelRegistry().create("repositories",Arrays.asList("flavors","platforms","buildTypes"),new RepositoriesFactory(instantiator,fileResolver));
  modelRules.rule(new CreateDefaultPlatform());
  modelRules.rule(new CreateDefaultBuildTypes());
  modelRules.rule(new CreateDefaultFlavors());
  modelRules.rule(new AddDefaultToolChainsIfRequired());
  modelRules.rule(new CreateNativeBinaries(instantiator,project,resolver));
  modelRules.rule(new AttachBinariesToLifecycle());
  DefaultLibraryContainer libraries=(DefaultLibraryContainer)project.getExtensions().getByType(LibraryContainer.class);
  libraries.registerFactory(NativeLibrary.class,new NativeLibraryFactory(instantiator,project));
  NamedDomainObjectContainer<NativeLibrary> nativeLibraries=libraries.containerWithType(NativeLibrary.class);
  project.getExtensions().add("nativeLibraries",nativeLibraries);
  project.getExtensions().create("executables",DefaultExecutableContainer.class,instantiator,project);
  configurationActions.add(Actions.composite(new ConfigureGeneratedSourceSets(),new ApplySourceSetConventions()));
}
