{
  try {
    InputStream inputStream=new FileInputStream(file);
    Document document;
    try {
      document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(inputStream));
    }
  finally {
      inputStream.close();
    }
    NodeList testCases=document.getElementsByTagName("testcase");
    for (int i=0; i < testCases.getLength(); i++) {
      Element testCase=(Element)testCases.item(i);
      String className=testCase.getAttribute("classname");
      String testName=testCase.getAttribute("name");
      DecimalFormat format=new DecimalFormat("#.#");
      format.setParseBigDecimal(true);
      BigDecimal duration=(BigDecimal)format.parse(testCase.getAttribute("time"));
      duration=duration.multiply(BigDecimal.valueOf(1000));
      NodeList failures=testCase.getElementsByTagName("failure");
      TestResult testResult=model.addTest(className,testName,duration.longValue());
      for (int j=0; j < failures.getLength(); j++) {
        Element failure=(Element)failures.item(j);
        testResult.addFailure(failure.getAttribute("message"),failure.getTextContent());
      }
    }
    String suiteClassName=document.getDocumentElement().getAttribute("name");
    ClassTestResults suiteResults=model.addTestClass(suiteClassName);
    NodeList stdOutElements=document.getElementsByTagName("system-out");
    for (int i=0; i < stdOutElements.getLength(); i++) {
      suiteResults.addStandardOutput(stdOutElements.item(i).getTextContent());
    }
    NodeList stdErrElements=document.getElementsByTagName("system-err");
    for (int i=0; i < stdErrElements.getLength(); i++) {
      suiteResults.addStandardError(stdErrElements.item(i).getTextContent());
    }
  }
 catch (  Exception e) {
    throw new GradleException(String.format("Could not load test results from '%s'.",file),e);
  }
}
