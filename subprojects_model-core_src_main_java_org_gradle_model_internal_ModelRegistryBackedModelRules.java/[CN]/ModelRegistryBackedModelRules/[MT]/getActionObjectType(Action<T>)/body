{
  Class<? extends Action> aClass=action.getClass();
  Type[] genericInterfaces=aClass.getGenericInterfaces();
  Type actionType=findFirst(genericInterfaces,new Spec<Type>(){
    public boolean isSatisfiedBy(    Type element){
      return element instanceof ParameterizedType && ((ParameterizedType)element).getRawType().equals(Action.class);
    }
  }
);
  final Class<?> modelType;
  if (actionType == null) {
    modelType=Object.class;
  }
 else {
    ParameterizedType actionParamaterizedType=(ParameterizedType)actionType;
    Type tType=actionParamaterizedType.getActualTypeArguments()[0];
    if (tType instanceof Class) {
      modelType=(Class)tType;
    }
 else     if (tType instanceof ParameterizedType) {
      modelType=(Class)((ParameterizedType)tType).getRawType();
    }
 else     if (tType instanceof TypeVariable) {
      TypeVariable typeVariable=(TypeVariable)tType;
      Type[] bounds=typeVariable.getBounds();
      return (Class<T>)bounds[0];
    }
 else {
      throw new RuntimeException("Don't know how to handle type: " + tType.getClass());
    }
  }
  @SuppressWarnings("unchecked") Class<T> castModelType=(Class<T>)modelType;
  return castModelType;
}
