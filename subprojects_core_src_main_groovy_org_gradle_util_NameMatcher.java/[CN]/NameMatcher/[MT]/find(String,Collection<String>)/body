{
  this.pattern=pattern;
  matches.clear();
  candidates.clear();
  if (items.contains(pattern)) {
    matches.add(pattern);
    return pattern;
  }
  if (pattern.length() == 0) {
    return null;
  }
  Pattern camelCasePattern=getPatternForName(pattern);
  Pattern normalisedCamelCasePattern=Pattern.compile(camelCasePattern.pattern(),Pattern.CASE_INSENSITIVE);
  String normalisedPattern=pattern.toUpperCase();
  Set<String> caseInsensitiveMatches=new TreeSet<String>();
  Set<String> caseSensitiveCamelCaseMatches=new TreeSet<String>();
  Set<String> caseInsensitiveCamelCaseMatches=new TreeSet<String>();
  for (  String candidate : items) {
    if (candidate.equalsIgnoreCase(pattern)) {
      caseInsensitiveMatches.add(candidate);
    }
    if (camelCasePattern.matcher(candidate).matches()) {
      caseSensitiveCamelCaseMatches.add(candidate);
      continue;
    }
    if (normalisedCamelCasePattern.matcher(candidate).lookingAt()) {
      caseInsensitiveCamelCaseMatches.add(candidate);
      continue;
    }
    if (StringUtils.getLevenshteinDistance(normalisedPattern,candidate.toUpperCase()) <= Math.min(3,pattern.length() / 2)) {
      candidates.add(candidate);
    }
  }
  if (!caseInsensitiveMatches.isEmpty()) {
    matches.addAll(caseInsensitiveMatches);
  }
 else   if (!caseSensitiveCamelCaseMatches.isEmpty()) {
    matches.addAll(caseSensitiveCamelCaseMatches);
  }
 else {
    matches.addAll(caseInsensitiveCamelCaseMatches);
  }
  if (matches.size() == 1) {
    return matches.first();
  }
  return null;
}
