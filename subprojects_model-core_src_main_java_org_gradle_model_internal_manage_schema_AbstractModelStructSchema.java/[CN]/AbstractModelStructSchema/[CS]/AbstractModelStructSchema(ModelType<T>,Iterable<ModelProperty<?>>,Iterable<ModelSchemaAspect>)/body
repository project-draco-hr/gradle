{
  super(type);
  Map<String,ModelProperty<?>> builder=Maps.newHashMap();
  for (  ModelProperty<?> property : properties) {
    if (!builder.containsKey(property.getName())) {
      builder.put(property.getName(),property);
    }
 else {
      ModelProperty<?> modelProperty=builder.get(property.getName());
      if (modelProperty.getType().getRawClass() != boolean.class) {
        throw new IllegalStateException("Duplicate property " + property.getName() + " found in model. Only boolean properties may have two getters.");
      }
    }
  }
  this.properties=ImmutableSortedMap.copyOf(builder);
  this.aspects=Maps.uniqueIndex(aspects,new Function<ModelSchemaAspect,Class<? extends ModelSchemaAspect>>(){
    @Override public Class<? extends ModelSchemaAspect> apply(    ModelSchemaAspect aspect){
      return aspect.getClass();
    }
  }
);
}
