{
  renderer.showDetail(isDetail());
  renderer.addDefaultTasks(project.getDefaultTasks());
  AggregateMultiProjectTaskReportModel aggregateModel=new AggregateMultiProjectTaskReportModel(!isDetail());
  TaskDetailsFactory taskDetailsFactory=new TaskDetailsFactory(project);
  SingleProjectTaskReportModel projectTaskModel=new SingleProjectTaskReportModel(taskDetailsFactory);
  ProjectInternal projectInternal=(ProjectInternal)project;
  TaskContainerInternal tasks=projectInternal.getTasks();
  tasks.actualize();
  projectTaskModel.build(Sets.union(tasks,projectInternal.getImplicitTasks()));
  aggregateModel.add(projectTaskModel);
  for (  Project subprojects : project.getSubprojects()) {
    SingleProjectTaskReportModel subprojectTaskModel=new SingleProjectTaskReportModel(taskDetailsFactory);
    subprojectTaskModel.build(subprojects.getTasks());
    aggregateModel.add(subprojectTaskModel);
  }
  aggregateModel.build();
  DefaultGroupTaskReportModel model=new DefaultGroupTaskReportModel();
  model.build(aggregateModel);
  for (  String group : model.getGroups()) {
    renderer.startTaskGroup(group);
    for (    TaskDetails task : model.getTasksForGroup(group)) {
      renderer.addTask(task);
      for (      TaskDetails child : task.getChildren()) {
        renderer.addChildTask(child);
      }
    }
  }
  renderer.completeTasks();
  for (  Rule rule : project.getTasks().getRules()) {
    renderer.addRule(rule);
  }
}
