{
  ScalaCompileOptions scalaOptions=(ScalaCompileOptions)spec.getScalaCompileOptions();
  Set<File> scalaClasspathFiles=scalaClasspath.getFiles();
  if (scalaOptions.isUseAnt()) {
    Compiler<ScalaCompileSpec> scalaCompiler=new AntScalaCompiler(antBuilder,scalaClasspathFiles);
    Compiler<JavaCompileSpec> javaCompiler=javaCompilerFactory.createForJointCompilation(spec.getCompileOptions());
    return new NormalizingScalaCompiler(new DefaultScalaJavaJointCompiler(scalaCompiler,javaCompiler));
  }
  if (!scalaOptions.isFork()) {
    throw new GradleException("The Zinc based Scala compiler ('scalaCompileOptions.useAnt=false') " + "requires forking ('scalaCompileOptions.fork=true'), but the latter is set to 'false'.");
  }
  Set<File> zincClasspathFiles=zincClasspath.getFiles();
  Compiler<ScalaJavaJointCompileSpec> scalaCompiler=new DaemonScalaCompiler<ScalaJavaJointCompileSpec>(rootProjectDirectory,new ZincScalaCompiler(scalaClasspathFiles,zincClasspathFiles),compilerDaemonFactory,zincClasspathFiles);
  return new NormalizingScalaCompiler(scalaCompiler);
}
