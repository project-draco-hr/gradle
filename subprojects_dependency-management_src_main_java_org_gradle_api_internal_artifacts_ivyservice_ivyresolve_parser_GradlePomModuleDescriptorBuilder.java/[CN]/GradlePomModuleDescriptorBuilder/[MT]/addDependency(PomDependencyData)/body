{
  String scope=dep.getScope();
  if ((scope != null) && (scope.length() > 0) && !MAVEN2_CONF_MAPPING.containsKey(scope)) {
    scope="compile";
  }
  String version=determineVersion(dep);
  String mappedVersion=convertVersionFromMavenSyntax(version);
  ModuleVersionSelector selector=DefaultModuleVersionSelector.newSelector(dep.getGroupId(),dep.getArtifactId(),mappedVersion);
  if (selector.getGroup().equals(descriptor.getComponentIdentifier().getGroup()) && selector.getName().equals(descriptor.getComponentIdentifier().getModule())) {
    return;
  }
  Dependency dependency=descriptor.addDependency(selector);
  scope=(scope == null || scope.length() == 0) ? getDefaultScope(dep) : scope;
  ConfMapper mapping=MAVEN2_CONF_MAPPING.get(scope);
  mapping.addMappingConfs(dependency,dep.isOptional());
  boolean hasClassifier=dep.getClassifier() != null && dep.getClassifier().length() > 0;
  boolean hasNonJarType=dep.getType() != null && !"jar".equals(dep.getType());
  if (hasClassifier || hasNonJarType) {
    String type="jar";
    if (dep.getType() != null) {
      type=dep.getType();
    }
    String ext=determineExtension(type);
    String classifier=hasClassifier ? dep.getClassifier() : getClassifierForType(type);
    String optionalizedScope=dep.isOptional() ? "optional" : scope;
    IvyArtifactName artifactName=new DefaultIvyArtifactName(selector.getName(),type,ext,classifier);
    dependency.addArtifact(artifactName,Collections.singleton(optionalizedScope));
  }
  List<ModuleIdentifier> excluded=dep.getExcludedModules();
  if (excluded.isEmpty()) {
    excluded=getDependencyMgtExclusions(dep);
  }
  Set<String> confs=dependency.getConfMappings().keySet();
  String[] confArray=confs.toArray(new String[confs.size()]);
  for (  ModuleIdentifier excludedModule : excluded) {
    DefaultExclude rule=new DefaultExclude(excludedModule.getGroup(),excludedModule.getName(),confArray,PatternMatchers.EXACT);
    dependency.addExcludeRule(rule);
  }
}
