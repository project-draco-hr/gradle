{
  String scopeString=dep.getScope();
  if (scopeString == null || scopeString.length() == 0) {
    scopeString=getDefaultScope(dep);
  }
  MavenScope scope;
  if (SCOPES.containsKey(scopeString)) {
    scope=SCOPES.get(scopeString);
  }
 else {
    scope=MavenScope.Compile;
  }
  String version=determineVersion(dep);
  String mappedVersion=convertVersionFromMavenSyntax(version);
  ModuleVersionSelector selector=DefaultModuleVersionSelector.newSelector(dep.getGroupId(),dep.getArtifactId(),mappedVersion);
  if (selector.getGroup().equals(descriptor.getComponentIdentifier().getGroup()) && selector.getName().equals(descriptor.getComponentIdentifier().getModule())) {
    return;
  }
  ConfMapper mapping=MAVEN2_CONF_MAPPING.get(scope);
  ListMultimap<String,String> confMappings=ArrayListMultimap.create();
  mapping.addMappingConfs(confMappings,dep.isOptional());
  List<Artifact> artifacts=Lists.newArrayList();
  boolean hasClassifier=dep.getClassifier() != null && dep.getClassifier().length() > 0;
  boolean hasNonJarType=dep.getType() != null && !"jar".equals(dep.getType());
  if (hasClassifier || hasNonJarType) {
    String type="jar";
    if (dep.getType() != null) {
      type=dep.getType();
    }
    String ext=determineExtension(type);
    String classifier=hasClassifier ? dep.getClassifier() : getClassifierForType(type);
    String optionalizedScope=dep.isOptional() ? "optional" : scope.toString().toLowerCase();
    IvyArtifactName artifactName=new DefaultIvyArtifactName(selector.getName(),type,ext,classifier);
    artifacts.add(new Artifact(artifactName,Collections.singleton(optionalizedScope)));
  }
  List<Exclude> excludes=Lists.newArrayList();
  List<ModuleIdentifier> excluded=dep.getExcludedModules();
  if (excluded.isEmpty()) {
    excluded=getDependencyMgtExclusions(dep);
  }
  Set<String> confs=confMappings.keySet();
  String[] confArray=confs.toArray(new String[confs.size()]);
  for (  ModuleIdentifier excludedModule : excluded) {
    DefaultExclude rule=new DefaultExclude(excludedModule.getGroup(),excludedModule.getName(),confArray,PatternMatchers.EXACT);
    excludes.add(rule);
  }
  descriptor.addDependency(new MavenDependencyMetadata(scope,selector,confMappings,artifacts,excludes));
}
